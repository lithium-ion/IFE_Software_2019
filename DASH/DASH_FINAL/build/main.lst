ARM GAS  /tmp/ccsT0kLX.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB68:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "stdbool.h"
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccsT0kLX.s 			page 2


  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** #define DASH_CAN_ID			0x00F
  37:Src/main.c    **** #define RINEHARTCUR_CAN_ID			0x064
  38:Src/main.c    **** #define RINEHARTTOR_CAN_ID			0x082
  39:Src/main.c    **** #define FAULTS				0x0D0
  40:Src/main.c    **** #define PRECHARGE			0x0D1
  41:Src/main.c    **** #define ENABLE_SIG		0x0D2
  42:Src/main.c    **** #define MOTOR_POS		0x0A5
  43:Src/main.c    **** /* USER CODE END PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  51:Src/main.c    **** ADC_HandleTypeDef hadc1;
  52:Src/main.c    **** ADC_ChannelConfTypeDef sConfig = {0};
  53:Src/main.c    **** CAN_HandleTypeDef hcan;
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN PV */
  56:Src/main.c    **** 
  57:Src/main.c    **** CAN_RxHeaderTypeDef     RxHeader;
  58:Src/main.c    **** uint8_t                 RxData[8];
  59:Src/main.c    **** 
  60:Src/main.c    **** CAN_TxHeaderTypeDef     POT_TxHeader;
  61:Src/main.c    **** CAN_TxHeaderTypeDef     POT_Txheader;
  62:Src/main.c    **** CAN_TxHeaderTypeDef     POT_Txheader1;
  63:Src/main.c    **** uint8_t                 POT_data[8];
  64:Src/main.c    **** uint8_t                 POT_Data[8];
  65:Src/main.c    **** uint8_t                 POT_Data1[8];
  66:Src/main.c    **** uint32_t                TxMailbox;
  67:Src/main.c    **** 
  68:Src/main.c    **** volatile char					CAN_flag;
  69:Src/main.c    **** 
  70:Src/main.c    **** uint16_t				pot_threshold[11] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** static void MX_GPIO_Init(void);
  77:Src/main.c    **** static void MX_ADC1_Init(void);
  78:Src/main.c    **** static void MX_CAN_Init(void);
  79:Src/main.c    **** /* USER CODE BEGIN PFP */
  80:Src/main.c    **** void POT_read(uint16_t pot_values[4]);
  81:Src/main.c    **** void CAN_interpret(void);
  82:Src/main.c    **** void  POT_interpret(uint16_t pot_values[4]);
  83:Src/main.c    **** /* USER CODE END PFP */
  84:Src/main.c    **** 
  85:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  86:Src/main.c    **** /* USER CODE BEGIN 0 */
  87:Src/main.c    **** 
  88:Src/main.c    **** /* USER CODE END 0 */
  89:Src/main.c    **** 
  90:Src/main.c    **** /**
  91:Src/main.c    ****   * @brief  The application entry point.
ARM GAS  /tmp/ccsT0kLX.s 			page 3


  92:Src/main.c    ****   * @retval int
  93:Src/main.c    ****   */
  94:Src/main.c    **** int main(void)
  95:Src/main.c    **** {
  96:Src/main.c    ****   /* USER CODE BEGIN 1 */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE END 1 */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 103:Src/main.c    ****   HAL_Init();
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE BEGIN Init */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE END Init */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Configure the system clock */
 110:Src/main.c    ****   SystemClock_Config();
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE END SysInit */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Initialize all configured peripherals */
 117:Src/main.c    ****   MX_GPIO_Init();
 118:Src/main.c    ****   MX_ADC1_Init();
 119:Src/main.c    ****   MX_CAN_Init();
 120:Src/main.c    ****   /* USER CODE BEGIN 2 */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE END 2 */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* Infinite loop */
 125:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 126:Src/main.c    ****   while (1)
 127:Src/main.c    ****   {
 128:Src/main.c    ****     /* USER CODE END WHILE */
 129:Src/main.c    **** 
 130:Src/main.c    ****     /* USER CODE BEGIN 3 */
 131:Src/main.c    **** 
 132:Src/main.c    **** 	if (CAN_flag == 0xFF)
 133:Src/main.c    **** 		CAN_interpret();
 134:Src/main.c    **** 
 135:Src/main.c    **** 	//send POT positions CAN message
 136:Src/main.c    **** 
 137:Src/main.c    **** 	uint16_t pot_position[4];
 138:Src/main.c    **** 	POT_read(pot_position);
 139:Src/main.c    **** 	POT_interpret(pot_position);
 140:Src/main.c    **** 
 141:Src/main.c    **** 
 142:Src/main.c    **** 	HAL_CAN_AddTxMessage(&hcan, &POT_TxHeader, POT_data, &TxMailbox);
 143:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &POT_Txheader, POT_Data, &TxMailbox);
 144:Src/main.c    **** 
 145:Src/main.c    **** 	HAL_Delay(1000);
 146:Src/main.c    **** 
 147:Src/main.c    **** 
 148:Src/main.c    ****   }
ARM GAS  /tmp/ccsT0kLX.s 			page 4


 149:Src/main.c    ****   /* USER CODE END 3 */
 150:Src/main.c    **** }
 151:Src/main.c    **** 
 152:Src/main.c    **** /**
 153:Src/main.c    ****   * @brief System Clock Configuration
 154:Src/main.c    ****   * @retval None
 155:Src/main.c    ****   */
 156:Src/main.c    **** void SystemClock_Config(void)
 157:Src/main.c    **** {
 158:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 159:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 160:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 161:Src/main.c    **** 
 162:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 163:Src/main.c    ****   */
 164:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 165:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 166:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 167:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 168:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 169:Src/main.c    ****   {
 170:Src/main.c    ****     Error_Handler();
 171:Src/main.c    ****   }
 172:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 173:Src/main.c    ****   */
 174:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 175:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 176:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 177:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 178:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 179:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 180:Src/main.c    **** 
 181:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 182:Src/main.c    ****   {
 183:Src/main.c    ****     Error_Handler();
 184:Src/main.c    ****   }
 185:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 186:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 187:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 188:Src/main.c    ****   {
 189:Src/main.c    ****     Error_Handler();
 190:Src/main.c    ****   }
 191:Src/main.c    **** }
 192:Src/main.c    **** 
 193:Src/main.c    **** /**
 194:Src/main.c    ****   * @brief ADC1 Initialization Function
 195:Src/main.c    ****   * @param None
 196:Src/main.c    ****   * @retval None
 197:Src/main.c    ****   */
 198:Src/main.c    **** static void MX_ADC1_Init(void)
 199:Src/main.c    **** {
 200:Src/main.c    **** 
 201:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 202:Src/main.c    **** 
 203:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 204:Src/main.c    **** 
 205:Src/main.c    ****   //ADC_ChannelConfTypeDef sConfig = {0};
ARM GAS  /tmp/ccsT0kLX.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 208:Src/main.c    **** 
 209:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 210:Src/main.c    ****   /** Common config
 211:Src/main.c    ****   */
 212:Src/main.c    ****   hadc1.Instance = ADC1;
 213:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 214:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 215:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 216:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 217:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 218:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 219:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 220:Src/main.c    ****   {
 221:Src/main.c    ****     Error_Handler();
 222:Src/main.c    ****   }
 223:Src/main.c    ****   /** Configure Regular Channel
 224:Src/main.c    ****   */
 225:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 226:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 227:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 228:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 229:Src/main.c    ****   {
 230:Src/main.c    ****     Error_Handler();
 231:Src/main.c    ****   }
 232:Src/main.c    ****   /** Configure Regular Channel
 233:Src/main.c    ****   */
 234:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 235:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 236:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 237:Src/main.c    ****   {
 238:Src/main.c    ****     Error_Handler();
 239:Src/main.c    ****   }
 240:Src/main.c    ****   /** Configure Regular Channel
 241:Src/main.c    ****   */
 242:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_7;
 243:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 244:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 245:Src/main.c    ****   {
 246:Src/main.c    ****     Error_Handler();
 247:Src/main.c    ****   }
 248:Src/main.c    ****   /** Configure Regular Channel
 249:Src/main.c    ****   */
 250:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 251:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 252:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 253:Src/main.c    ****   {
 254:Src/main.c    ****     Error_Handler();
 255:Src/main.c    ****   }
 256:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 257:Src/main.c    **** 
 258:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 259:Src/main.c    **** 
 260:Src/main.c    **** }
 261:Src/main.c    **** 
 262:Src/main.c    **** /**
ARM GAS  /tmp/ccsT0kLX.s 			page 6


 263:Src/main.c    ****   * @brief CAN Initialization Function
 264:Src/main.c    ****   * @param None
 265:Src/main.c    ****   * @retval None
 266:Src/main.c    ****   */
 267:Src/main.c    **** static void MX_CAN_Init(void)
 268:Src/main.c    **** {
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 271:Src/main.c    **** 	CAN_FilterTypeDef     sFilterConfig;
 272:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 273:Src/main.c    **** 
 274:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 275:Src/main.c    **** 
 276:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 277:Src/main.c    ****   hcan.Instance = CAN1;
 278:Src/main.c    ****   hcan.Init.Prescaler = 2;
 279:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 280:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 281:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 282:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 283:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 284:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 285:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 286:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 287:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 288:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 289:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 290:Src/main.c    ****   {
 291:Src/main.c    ****     Error_Handler();
 292:Src/main.c    ****   }
 293:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 */
 294:Src/main.c    **** 	POT_TxHeader.StdId = DASH_CAN_ID; 						// CAN standard ID
 295:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 296:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 297:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 298:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 299:Src/main.c    **** 
 300:Src/main.c    ****   POT_Txheader.StdId = RINEHARTCUR_CAN_ID; 						// CAN standard ID
 301:Src/main.c    **** 	POT_Txheader.RTR = CAN_RTR_DATA; 						// CAN frame type
 302:Src/main.c    **** 	POT_Txheader.IDE = CAN_ID_STD; 							// CAN ID type
 303:Src/main.c    **** 	POT_Txheader.DLC = 2; 									// CAN frame length in bytes
 304:Src/main.c    **** 	POT_Txheader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 305:Src/main.c    **** 
 306:Src/main.c    ****   POT_Txheader1.StdId = RINEHARTTOR_CAN_ID; 						// CAN standard ID
 307:Src/main.c    ****   POT_Txheader1.RTR = CAN_RTR_DATA; 						// CAN frame type
 308:Src/main.c    ****   POT_Txheader1.IDE = CAN_ID_STD; 							// CAN ID type
 309:Src/main.c    ****   POT_Txheader1.DLC = 2; 									// CAN frame length in bytes
 310:Src/main.c    ****   POT_Txheader1.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 311:Src/main.c    **** 
 312:Src/main.c    **** 	sFilterConfig.FilterBank = 0;							// filter number (0-13)
 313:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 314:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 315:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 316:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 317:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 318:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 319:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
ARM GAS  /tmp/ccsT0kLX.s 			page 7


 320:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 321:Src/main.c    **** 
 322:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 323:Src/main.c    **** 
 324:Src/main.c    **** 	HAL_CAN_Start(&hcan);
 325:Src/main.c    **** 
 326:Src/main.c    **** 	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 327:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 328:Src/main.c    **** 
 329:Src/main.c    **** }
 330:Src/main.c    **** 
 331:Src/main.c    **** /**
 332:Src/main.c    ****   * @brief GPIO Initialization Function
 333:Src/main.c    ****   * @param None
 334:Src/main.c    ****   * @retval None
 335:Src/main.c    ****   */
 336:Src/main.c    **** static void MX_GPIO_Init(void)
 337:Src/main.c    **** {
  25              		.loc 1 337 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 86B0     		sub	sp, sp, #24
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 338:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 338 0
  42 0006 0024     		movs	r4, #0
  43 0008 0294     		str	r4, [sp, #8]
  44 000a 0394     		str	r4, [sp, #12]
  45 000c 0494     		str	r4, [sp, #16]
  46 000e 0594     		str	r4, [sp, #20]
  47              	.LBB2:
 339:Src/main.c    **** 
 340:Src/main.c    ****   /* GPIO Ports Clock Enable */
 341:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  48              		.loc 1 341 0
  49 0010 1D4B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F00402 		orr	r2, r2, #4
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F00402 		and	r2, r2, #4
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE2:
  58              	.LBB3:
 342:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  /tmp/ccsT0kLX.s 			page 8


  59              		.loc 1 342 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F00802 		orr	r2, r2, #8
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9B69     		ldr	r3, [r3, #24]
  64 002e 03F00803 		and	r3, r3, #8
  65 0032 0193     		str	r3, [sp, #4]
  66 0034 019B     		ldr	r3, [sp, #4]
  67              	.LBE3:
 343:Src/main.c    **** 
 344:Src/main.c    ****   /*Configure GPIO pin Output Level */
 345:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  68              		.loc 1 345 0
  69 0036 DFF85880 		ldr	r8, .L3+8
  70 003a 2246     		mov	r2, r4
  71 003c 4FF45E71 		mov	r1, #888
  72 0040 4046     		mov	r0, r8
  73 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  74              	.LVL0:
 346:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin, GPIO_PIN_RESET);
 347:Src/main.c    **** 
 348:Src/main.c    ****   /*Configure GPIO pin Output Level */
 349:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin, GPIO_PIN_RESET);
  75              		.loc 1 349 0
  76 0046 114D     		ldr	r5, .L3+4
  77 0048 2246     		mov	r2, r4
  78 004a 4FF4F071 		mov	r1, #480
  79 004e 2846     		mov	r0, r5
  80 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  81              	.LVL1:
 350:Src/main.c    **** 
 351:Src/main.c    ****   /*Configure GPIO pins : CUR_LED_Pin BMS_LED_ON_Pin IMD_LED_ON_Pin BSPD_LED_ON_Pin
 352:Src/main.c    ****                            DRS_LED_Pin TC_LED_Pin */
 353:Src/main.c    ****   GPIO_InitStruct.Pin = CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  82              		.loc 1 353 0
  83 0054 4FF45E73 		mov	r3, #888
  84 0058 0293     		str	r3, [sp, #8]
 354:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin;
 355:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  85              		.loc 1 355 0
  86 005a 0127     		movs	r7, #1
  87 005c 0397     		str	r7, [sp, #12]
 356:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  88              		.loc 1 356 0
  89 005e 0494     		str	r4, [sp, #16]
 357:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  90              		.loc 1 357 0
  91 0060 0226     		movs	r6, #2
  92 0062 0596     		str	r6, [sp, #20]
 358:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  93              		.loc 1 358 0
  94 0064 02A9     		add	r1, sp, #8
  95 0066 4046     		mov	r0, r8
  96 0068 FFF7FEFF 		bl	HAL_GPIO_Init
  97              	.LVL2:
 359:Src/main.c    **** 
 360:Src/main.c    ****   /*Configure GPIO pins : RGB_GREEN_Pin RGB_RED_Pin RGB_BLUE_Pin CUST_LED_Pin */
ARM GAS  /tmp/ccsT0kLX.s 			page 9


 361:Src/main.c    ****   GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin;
  98              		.loc 1 361 0
  99 006c 4FF4F073 		mov	r3, #480
 100 0070 0293     		str	r3, [sp, #8]
 362:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 101              		.loc 1 362 0
 102 0072 0397     		str	r7, [sp, #12]
 363:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 103              		.loc 1 363 0
 104 0074 0494     		str	r4, [sp, #16]
 364:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 105              		.loc 1 364 0
 106 0076 0596     		str	r6, [sp, #20]
 365:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 107              		.loc 1 365 0
 108 0078 02A9     		add	r1, sp, #8
 109 007a 2846     		mov	r0, r5
 110 007c FFF7FEFF 		bl	HAL_GPIO_Init
 111              	.LVL3:
 366:Src/main.c    **** 
 367:Src/main.c    **** }
 112              		.loc 1 367 0
 113 0080 06B0     		add	sp, sp, #24
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 24
 116              		@ sp needed
 117 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 118              	.L4:
 119 0086 00BF     		.align	2
 120              	.L3:
 121 0088 00100240 		.word	1073876992
 122 008c 000C0140 		.word	1073810432
 123 0090 00080140 		.word	1073809408
 124              		.cfi_endproc
 125              	.LFE68:
 127              		.section	.text.MX_ADC1_Init,"ax",%progbits
 128              		.align	1
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu softvfp
 134              	MX_ADC1_Init:
 135              	.LFB66:
 199:Src/main.c    **** 
 136              		.loc 1 199 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 24
 143              		.cfi_offset 3, -24
 144              		.cfi_offset 4, -20
 145              		.cfi_offset 5, -16
 146              		.cfi_offset 6, -12
 147              		.cfi_offset 7, -8
 148              		.cfi_offset 14, -4
ARM GAS  /tmp/ccsT0kLX.s 			page 10


 212:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 149              		.loc 1 212 0
 150 0002 184D     		ldr	r5, .L7
 151 0004 184B     		ldr	r3, .L7+4
 152 0006 2B60     		str	r3, [r5]
 213:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 153              		.loc 1 213 0
 154 0008 0026     		movs	r6, #0
 155 000a AE60     		str	r6, [r5, #8]
 214:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 156              		.loc 1 214 0
 157 000c EE60     		str	r6, [r5, #12]
 215:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 158              		.loc 1 215 0
 159 000e 6E61     		str	r6, [r5, #20]
 216:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 160              		.loc 1 216 0
 161 0010 4FF46023 		mov	r3, #917504
 162 0014 EB61     		str	r3, [r5, #28]
 217:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 163              		.loc 1 217 0
 164 0016 6E60     		str	r6, [r5, #4]
 218:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 165              		.loc 1 218 0
 166 0018 0427     		movs	r7, #4
 167 001a 2F61     		str	r7, [r5, #16]
 219:Src/main.c    ****   {
 168              		.loc 1 219 0
 169 001c 2846     		mov	r0, r5
 170 001e FFF7FEFF 		bl	HAL_ADC_Init
 171              	.LVL4:
 225:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 172              		.loc 1 225 0
 173 0022 124C     		ldr	r4, .L7+8
 174 0024 2660     		str	r6, [r4]
 226:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 175              		.loc 1 226 0
 176 0026 0126     		movs	r6, #1
 177 0028 6660     		str	r6, [r4, #4]
 227:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 178              		.loc 1 227 0
 179 002a A660     		str	r6, [r4, #8]
 228:Src/main.c    ****   {
 180              		.loc 1 228 0
 181 002c 2146     		mov	r1, r4
 182 002e 2846     		mov	r0, r5
 183 0030 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 184              	.LVL5:
 234:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 185              		.loc 1 234 0
 186 0034 2660     		str	r6, [r4]
 235:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 187              		.loc 1 235 0
 188 0036 0223     		movs	r3, #2
 189 0038 6360     		str	r3, [r4, #4]
 236:Src/main.c    ****   {
 190              		.loc 1 236 0
ARM GAS  /tmp/ccsT0kLX.s 			page 11


 191 003a 2146     		mov	r1, r4
 192 003c 2846     		mov	r0, r5
 193 003e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 194              	.LVL6:
 242:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 195              		.loc 1 242 0
 196 0042 0723     		movs	r3, #7
 197 0044 2360     		str	r3, [r4]
 243:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 198              		.loc 1 243 0
 199 0046 0323     		movs	r3, #3
 200 0048 6360     		str	r3, [r4, #4]
 244:Src/main.c    ****   {
 201              		.loc 1 244 0
 202 004a 2146     		mov	r1, r4
 203 004c 2846     		mov	r0, r5
 204 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 205              	.LVL7:
 250:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 206              		.loc 1 250 0
 207 0052 0923     		movs	r3, #9
 208 0054 2360     		str	r3, [r4]
 251:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 209              		.loc 1 251 0
 210 0056 6760     		str	r7, [r4, #4]
 252:Src/main.c    ****   {
 211              		.loc 1 252 0
 212 0058 2146     		mov	r1, r4
 213 005a 2846     		mov	r0, r5
 214 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 215              	.LVL8:
 216 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 217              	.L8:
 218 0062 00BF     		.align	2
 219              	.L7:
 220 0064 00000000 		.word	hadc1
 221 0068 00240140 		.word	1073816576
 222 006c 00000000 		.word	.LANCHOR0
 223              		.cfi_endproc
 224              	.LFE66:
 226              		.section	.text.MX_CAN_Init,"ax",%progbits
 227              		.align	1
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 231              		.fpu softvfp
 233              	MX_CAN_Init:
 234              	.LFB67:
 268:Src/main.c    **** 
 235              		.loc 1 268 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 40
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239 0000 70B5     		push	{r4, r5, r6, lr}
 240              	.LCFI4:
 241              		.cfi_def_cfa_offset 16
 242              		.cfi_offset 4, -16
ARM GAS  /tmp/ccsT0kLX.s 			page 12


 243              		.cfi_offset 5, -12
 244              		.cfi_offset 6, -8
 245              		.cfi_offset 14, -4
 246 0002 8AB0     		sub	sp, sp, #40
 247              	.LCFI5:
 248              		.cfi_def_cfa_offset 56
 277:Src/main.c    ****   hcan.Init.Prescaler = 2;
 249              		.loc 1 277 0
 250 0004 214D     		ldr	r5, .L11
 251 0006 224B     		ldr	r3, .L11+4
 252 0008 2B60     		str	r3, [r5]
 278:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 253              		.loc 1 278 0
 254 000a 0226     		movs	r6, #2
 255 000c 6E60     		str	r6, [r5, #4]
 279:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 256              		.loc 1 279 0
 257 000e 0024     		movs	r4, #0
 258 0010 AC60     		str	r4, [r5, #8]
 280:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 259              		.loc 1 280 0
 260 0012 EC60     		str	r4, [r5, #12]
 281:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 261              		.loc 1 281 0
 262 0014 4FF40033 		mov	r3, #131072
 263 0018 2B61     		str	r3, [r5, #16]
 282:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 264              		.loc 1 282 0
 265 001a 4FF44013 		mov	r3, #3145728
 266 001e 6B61     		str	r3, [r5, #20]
 283:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 267              		.loc 1 283 0
 268 0020 2C76     		strb	r4, [r5, #24]
 284:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 269              		.loc 1 284 0
 270 0022 6C76     		strb	r4, [r5, #25]
 285:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 271              		.loc 1 285 0
 272 0024 AC76     		strb	r4, [r5, #26]
 286:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 273              		.loc 1 286 0
 274 0026 EC76     		strb	r4, [r5, #27]
 287:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 275              		.loc 1 287 0
 276 0028 2C77     		strb	r4, [r5, #28]
 288:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 277              		.loc 1 288 0
 278 002a 6C77     		strb	r4, [r5, #29]
 289:Src/main.c    ****   {
 279              		.loc 1 289 0
 280 002c 2846     		mov	r0, r5
 281 002e FFF7FEFF 		bl	HAL_CAN_Init
 282              	.LVL9:
 294:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 283              		.loc 1 294 0
 284 0032 184B     		ldr	r3, .L11+8
 285 0034 0F22     		movs	r2, #15
ARM GAS  /tmp/ccsT0kLX.s 			page 13


 286 0036 1A60     		str	r2, [r3]
 295:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 287              		.loc 1 295 0
 288 0038 DC60     		str	r4, [r3, #12]
 296:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 289              		.loc 1 296 0
 290 003a 9C60     		str	r4, [r3, #8]
 297:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 291              		.loc 1 297 0
 292 003c 0422     		movs	r2, #4
 293 003e 1A61     		str	r2, [r3, #16]
 298:Src/main.c    **** 
 294              		.loc 1 298 0
 295 0040 1C75     		strb	r4, [r3, #20]
 300:Src/main.c    **** 	POT_Txheader.RTR = CAN_RTR_DATA; 						// CAN frame type
 296              		.loc 1 300 0
 297 0042 154B     		ldr	r3, .L11+12
 298 0044 6422     		movs	r2, #100
 299 0046 1A60     		str	r2, [r3]
 301:Src/main.c    **** 	POT_Txheader.IDE = CAN_ID_STD; 							// CAN ID type
 300              		.loc 1 301 0
 301 0048 DC60     		str	r4, [r3, #12]
 302:Src/main.c    **** 	POT_Txheader.DLC = 2; 									// CAN frame length in bytes
 302              		.loc 1 302 0
 303 004a 9C60     		str	r4, [r3, #8]
 303:Src/main.c    **** 	POT_Txheader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 304              		.loc 1 303 0
 305 004c 1E61     		str	r6, [r3, #16]
 304:Src/main.c    **** 
 306              		.loc 1 304 0
 307 004e 1C75     		strb	r4, [r3, #20]
 306:Src/main.c    ****   POT_Txheader1.RTR = CAN_RTR_DATA; 						// CAN frame type
 308              		.loc 1 306 0
 309 0050 124B     		ldr	r3, .L11+16
 310 0052 8222     		movs	r2, #130
 311 0054 1A60     		str	r2, [r3]
 307:Src/main.c    ****   POT_Txheader1.IDE = CAN_ID_STD; 							// CAN ID type
 312              		.loc 1 307 0
 313 0056 DC60     		str	r4, [r3, #12]
 308:Src/main.c    ****   POT_Txheader1.DLC = 2; 									// CAN frame length in bytes
 314              		.loc 1 308 0
 315 0058 9C60     		str	r4, [r3, #8]
 309:Src/main.c    ****   POT_Txheader1.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 316              		.loc 1 309 0
 317 005a 1E61     		str	r6, [r3, #16]
 310:Src/main.c    **** 
 318              		.loc 1 310 0
 319 005c 1C75     		strb	r4, [r3, #20]
 312:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 320              		.loc 1 312 0
 321 005e 0594     		str	r4, [sp, #20]
 313:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 322              		.loc 1 313 0
 323 0060 0694     		str	r4, [sp, #24]
 314:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 324              		.loc 1 314 0
 325 0062 0123     		movs	r3, #1
ARM GAS  /tmp/ccsT0kLX.s 			page 14


 326 0064 0793     		str	r3, [sp, #28]
 315:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 327              		.loc 1 315 0
 328 0066 0094     		str	r4, [sp]
 316:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 329              		.loc 1 316 0
 330 0068 0194     		str	r4, [sp, #4]
 317:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 331              		.loc 1 317 0
 332 006a 0294     		str	r4, [sp, #8]
 318:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 333              		.loc 1 318 0
 334 006c 0394     		str	r4, [sp, #12]
 319:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 335              		.loc 1 319 0
 336 006e 0494     		str	r4, [sp, #16]
 320:Src/main.c    **** 
 337              		.loc 1 320 0
 338 0070 0893     		str	r3, [sp, #32]
 322:Src/main.c    **** 
 339              		.loc 1 322 0
 340 0072 6946     		mov	r1, sp
 341 0074 2846     		mov	r0, r5
 342 0076 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 343              	.LVL10:
 324:Src/main.c    **** 
 344              		.loc 1 324 0
 345 007a 2846     		mov	r0, r5
 346 007c FFF7FEFF 		bl	HAL_CAN_Start
 347              	.LVL11:
 326:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 348              		.loc 1 326 0
 349 0080 3146     		mov	r1, r6
 350 0082 2846     		mov	r0, r5
 351 0084 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 352              	.LVL12:
 329:Src/main.c    **** 
 353              		.loc 1 329 0
 354 0088 0AB0     		add	sp, sp, #40
 355              	.LCFI6:
 356              		.cfi_def_cfa_offset 16
 357              		@ sp needed
 358 008a 70BD     		pop	{r4, r5, r6, pc}
 359              	.L12:
 360              		.align	2
 361              	.L11:
 362 008c 00000000 		.word	hcan
 363 0090 00640040 		.word	1073767424
 364 0094 00000000 		.word	POT_TxHeader
 365 0098 00000000 		.word	POT_Txheader
 366 009c 00000000 		.word	POT_Txheader1
 367              		.cfi_endproc
 368              	.LFE67:
 370              		.section	.text.SystemClock_Config,"ax",%progbits
 371              		.align	1
 372              		.global	SystemClock_Config
 373              		.syntax unified
ARM GAS  /tmp/ccsT0kLX.s 			page 15


 374              		.thumb
 375              		.thumb_func
 376              		.fpu softvfp
 378              	SystemClock_Config:
 379              	.LFB65:
 157:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 380              		.loc 1 157 0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 80
 383              		@ frame_needed = 0, uses_anonymous_args = 0
 384 0000 30B5     		push	{r4, r5, lr}
 385              	.LCFI7:
 386              		.cfi_def_cfa_offset 12
 387              		.cfi_offset 4, -12
 388              		.cfi_offset 5, -8
 389              		.cfi_offset 14, -4
 390 0002 95B0     		sub	sp, sp, #84
 391              	.LCFI8:
 392              		.cfi_def_cfa_offset 96
 158:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 393              		.loc 1 158 0
 394 0004 2822     		movs	r2, #40
 395 0006 0021     		movs	r1, #0
 396 0008 0DEB0200 		add	r0, sp, r2
 397 000c FFF7FEFF 		bl	memset
 398              	.LVL13:
 159:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 399              		.loc 1 159 0
 400 0010 0024     		movs	r4, #0
 401 0012 0594     		str	r4, [sp, #20]
 402 0014 0694     		str	r4, [sp, #24]
 403 0016 0794     		str	r4, [sp, #28]
 404 0018 0894     		str	r4, [sp, #32]
 405 001a 0994     		str	r4, [sp, #36]
 160:Src/main.c    **** 
 406              		.loc 1 160 0
 407 001c 0194     		str	r4, [sp, #4]
 408 001e 0294     		str	r4, [sp, #8]
 409 0020 0394     		str	r4, [sp, #12]
 410 0022 0494     		str	r4, [sp, #16]
 164:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 411              		.loc 1 164 0
 412 0024 0225     		movs	r5, #2
 413 0026 0A95     		str	r5, [sp, #40]
 165:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 414              		.loc 1 165 0
 415 0028 0123     		movs	r3, #1
 416 002a 0E93     		str	r3, [sp, #56]
 166:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 417              		.loc 1 166 0
 418 002c 1023     		movs	r3, #16
 419 002e 0F93     		str	r3, [sp, #60]
 168:Src/main.c    ****   {
 420              		.loc 1 168 0
 421 0030 0AA8     		add	r0, sp, #40
 422 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 423              	.LVL14:
ARM GAS  /tmp/ccsT0kLX.s 			page 16


 174:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 424              		.loc 1 174 0
 425 0036 0F23     		movs	r3, #15
 426 0038 0593     		str	r3, [sp, #20]
 176:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 427              		.loc 1 176 0
 428 003a 0694     		str	r4, [sp, #24]
 177:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 429              		.loc 1 177 0
 430 003c 0794     		str	r4, [sp, #28]
 178:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 431              		.loc 1 178 0
 432 003e 0894     		str	r4, [sp, #32]
 179:Src/main.c    **** 
 433              		.loc 1 179 0
 434 0040 0994     		str	r4, [sp, #36]
 181:Src/main.c    ****   {
 435              		.loc 1 181 0
 436 0042 2146     		mov	r1, r4
 437 0044 05A8     		add	r0, sp, #20
 438 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 439              	.LVL15:
 185:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 440              		.loc 1 185 0
 441 004a 0195     		str	r5, [sp, #4]
 186:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 442              		.loc 1 186 0
 443 004c 0394     		str	r4, [sp, #12]
 187:Src/main.c    ****   {
 444              		.loc 1 187 0
 445 004e 01A8     		add	r0, sp, #4
 446 0050 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 447              	.LVL16:
 191:Src/main.c    **** 
 448              		.loc 1 191 0
 449 0054 15B0     		add	sp, sp, #84
 450              	.LCFI9:
 451              		.cfi_def_cfa_offset 12
 452              		@ sp needed
 453 0056 30BD     		pop	{r4, r5, pc}
 454              		.cfi_endproc
 455              	.LFE65:
 457              		.section	.text.POT_read,"ax",%progbits
 458              		.align	1
 459              		.global	POT_read
 460              		.syntax unified
 461              		.thumb
 462              		.thumb_func
 463              		.fpu softvfp
 465              	POT_read:
 466              	.LFB69:
 368:Src/main.c    **** 
 369:Src/main.c    **** 
 370:Src/main.c    **** 
 371:Src/main.c    **** /* USER CODE BEGIN 4 */
 372:Src/main.c    **** void POT_read(uint16_t pot_values[4]) {
 467              		.loc 1 372 0
ARM GAS  /tmp/ccsT0kLX.s 			page 17


 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471              	.LVL17:
 472 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 473              	.LCFI10:
 474              		.cfi_def_cfa_offset 24
 475              		.cfi_offset 4, -24
 476              		.cfi_offset 5, -20
 477              		.cfi_offset 6, -16
 478              		.cfi_offset 7, -12
 479              		.cfi_offset 8, -8
 480              		.cfi_offset 14, -4
 481 0004 0746     		mov	r7, r0
 373:Src/main.c    **** 	//0 1 7 9
 374:Src/main.c    **** 
 375:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_0;
 482              		.loc 1 375 0
 483 0006 334D     		ldr	r5, .L17
 484 0008 0023     		movs	r3, #0
 485 000a 2B60     		str	r3, [r5]
 376:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 486              		.loc 1 376 0
 487 000c 0126     		movs	r6, #1
 488 000e 6E60     		str	r6, [r5, #4]
 377:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 489              		.loc 1 377 0
 490 0010 4FF00608 		mov	r8, #6
 491 0014 C5F80880 		str	r8, [r5, #8]
 378:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 492              		.loc 1 378 0
 493 0018 2F4C     		ldr	r4, .L17+4
 494 001a 2946     		mov	r1, r5
 495 001c 2046     		mov	r0, r4
 496              	.LVL18:
 497 001e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 498              	.LVL19:
 379:Src/main.c    **** 
 380:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 499              		.loc 1 380 0
 500 0022 2046     		mov	r0, r4
 501 0024 FFF7FEFF 		bl	HAL_ADC_Start
 502              	.LVL20:
 381:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);		//change timeout to a HAL define
 503              		.loc 1 381 0
 504 0028 4FF47A71 		mov	r1, #1000
 505 002c 2046     		mov	r0, r4
 506 002e FFF7FEFF 		bl	HAL_ADC_PollForConversion
 507              	.LVL21:
 382:Src/main.c    **** 	pot_values[0] = HAL_ADC_GetValue(&hadc1);
 508              		.loc 1 382 0
 509 0032 2046     		mov	r0, r4
 510 0034 FFF7FEFF 		bl	HAL_ADC_GetValue
 511              	.LVL22:
 512 0038 3880     		strh	r0, [r7]	@ movhi
 383:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 513              		.loc 1 383 0
ARM GAS  /tmp/ccsT0kLX.s 			page 18


 514 003a 2046     		mov	r0, r4
 515 003c FFF7FEFF 		bl	HAL_ADC_Stop
 516              	.LVL23:
 384:Src/main.c    **** 
 385:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_1;
 517              		.loc 1 385 0
 518 0040 2E60     		str	r6, [r5]
 386:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 519              		.loc 1 386 0
 520 0042 6E60     		str	r6, [r5, #4]
 387:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 521              		.loc 1 387 0
 522 0044 C5F80880 		str	r8, [r5, #8]
 388:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 523              		.loc 1 388 0
 524 0048 2946     		mov	r1, r5
 525 004a 2046     		mov	r0, r4
 526 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 527              	.LVL24:
 389:Src/main.c    **** 
 390:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 528              		.loc 1 390 0
 529 0050 2046     		mov	r0, r4
 530 0052 FFF7FEFF 		bl	HAL_ADC_Start
 531              	.LVL25:
 391:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 532              		.loc 1 391 0
 533 0056 4FF47A71 		mov	r1, #1000
 534 005a 2046     		mov	r0, r4
 535 005c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 536              	.LVL26:
 392:Src/main.c    **** 	pot_values[1] = HAL_ADC_GetValue(&hadc1);
 537              		.loc 1 392 0
 538 0060 2046     		mov	r0, r4
 539 0062 FFF7FEFF 		bl	HAL_ADC_GetValue
 540              	.LVL27:
 541 0066 7880     		strh	r0, [r7, #2]	@ movhi
 393:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 542              		.loc 1 393 0
 543 0068 2046     		mov	r0, r4
 544 006a FFF7FEFF 		bl	HAL_ADC_Stop
 545              	.LVL28:
 394:Src/main.c    **** 
 395:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_7;
 546              		.loc 1 395 0
 547 006e 0723     		movs	r3, #7
 548 0070 2B60     		str	r3, [r5]
 396:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 549              		.loc 1 396 0
 550 0072 6E60     		str	r6, [r5, #4]
 397:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 551              		.loc 1 397 0
 552 0074 C5F80880 		str	r8, [r5, #8]
 398:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 553              		.loc 1 398 0
 554 0078 2946     		mov	r1, r5
 555 007a 2046     		mov	r0, r4
ARM GAS  /tmp/ccsT0kLX.s 			page 19


 556 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 557              	.LVL29:
 399:Src/main.c    **** 
 400:Src/main.c    **** 
 401:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 558              		.loc 1 401 0
 559 0080 2046     		mov	r0, r4
 560 0082 FFF7FEFF 		bl	HAL_ADC_Start
 561              	.LVL30:
 402:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 562              		.loc 1 402 0
 563 0086 4FF47A71 		mov	r1, #1000
 564 008a 2046     		mov	r0, r4
 565 008c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 566              	.LVL31:
 403:Src/main.c    **** 	pot_values[2] = HAL_ADC_GetValue(&hadc1);
 567              		.loc 1 403 0
 568 0090 2046     		mov	r0, r4
 569 0092 FFF7FEFF 		bl	HAL_ADC_GetValue
 570              	.LVL32:
 571 0096 B880     		strh	r0, [r7, #4]	@ movhi
 404:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 572              		.loc 1 404 0
 573 0098 2046     		mov	r0, r4
 574 009a FFF7FEFF 		bl	HAL_ADC_Stop
 575              	.LVL33:
 405:Src/main.c    **** 
 406:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_9;
 576              		.loc 1 406 0
 577 009e 0923     		movs	r3, #9
 578 00a0 2B60     		str	r3, [r5]
 407:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 579              		.loc 1 407 0
 580 00a2 6E60     		str	r6, [r5, #4]
 408:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 581              		.loc 1 408 0
 582 00a4 C5F80880 		str	r8, [r5, #8]
 409:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 583              		.loc 1 409 0
 584 00a8 2946     		mov	r1, r5
 585 00aa 2046     		mov	r0, r4
 586 00ac FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 587              	.LVL34:
 410:Src/main.c    **** 
 411:Src/main.c    **** 
 412:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 588              		.loc 1 412 0
 589 00b0 2046     		mov	r0, r4
 590 00b2 FFF7FEFF 		bl	HAL_ADC_Start
 591              	.LVL35:
 413:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 592              		.loc 1 413 0
 593 00b6 4FF47A71 		mov	r1, #1000
 594 00ba 2046     		mov	r0, r4
 595 00bc FFF7FEFF 		bl	HAL_ADC_PollForConversion
 596              	.LVL36:
 414:Src/main.c    **** 	pot_values[3] = HAL_ADC_GetValue(&hadc1);
ARM GAS  /tmp/ccsT0kLX.s 			page 20


 597              		.loc 1 414 0
 598 00c0 2046     		mov	r0, r4
 599 00c2 FFF7FEFF 		bl	HAL_ADC_GetValue
 600              	.LVL37:
 601 00c6 F880     		strh	r0, [r7, #6]	@ movhi
 415:Src/main.c    **** 
 416:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 602              		.loc 1 416 0
 603 00c8 2046     		mov	r0, r4
 604 00ca FFF7FEFF 		bl	HAL_ADC_Stop
 605              	.LVL38:
 606 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 607              	.LVL39:
 608              	.L18:
 609 00d2 00BF     		.align	2
 610              	.L17:
 611 00d4 00000000 		.word	.LANCHOR0
 612 00d8 00000000 		.word	hadc1
 613              		.cfi_endproc
 614              	.LFE69:
 616              		.section	.text.POT_interpret,"ax",%progbits
 617              		.align	1
 618              		.global	POT_interpret
 619              		.syntax unified
 620              		.thumb
 621              		.thumb_func
 622              		.fpu softvfp
 624              	POT_interpret:
 625              	.LFB70:
 417:Src/main.c    **** 
 418:Src/main.c    **** }
 419:Src/main.c    **** 
 420:Src/main.c    **** void POT_interpret(uint16_t pot_values[4]) {
 626              		.loc 1 420 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 8
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630              	.LVL40:
 631 0000 30B5     		push	{r4, r5, lr}
 632              	.LCFI11:
 633              		.cfi_def_cfa_offset 12
 634              		.cfi_offset 4, -12
 635              		.cfi_offset 5, -8
 636              		.cfi_offset 14, -4
 637 0002 83B0     		sub	sp, sp, #12
 638              	.LCFI12:
 639              		.cfi_def_cfa_offset 24
 640              	.LVL41:
 421:Src/main.c    **** 
 422:Src/main.c    **** 	uint8_t pot_pos[4];
 423:Src/main.c    **** 	uint8_t i, j;
 424:Src/main.c    **** 
 425:Src/main.c    **** 	for (i = 0; i < 4; i++) {
 641              		.loc 1 425 0
 642 0004 0024     		movs	r4, #0
 643 0006 1FE0     		b	.L20
 644              	.LVL42:
ARM GAS  /tmp/ccsT0kLX.s 			page 21


 645              	.L21:
 426:Src/main.c    **** 
 427:Src/main.c    **** 		for (j = 0; j < 10; j++) {
 646              		.loc 1 427 0 discriminator 2
 647 0008 0133     		adds	r3, r3, #1
 648              	.LVL43:
 649 000a DBB2     		uxtb	r3, r3
 650              	.LVL44:
 651              	.L23:
 652              		.loc 1 427 0 is_stmt 0 discriminator 1
 653 000c 092B     		cmp	r3, #9
 654 000e 13D8     		bhi	.L44
 428:Src/main.c    **** 
 429:Src/main.c    **** 			//uint16_t pot_threshold[12] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
 430:Src/main.c    **** 			if ((pot_values[i] > pot_threshold[j]) && (pot_values[i] <= pot_threshold[j + 1]))
 655              		.loc 1 430 0 is_stmt 1
 656 0010 30F81420 		ldrh	r2, [r0, r4, lsl #1]
 657 0014 5749     		ldr	r1, .L55
 658 0016 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 659 001a 8A42     		cmp	r2, r1
 660 001c F4D9     		bls	.L21
 661              		.loc 1 430 0 is_stmt 0 discriminator 1
 662 001e 591C     		adds	r1, r3, #1
 663 0020 544D     		ldr	r5, .L55
 664 0022 35F81110 		ldrh	r1, [r5, r1, lsl #1]
 665 0026 8A42     		cmp	r2, r1
 666 0028 EED8     		bhi	.L21
 431:Src/main.c    **** 				pot_pos[i] = 10 - (j + 1); // pot_pos[i] = 0 is ~3.3V, pot_pos[i] = 1 is ~3V, etc.
 667              		.loc 1 431 0 is_stmt 1
 668 002a C3F10902 		rsb	r2, r3, #9
 669 002e 02A9     		add	r1, sp, #8
 670 0030 2144     		add	r1, r1, r4
 671 0032 01F8042C 		strb	r2, [r1, #-4]
 672 0036 E7E7     		b	.L21
 673              	.L44:
 432:Src/main.c    **** 			}
 433:Src/main.c    **** 
 434:Src/main.c    **** 		POT_data[i] = pot_pos[i];
 674              		.loc 1 434 0 discriminator 2
 675 0038 02AB     		add	r3, sp, #8
 676              	.LVL45:
 677 003a 2344     		add	r3, r3, r4
 678 003c 13F8042C 		ldrb	r2, [r3, #-4]	@ zero_extendqisi2
 679 0040 4D4B     		ldr	r3, .L55+4
 680 0042 1A55     		strb	r2, [r3, r4]
 425:Src/main.c    **** 
 681              		.loc 1 425 0 discriminator 2
 682 0044 0134     		adds	r4, r4, #1
 683              	.LVL46:
 684 0046 E4B2     		uxtb	r4, r4
 685              	.LVL47:
 686              	.L20:
 425:Src/main.c    **** 
 687              		.loc 1 425 0 is_stmt 0 discriminator 1
 688 0048 032C     		cmp	r4, #3
 689 004a 01D8     		bhi	.L45
 690 004c 0023     		movs	r3, #0
ARM GAS  /tmp/ccsT0kLX.s 			page 22


 691 004e DDE7     		b	.L23
 692              	.L45:
 435:Src/main.c    **** 		//POT_data[0] = 0x00;
 436:Src/main.c    **** 
 437:Src/main.c    **** 	}
 438:Src/main.c    **** 
 439:Src/main.c    **** if (pot_pos[1] == 0){
 693              		.loc 1 439 0 is_stmt 1
 694 0050 9DF80540 		ldrb	r4, [sp, #5]	@ zero_extendqisi2
 695              	.LVL48:
 696 0054 5CBB     		cbnz	r4, .L24
 440:Src/main.c    **** 	POT_Data[1] = 1;
 697              		.loc 1 440 0
 698 0056 494B     		ldr	r3, .L55+8
 699 0058 0122     		movs	r2, #1
 700 005a 5A70     		strb	r2, [r3, #1]
 441:Src/main.c    ****   POT_Data[0] = 244;
 701              		.loc 1 441 0
 702 005c F422     		movs	r2, #244
 703 005e 1A70     		strb	r2, [r3]
 704              	.L25:
 442:Src/main.c    ****   }
 443:Src/main.c    **** 
 444:Src/main.c    **** else if (pot_pos[1] == 1){
 445:Src/main.c    ****   	POT_Data[1] = 3;
 446:Src/main.c    ****     POT_Data[0] = 232;
 447:Src/main.c    ****   }
 448:Src/main.c    **** 
 449:Src/main.c    **** else if (pot_pos[1] == 2){
 450:Src/main.c    ****     	POT_Data[1] = 4;
 451:Src/main.c    ****       POT_Data[0] = 176;
 452:Src/main.c    ****   }
 453:Src/main.c    **** 
 454:Src/main.c    **** else if (pot_pos[1] == 3){
 455:Src/main.c    ****     	POT_Data[1] = 5;
 456:Src/main.c    ****       POT_Data[0] = 70;
 457:Src/main.c    ****   }
 458:Src/main.c    **** 
 459:Src/main.c    **** else if (pot_pos[1] == 4){
 460:Src/main.c    ****       	POT_Data[1] = 5;
 461:Src/main.c    ****         POT_Data[0] = 220;
 462:Src/main.c    ****   }
 463:Src/main.c    **** 
 464:Src/main.c    **** else if (pot_pos[1] == 5){
 465:Src/main.c    ****         	POT_Data[1] = 6;
 466:Src/main.c    ****           POT_Data[0] = 114;
 467:Src/main.c    ****   }
 468:Src/main.c    **** 
 469:Src/main.c    **** else if (pot_pos[1] == 6){
 470:Src/main.c    ****     	POT_Data[1] = 7;
 471:Src/main.c    ****       POT_Data[0] = 8;
 472:Src/main.c    ****   }
 473:Src/main.c    **** 
 474:Src/main.c    **** else if (pot_pos[1] == 7){
 475:Src/main.c    ****     	POT_Data[1] = 7;
 476:Src/main.c    ****       POT_Data[0] = 158;
 477:Src/main.c    ****   }
ARM GAS  /tmp/ccsT0kLX.s 			page 23


 478:Src/main.c    **** 
 479:Src/main.c    **** else if (pot_pos[1] == 8){
 480:Src/main.c    ****     	POT_Data[1] = 8;
 481:Src/main.c    ****       POT_Data[0] = 52;
 482:Src/main.c    ****   }
 483:Src/main.c    **** 
 484:Src/main.c    **** else if (pot_pos[1] == 9){
 485:Src/main.c    ****     	POT_Data[1] = 8;
 486:Src/main.c    ****       POT_Data[0] = 202;
 487:Src/main.c    ****   }
 488:Src/main.c    **** 
 489:Src/main.c    **** 	if (pot_pos[0] != 0) // if CURRENT_POT is in any position other than first, turn on CUR_LED
 705              		.loc 1 489 0
 706 0060 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 707 0064 002B     		cmp	r3, #0
 708 0066 6AD0     		beq	.L34
 490:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_SET);
 709              		.loc 1 490 0
 710 0068 0122     		movs	r2, #1
 711 006a 4FF48071 		mov	r1, #256
 712 006e 4448     		ldr	r0, .L55+12
 713              	.LVL49:
 714 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 715              	.LVL50:
 716              	.L35:
 491:Src/main.c    ****   else
 492:Src/main.c    ****   	HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_RESET);
 493:Src/main.c    **** 
 494:Src/main.c    **** 	if (pot_pos[1] != 0) // if CUSTOM_POT is in any position other than first, turn on CUST_LED
 717              		.loc 1 494 0
 718 0074 002C     		cmp	r4, #0
 719 0076 69D0     		beq	.L36
 495:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_SET);
 720              		.loc 1 495 0
 721 0078 0122     		movs	r2, #1
 722 007a 0821     		movs	r1, #8
 723 007c 4148     		ldr	r0, .L55+16
 724 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 725              	.LVL51:
 726              	.L37:
 496:Src/main.c    **** 	else
 497:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_RESET);
 498:Src/main.c    **** 
 499:Src/main.c    **** 	if (pot_pos[2] != 0) // if TC_POT is in any position other than first, turn on TC_LED
 727              		.loc 1 499 0
 728 0082 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 729 0086 002B     		cmp	r3, #0
 730 0088 66D0     		beq	.L38
 500:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_SET);
 731              		.loc 1 500 0
 732 008a 0122     		movs	r2, #1
 733 008c 4FF40071 		mov	r1, #512
 734 0090 3C48     		ldr	r0, .L55+16
 735 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 736              	.LVL52:
 737              	.L39:
 501:Src/main.c    **** 	else
ARM GAS  /tmp/ccsT0kLX.s 			page 24


 502:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_RESET);
 503:Src/main.c    **** 
 504:Src/main.c    **** 	if (pot_pos[3] != 0) // if DRS_POT is in any position other than first, turn on DRS_LED
 738              		.loc 1 504 0
 739 0096 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 740 009a 002B     		cmp	r3, #0
 741 009c 63D1     		bne	.L46
 505:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_SET);
 506:Src/main.c    **** 	else
 507:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_RESET);
 742              		.loc 1 507 0
 743 009e 0022     		movs	r2, #0
 744 00a0 4FF48071 		mov	r1, #256
 745 00a4 3748     		ldr	r0, .L55+16
 746 00a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 747              	.LVL53:
 748              	.L19:
 508:Src/main.c    **** 
 509:Src/main.c    **** }
 749              		.loc 1 509 0
 750 00aa 03B0     		add	sp, sp, #12
 751              	.LCFI13:
 752              		.cfi_remember_state
 753              		.cfi_def_cfa_offset 12
 754              		@ sp needed
 755 00ac 30BD     		pop	{r4, r5, pc}
 756              	.LVL54:
 757              	.L24:
 758              	.LCFI14:
 759              		.cfi_restore_state
 444:Src/main.c    ****   	POT_Data[1] = 3;
 760              		.loc 1 444 0
 761 00ae 012C     		cmp	r4, #1
 762 00b0 15D0     		beq	.L47
 449:Src/main.c    ****     	POT_Data[1] = 4;
 763              		.loc 1 449 0
 764 00b2 022C     		cmp	r4, #2
 765 00b4 19D0     		beq	.L48
 454:Src/main.c    ****     	POT_Data[1] = 5;
 766              		.loc 1 454 0
 767 00b6 032C     		cmp	r4, #3
 768 00b8 1DD0     		beq	.L49
 459:Src/main.c    ****       	POT_Data[1] = 5;
 769              		.loc 1 459 0
 770 00ba 042C     		cmp	r4, #4
 771 00bc 21D0     		beq	.L50
 464:Src/main.c    ****         	POT_Data[1] = 6;
 772              		.loc 1 464 0
 773 00be 052C     		cmp	r4, #5
 774 00c0 25D0     		beq	.L51
 469:Src/main.c    ****     	POT_Data[1] = 7;
 775              		.loc 1 469 0
 776 00c2 062C     		cmp	r4, #6
 777 00c4 29D0     		beq	.L52
 474:Src/main.c    ****     	POT_Data[1] = 7;
 778              		.loc 1 474 0
 779 00c6 072C     		cmp	r4, #7
ARM GAS  /tmp/ccsT0kLX.s 			page 25


 780 00c8 2DD0     		beq	.L53
 479:Src/main.c    ****     	POT_Data[1] = 8;
 781              		.loc 1 479 0
 782 00ca 082C     		cmp	r4, #8
 783 00cc 31D0     		beq	.L54
 484:Src/main.c    ****     	POT_Data[1] = 8;
 784              		.loc 1 484 0
 785 00ce 092C     		cmp	r4, #9
 786 00d0 C6D1     		bne	.L25
 485:Src/main.c    ****       POT_Data[0] = 202;
 787              		.loc 1 485 0
 788 00d2 2A4B     		ldr	r3, .L55+8
 789 00d4 0822     		movs	r2, #8
 790 00d6 5A70     		strb	r2, [r3, #1]
 486:Src/main.c    ****   }
 791              		.loc 1 486 0
 792 00d8 CA22     		movs	r2, #202
 793 00da 1A70     		strb	r2, [r3]
 794 00dc C0E7     		b	.L25
 795              	.L47:
 445:Src/main.c    ****     POT_Data[0] = 232;
 796              		.loc 1 445 0
 797 00de 274B     		ldr	r3, .L55+8
 798 00e0 0322     		movs	r2, #3
 799 00e2 5A70     		strb	r2, [r3, #1]
 446:Src/main.c    ****   }
 800              		.loc 1 446 0
 801 00e4 E822     		movs	r2, #232
 802 00e6 1A70     		strb	r2, [r3]
 803 00e8 BAE7     		b	.L25
 804              	.L48:
 450:Src/main.c    ****       POT_Data[0] = 176;
 805              		.loc 1 450 0
 806 00ea 244B     		ldr	r3, .L55+8
 807 00ec 0422     		movs	r2, #4
 808 00ee 5A70     		strb	r2, [r3, #1]
 451:Src/main.c    ****   }
 809              		.loc 1 451 0
 810 00f0 B022     		movs	r2, #176
 811 00f2 1A70     		strb	r2, [r3]
 812 00f4 B4E7     		b	.L25
 813              	.L49:
 455:Src/main.c    ****       POT_Data[0] = 70;
 814              		.loc 1 455 0
 815 00f6 214B     		ldr	r3, .L55+8
 816 00f8 0522     		movs	r2, #5
 817 00fa 5A70     		strb	r2, [r3, #1]
 456:Src/main.c    ****   }
 818              		.loc 1 456 0
 819 00fc 4622     		movs	r2, #70
 820 00fe 1A70     		strb	r2, [r3]
 821 0100 AEE7     		b	.L25
 822              	.L50:
 460:Src/main.c    ****         POT_Data[0] = 220;
 823              		.loc 1 460 0
 824 0102 1E4B     		ldr	r3, .L55+8
 825 0104 0522     		movs	r2, #5
ARM GAS  /tmp/ccsT0kLX.s 			page 26


 826 0106 5A70     		strb	r2, [r3, #1]
 461:Src/main.c    ****   }
 827              		.loc 1 461 0
 828 0108 DC22     		movs	r2, #220
 829 010a 1A70     		strb	r2, [r3]
 830 010c A8E7     		b	.L25
 831              	.L51:
 465:Src/main.c    ****           POT_Data[0] = 114;
 832              		.loc 1 465 0
 833 010e 1B4B     		ldr	r3, .L55+8
 834 0110 0622     		movs	r2, #6
 835 0112 5A70     		strb	r2, [r3, #1]
 466:Src/main.c    ****   }
 836              		.loc 1 466 0
 837 0114 7222     		movs	r2, #114
 838 0116 1A70     		strb	r2, [r3]
 839 0118 A2E7     		b	.L25
 840              	.L52:
 470:Src/main.c    ****       POT_Data[0] = 8;
 841              		.loc 1 470 0
 842 011a 184B     		ldr	r3, .L55+8
 843 011c 0722     		movs	r2, #7
 844 011e 5A70     		strb	r2, [r3, #1]
 471:Src/main.c    ****   }
 845              		.loc 1 471 0
 846 0120 0822     		movs	r2, #8
 847 0122 1A70     		strb	r2, [r3]
 848 0124 9CE7     		b	.L25
 849              	.L53:
 475:Src/main.c    ****       POT_Data[0] = 158;
 850              		.loc 1 475 0
 851 0126 154B     		ldr	r3, .L55+8
 852 0128 0722     		movs	r2, #7
 853 012a 5A70     		strb	r2, [r3, #1]
 476:Src/main.c    ****   }
 854              		.loc 1 476 0
 855 012c 9E22     		movs	r2, #158
 856 012e 1A70     		strb	r2, [r3]
 857 0130 96E7     		b	.L25
 858              	.L54:
 480:Src/main.c    ****       POT_Data[0] = 52;
 859              		.loc 1 480 0
 860 0132 124B     		ldr	r3, .L55+8
 861 0134 0822     		movs	r2, #8
 862 0136 5A70     		strb	r2, [r3, #1]
 481:Src/main.c    ****   }
 863              		.loc 1 481 0
 864 0138 3422     		movs	r2, #52
 865 013a 1A70     		strb	r2, [r3]
 866 013c 90E7     		b	.L25
 867              	.L34:
 492:Src/main.c    **** 
 868              		.loc 1 492 0
 869 013e 0022     		movs	r2, #0
 870 0140 4FF48071 		mov	r1, #256
 871 0144 0E48     		ldr	r0, .L55+12
 872              	.LVL55:
ARM GAS  /tmp/ccsT0kLX.s 			page 27


 873 0146 FFF7FEFF 		bl	HAL_GPIO_WritePin
 874              	.LVL56:
 875 014a 93E7     		b	.L35
 876              	.L36:
 497:Src/main.c    **** 
 877              		.loc 1 497 0
 878 014c 0022     		movs	r2, #0
 879 014e 0821     		movs	r1, #8
 880 0150 0C48     		ldr	r0, .L55+16
 881 0152 FFF7FEFF 		bl	HAL_GPIO_WritePin
 882              	.LVL57:
 883 0156 94E7     		b	.L37
 884              	.L38:
 502:Src/main.c    **** 
 885              		.loc 1 502 0
 886 0158 0022     		movs	r2, #0
 887 015a 4FF40071 		mov	r1, #512
 888 015e 0948     		ldr	r0, .L55+16
 889 0160 FFF7FEFF 		bl	HAL_GPIO_WritePin
 890              	.LVL58:
 891 0164 97E7     		b	.L39
 892              	.L46:
 505:Src/main.c    **** 	else
 893              		.loc 1 505 0
 894 0166 0122     		movs	r2, #1
 895 0168 4FF48071 		mov	r1, #256
 896 016c 0548     		ldr	r0, .L55+16
 897 016e FFF7FEFF 		bl	HAL_GPIO_WritePin
 898              	.LVL59:
 899 0172 9AE7     		b	.L19
 900              	.L56:
 901              		.align	2
 902              	.L55:
 903 0174 00000000 		.word	.LANCHOR1
 904 0178 00000000 		.word	POT_data
 905 017c 00000000 		.word	POT_Data
 906 0180 000C0140 		.word	1073810432
 907 0184 00080140 		.word	1073809408
 908              		.cfi_endproc
 909              	.LFE70:
 911              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 912              		.align	1
 913              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 914              		.syntax unified
 915              		.thumb
 916              		.thumb_func
 917              		.fpu softvfp
 919              	HAL_CAN_RxFifo0MsgPendingCallback:
 920              	.LFB71:
 510:Src/main.c    **** 
 511:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
 512:Src/main.c    **** {
 921              		.loc 1 512 0
 922              		.cfi_startproc
 923              		@ args = 0, pretend = 0, frame = 0
 924              		@ frame_needed = 0, uses_anonymous_args = 0
 925              	.LVL60:
ARM GAS  /tmp/ccsT0kLX.s 			page 28


 926 0000 08B5     		push	{r3, lr}
 927              	.LCFI15:
 928              		.cfi_def_cfa_offset 8
 929              		.cfi_offset 3, -8
 930              		.cfi_offset 14, -4
 513:Src/main.c    ****   if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 931              		.loc 1 513 0
 932 0002 054B     		ldr	r3, .L60
 933 0004 054A     		ldr	r2, .L60+4
 934 0006 0021     		movs	r1, #0
 935 0008 0548     		ldr	r0, .L60+8
 936              	.LVL61:
 937 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 938              	.LVL62:
 939 000e 10B9     		cbnz	r0, .L57
 514:Src/main.c    **** 	  CAN_flag = 0xFF;
 940              		.loc 1 514 0
 941 0010 FF22     		movs	r2, #255
 942 0012 044B     		ldr	r3, .L60+12
 943 0014 1A70     		strb	r2, [r3]
 944              	.L57:
 945 0016 08BD     		pop	{r3, pc}
 946              	.L61:
 947              		.align	2
 948              	.L60:
 949 0018 00000000 		.word	RxData
 950 001c 00000000 		.word	RxHeader
 951 0020 00000000 		.word	hcan
 952 0024 00000000 		.word	CAN_flag
 953              		.cfi_endproc
 954              	.LFE71:
 956              		.section	.text.CAN_interpret,"ax",%progbits
 957              		.align	1
 958              		.global	CAN_interpret
 959              		.syntax unified
 960              		.thumb
 961              		.thumb_func
 962              		.fpu softvfp
 964              	CAN_interpret:
 965              	.LFB72:
 515:Src/main.c    **** }
 516:Src/main.c    **** 
 517:Src/main.c    **** void CAN_interpret(void) {
 966              		.loc 1 517 0
 967              		.cfi_startproc
 968              		@ args = 0, pretend = 0, frame = 0
 969              		@ frame_needed = 0, uses_anonymous_args = 0
 970 0000 70B5     		push	{r4, r5, r6, lr}
 971              	.LCFI16:
 972              		.cfi_def_cfa_offset 16
 973              		.cfi_offset 4, -16
 974              		.cfi_offset 5, -12
 975              		.cfi_offset 6, -8
 976              		.cfi_offset 14, -4
 518:Src/main.c    **** 
 519:Src/main.c    **** 	uint16_t received_ID;
 520:Src/main.c    **** 	received_ID = RxHeader.StdId;
ARM GAS  /tmp/ccsT0kLX.s 			page 29


 977              		.loc 1 520 0
 978 0002 714B     		ldr	r3, .L94
 979 0004 1C88     		ldrh	r4, [r3]
 980              	.LVL63:
 521:Src/main.c    **** 
 522:Src/main.c    **** 	if (received_ID == FAULTS) {
 981              		.loc 1 522 0
 982 0006 D02C     		cmp	r4, #208
 983 0008 08D0     		beq	.L79
 984              	.L63:
 523:Src/main.c    **** 
 524:Src/main.c    **** 		uint8_t BMS_fault;
 525:Src/main.c    **** 		uint8_t IMD_fault;
 526:Src/main.c    **** 		uint8_t BSPD_fault;
 527:Src/main.c    **** 		bool any_fault;
 528:Src/main.c    **** 
 529:Src/main.c    **** 		BMS_fault = RxData[0];
 530:Src/main.c    **** 		IMD_fault = RxData[1];
 531:Src/main.c    **** 		BSPD_fault = RxData[2];
 532:Src/main.c    **** 
 533:Src/main.c    **** 		if (BMS_fault == 0xFF) {
 534:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 535:Src/main.c    **** 			any_fault = true;
 536:Src/main.c    **** 		}
 537:Src/main.c    **** 		else if (BMS_fault == 0x00)
 538:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 539:Src/main.c    **** 
 540:Src/main.c    **** 		if (IMD_fault == 0xFF) {
 541:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 542:Src/main.c    **** 			any_fault = true;
 543:Src/main.c    **** 		}
 544:Src/main.c    **** 		else if (IMD_fault == 0x00)
 545:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 546:Src/main.c    **** 
 547:Src/main.c    **** 		if (BSPD_fault == 0xFF) {
 548:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 549:Src/main.c    **** 			any_fault = true;
 550:Src/main.c    **** 		}
 551:Src/main.c    **** 		else if (BSPD_fault == 0x00)
 552:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 553:Src/main.c    **** 
 554:Src/main.c    **** 		if (any_fault == true) {
 555:Src/main.c    **** 			// if there is any fault
 556:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 557:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 558:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 559:Src/main.c    **** 			any_fault = false;
 560:Src/main.c    **** 		}
 561:Src/main.c    **** 
 562:Src/main.c    **** 	}
 563:Src/main.c    **** 
 564:Src/main.c    **** 	if (received_ID == PRECHARGE) {
 985              		.loc 1 564 0
 986 000a D12C     		cmp	r4, #209
 987 000c 47D0     		beq	.L80
 988              	.L70:
 565:Src/main.c    **** 
ARM GAS  /tmp/ccsT0kLX.s 			page 30


 566:Src/main.c    **** 		uint8_t Precharge_state;
 567:Src/main.c    **** 		Precharge_state = RxData[0];
 568:Src/main.c    **** 
 569:Src/main.c    **** 		if (Precharge_state == 0x01) {
 570:Src/main.c    **** 			// if precharge is complete
 571:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED green
 572:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 573:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 574:Src/main.c    **** 		}
 575:Src/main.c    **** 
 576:Src/main.c    **** 		if (Precharge_state == 0x02) {
 577:Src/main.c    **** 			// if precharge is not complete
 578:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 579:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 580:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 581:Src/main.c    **** 
 582:Src/main.c    **** 		}
 583:Src/main.c    **** 
 584:Src/main.c    ****   if (Precharge_state == 0x04) {
 585:Src/main.c    ****       // if precharge is not complete
 586:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 587:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 588:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 589:Src/main.c    **** 
 590:Src/main.c    ****     }
 591:Src/main.c    ****     if (Precharge_state == 0x08) {
 592:Src/main.c    ****       // if precharge is not complete
 593:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED blue
 594:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 595:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 596:Src/main.c    **** 
 597:Src/main.c    ****     }
 598:Src/main.c    ****     if (Precharge_state == 0x10) {
 599:Src/main.c    ****       // if precharge is not complete
 600:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED blue
 601:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 602:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 603:Src/main.c    **** 
 604:Src/main.c    ****     }
 605:Src/main.c    ****     if (Precharge_state == 0x20) {
 606:Src/main.c    ****       // if precharge is not complete
 607:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 608:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 609:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 610:Src/main.c    **** 
 611:Src/main.c    ****     }
 612:Src/main.c    **** 
 613:Src/main.c    **** 	}
 614:Src/main.c    **** 
 615:Src/main.c    **** 
 616:Src/main.c    **** if (received_ID == MOTOR_POS) {
 989              		.loc 1 616 0
 990 000e A52C     		cmp	r4, #165
 991 0010 00F0B980 		beq	.L81
 992              	.LVL64:
 993              	.L76:
 617:Src/main.c    ****   uint16_t Rpm;
ARM GAS  /tmp/ccsT0kLX.s 			page 31


 618:Src/main.c    ****   Rpm = RxData[2] + 256*RxData[3];
 619:Src/main.c    **** 
 620:Src/main.c    ****   if (Rpm < 50){
 621:Src/main.c    ****     POT_Data1[1] = 0;
 622:Src/main.c    ****     POT_Data1[0] = 0;
 623:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 624:Src/main.c    ****   }
 625:Src/main.c    **** 
 626:Src/main.c    ****   if (Rpm >= 50){
 627:Src/main.c    ****     POT_Data1[1] = 3;
 628:Src/main.c    ****     POT_Data1[0] = 232;
 629:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 630:Src/main.c    ****   }
 631:Src/main.c    **** 
 632:Src/main.c    **** }
 633:Src/main.c    **** 
 634:Src/main.c    **** 
 635:Src/main.c    **** 	CAN_flag = 0x00;
 994              		.loc 1 635 0
 995 0014 0022     		movs	r2, #0
 996 0016 6D4B     		ldr	r3, .L94+4
 997 0018 1A70     		strb	r2, [r3]
 998 001a 70BD     		pop	{r4, r5, r6, pc}
 999              	.LVL65:
 1000              	.L79:
 1001              	.LBB4:
 529:Src/main.c    **** 		IMD_fault = RxData[1];
 1002              		.loc 1 529 0
 1003 001c 6C4B     		ldr	r3, .L94+8
 1004 001e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1005              	.LVL66:
 530:Src/main.c    **** 		BSPD_fault = RxData[2];
 1006              		.loc 1 530 0
 1007 0020 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 1008              	.LVL67:
 531:Src/main.c    **** 
 1009              		.loc 1 531 0
 1010 0022 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 1011              	.LVL68:
 533:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 1012              		.loc 1 533 0
 1013 0024 FF2A     		cmp	r2, #255
 1014 0026 17D0     		beq	.L82
 537:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 1015              		.loc 1 537 0
 1016 0028 E2B1     		cbz	r2, .L83
 1017              	.LVL69:
 1018              	.L65:
 540:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 1019              		.loc 1 540 0
 1020 002a FF2E     		cmp	r6, #255
 1021 002c 1FD0     		beq	.L84
 544:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 1022              		.loc 1 544 0
 1023 002e 26B3     		cbz	r6, .L85
 1024              	.L67:
 547:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
ARM GAS  /tmp/ccsT0kLX.s 			page 32


 1025              		.loc 1 547 0
 1026 0030 FF2D     		cmp	r5, #255
 1027 0032 28D0     		beq	.L86
 551:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 1028              		.loc 1 551 0
 1029 0034 6DB3     		cbz	r5, .L87
 1030              	.L69:
 556:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 1031              		.loc 1 556 0
 1032 0036 674D     		ldr	r5, .L94+12
 1033              	.LVL70:
 1034 0038 0022     		movs	r2, #0
 1035 003a 2021     		movs	r1, #32
 1036 003c 2846     		mov	r0, r5
 1037 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1038              	.LVL71:
 557:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1039              		.loc 1 557 0
 1040 0042 0122     		movs	r2, #1
 1041 0044 4021     		movs	r1, #64
 1042 0046 2846     		mov	r0, r5
 1043 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1044              	.LVL72:
 558:Src/main.c    **** 			any_fault = false;
 1045              		.loc 1 558 0
 1046 004c 0022     		movs	r2, #0
 1047 004e 8021     		movs	r1, #128
 1048 0050 2846     		mov	r0, r5
 1049 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1050              	.LVL73:
 1051 0056 D8E7     		b	.L63
 1052              	.LVL74:
 1053              	.L82:
 534:Src/main.c    **** 			any_fault = true;
 1054              		.loc 1 534 0
 1055 0058 0122     		movs	r2, #1
 1056              	.LVL75:
 1057 005a 1021     		movs	r1, #16
 1058 005c 5E48     		ldr	r0, .L94+16
 1059 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1060              	.LVL76:
 1061 0062 E2E7     		b	.L65
 1062              	.LVL77:
 1063              	.L83:
 538:Src/main.c    **** 
 1064              		.loc 1 538 0
 1065 0064 1021     		movs	r1, #16
 1066 0066 5C48     		ldr	r0, .L94+16
 1067 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1068              	.LVL78:
 1069 006c DDE7     		b	.L65
 1070              	.LVL79:
 1071              	.L84:
 541:Src/main.c    **** 			any_fault = true;
 1072              		.loc 1 541 0
 1073 006e 0122     		movs	r2, #1
 1074 0070 2021     		movs	r1, #32
ARM GAS  /tmp/ccsT0kLX.s 			page 33


 1075 0072 5948     		ldr	r0, .L94+16
 1076 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1077              	.LVL80:
 1078 0078 DAE7     		b	.L67
 1079              	.L85:
 545:Src/main.c    **** 
 1080              		.loc 1 545 0
 1081 007a 0022     		movs	r2, #0
 1082 007c 2021     		movs	r1, #32
 1083 007e 5648     		ldr	r0, .L94+16
 1084 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1085              	.LVL81:
 1086 0084 D4E7     		b	.L67
 1087              	.L86:
 548:Src/main.c    **** 			any_fault = true;
 1088              		.loc 1 548 0
 1089 0086 0122     		movs	r2, #1
 1090 0088 4021     		movs	r1, #64
 1091 008a 5348     		ldr	r0, .L94+16
 1092 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1093              	.LVL82:
 1094 0090 D1E7     		b	.L69
 1095              	.L87:
 552:Src/main.c    **** 
 1096              		.loc 1 552 0
 1097 0092 0022     		movs	r2, #0
 1098 0094 4021     		movs	r1, #64
 1099 0096 5048     		ldr	r0, .L94+16
 1100 0098 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1101              	.LVL83:
 1102 009c CBE7     		b	.L69
 1103              	.LVL84:
 1104              	.L80:
 1105              	.LBE4:
 1106              	.LBB5:
 567:Src/main.c    **** 
 1107              		.loc 1 567 0
 1108 009e 4C4B     		ldr	r3, .L94+8
 1109 00a0 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 1110              	.LVL85:
 569:Src/main.c    **** 			// if precharge is complete
 1111              		.loc 1 569 0
 1112 00a2 012D     		cmp	r5, #1
 1113 00a4 1AD0     		beq	.L88
 1114              	.L71:
 576:Src/main.c    **** 			// if precharge is not complete
 1115              		.loc 1 576 0
 1116 00a6 022D     		cmp	r5, #2
 1117 00a8 29D0     		beq	.L89
 1118              	.L72:
 584:Src/main.c    ****       // if precharge is not complete
 1119              		.loc 1 584 0
 1120 00aa 042D     		cmp	r5, #4
 1121 00ac 38D0     		beq	.L90
 1122              	.L73:
 591:Src/main.c    ****       // if precharge is not complete
 1123              		.loc 1 591 0
ARM GAS  /tmp/ccsT0kLX.s 			page 34


 1124 00ae 082D     		cmp	r5, #8
 1125 00b0 47D0     		beq	.L91
 1126              	.L74:
 598:Src/main.c    ****       // if precharge is not complete
 1127              		.loc 1 598 0
 1128 00b2 102D     		cmp	r5, #16
 1129 00b4 56D0     		beq	.L92
 1130              	.L75:
 605:Src/main.c    ****       // if precharge is not complete
 1131              		.loc 1 605 0
 1132 00b6 202D     		cmp	r5, #32
 1133 00b8 A9D1     		bne	.L70
 607:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 1134              		.loc 1 607 0
 1135 00ba 464D     		ldr	r5, .L94+12
 1136              	.LVL86:
 1137 00bc 0022     		movs	r2, #0
 1138 00be 2021     		movs	r1, #32
 1139 00c0 2846     		mov	r0, r5
 1140 00c2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1141              	.LVL87:
 608:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 1142              		.loc 1 608 0
 1143 00c6 0122     		movs	r2, #1
 1144 00c8 4021     		movs	r1, #64
 1145 00ca 2846     		mov	r0, r5
 1146 00cc FFF7FEFF 		bl	HAL_GPIO_WritePin
 1147              	.LVL88:
 609:Src/main.c    **** 
 1148              		.loc 1 609 0
 1149 00d0 0122     		movs	r2, #1
 1150 00d2 8021     		movs	r1, #128
 1151 00d4 2846     		mov	r0, r5
 1152 00d6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1153              	.LVL89:
 1154 00da 98E7     		b	.L70
 1155              	.LVL90:
 1156              	.L88:
 571:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1157              		.loc 1 571 0
 1158 00dc 3D4E     		ldr	r6, .L94+12
 1159 00de 0022     		movs	r2, #0
 1160 00e0 2021     		movs	r1, #32
 1161 00e2 3046     		mov	r0, r6
 1162 00e4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1163              	.LVL91:
 572:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1164              		.loc 1 572 0
 1165 00e8 0022     		movs	r2, #0
 1166 00ea 4021     		movs	r1, #64
 1167 00ec 3046     		mov	r0, r6
 1168 00ee FFF7FEFF 		bl	HAL_GPIO_WritePin
 1169              	.LVL92:
 573:Src/main.c    **** 		}
 1170              		.loc 1 573 0
 1171 00f2 0022     		movs	r2, #0
 1172 00f4 8021     		movs	r1, #128
ARM GAS  /tmp/ccsT0kLX.s 			page 35


 1173 00f6 3046     		mov	r0, r6
 1174 00f8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1175              	.LVL93:
 1176 00fc D3E7     		b	.L71
 1177              	.L89:
 578:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1178              		.loc 1 578 0
 1179 00fe 354E     		ldr	r6, .L94+12
 1180 0100 0022     		movs	r2, #0
 1181 0102 2021     		movs	r1, #32
 1182 0104 3046     		mov	r0, r6
 1183 0106 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1184              	.LVL94:
 579:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 1185              		.loc 1 579 0
 1186 010a 0022     		movs	r2, #0
 1187 010c 4021     		movs	r1, #64
 1188 010e 3046     		mov	r0, r6
 1189 0110 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1190              	.LVL95:
 580:Src/main.c    **** 
 1191              		.loc 1 580 0
 1192 0114 0122     		movs	r2, #1
 1193 0116 8021     		movs	r1, #128
 1194 0118 3046     		mov	r0, r6
 1195 011a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1196              	.LVL96:
 1197 011e C4E7     		b	.L72
 1198              	.L90:
 586:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1199              		.loc 1 586 0
 1200 0120 2C4E     		ldr	r6, .L94+12
 1201 0122 0022     		movs	r2, #0
 1202 0124 2021     		movs	r1, #32
 1203 0126 3046     		mov	r0, r6
 1204 0128 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1205              	.LVL97:
 587:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 1206              		.loc 1 587 0
 1207 012c 0022     		movs	r2, #0
 1208 012e 4021     		movs	r1, #64
 1209 0130 3046     		mov	r0, r6
 1210 0132 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1211              	.LVL98:
 588:Src/main.c    **** 
 1212              		.loc 1 588 0
 1213 0136 0122     		movs	r2, #1
 1214 0138 8021     		movs	r1, #128
 1215 013a 3046     		mov	r0, r6
 1216 013c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1217              	.LVL99:
 1218 0140 B5E7     		b	.L73
 1219              	.L91:
 593:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1220              		.loc 1 593 0
 1221 0142 244E     		ldr	r6, .L94+12
 1222 0144 0122     		movs	r2, #1
ARM GAS  /tmp/ccsT0kLX.s 			page 36


 1223 0146 2021     		movs	r1, #32
 1224 0148 3046     		mov	r0, r6
 1225 014a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1226              	.LVL100:
 594:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1227              		.loc 1 594 0
 1228 014e 0022     		movs	r2, #0
 1229 0150 4021     		movs	r1, #64
 1230 0152 3046     		mov	r0, r6
 1231 0154 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1232              	.LVL101:
 595:Src/main.c    **** 
 1233              		.loc 1 595 0
 1234 0158 0022     		movs	r2, #0
 1235 015a 8021     		movs	r1, #128
 1236 015c 3046     		mov	r0, r6
 1237 015e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1238              	.LVL102:
 1239 0162 A6E7     		b	.L74
 1240              	.L92:
 600:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1241              		.loc 1 600 0
 1242 0164 1B4E     		ldr	r6, .L94+12
 1243 0166 0122     		movs	r2, #1
 1244 0168 2021     		movs	r1, #32
 1245 016a 3046     		mov	r0, r6
 1246 016c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1247              	.LVL103:
 601:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1248              		.loc 1 601 0
 1249 0170 0022     		movs	r2, #0
 1250 0172 4021     		movs	r1, #64
 1251 0174 3046     		mov	r0, r6
 1252 0176 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1253              	.LVL104:
 602:Src/main.c    **** 
 1254              		.loc 1 602 0
 1255 017a 0022     		movs	r2, #0
 1256 017c 8021     		movs	r1, #128
 1257 017e 3046     		mov	r0, r6
 1258 0180 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1259              	.LVL105:
 1260 0184 97E7     		b	.L75
 1261              	.LVL106:
 1262              	.L81:
 1263              	.LBE5:
 1264              	.LBB6:
 618:Src/main.c    **** 
 1265              		.loc 1 618 0
 1266 0186 124B     		ldr	r3, .L94+8
 1267 0188 9C78     		ldrb	r4, [r3, #2]	@ zero_extendqisi2
 1268              	.LVL107:
 1269 018a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1270 018c 04EB0324 		add	r4, r4, r3, lsl #8
 1271 0190 A4B2     		uxth	r4, r4
 1272              	.LVL108:
 620:Src/main.c    ****     POT_Data1[1] = 0;
ARM GAS  /tmp/ccsT0kLX.s 			page 37


 1273              		.loc 1 620 0
 1274 0192 312C     		cmp	r4, #49
 1275 0194 0DD9     		bls	.L93
 1276              	.L77:
 626:Src/main.c    ****     POT_Data1[1] = 3;
 1277              		.loc 1 626 0
 1278 0196 312C     		cmp	r4, #49
 1279 0198 7FF63CAF 		bls	.L76
 627:Src/main.c    ****     POT_Data1[0] = 232;
 1280              		.loc 1 627 0
 1281 019c 0F4A     		ldr	r2, .L94+20
 1282 019e 0323     		movs	r3, #3
 1283 01a0 5370     		strb	r3, [r2, #1]
 628:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 1284              		.loc 1 628 0
 1285 01a2 E823     		movs	r3, #232
 1286 01a4 1370     		strb	r3, [r2]
 629:Src/main.c    ****   }
 1287              		.loc 1 629 0
 1288 01a6 0E4B     		ldr	r3, .L94+24
 1289 01a8 0E49     		ldr	r1, .L94+28
 1290 01aa 0F48     		ldr	r0, .L94+32
 1291 01ac FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1292              	.LVL109:
 1293 01b0 30E7     		b	.L76
 1294              	.L93:
 621:Src/main.c    ****     POT_Data1[0] = 0;
 1295              		.loc 1 621 0
 1296 01b2 0A4A     		ldr	r2, .L94+20
 1297 01b4 0023     		movs	r3, #0
 1298 01b6 5370     		strb	r3, [r2, #1]
 622:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 1299              		.loc 1 622 0
 1300 01b8 1370     		strb	r3, [r2]
 623:Src/main.c    ****   }
 1301              		.loc 1 623 0
 1302 01ba 094B     		ldr	r3, .L94+24
 1303 01bc 0949     		ldr	r1, .L94+28
 1304 01be 0A48     		ldr	r0, .L94+32
 1305 01c0 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1306              	.LVL110:
 1307 01c4 E7E7     		b	.L77
 1308              	.L95:
 1309 01c6 00BF     		.align	2
 1310              	.L94:
 1311 01c8 00000000 		.word	RxHeader
 1312 01cc 00000000 		.word	CAN_flag
 1313 01d0 00000000 		.word	RxData
 1314 01d4 000C0140 		.word	1073810432
 1315 01d8 00080140 		.word	1073809408
 1316 01dc 00000000 		.word	POT_Data1
 1317 01e0 00000000 		.word	TxMailbox
 1318 01e4 00000000 		.word	POT_Txheader1
 1319 01e8 00000000 		.word	hcan
 1320              	.LBE6:
 1321              		.cfi_endproc
 1322              	.LFE72:
ARM GAS  /tmp/ccsT0kLX.s 			page 38


 1324              		.section	.text.main,"ax",%progbits
 1325              		.align	1
 1326              		.global	main
 1327              		.syntax unified
 1328              		.thumb
 1329              		.thumb_func
 1330              		.fpu softvfp
 1332              	main:
 1333              	.LFB64:
  95:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1334              		.loc 1 95 0
 1335              		.cfi_startproc
 1336              		@ Volatile: function does not return.
 1337              		@ args = 0, pretend = 0, frame = 8
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339 0000 00B5     		push	{lr}
 1340              	.LCFI17:
 1341              		.cfi_def_cfa_offset 4
 1342              		.cfi_offset 14, -4
 1343 0002 83B0     		sub	sp, sp, #12
 1344              	.LCFI18:
 1345              		.cfi_def_cfa_offset 16
 103:Src/main.c    **** 
 1346              		.loc 1 103 0
 1347 0004 FFF7FEFF 		bl	HAL_Init
 1348              	.LVL111:
 110:Src/main.c    **** 
 1349              		.loc 1 110 0
 1350 0008 FFF7FEFF 		bl	SystemClock_Config
 1351              	.LVL112:
 117:Src/main.c    ****   MX_ADC1_Init();
 1352              		.loc 1 117 0
 1353 000c FFF7FEFF 		bl	MX_GPIO_Init
 1354              	.LVL113:
 118:Src/main.c    ****   MX_CAN_Init();
 1355              		.loc 1 118 0
 1356 0010 FFF7FEFF 		bl	MX_ADC1_Init
 1357              	.LVL114:
 119:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1358              		.loc 1 119 0
 1359 0014 FFF7FEFF 		bl	MX_CAN_Init
 1360              	.LVL115:
 1361 0018 17E0     		b	.L98
 1362              	.L97:
 1363              	.LBB7:
 138:Src/main.c    **** 	POT_interpret(pot_position);
 1364              		.loc 1 138 0
 1365 001a 6846     		mov	r0, sp
 1366 001c FFF7FEFF 		bl	POT_read
 1367              	.LVL116:
 139:Src/main.c    **** 
 1368              		.loc 1 139 0
 1369 0020 6846     		mov	r0, sp
 1370 0022 FFF7FEFF 		bl	POT_interpret
 1371              	.LVL117:
 142:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &POT_Txheader, POT_Data, &TxMailbox);
 1372              		.loc 1 142 0
ARM GAS  /tmp/ccsT0kLX.s 			page 39


 1373 0026 0D4D     		ldr	r5, .L100
 1374 0028 0D4C     		ldr	r4, .L100+4
 1375 002a 2B46     		mov	r3, r5
 1376 002c 0D4A     		ldr	r2, .L100+8
 1377 002e 0E49     		ldr	r1, .L100+12
 1378 0030 2046     		mov	r0, r4
 1379 0032 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1380              	.LVL118:
 143:Src/main.c    **** 
 1381              		.loc 1 143 0
 1382 0036 2B46     		mov	r3, r5
 1383 0038 0C4A     		ldr	r2, .L100+16
 1384 003a 0D49     		ldr	r1, .L100+20
 1385 003c 2046     		mov	r0, r4
 1386 003e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1387              	.LVL119:
 145:Src/main.c    **** 
 1388              		.loc 1 145 0
 1389 0042 4FF47A70 		mov	r0, #1000
 1390 0046 FFF7FEFF 		bl	HAL_Delay
 1391              	.LVL120:
 1392              	.L98:
 132:Src/main.c    **** 		CAN_interpret();
 1393              		.loc 1 132 0
 1394 004a 0A4B     		ldr	r3, .L100+24
 1395 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1396 004e DBB2     		uxtb	r3, r3
 1397 0050 FF2B     		cmp	r3, #255
 1398 0052 E2D1     		bne	.L97
 133:Src/main.c    **** 
 1399              		.loc 1 133 0
 1400 0054 FFF7FEFF 		bl	CAN_interpret
 1401              	.LVL121:
 1402 0058 DFE7     		b	.L97
 1403              	.L101:
 1404 005a 00BF     		.align	2
 1405              	.L100:
 1406 005c 00000000 		.word	TxMailbox
 1407 0060 00000000 		.word	hcan
 1408 0064 00000000 		.word	POT_data
 1409 0068 00000000 		.word	POT_TxHeader
 1410 006c 00000000 		.word	POT_Data
 1411 0070 00000000 		.word	POT_Txheader
 1412 0074 00000000 		.word	CAN_flag
 1413              	.LBE7:
 1414              		.cfi_endproc
 1415              	.LFE64:
 1417              		.section	.text.Error_Handler,"ax",%progbits
 1418              		.align	1
 1419              		.global	Error_Handler
 1420              		.syntax unified
 1421              		.thumb
 1422              		.thumb_func
 1423              		.fpu softvfp
 1425              	Error_Handler:
 1426              	.LFB73:
 636:Src/main.c    **** 
ARM GAS  /tmp/ccsT0kLX.s 			page 40


 637:Src/main.c    **** }
 638:Src/main.c    **** /* USER CODE END 4 */
 639:Src/main.c    **** 
 640:Src/main.c    **** /**
 641:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 642:Src/main.c    ****   * @retval None
 643:Src/main.c    ****   */
 644:Src/main.c    **** void Error_Handler(void)
 645:Src/main.c    **** {
 1427              		.loc 1 645 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431              		@ link register save eliminated.
 1432 0000 7047     		bx	lr
 1433              		.cfi_endproc
 1434              	.LFE73:
 1436              		.global	pot_threshold
 1437              		.comm	CAN_flag,1,1
 1438              		.comm	TxMailbox,4,4
 1439              		.comm	POT_Data1,8,4
 1440              		.comm	POT_Data,8,4
 1441              		.comm	POT_data,8,4
 1442              		.comm	POT_Txheader1,24,4
 1443              		.comm	POT_Txheader,24,4
 1444              		.comm	POT_TxHeader,24,4
 1445              		.comm	RxData,8,4
 1446              		.comm	RxHeader,28,4
 1447              		.comm	hcan,40,4
 1448              		.global	sConfig
 1449              		.comm	hadc1,48,4
 1450              		.section	.bss.sConfig,"aw",%nobits
 1451              		.align	2
 1452              		.set	.LANCHOR0,. + 0
 1455              	sConfig:
 1456 0000 00000000 		.space	12
 1456      00000000 
 1456      00000000 
 1457              		.section	.data.pot_threshold,"aw",%progbits
 1458              		.align	2
 1459              		.set	.LANCHOR1,. + 0
 1462              	pot_threshold:
 1463 0000 0000     		.short	0
 1464 0002 6702     		.short	615
 1465 0004 0104     		.short	1025
 1466 0006 9B05     		.short	1435
 1467 0008 3507     		.short	1845
 1468 000a CF08     		.short	2255
 1469 000c 690A     		.short	2665
 1470 000e 030C     		.short	3075
 1471 0010 9D0D     		.short	3485
 1472 0012 370F     		.short	3895
 1473 0014 FF0F     		.short	4095
 1474              		.text
 1475              	.Letext0:
 1476              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1477              		.file 3 "/usr/include/newlib/sys/_stdint.h"
ARM GAS  /tmp/ccsT0kLX.s 			page 41


 1478              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1479              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1480              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1481              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1482              		.file 8 "/usr/include/newlib/sys/lock.h"
 1483              		.file 9 "/usr/include/newlib/sys/_types.h"
 1484              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1485              		.file 11 "/usr/include/newlib/sys/reent.h"
 1486              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1487              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1488              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1489              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1490              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1491              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1492              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1493              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccsT0kLX.s 			page 42


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccsT0kLX.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccsT0kLX.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccsT0kLX.s:121    .text.MX_GPIO_Init:0000000000000088 $d
     /tmp/ccsT0kLX.s:128    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccsT0kLX.s:134    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccsT0kLX.s:220    .text.MX_ADC1_Init:0000000000000064 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccsT0kLX.s:227    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccsT0kLX.s:233    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccsT0kLX.s:362    .text.MX_CAN_Init:000000000000008c $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 POT_TxHeader
                            *COM*:0000000000000018 POT_Txheader
                            *COM*:0000000000000018 POT_Txheader1
     /tmp/ccsT0kLX.s:371    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccsT0kLX.s:378    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccsT0kLX.s:458    .text.POT_read:0000000000000000 $t
     /tmp/ccsT0kLX.s:465    .text.POT_read:0000000000000000 POT_read
     /tmp/ccsT0kLX.s:611    .text.POT_read:00000000000000d4 $d
     /tmp/ccsT0kLX.s:617    .text.POT_interpret:0000000000000000 $t
     /tmp/ccsT0kLX.s:624    .text.POT_interpret:0000000000000000 POT_interpret
     /tmp/ccsT0kLX.s:903    .text.POT_interpret:0000000000000174 $d
                            *COM*:0000000000000008 POT_data
                            *COM*:0000000000000008 POT_Data
     /tmp/ccsT0kLX.s:912    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccsT0kLX.s:919    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccsT0kLX.s:949    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000018 $d
                            *COM*:0000000000000008 RxData
                            *COM*:000000000000001c RxHeader
                            *COM*:0000000000000001 CAN_flag
     /tmp/ccsT0kLX.s:957    .text.CAN_interpret:0000000000000000 $t
     /tmp/ccsT0kLX.s:964    .text.CAN_interpret:0000000000000000 CAN_interpret
     /tmp/ccsT0kLX.s:1311   .text.CAN_interpret:00000000000001c8 $d
                            *COM*:0000000000000008 POT_Data1
                            *COM*:0000000000000004 TxMailbox
     /tmp/ccsT0kLX.s:1325   .text.main:0000000000000000 $t
     /tmp/ccsT0kLX.s:1332   .text.main:0000000000000000 main
     /tmp/ccsT0kLX.s:1406   .text.main:000000000000005c $d
     /tmp/ccsT0kLX.s:1418   .text.Error_Handler:0000000000000000 $t
     /tmp/ccsT0kLX.s:1425   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccsT0kLX.s:1462   .data.pot_threshold:0000000000000000 pot_threshold
     /tmp/ccsT0kLX.s:1455   .bss.sConfig:0000000000000000 sConfig
     /tmp/ccsT0kLX.s:1451   .bss.sConfig:0000000000000000 $d
     /tmp/ccsT0kLX.s:1458   .data.pot_threshold:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
ARM GAS  /tmp/ccsT0kLX.s 			page 43


memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_CAN_GetRxMessage
HAL_CAN_AddTxMessage
HAL_Init
HAL_Delay

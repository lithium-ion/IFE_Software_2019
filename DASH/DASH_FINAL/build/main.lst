ARM GAS  /tmp/ccKiGPfC.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB70:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "stdbool.h"
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccKiGPfC.s 			page 2


  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** #define DASH_CAN_ID			0x00F
  37:Src/main.c    **** #define RINEHARTCUR_CAN_ID			0x064
  38:Src/main.c    **** #define FAULTS				0x0D0
  39:Src/main.c    **** #define PRECHARGE			0x0D1
  40:Src/main.c    **** #define ENABLE_SIG		0x0D2
  41:Src/main.c    **** /* USER CODE END PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  44:Src/main.c    **** /* USER CODE BEGIN PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* USER CODE END PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  49:Src/main.c    **** ADC_HandleTypeDef hadc1;
  50:Src/main.c    **** ADC_ChannelConfTypeDef sConfig = {0};
  51:Src/main.c    **** CAN_HandleTypeDef hcan;
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN PV */
  54:Src/main.c    **** 
  55:Src/main.c    **** CAN_RxHeaderTypeDef   	RxHeader;
  56:Src/main.c    **** uint8_t               	RxData[8];
  57:Src/main.c    **** 
  58:Src/main.c    **** CAN_TxHeaderTypeDef   	POT_TxHeader;
  59:Src/main.c    **** CAN_TxHeaderTypeDef     POT_Txheader;
  60:Src/main.c    **** uint8_t               	POT_data[8];
  61:Src/main.c    **** uint8_t               	POT_Data[8];
  62:Src/main.c    **** uint32_t              	TxMailbox;
  63:Src/main.c    **** 
  64:Src/main.c    **** volatile char					CAN_flag;
  65:Src/main.c    **** 
  66:Src/main.c    **** uint16_t				pot_threshold[11] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE END PV */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  71:Src/main.c    **** void SystemClock_Config(void);
  72:Src/main.c    **** static void MX_GPIO_Init(void);
  73:Src/main.c    **** static void MX_ADC1_Init(void);
  74:Src/main.c    **** static void MX_CAN_Init(void);
  75:Src/main.c    **** /* USER CODE BEGIN PFP */
  76:Src/main.c    **** void POT_read(uint16_t pot_values[4]);
  77:Src/main.c    **** void CAN_interpret(void);
  78:Src/main.c    **** void  POT_interpret(uint16_t pot_values[4]);
  79:Src/main.c    **** /* USER CODE END PFP */
  80:Src/main.c    **** 
  81:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  82:Src/main.c    **** /* USER CODE BEGIN 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE END 0 */
  85:Src/main.c    **** 
  86:Src/main.c    **** /**
  87:Src/main.c    ****   * @brief  The application entry point.
  88:Src/main.c    ****   * @retval int
  89:Src/main.c    ****   */
  90:Src/main.c    **** int main(void)
  91:Src/main.c    **** {
ARM GAS  /tmp/ccKiGPfC.s 			page 3


  92:Src/main.c    ****   /* USER CODE BEGIN 1 */
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* USER CODE END 1 */
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  99:Src/main.c    ****   HAL_Init();
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE BEGIN Init */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE END Init */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* Configure the system clock */
 106:Src/main.c    ****   SystemClock_Config();
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* USER CODE END SysInit */
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* Initialize all configured peripherals */
 113:Src/main.c    ****   MX_GPIO_Init();
 114:Src/main.c    ****   MX_ADC1_Init();
 115:Src/main.c    ****   MX_CAN_Init();
 116:Src/main.c    ****   /* USER CODE BEGIN 2 */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE END 2 */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* Infinite loop */
 121:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 122:Src/main.c    ****   while (1)
 123:Src/main.c    ****   {
 124:Src/main.c    ****     /* USER CODE END WHILE */
 125:Src/main.c    **** 
 126:Src/main.c    ****     /* USER CODE BEGIN 3 */
 127:Src/main.c    **** 
 128:Src/main.c    **** 	if (CAN_flag == 0xFF)
 129:Src/main.c    **** 		CAN_interpret();
 130:Src/main.c    **** 
 131:Src/main.c    **** 	//send POT positions CAN message
 132:Src/main.c    **** 
 133:Src/main.c    **** 	uint16_t pot_position[4];
 134:Src/main.c    **** 	POT_read(pot_position);
 135:Src/main.c    **** 	POT_interpret(pot_position);
 136:Src/main.c    **** 
 137:Src/main.c    **** 
 138:Src/main.c    **** 	HAL_CAN_AddTxMessage(&hcan, &POT_TxHeader, POT_data, &TxMailbox);
 139:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &POT_Txheader, POT_Data, &TxMailbox);
 140:Src/main.c    **** 
 141:Src/main.c    **** 	HAL_Delay(1000);
 142:Src/main.c    **** 
 143:Src/main.c    **** 
 144:Src/main.c    ****   }
 145:Src/main.c    ****   /* USER CODE END 3 */
 146:Src/main.c    **** }
 147:Src/main.c    **** 
 148:Src/main.c    **** /**
ARM GAS  /tmp/ccKiGPfC.s 			page 4


 149:Src/main.c    ****   * @brief System Clock Configuration
 150:Src/main.c    ****   * @retval None
 151:Src/main.c    ****   */
 152:Src/main.c    **** void SystemClock_Config(void)
 153:Src/main.c    **** {
 154:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 155:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 156:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 157:Src/main.c    **** 
 158:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 159:Src/main.c    ****   */
 160:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 161:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 162:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 163:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 164:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 165:Src/main.c    ****   {
 166:Src/main.c    ****     Error_Handler();
 167:Src/main.c    ****   }
 168:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 169:Src/main.c    ****   */
 170:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 171:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 172:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 173:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 174:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 175:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 176:Src/main.c    **** 
 177:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 178:Src/main.c    ****   {
 179:Src/main.c    ****     Error_Handler();
 180:Src/main.c    ****   }
 181:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 182:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 183:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 184:Src/main.c    ****   {
 185:Src/main.c    ****     Error_Handler();
 186:Src/main.c    ****   }
 187:Src/main.c    **** }
 188:Src/main.c    **** 
 189:Src/main.c    **** /**
 190:Src/main.c    ****   * @brief ADC1 Initialization Function
 191:Src/main.c    ****   * @param None
 192:Src/main.c    ****   * @retval None
 193:Src/main.c    ****   */
 194:Src/main.c    **** static void MX_ADC1_Init(void)
 195:Src/main.c    **** {
 196:Src/main.c    **** 
 197:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 198:Src/main.c    **** 
 199:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 200:Src/main.c    **** 
 201:Src/main.c    ****   //ADC_ChannelConfTypeDef sConfig = {0};
 202:Src/main.c    **** 
 203:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 204:Src/main.c    **** 
 205:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
ARM GAS  /tmp/ccKiGPfC.s 			page 5


 206:Src/main.c    ****   /** Common config
 207:Src/main.c    ****   */
 208:Src/main.c    ****   hadc1.Instance = ADC1;
 209:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 210:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 211:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 212:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 213:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 214:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 215:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 216:Src/main.c    ****   {
 217:Src/main.c    ****     Error_Handler();
 218:Src/main.c    ****   }
 219:Src/main.c    ****   /** Configure Regular Channel
 220:Src/main.c    ****   */
 221:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 222:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 223:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 224:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 225:Src/main.c    ****   {
 226:Src/main.c    ****     Error_Handler();
 227:Src/main.c    ****   }
 228:Src/main.c    ****   /** Configure Regular Channel
 229:Src/main.c    ****   */
 230:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 231:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 232:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 233:Src/main.c    ****   {
 234:Src/main.c    ****     Error_Handler();
 235:Src/main.c    ****   }
 236:Src/main.c    ****   /** Configure Regular Channel
 237:Src/main.c    ****   */
 238:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_7;
 239:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 240:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 241:Src/main.c    ****   {
 242:Src/main.c    ****     Error_Handler();
 243:Src/main.c    ****   }
 244:Src/main.c    ****   /** Configure Regular Channel
 245:Src/main.c    ****   */
 246:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 247:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 248:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 249:Src/main.c    ****   {
 250:Src/main.c    ****     Error_Handler();
 251:Src/main.c    ****   }
 252:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 253:Src/main.c    **** 
 254:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 255:Src/main.c    **** 
 256:Src/main.c    **** }
 257:Src/main.c    **** 
 258:Src/main.c    **** /**
 259:Src/main.c    ****   * @brief CAN Initialization Function
 260:Src/main.c    ****   * @param None
 261:Src/main.c    ****   * @retval None
 262:Src/main.c    ****   */
ARM GAS  /tmp/ccKiGPfC.s 			page 6


 263:Src/main.c    **** static void MX_CAN_Init(void)
 264:Src/main.c    **** {
 265:Src/main.c    **** 
 266:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 267:Src/main.c    **** 	CAN_FilterTypeDef     sFilterConfig;
 268:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 271:Src/main.c    **** 
 272:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 273:Src/main.c    ****   hcan.Instance = CAN1;
 274:Src/main.c    ****   hcan.Init.Prescaler = 2;
 275:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 276:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 277:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 278:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 279:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 280:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 281:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 282:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 283:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 284:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 285:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 286:Src/main.c    ****   {
 287:Src/main.c    ****     Error_Handler();
 288:Src/main.c    ****   }
 289:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 */
 290:Src/main.c    **** 	POT_TxHeader.StdId = DASH_CAN_ID; 						// CAN standard ID
 291:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 292:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 293:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 294:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 295:Src/main.c    **** 
 296:Src/main.c    ****   POT_Txheader.StdId = RINEHARTCUR_CAN_ID; 						// CAN standard ID
 297:Src/main.c    **** 	POT_Txheader.RTR = CAN_RTR_DATA; 						// CAN frame type
 298:Src/main.c    **** 	POT_Txheader.IDE = CAN_ID_STD; 							// CAN ID type
 299:Src/main.c    **** 	POT_Txheader.DLC = 2; 									// CAN frame length in bytes
 300:Src/main.c    **** 	POT_Txheader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 301:Src/main.c    **** 
 302:Src/main.c    **** 
 303:Src/main.c    **** 	sFilterConfig.FilterBank = 0;							// filter number (0-13)
 304:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 305:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 306:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 307:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 308:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 309:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 310:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 311:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 312:Src/main.c    **** 
 313:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 314:Src/main.c    **** 
 315:Src/main.c    **** 	HAL_CAN_Start(&hcan);
 316:Src/main.c    **** 
 317:Src/main.c    **** 	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 318:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 319:Src/main.c    **** 
ARM GAS  /tmp/ccKiGPfC.s 			page 7


 320:Src/main.c    **** }
 321:Src/main.c    **** 
 322:Src/main.c    **** /**
 323:Src/main.c    ****   * @brief GPIO Initialization Function
 324:Src/main.c    ****   * @param None
 325:Src/main.c    ****   * @retval None
 326:Src/main.c    ****   */
 327:Src/main.c    **** static void MX_GPIO_Init(void)
 328:Src/main.c    **** {
  25              		.loc 1 328 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 86B0     		sub	sp, sp, #24
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 329:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 329 0
  42 0006 0024     		movs	r4, #0
  43 0008 0294     		str	r4, [sp, #8]
  44 000a 0394     		str	r4, [sp, #12]
  45 000c 0494     		str	r4, [sp, #16]
  46 000e 0594     		str	r4, [sp, #20]
  47              	.LBB2:
 330:Src/main.c    **** 
 331:Src/main.c    ****   /* GPIO Ports Clock Enable */
 332:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  48              		.loc 1 332 0
  49 0010 1D4B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F00402 		orr	r2, r2, #4
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F00402 		and	r2, r2, #4
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE2:
  58              	.LBB3:
 333:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  59              		.loc 1 333 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F00802 		orr	r2, r2, #8
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9B69     		ldr	r3, [r3, #24]
  64 002e 03F00803 		and	r3, r3, #8
  65 0032 0193     		str	r3, [sp, #4]
  66 0034 019B     		ldr	r3, [sp, #4]
  67              	.LBE3:
ARM GAS  /tmp/ccKiGPfC.s 			page 8


 334:Src/main.c    **** 
 335:Src/main.c    ****   /*Configure GPIO pin Output Level */
 336:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  68              		.loc 1 336 0
  69 0036 DFF85880 		ldr	r8, .L3+8
  70 003a 2246     		mov	r2, r4
  71 003c 4FF45E71 		mov	r1, #888
  72 0040 4046     		mov	r0, r8
  73 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  74              	.LVL0:
 337:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin, GPIO_PIN_RESET);
 338:Src/main.c    **** 
 339:Src/main.c    ****   /*Configure GPIO pin Output Level */
 340:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin, GPIO_PIN_RESET);
  75              		.loc 1 340 0
  76 0046 114D     		ldr	r5, .L3+4
  77 0048 2246     		mov	r2, r4
  78 004a 4FF4F071 		mov	r1, #480
  79 004e 2846     		mov	r0, r5
  80 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  81              	.LVL1:
 341:Src/main.c    **** 
 342:Src/main.c    ****   /*Configure GPIO pins : CUR_LED_Pin BMS_LED_ON_Pin IMD_LED_ON_Pin BSPD_LED_ON_Pin
 343:Src/main.c    ****                            DRS_LED_Pin TC_LED_Pin */
 344:Src/main.c    ****   GPIO_InitStruct.Pin = CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  82              		.loc 1 344 0
  83 0054 4FF45E73 		mov	r3, #888
  84 0058 0293     		str	r3, [sp, #8]
 345:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin;
 346:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  85              		.loc 1 346 0
  86 005a 0127     		movs	r7, #1
  87 005c 0397     		str	r7, [sp, #12]
 347:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  88              		.loc 1 347 0
  89 005e 0494     		str	r4, [sp, #16]
 348:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  90              		.loc 1 348 0
  91 0060 0226     		movs	r6, #2
  92 0062 0596     		str	r6, [sp, #20]
 349:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  93              		.loc 1 349 0
  94 0064 02A9     		add	r1, sp, #8
  95 0066 4046     		mov	r0, r8
  96 0068 FFF7FEFF 		bl	HAL_GPIO_Init
  97              	.LVL2:
 350:Src/main.c    **** 
 351:Src/main.c    ****   /*Configure GPIO pins : RGB_GREEN_Pin RGB_RED_Pin RGB_BLUE_Pin CUST_LED_Pin */
 352:Src/main.c    ****   GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin;
  98              		.loc 1 352 0
  99 006c 4FF4F073 		mov	r3, #480
 100 0070 0293     		str	r3, [sp, #8]
 353:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 101              		.loc 1 353 0
 102 0072 0397     		str	r7, [sp, #12]
 354:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 103              		.loc 1 354 0
ARM GAS  /tmp/ccKiGPfC.s 			page 9


 104 0074 0494     		str	r4, [sp, #16]
 355:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 105              		.loc 1 355 0
 106 0076 0596     		str	r6, [sp, #20]
 356:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 107              		.loc 1 356 0
 108 0078 02A9     		add	r1, sp, #8
 109 007a 2846     		mov	r0, r5
 110 007c FFF7FEFF 		bl	HAL_GPIO_Init
 111              	.LVL3:
 357:Src/main.c    **** 
 358:Src/main.c    **** }
 112              		.loc 1 358 0
 113 0080 06B0     		add	sp, sp, #24
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 24
 116              		@ sp needed
 117 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 118              	.L4:
 119 0086 00BF     		.align	2
 120              	.L3:
 121 0088 00100240 		.word	1073876992
 122 008c 000C0140 		.word	1073810432
 123 0090 00080140 		.word	1073809408
 124              		.cfi_endproc
 125              	.LFE70:
 127              		.section	.text.MX_ADC1_Init,"ax",%progbits
 128              		.align	1
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu softvfp
 134              	MX_ADC1_Init:
 135              	.LFB68:
 195:Src/main.c    **** 
 136              		.loc 1 195 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 24
 143              		.cfi_offset 3, -24
 144              		.cfi_offset 4, -20
 145              		.cfi_offset 5, -16
 146              		.cfi_offset 6, -12
 147              		.cfi_offset 7, -8
 148              		.cfi_offset 14, -4
 208:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 149              		.loc 1 208 0
 150 0002 184D     		ldr	r5, .L7
 151 0004 184B     		ldr	r3, .L7+4
 152 0006 2B60     		str	r3, [r5]
 209:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 153              		.loc 1 209 0
 154 0008 0026     		movs	r6, #0
 155 000a AE60     		str	r6, [r5, #8]
ARM GAS  /tmp/ccKiGPfC.s 			page 10


 210:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 156              		.loc 1 210 0
 157 000c EE60     		str	r6, [r5, #12]
 211:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 158              		.loc 1 211 0
 159 000e 6E61     		str	r6, [r5, #20]
 212:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 160              		.loc 1 212 0
 161 0010 4FF46023 		mov	r3, #917504
 162 0014 EB61     		str	r3, [r5, #28]
 213:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 163              		.loc 1 213 0
 164 0016 6E60     		str	r6, [r5, #4]
 214:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 165              		.loc 1 214 0
 166 0018 0427     		movs	r7, #4
 167 001a 2F61     		str	r7, [r5, #16]
 215:Src/main.c    ****   {
 168              		.loc 1 215 0
 169 001c 2846     		mov	r0, r5
 170 001e FFF7FEFF 		bl	HAL_ADC_Init
 171              	.LVL4:
 221:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 172              		.loc 1 221 0
 173 0022 124C     		ldr	r4, .L7+8
 174 0024 2660     		str	r6, [r4]
 222:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 175              		.loc 1 222 0
 176 0026 0126     		movs	r6, #1
 177 0028 6660     		str	r6, [r4, #4]
 223:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 178              		.loc 1 223 0
 179 002a A660     		str	r6, [r4, #8]
 224:Src/main.c    ****   {
 180              		.loc 1 224 0
 181 002c 2146     		mov	r1, r4
 182 002e 2846     		mov	r0, r5
 183 0030 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 184              	.LVL5:
 230:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 185              		.loc 1 230 0
 186 0034 2660     		str	r6, [r4]
 231:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 187              		.loc 1 231 0
 188 0036 0223     		movs	r3, #2
 189 0038 6360     		str	r3, [r4, #4]
 232:Src/main.c    ****   {
 190              		.loc 1 232 0
 191 003a 2146     		mov	r1, r4
 192 003c 2846     		mov	r0, r5
 193 003e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 194              	.LVL6:
 238:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 195              		.loc 1 238 0
 196 0042 0723     		movs	r3, #7
 197 0044 2360     		str	r3, [r4]
 239:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/ccKiGPfC.s 			page 11


 198              		.loc 1 239 0
 199 0046 0323     		movs	r3, #3
 200 0048 6360     		str	r3, [r4, #4]
 240:Src/main.c    ****   {
 201              		.loc 1 240 0
 202 004a 2146     		mov	r1, r4
 203 004c 2846     		mov	r0, r5
 204 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 205              	.LVL7:
 246:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 206              		.loc 1 246 0
 207 0052 0923     		movs	r3, #9
 208 0054 2360     		str	r3, [r4]
 247:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 209              		.loc 1 247 0
 210 0056 6760     		str	r7, [r4, #4]
 248:Src/main.c    ****   {
 211              		.loc 1 248 0
 212 0058 2146     		mov	r1, r4
 213 005a 2846     		mov	r0, r5
 214 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 215              	.LVL8:
 256:Src/main.c    **** 
 216              		.loc 1 256 0
 217 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 218              	.L8:
 219 0062 00BF     		.align	2
 220              	.L7:
 221 0064 00000000 		.word	hadc1
 222 0068 00240140 		.word	1073816576
 223 006c 00000000 		.word	.LANCHOR0
 224              		.cfi_endproc
 225              	.LFE68:
 227              		.section	.text.MX_CAN_Init,"ax",%progbits
 228              		.align	1
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu softvfp
 234              	MX_CAN_Init:
 235              	.LFB69:
 264:Src/main.c    **** 
 236              		.loc 1 264 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 40
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240 0000 70B5     		push	{r4, r5, r6, lr}
 241              	.LCFI4:
 242              		.cfi_def_cfa_offset 16
 243              		.cfi_offset 4, -16
 244              		.cfi_offset 5, -12
 245              		.cfi_offset 6, -8
 246              		.cfi_offset 14, -4
 247 0002 8AB0     		sub	sp, sp, #40
 248              	.LCFI5:
 249              		.cfi_def_cfa_offset 56
 273:Src/main.c    ****   hcan.Init.Prescaler = 2;
ARM GAS  /tmp/ccKiGPfC.s 			page 12


 250              		.loc 1 273 0
 251 0004 1E4D     		ldr	r5, .L11
 252 0006 1F4B     		ldr	r3, .L11+4
 253 0008 2B60     		str	r3, [r5]
 274:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 254              		.loc 1 274 0
 255 000a 0226     		movs	r6, #2
 256 000c 6E60     		str	r6, [r5, #4]
 275:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 257              		.loc 1 275 0
 258 000e 0024     		movs	r4, #0
 259 0010 AC60     		str	r4, [r5, #8]
 276:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 260              		.loc 1 276 0
 261 0012 EC60     		str	r4, [r5, #12]
 277:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 262              		.loc 1 277 0
 263 0014 4FF40033 		mov	r3, #131072
 264 0018 2B61     		str	r3, [r5, #16]
 278:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 265              		.loc 1 278 0
 266 001a 4FF44013 		mov	r3, #3145728
 267 001e 6B61     		str	r3, [r5, #20]
 279:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 268              		.loc 1 279 0
 269 0020 2C76     		strb	r4, [r5, #24]
 280:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 270              		.loc 1 280 0
 271 0022 6C76     		strb	r4, [r5, #25]
 281:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 272              		.loc 1 281 0
 273 0024 AC76     		strb	r4, [r5, #26]
 282:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 274              		.loc 1 282 0
 275 0026 EC76     		strb	r4, [r5, #27]
 283:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 276              		.loc 1 283 0
 277 0028 2C77     		strb	r4, [r5, #28]
 284:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 278              		.loc 1 284 0
 279 002a 6C77     		strb	r4, [r5, #29]
 285:Src/main.c    ****   {
 280              		.loc 1 285 0
 281 002c 2846     		mov	r0, r5
 282 002e FFF7FEFF 		bl	HAL_CAN_Init
 283              	.LVL9:
 290:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 284              		.loc 1 290 0
 285 0032 154B     		ldr	r3, .L11+8
 286 0034 0F22     		movs	r2, #15
 287 0036 1A60     		str	r2, [r3]
 291:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 288              		.loc 1 291 0
 289 0038 DC60     		str	r4, [r3, #12]
 292:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 290              		.loc 1 292 0
 291 003a 9C60     		str	r4, [r3, #8]
ARM GAS  /tmp/ccKiGPfC.s 			page 13


 293:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 292              		.loc 1 293 0
 293 003c 0422     		movs	r2, #4
 294 003e 1A61     		str	r2, [r3, #16]
 294:Src/main.c    **** 
 295              		.loc 1 294 0
 296 0040 1C75     		strb	r4, [r3, #20]
 296:Src/main.c    **** 	POT_Txheader.RTR = CAN_RTR_DATA; 						// CAN frame type
 297              		.loc 1 296 0
 298 0042 124B     		ldr	r3, .L11+12
 299 0044 6422     		movs	r2, #100
 300 0046 1A60     		str	r2, [r3]
 297:Src/main.c    **** 	POT_Txheader.IDE = CAN_ID_STD; 							// CAN ID type
 301              		.loc 1 297 0
 302 0048 DC60     		str	r4, [r3, #12]
 298:Src/main.c    **** 	POT_Txheader.DLC = 2; 									// CAN frame length in bytes
 303              		.loc 1 298 0
 304 004a 9C60     		str	r4, [r3, #8]
 299:Src/main.c    **** 	POT_Txheader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 305              		.loc 1 299 0
 306 004c 1E61     		str	r6, [r3, #16]
 300:Src/main.c    **** 
 307              		.loc 1 300 0
 308 004e 1C75     		strb	r4, [r3, #20]
 303:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 309              		.loc 1 303 0
 310 0050 0594     		str	r4, [sp, #20]
 304:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 311              		.loc 1 304 0
 312 0052 0694     		str	r4, [sp, #24]
 305:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 313              		.loc 1 305 0
 314 0054 0123     		movs	r3, #1
 315 0056 0793     		str	r3, [sp, #28]
 306:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 316              		.loc 1 306 0
 317 0058 0094     		str	r4, [sp]
 307:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 318              		.loc 1 307 0
 319 005a 0194     		str	r4, [sp, #4]
 308:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 320              		.loc 1 308 0
 321 005c 0294     		str	r4, [sp, #8]
 309:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 322              		.loc 1 309 0
 323 005e 0394     		str	r4, [sp, #12]
 310:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 324              		.loc 1 310 0
 325 0060 0494     		str	r4, [sp, #16]
 311:Src/main.c    **** 
 326              		.loc 1 311 0
 327 0062 0893     		str	r3, [sp, #32]
 313:Src/main.c    **** 
 328              		.loc 1 313 0
 329 0064 6946     		mov	r1, sp
 330 0066 2846     		mov	r0, r5
 331 0068 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
ARM GAS  /tmp/ccKiGPfC.s 			page 14


 332              	.LVL10:
 315:Src/main.c    **** 
 333              		.loc 1 315 0
 334 006c 2846     		mov	r0, r5
 335 006e FFF7FEFF 		bl	HAL_CAN_Start
 336              	.LVL11:
 317:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 337              		.loc 1 317 0
 338 0072 3146     		mov	r1, r6
 339 0074 2846     		mov	r0, r5
 340 0076 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 341              	.LVL12:
 320:Src/main.c    **** 
 342              		.loc 1 320 0
 343 007a 0AB0     		add	sp, sp, #40
 344              	.LCFI6:
 345              		.cfi_def_cfa_offset 16
 346              		@ sp needed
 347 007c 70BD     		pop	{r4, r5, r6, pc}
 348              	.L12:
 349 007e 00BF     		.align	2
 350              	.L11:
 351 0080 00000000 		.word	hcan
 352 0084 00640040 		.word	1073767424
 353 0088 00000000 		.word	POT_TxHeader
 354 008c 00000000 		.word	POT_Txheader
 355              		.cfi_endproc
 356              	.LFE69:
 358              		.section	.text.SystemClock_Config,"ax",%progbits
 359              		.align	1
 360              		.global	SystemClock_Config
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 364              		.fpu softvfp
 366              	SystemClock_Config:
 367              	.LFB67:
 153:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 368              		.loc 1 153 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 80
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372 0000 30B5     		push	{r4, r5, lr}
 373              	.LCFI7:
 374              		.cfi_def_cfa_offset 12
 375              		.cfi_offset 4, -12
 376              		.cfi_offset 5, -8
 377              		.cfi_offset 14, -4
 378 0002 95B0     		sub	sp, sp, #84
 379              	.LCFI8:
 380              		.cfi_def_cfa_offset 96
 154:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 381              		.loc 1 154 0
 382 0004 2422     		movs	r2, #36
 383 0006 0021     		movs	r1, #0
 384 0008 0BA8     		add	r0, sp, #44
 385 000a FFF7FEFF 		bl	memset
ARM GAS  /tmp/ccKiGPfC.s 			page 15


 386              	.LVL13:
 155:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 387              		.loc 1 155 0
 388 000e 0024     		movs	r4, #0
 389 0010 0594     		str	r4, [sp, #20]
 390 0012 0694     		str	r4, [sp, #24]
 391 0014 0794     		str	r4, [sp, #28]
 392 0016 0894     		str	r4, [sp, #32]
 393 0018 0994     		str	r4, [sp, #36]
 156:Src/main.c    **** 
 394              		.loc 1 156 0
 395 001a 0194     		str	r4, [sp, #4]
 396 001c 0294     		str	r4, [sp, #8]
 397 001e 0394     		str	r4, [sp, #12]
 398 0020 0494     		str	r4, [sp, #16]
 160:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 399              		.loc 1 160 0
 400 0022 0225     		movs	r5, #2
 401 0024 0A95     		str	r5, [sp, #40]
 161:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 402              		.loc 1 161 0
 403 0026 0123     		movs	r3, #1
 404 0028 0E93     		str	r3, [sp, #56]
 162:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 405              		.loc 1 162 0
 406 002a 1023     		movs	r3, #16
 407 002c 0F93     		str	r3, [sp, #60]
 164:Src/main.c    ****   {
 408              		.loc 1 164 0
 409 002e 0AA8     		add	r0, sp, #40
 410 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 411              	.LVL14:
 170:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 412              		.loc 1 170 0
 413 0034 0F23     		movs	r3, #15
 414 0036 0593     		str	r3, [sp, #20]
 172:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 415              		.loc 1 172 0
 416 0038 0694     		str	r4, [sp, #24]
 173:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 417              		.loc 1 173 0
 418 003a 0794     		str	r4, [sp, #28]
 174:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 419              		.loc 1 174 0
 420 003c 0894     		str	r4, [sp, #32]
 175:Src/main.c    **** 
 421              		.loc 1 175 0
 422 003e 0994     		str	r4, [sp, #36]
 177:Src/main.c    ****   {
 423              		.loc 1 177 0
 424 0040 2146     		mov	r1, r4
 425 0042 05A8     		add	r0, sp, #20
 426 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 427              	.LVL15:
 181:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 428              		.loc 1 181 0
 429 0048 0195     		str	r5, [sp, #4]
ARM GAS  /tmp/ccKiGPfC.s 			page 16


 182:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 430              		.loc 1 182 0
 431 004a 0394     		str	r4, [sp, #12]
 183:Src/main.c    ****   {
 432              		.loc 1 183 0
 433 004c 01A8     		add	r0, sp, #4
 434 004e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 435              	.LVL16:
 187:Src/main.c    **** 
 436              		.loc 1 187 0
 437 0052 15B0     		add	sp, sp, #84
 438              	.LCFI9:
 439              		.cfi_def_cfa_offset 12
 440              		@ sp needed
 441 0054 30BD     		pop	{r4, r5, pc}
 442              		.cfi_endproc
 443              	.LFE67:
 445              		.section	.text.POT_read,"ax",%progbits
 446              		.align	1
 447              		.global	POT_read
 448              		.syntax unified
 449              		.thumb
 450              		.thumb_func
 451              		.fpu softvfp
 453              	POT_read:
 454              	.LFB71:
 359:Src/main.c    **** 
 360:Src/main.c    **** 
 361:Src/main.c    **** 
 362:Src/main.c    **** /* USER CODE BEGIN 4 */
 363:Src/main.c    **** void POT_read(uint16_t pot_values[4]) {
 455              		.loc 1 363 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              	.LVL17:
 460 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 461              	.LCFI10:
 462              		.cfi_def_cfa_offset 24
 463              		.cfi_offset 4, -24
 464              		.cfi_offset 5, -20
 465              		.cfi_offset 6, -16
 466              		.cfi_offset 7, -12
 467              		.cfi_offset 8, -8
 468              		.cfi_offset 14, -4
 469 0004 0746     		mov	r7, r0
 364:Src/main.c    **** 	//0 1 7 9
 365:Src/main.c    **** 
 366:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_0;
 470              		.loc 1 366 0
 471 0006 334D     		ldr	r5, .L17
 472 0008 0023     		movs	r3, #0
 473 000a 2B60     		str	r3, [r5]
 367:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 474              		.loc 1 367 0
 475 000c 0126     		movs	r6, #1
 476 000e 6E60     		str	r6, [r5, #4]
ARM GAS  /tmp/ccKiGPfC.s 			page 17


 368:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 477              		.loc 1 368 0
 478 0010 4FF00608 		mov	r8, #6
 479 0014 C5F80880 		str	r8, [r5, #8]
 369:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 480              		.loc 1 369 0
 481 0018 2F4C     		ldr	r4, .L17+4
 482 001a 2946     		mov	r1, r5
 483 001c 2046     		mov	r0, r4
 484              	.LVL18:
 485 001e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 486              	.LVL19:
 370:Src/main.c    **** 
 371:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 487              		.loc 1 371 0
 488 0022 2046     		mov	r0, r4
 489 0024 FFF7FEFF 		bl	HAL_ADC_Start
 490              	.LVL20:
 372:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);		//change timeout to a HAL define
 491              		.loc 1 372 0
 492 0028 4FF47A71 		mov	r1, #1000
 493 002c 2046     		mov	r0, r4
 494 002e FFF7FEFF 		bl	HAL_ADC_PollForConversion
 495              	.LVL21:
 373:Src/main.c    **** 	pot_values[0] = HAL_ADC_GetValue(&hadc1);
 496              		.loc 1 373 0
 497 0032 2046     		mov	r0, r4
 498 0034 FFF7FEFF 		bl	HAL_ADC_GetValue
 499              	.LVL22:
 500 0038 3880     		strh	r0, [r7]	@ movhi
 374:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 501              		.loc 1 374 0
 502 003a 2046     		mov	r0, r4
 503 003c FFF7FEFF 		bl	HAL_ADC_Stop
 504              	.LVL23:
 375:Src/main.c    **** 
 376:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_1;
 505              		.loc 1 376 0
 506 0040 2E60     		str	r6, [r5]
 377:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 507              		.loc 1 377 0
 508 0042 6E60     		str	r6, [r5, #4]
 378:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 509              		.loc 1 378 0
 510 0044 C5F80880 		str	r8, [r5, #8]
 379:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 511              		.loc 1 379 0
 512 0048 2946     		mov	r1, r5
 513 004a 2046     		mov	r0, r4
 514 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 515              	.LVL24:
 380:Src/main.c    **** 
 381:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 516              		.loc 1 381 0
 517 0050 2046     		mov	r0, r4
 518 0052 FFF7FEFF 		bl	HAL_ADC_Start
 519              	.LVL25:
ARM GAS  /tmp/ccKiGPfC.s 			page 18


 382:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 520              		.loc 1 382 0
 521 0056 4FF47A71 		mov	r1, #1000
 522 005a 2046     		mov	r0, r4
 523 005c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 524              	.LVL26:
 383:Src/main.c    **** 	pot_values[1] = HAL_ADC_GetValue(&hadc1);
 525              		.loc 1 383 0
 526 0060 2046     		mov	r0, r4
 527 0062 FFF7FEFF 		bl	HAL_ADC_GetValue
 528              	.LVL27:
 529 0066 7880     		strh	r0, [r7, #2]	@ movhi
 384:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 530              		.loc 1 384 0
 531 0068 2046     		mov	r0, r4
 532 006a FFF7FEFF 		bl	HAL_ADC_Stop
 533              	.LVL28:
 385:Src/main.c    **** 
 386:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_7;
 534              		.loc 1 386 0
 535 006e 0723     		movs	r3, #7
 536 0070 2B60     		str	r3, [r5]
 387:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 537              		.loc 1 387 0
 538 0072 6E60     		str	r6, [r5, #4]
 388:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 539              		.loc 1 388 0
 540 0074 C5F80880 		str	r8, [r5, #8]
 389:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 541              		.loc 1 389 0
 542 0078 2946     		mov	r1, r5
 543 007a 2046     		mov	r0, r4
 544 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 545              	.LVL29:
 390:Src/main.c    **** 
 391:Src/main.c    **** 
 392:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 546              		.loc 1 392 0
 547 0080 2046     		mov	r0, r4
 548 0082 FFF7FEFF 		bl	HAL_ADC_Start
 549              	.LVL30:
 393:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 550              		.loc 1 393 0
 551 0086 4FF47A71 		mov	r1, #1000
 552 008a 2046     		mov	r0, r4
 553 008c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 554              	.LVL31:
 394:Src/main.c    **** 	pot_values[2] = HAL_ADC_GetValue(&hadc1);
 555              		.loc 1 394 0
 556 0090 2046     		mov	r0, r4
 557 0092 FFF7FEFF 		bl	HAL_ADC_GetValue
 558              	.LVL32:
 559 0096 B880     		strh	r0, [r7, #4]	@ movhi
 395:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 560              		.loc 1 395 0
 561 0098 2046     		mov	r0, r4
 562 009a FFF7FEFF 		bl	HAL_ADC_Stop
ARM GAS  /tmp/ccKiGPfC.s 			page 19


 563              	.LVL33:
 396:Src/main.c    **** 
 397:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_9;
 564              		.loc 1 397 0
 565 009e 0923     		movs	r3, #9
 566 00a0 2B60     		str	r3, [r5]
 398:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 567              		.loc 1 398 0
 568 00a2 6E60     		str	r6, [r5, #4]
 399:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 569              		.loc 1 399 0
 570 00a4 C5F80880 		str	r8, [r5, #8]
 400:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 571              		.loc 1 400 0
 572 00a8 2946     		mov	r1, r5
 573 00aa 2046     		mov	r0, r4
 574 00ac FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 575              	.LVL34:
 401:Src/main.c    **** 
 402:Src/main.c    **** 
 403:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 576              		.loc 1 403 0
 577 00b0 2046     		mov	r0, r4
 578 00b2 FFF7FEFF 		bl	HAL_ADC_Start
 579              	.LVL35:
 404:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 580              		.loc 1 404 0
 581 00b6 4FF47A71 		mov	r1, #1000
 582 00ba 2046     		mov	r0, r4
 583 00bc FFF7FEFF 		bl	HAL_ADC_PollForConversion
 584              	.LVL36:
 405:Src/main.c    **** 	pot_values[3] = HAL_ADC_GetValue(&hadc1);
 585              		.loc 1 405 0
 586 00c0 2046     		mov	r0, r4
 587 00c2 FFF7FEFF 		bl	HAL_ADC_GetValue
 588              	.LVL37:
 589 00c6 F880     		strh	r0, [r7, #6]	@ movhi
 406:Src/main.c    **** 
 407:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 590              		.loc 1 407 0
 591 00c8 2046     		mov	r0, r4
 592 00ca FFF7FEFF 		bl	HAL_ADC_Stop
 593              	.LVL38:
 408:Src/main.c    **** 
 409:Src/main.c    **** }
 594              		.loc 1 409 0
 595 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 596              	.LVL39:
 597              	.L18:
 598 00d2 00BF     		.align	2
 599              	.L17:
 600 00d4 00000000 		.word	.LANCHOR0
 601 00d8 00000000 		.word	hadc1
 602              		.cfi_endproc
 603              	.LFE71:
 605              		.section	.text.POT_interpret,"ax",%progbits
 606              		.align	1
ARM GAS  /tmp/ccKiGPfC.s 			page 20


 607              		.global	POT_interpret
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 611              		.fpu softvfp
 613              	POT_interpret:
 614              	.LFB72:
 410:Src/main.c    **** 
 411:Src/main.c    **** void POT_interpret(uint16_t pot_values[4]) {
 615              		.loc 1 411 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 8
 618              		@ frame_needed = 0, uses_anonymous_args = 0
 619              	.LVL40:
 620 0000 30B5     		push	{r4, r5, lr}
 621              	.LCFI11:
 622              		.cfi_def_cfa_offset 12
 623              		.cfi_offset 4, -12
 624              		.cfi_offset 5, -8
 625              		.cfi_offset 14, -4
 626 0002 83B0     		sub	sp, sp, #12
 627              	.LCFI12:
 628              		.cfi_def_cfa_offset 24
 629              	.LVL41:
 412:Src/main.c    **** 
 413:Src/main.c    **** 	uint8_t pot_pos[4];
 414:Src/main.c    **** 	uint8_t i, j;
 415:Src/main.c    **** 
 416:Src/main.c    **** 	for (i = 0; i < 4; i++) {
 630              		.loc 1 416 0
 631 0004 0024     		movs	r4, #0
 632 0006 1FE0     		b	.L20
 633              	.LVL42:
 634              	.L21:
 417:Src/main.c    **** 
 418:Src/main.c    **** 		for (j = 0; j < 10; j++) {
 635              		.loc 1 418 0 discriminator 2
 636 0008 0133     		adds	r3, r3, #1
 637              	.LVL43:
 638 000a DBB2     		uxtb	r3, r3
 639              	.LVL44:
 640              	.L23:
 641              		.loc 1 418 0 is_stmt 0 discriminator 1
 642 000c 092B     		cmp	r3, #9
 643 000e 13D8     		bhi	.L44
 419:Src/main.c    **** 
 420:Src/main.c    **** 			//uint16_t pot_threshold[12] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
 421:Src/main.c    **** 			if ((pot_values[i] > pot_threshold[j]) && (pot_values[i] <= pot_threshold[j + 1]))
 644              		.loc 1 421 0 is_stmt 1
 645 0010 30F81420 		ldrh	r2, [r0, r4, lsl #1]
 646 0014 5749     		ldr	r1, .L55
 647 0016 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 648 001a 8A42     		cmp	r2, r1
 649 001c F4D9     		bls	.L21
 650              		.loc 1 421 0 is_stmt 0 discriminator 1
 651 001e 591C     		adds	r1, r3, #1
 652 0020 544D     		ldr	r5, .L55
ARM GAS  /tmp/ccKiGPfC.s 			page 21


 653 0022 35F81110 		ldrh	r1, [r5, r1, lsl #1]
 654 0026 8A42     		cmp	r2, r1
 655 0028 EED8     		bhi	.L21
 422:Src/main.c    **** 				pot_pos[i] = 10 - (j + 1); // pot_pos[i] = 0 is ~3.3V, pot_pos[i] = 1 is ~3V, etc.
 656              		.loc 1 422 0 is_stmt 1
 657 002a C3F10902 		rsb	r2, r3, #9
 658 002e 02A9     		add	r1, sp, #8
 659 0030 2144     		add	r1, r1, r4
 660 0032 01F8042C 		strb	r2, [r1, #-4]
 661 0036 E7E7     		b	.L21
 662              	.L44:
 423:Src/main.c    **** 			}
 424:Src/main.c    **** 
 425:Src/main.c    **** 		POT_data[i] = pot_pos[i];
 663              		.loc 1 425 0 discriminator 2
 664 0038 02AB     		add	r3, sp, #8
 665              	.LVL45:
 666 003a 2344     		add	r3, r3, r4
 667 003c 13F8042C 		ldrb	r2, [r3, #-4]	@ zero_extendqisi2
 668 0040 4D4B     		ldr	r3, .L55+4
 669 0042 1A55     		strb	r2, [r3, r4]
 416:Src/main.c    **** 
 670              		.loc 1 416 0 discriminator 2
 671 0044 0134     		adds	r4, r4, #1
 672              	.LVL46:
 673 0046 E4B2     		uxtb	r4, r4
 674              	.LVL47:
 675              	.L20:
 416:Src/main.c    **** 
 676              		.loc 1 416 0 is_stmt 0 discriminator 1
 677 0048 032C     		cmp	r4, #3
 678 004a 01D8     		bhi	.L45
 418:Src/main.c    **** 
 679              		.loc 1 418 0 is_stmt 1
 680 004c 0023     		movs	r3, #0
 681 004e DDE7     		b	.L23
 682              	.L45:
 426:Src/main.c    **** 		//POT_data[0] = 0x00;
 427:Src/main.c    **** 
 428:Src/main.c    **** 	}
 429:Src/main.c    **** 
 430:Src/main.c    **** if (pot_pos[1] == 0){
 683              		.loc 1 430 0
 684 0050 9DF80540 		ldrb	r4, [sp, #5]	@ zero_extendqisi2
 685              	.LVL48:
 686 0054 5CBB     		cbnz	r4, .L24
 431:Src/main.c    **** 	POT_Data[1] = 1;
 687              		.loc 1 431 0
 688 0056 494B     		ldr	r3, .L55+8
 689 0058 0122     		movs	r2, #1
 690 005a 5A70     		strb	r2, [r3, #1]
 432:Src/main.c    ****   POT_Data[0] = 244;
 691              		.loc 1 432 0
 692 005c F422     		movs	r2, #244
 693 005e 1A70     		strb	r2, [r3]
 694              	.L25:
 433:Src/main.c    ****   }
ARM GAS  /tmp/ccKiGPfC.s 			page 22


 434:Src/main.c    **** 
 435:Src/main.c    **** else if (pot_pos[1] == 1){
 436:Src/main.c    ****   	POT_Data[1] = 3;
 437:Src/main.c    ****     POT_Data[0] = 232;
 438:Src/main.c    ****   }
 439:Src/main.c    **** 
 440:Src/main.c    **** else if (pot_pos[1] == 2){
 441:Src/main.c    ****     	POT_Data[1] = 4;
 442:Src/main.c    ****       POT_Data[0] = 176;
 443:Src/main.c    ****   }
 444:Src/main.c    **** 
 445:Src/main.c    **** else if (pot_pos[1] == 3){
 446:Src/main.c    ****     	POT_Data[1] = 5;
 447:Src/main.c    ****       POT_Data[0] = 70;
 448:Src/main.c    ****   }
 449:Src/main.c    **** 
 450:Src/main.c    **** else if (pot_pos[1] == 4){
 451:Src/main.c    ****       	POT_Data[1] = 5;
 452:Src/main.c    ****         POT_Data[0] = 220;
 453:Src/main.c    ****   }
 454:Src/main.c    **** 
 455:Src/main.c    **** else if (pot_pos[1] == 5){
 456:Src/main.c    ****         	POT_Data[1] = 6;
 457:Src/main.c    ****           POT_Data[0] = 114;
 458:Src/main.c    ****   }
 459:Src/main.c    **** 
 460:Src/main.c    **** else if (pot_pos[1] == 6){
 461:Src/main.c    ****     	POT_Data[1] = 7;
 462:Src/main.c    ****       POT_Data[0] = 8;
 463:Src/main.c    ****   }
 464:Src/main.c    **** 
 465:Src/main.c    **** else if (pot_pos[1] == 7){
 466:Src/main.c    ****     	POT_Data[1] = 7;
 467:Src/main.c    ****       POT_Data[0] = 158;
 468:Src/main.c    ****   }
 469:Src/main.c    **** 
 470:Src/main.c    **** else if (pot_pos[1] == 8){
 471:Src/main.c    ****     	POT_Data[1] = 8;
 472:Src/main.c    ****       POT_Data[0] = 52;
 473:Src/main.c    ****   }
 474:Src/main.c    **** 
 475:Src/main.c    **** else if (pot_pos[1] == 9){
 476:Src/main.c    ****     	POT_Data[1] = 8;
 477:Src/main.c    ****       POT_Data[0] = 202;
 478:Src/main.c    ****   }
 479:Src/main.c    **** 
 480:Src/main.c    **** 	if (pot_pos[0] != 0) // if CURRENT_POT is in any position other than first, turn on CUR_LED
 695              		.loc 1 480 0
 696 0060 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 697 0064 002B     		cmp	r3, #0
 698 0066 6AD0     		beq	.L34
 481:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_SET);
 699              		.loc 1 481 0
 700 0068 0122     		movs	r2, #1
 701 006a 4FF48071 		mov	r1, #256
 702 006e 4448     		ldr	r0, .L55+12
 703              	.LVL49:
ARM GAS  /tmp/ccKiGPfC.s 			page 23


 704 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 705              	.LVL50:
 706              	.L35:
 482:Src/main.c    ****   else
 483:Src/main.c    ****   	HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_RESET);
 484:Src/main.c    **** 
 485:Src/main.c    **** 	if (pot_pos[1] != 0) // if CUSTOM_POT is in any position other than first, turn on CUST_LED
 707              		.loc 1 485 0
 708 0074 002C     		cmp	r4, #0
 709 0076 69D0     		beq	.L36
 486:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_SET);
 710              		.loc 1 486 0
 711 0078 0122     		movs	r2, #1
 712 007a 0821     		movs	r1, #8
 713 007c 4148     		ldr	r0, .L55+16
 714 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 715              	.LVL51:
 716              	.L37:
 487:Src/main.c    **** 	else
 488:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_RESET);
 489:Src/main.c    **** 
 490:Src/main.c    **** 	if (pot_pos[2] != 0) // if TC_POT is in any position other than first, turn on TC_LED
 717              		.loc 1 490 0
 718 0082 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 719 0086 002B     		cmp	r3, #0
 720 0088 66D0     		beq	.L38
 491:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_SET);
 721              		.loc 1 491 0
 722 008a 0122     		movs	r2, #1
 723 008c 4FF40071 		mov	r1, #512
 724 0090 3C48     		ldr	r0, .L55+16
 725 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 726              	.LVL52:
 727              	.L39:
 492:Src/main.c    **** 	else
 493:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_RESET);
 494:Src/main.c    **** 
 495:Src/main.c    **** 	if (pot_pos[3] != 0) // if DRS_POT is in any position other than first, turn on DRS_LED
 728              		.loc 1 495 0
 729 0096 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 730 009a 002B     		cmp	r3, #0
 731 009c 63D1     		bne	.L46
 496:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_SET);
 497:Src/main.c    **** 	else
 498:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_RESET);
 732              		.loc 1 498 0
 733 009e 0022     		movs	r2, #0
 734 00a0 4FF48071 		mov	r1, #256
 735 00a4 3748     		ldr	r0, .L55+16
 736 00a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 737              	.LVL53:
 738              	.L19:
 499:Src/main.c    **** 
 500:Src/main.c    **** }
 739              		.loc 1 500 0
 740 00aa 03B0     		add	sp, sp, #12
 741              	.LCFI13:
ARM GAS  /tmp/ccKiGPfC.s 			page 24


 742              		.cfi_remember_state
 743              		.cfi_def_cfa_offset 12
 744              		@ sp needed
 745 00ac 30BD     		pop	{r4, r5, pc}
 746              	.LVL54:
 747              	.L24:
 748              	.LCFI14:
 749              		.cfi_restore_state
 435:Src/main.c    ****   	POT_Data[1] = 3;
 750              		.loc 1 435 0
 751 00ae 012C     		cmp	r4, #1
 752 00b0 15D0     		beq	.L47
 440:Src/main.c    ****     	POT_Data[1] = 4;
 753              		.loc 1 440 0
 754 00b2 022C     		cmp	r4, #2
 755 00b4 19D0     		beq	.L48
 445:Src/main.c    ****     	POT_Data[1] = 5;
 756              		.loc 1 445 0
 757 00b6 032C     		cmp	r4, #3
 758 00b8 1DD0     		beq	.L49
 450:Src/main.c    ****       	POT_Data[1] = 5;
 759              		.loc 1 450 0
 760 00ba 042C     		cmp	r4, #4
 761 00bc 21D0     		beq	.L50
 455:Src/main.c    ****         	POT_Data[1] = 6;
 762              		.loc 1 455 0
 763 00be 052C     		cmp	r4, #5
 764 00c0 25D0     		beq	.L51
 460:Src/main.c    ****     	POT_Data[1] = 7;
 765              		.loc 1 460 0
 766 00c2 062C     		cmp	r4, #6
 767 00c4 29D0     		beq	.L52
 465:Src/main.c    ****     	POT_Data[1] = 7;
 768              		.loc 1 465 0
 769 00c6 072C     		cmp	r4, #7
 770 00c8 2DD0     		beq	.L53
 470:Src/main.c    ****     	POT_Data[1] = 8;
 771              		.loc 1 470 0
 772 00ca 082C     		cmp	r4, #8
 773 00cc 31D0     		beq	.L54
 475:Src/main.c    ****     	POT_Data[1] = 8;
 774              		.loc 1 475 0
 775 00ce 092C     		cmp	r4, #9
 776 00d0 C6D1     		bne	.L25
 476:Src/main.c    ****       POT_Data[0] = 202;
 777              		.loc 1 476 0
 778 00d2 2A4B     		ldr	r3, .L55+8
 779 00d4 0822     		movs	r2, #8
 780 00d6 5A70     		strb	r2, [r3, #1]
 477:Src/main.c    ****   }
 781              		.loc 1 477 0
 782 00d8 CA22     		movs	r2, #202
 783 00da 1A70     		strb	r2, [r3]
 784 00dc C0E7     		b	.L25
 785              	.L47:
 436:Src/main.c    ****     POT_Data[0] = 232;
 786              		.loc 1 436 0
ARM GAS  /tmp/ccKiGPfC.s 			page 25


 787 00de 274B     		ldr	r3, .L55+8
 788 00e0 0322     		movs	r2, #3
 789 00e2 5A70     		strb	r2, [r3, #1]
 437:Src/main.c    ****   }
 790              		.loc 1 437 0
 791 00e4 E822     		movs	r2, #232
 792 00e6 1A70     		strb	r2, [r3]
 793 00e8 BAE7     		b	.L25
 794              	.L48:
 441:Src/main.c    ****       POT_Data[0] = 176;
 795              		.loc 1 441 0
 796 00ea 244B     		ldr	r3, .L55+8
 797 00ec 0422     		movs	r2, #4
 798 00ee 5A70     		strb	r2, [r3, #1]
 442:Src/main.c    ****   }
 799              		.loc 1 442 0
 800 00f0 B022     		movs	r2, #176
 801 00f2 1A70     		strb	r2, [r3]
 802 00f4 B4E7     		b	.L25
 803              	.L49:
 446:Src/main.c    ****       POT_Data[0] = 70;
 804              		.loc 1 446 0
 805 00f6 214B     		ldr	r3, .L55+8
 806 00f8 0522     		movs	r2, #5
 807 00fa 5A70     		strb	r2, [r3, #1]
 447:Src/main.c    ****   }
 808              		.loc 1 447 0
 809 00fc 4622     		movs	r2, #70
 810 00fe 1A70     		strb	r2, [r3]
 811 0100 AEE7     		b	.L25
 812              	.L50:
 451:Src/main.c    ****         POT_Data[0] = 220;
 813              		.loc 1 451 0
 814 0102 1E4B     		ldr	r3, .L55+8
 815 0104 0522     		movs	r2, #5
 816 0106 5A70     		strb	r2, [r3, #1]
 452:Src/main.c    ****   }
 817              		.loc 1 452 0
 818 0108 DC22     		movs	r2, #220
 819 010a 1A70     		strb	r2, [r3]
 820 010c A8E7     		b	.L25
 821              	.L51:
 456:Src/main.c    ****           POT_Data[0] = 114;
 822              		.loc 1 456 0
 823 010e 1B4B     		ldr	r3, .L55+8
 824 0110 0622     		movs	r2, #6
 825 0112 5A70     		strb	r2, [r3, #1]
 457:Src/main.c    ****   }
 826              		.loc 1 457 0
 827 0114 7222     		movs	r2, #114
 828 0116 1A70     		strb	r2, [r3]
 829 0118 A2E7     		b	.L25
 830              	.L52:
 461:Src/main.c    ****       POT_Data[0] = 8;
 831              		.loc 1 461 0
 832 011a 184B     		ldr	r3, .L55+8
 833 011c 0722     		movs	r2, #7
ARM GAS  /tmp/ccKiGPfC.s 			page 26


 834 011e 5A70     		strb	r2, [r3, #1]
 462:Src/main.c    ****   }
 835              		.loc 1 462 0
 836 0120 0822     		movs	r2, #8
 837 0122 1A70     		strb	r2, [r3]
 838 0124 9CE7     		b	.L25
 839              	.L53:
 466:Src/main.c    ****       POT_Data[0] = 158;
 840              		.loc 1 466 0
 841 0126 154B     		ldr	r3, .L55+8
 842 0128 0722     		movs	r2, #7
 843 012a 5A70     		strb	r2, [r3, #1]
 467:Src/main.c    ****   }
 844              		.loc 1 467 0
 845 012c 9E22     		movs	r2, #158
 846 012e 1A70     		strb	r2, [r3]
 847 0130 96E7     		b	.L25
 848              	.L54:
 471:Src/main.c    ****       POT_Data[0] = 52;
 849              		.loc 1 471 0
 850 0132 124B     		ldr	r3, .L55+8
 851 0134 0822     		movs	r2, #8
 852 0136 5A70     		strb	r2, [r3, #1]
 472:Src/main.c    ****   }
 853              		.loc 1 472 0
 854 0138 3422     		movs	r2, #52
 855 013a 1A70     		strb	r2, [r3]
 856 013c 90E7     		b	.L25
 857              	.L34:
 483:Src/main.c    **** 
 858              		.loc 1 483 0
 859 013e 0022     		movs	r2, #0
 860 0140 4FF48071 		mov	r1, #256
 861 0144 0E48     		ldr	r0, .L55+12
 862              	.LVL55:
 863 0146 FFF7FEFF 		bl	HAL_GPIO_WritePin
 864              	.LVL56:
 865 014a 93E7     		b	.L35
 866              	.L36:
 488:Src/main.c    **** 
 867              		.loc 1 488 0
 868 014c 0022     		movs	r2, #0
 869 014e 0821     		movs	r1, #8
 870 0150 0C48     		ldr	r0, .L55+16
 871 0152 FFF7FEFF 		bl	HAL_GPIO_WritePin
 872              	.LVL57:
 873 0156 94E7     		b	.L37
 874              	.L38:
 493:Src/main.c    **** 
 875              		.loc 1 493 0
 876 0158 0022     		movs	r2, #0
 877 015a 4FF40071 		mov	r1, #512
 878 015e 0948     		ldr	r0, .L55+16
 879 0160 FFF7FEFF 		bl	HAL_GPIO_WritePin
 880              	.LVL58:
 881 0164 97E7     		b	.L39
 882              	.L46:
ARM GAS  /tmp/ccKiGPfC.s 			page 27


 496:Src/main.c    **** 	else
 883              		.loc 1 496 0
 884 0166 0122     		movs	r2, #1
 885 0168 4FF48071 		mov	r1, #256
 886 016c 0548     		ldr	r0, .L55+16
 887 016e FFF7FEFF 		bl	HAL_GPIO_WritePin
 888              	.LVL59:
 889 0172 9AE7     		b	.L19
 890              	.L56:
 891              		.align	2
 892              	.L55:
 893 0174 00000000 		.word	.LANCHOR1
 894 0178 00000000 		.word	POT_data
 895 017c 00000000 		.word	POT_Data
 896 0180 000C0140 		.word	1073810432
 897 0184 00080140 		.word	1073809408
 898              		.cfi_endproc
 899              	.LFE72:
 901              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 902              		.align	1
 903              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 904              		.syntax unified
 905              		.thumb
 906              		.thumb_func
 907              		.fpu softvfp
 909              	HAL_CAN_RxFifo0MsgPendingCallback:
 910              	.LFB73:
 501:Src/main.c    **** 
 502:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
 503:Src/main.c    **** {
 911              		.loc 1 503 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 0
 914              		@ frame_needed = 0, uses_anonymous_args = 0
 915              	.LVL60:
 916 0000 08B5     		push	{r3, lr}
 917              	.LCFI15:
 918              		.cfi_def_cfa_offset 8
 919              		.cfi_offset 3, -8
 920              		.cfi_offset 14, -4
 504:Src/main.c    ****   if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 921              		.loc 1 504 0
 922 0002 054B     		ldr	r3, .L60
 923 0004 054A     		ldr	r2, .L60+4
 924 0006 0021     		movs	r1, #0
 925 0008 0548     		ldr	r0, .L60+8
 926              	.LVL61:
 927 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 928              	.LVL62:
 929 000e 10B9     		cbnz	r0, .L57
 505:Src/main.c    **** 	  CAN_flag = 0xFF;
 930              		.loc 1 505 0
 931 0010 044B     		ldr	r3, .L60+12
 932 0012 FF22     		movs	r2, #255
 933 0014 1A70     		strb	r2, [r3]
 934              	.L57:
 506:Src/main.c    **** }
ARM GAS  /tmp/ccKiGPfC.s 			page 28


 935              		.loc 1 506 0
 936 0016 08BD     		pop	{r3, pc}
 937              	.L61:
 938              		.align	2
 939              	.L60:
 940 0018 00000000 		.word	RxData
 941 001c 00000000 		.word	RxHeader
 942 0020 00000000 		.word	hcan
 943 0024 00000000 		.word	CAN_flag
 944              		.cfi_endproc
 945              	.LFE73:
 947              		.section	.text.CAN_interpret,"ax",%progbits
 948              		.align	1
 949              		.global	CAN_interpret
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu softvfp
 955              	CAN_interpret:
 956              	.LFB74:
 507:Src/main.c    **** 
 508:Src/main.c    **** void CAN_interpret(void) {
 957              		.loc 1 508 0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 0
 960              		@ frame_needed = 0, uses_anonymous_args = 0
 961 0000 70B5     		push	{r4, r5, r6, lr}
 962              	.LCFI16:
 963              		.cfi_def_cfa_offset 16
 964              		.cfi_offset 4, -16
 965              		.cfi_offset 5, -12
 966              		.cfi_offset 6, -8
 967              		.cfi_offset 14, -4
 509:Src/main.c    **** 
 510:Src/main.c    **** 	uint16_t received_ID;
 511:Src/main.c    **** 	received_ID = RxHeader.StdId;
 968              		.loc 1 511 0
 969 0002 394B     		ldr	r3, .L82
 970 0004 1C88     		ldrh	r4, [r3]
 971              	.LVL63:
 512:Src/main.c    **** 
 513:Src/main.c    **** 	if (received_ID == FAULTS) {
 972              		.loc 1 513 0
 973 0006 D02C     		cmp	r4, #208
 974 0008 05D0     		beq	.L73
 975              	.L63:
 514:Src/main.c    **** 
 515:Src/main.c    **** 		uint8_t BMS_fault;
 516:Src/main.c    **** 		uint8_t IMD_fault;
 517:Src/main.c    **** 		uint8_t BSPD_fault;
 518:Src/main.c    **** 		bool any_fault;
 519:Src/main.c    **** 
 520:Src/main.c    **** 		BMS_fault = RxData[0];
 521:Src/main.c    **** 		IMD_fault = RxData[1];
 522:Src/main.c    **** 		BSPD_fault = RxData[2];
 523:Src/main.c    **** 
 524:Src/main.c    **** 		if (BMS_fault == 0xFF) {
ARM GAS  /tmp/ccKiGPfC.s 			page 29


 525:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 526:Src/main.c    **** 			any_fault = true;
 527:Src/main.c    **** 		}
 528:Src/main.c    **** 		else if (BMS_fault == 0x00)
 529:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 530:Src/main.c    **** 
 531:Src/main.c    **** 		if (IMD_fault == 0xFF) {
 532:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 533:Src/main.c    **** 			any_fault = true;
 534:Src/main.c    **** 		}
 535:Src/main.c    **** 		else if (IMD_fault == 0x00)
 536:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 537:Src/main.c    **** 
 538:Src/main.c    **** 		if (BSPD_fault == 0xFF) {
 539:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 540:Src/main.c    **** 			any_fault = true;
 541:Src/main.c    **** 		}
 542:Src/main.c    **** 		else if (BSPD_fault == 0x00)
 543:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 544:Src/main.c    **** 
 545:Src/main.c    **** 		if (any_fault == true) {
 546:Src/main.c    **** 			// if there is any fault
 547:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 548:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 549:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 550:Src/main.c    **** 			any_fault = false;
 551:Src/main.c    **** 		}
 552:Src/main.c    **** 
 553:Src/main.c    **** 	}
 554:Src/main.c    **** 
 555:Src/main.c    **** 	if (received_ID == PRECHARGE) {
 976              		.loc 1 555 0
 977 000a D12C     		cmp	r4, #209
 978 000c 44D0     		beq	.L74
 979              	.LVL64:
 980              	.L70:
 556:Src/main.c    **** 
 557:Src/main.c    **** 		uint8_t Precharge_state;
 558:Src/main.c    **** 		Precharge_state = RxData[0];
 559:Src/main.c    **** 
 560:Src/main.c    **** 		if (Precharge_state == 0xFF) {
 561:Src/main.c    **** 			// if precharge is complete
 562:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED green
 563:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 564:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 565:Src/main.c    **** 		}
 566:Src/main.c    **** 
 567:Src/main.c    **** 		if (Precharge_state == 0x00) {
 568:Src/main.c    **** 			// if precharge is not complete
 569:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 570:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 571:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 572:Src/main.c    **** 
 573:Src/main.c    **** 		}
 574:Src/main.c    **** 
 575:Src/main.c    **** 	}
 576:Src/main.c    **** 
ARM GAS  /tmp/ccKiGPfC.s 			page 30


 577:Src/main.c    **** 	CAN_flag = 0x00;
 981              		.loc 1 577 0
 982 000e 374B     		ldr	r3, .L82+4
 983 0010 0022     		movs	r2, #0
 984 0012 1A70     		strb	r2, [r3]
 578:Src/main.c    **** 
 579:Src/main.c    **** }
 985              		.loc 1 579 0
 986 0014 70BD     		pop	{r4, r5, r6, pc}
 987              	.LVL65:
 988              	.L73:
 989              	.LBB4:
 520:Src/main.c    **** 		IMD_fault = RxData[1];
 990              		.loc 1 520 0
 991 0016 364B     		ldr	r3, .L82+8
 992 0018 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 993              	.LVL66:
 521:Src/main.c    **** 		BSPD_fault = RxData[2];
 994              		.loc 1 521 0
 995 001a 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 996              	.LVL67:
 522:Src/main.c    **** 
 997              		.loc 1 522 0
 998 001c 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 999              	.LVL68:
 524:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 1000              		.loc 1 524 0
 1001 001e FF2A     		cmp	r2, #255
 1002 0020 17D0     		beq	.L75
 528:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 1003              		.loc 1 528 0
 1004 0022 E2B1     		cbz	r2, .L76
 1005              	.LVL69:
 1006              	.L65:
 531:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 1007              		.loc 1 531 0
 1008 0024 FF2E     		cmp	r6, #255
 1009 0026 1FD0     		beq	.L77
 535:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 1010              		.loc 1 535 0
 1011 0028 26B3     		cbz	r6, .L78
 1012              	.L67:
 538:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 1013              		.loc 1 538 0
 1014 002a FF2D     		cmp	r5, #255
 1015 002c 28D0     		beq	.L79
 542:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 1016              		.loc 1 542 0
 1017 002e 6DB3     		cbz	r5, .L80
 1018              	.L69:
 547:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 1019              		.loc 1 547 0
 1020 0030 304D     		ldr	r5, .L82+12
 1021              	.LVL70:
 1022 0032 0022     		movs	r2, #0
 1023 0034 2021     		movs	r1, #32
 1024 0036 2846     		mov	r0, r5
ARM GAS  /tmp/ccKiGPfC.s 			page 31


 1025 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1026              	.LVL71:
 548:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1027              		.loc 1 548 0
 1028 003c 0122     		movs	r2, #1
 1029 003e 4021     		movs	r1, #64
 1030 0040 2846     		mov	r0, r5
 1031 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1032              	.LVL72:
 549:Src/main.c    **** 			any_fault = false;
 1033              		.loc 1 549 0
 1034 0046 0022     		movs	r2, #0
 1035 0048 8021     		movs	r1, #128
 1036 004a 2846     		mov	r0, r5
 1037 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1038              	.LVL73:
 1039 0050 DBE7     		b	.L63
 1040              	.LVL74:
 1041              	.L75:
 525:Src/main.c    **** 			any_fault = true;
 1042              		.loc 1 525 0
 1043 0052 0122     		movs	r2, #1
 1044              	.LVL75:
 1045 0054 1021     		movs	r1, #16
 1046 0056 2848     		ldr	r0, .L82+16
 1047 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1048              	.LVL76:
 1049 005c E2E7     		b	.L65
 1050              	.LVL77:
 1051              	.L76:
 529:Src/main.c    **** 
 1052              		.loc 1 529 0
 1053 005e 1021     		movs	r1, #16
 1054 0060 2548     		ldr	r0, .L82+16
 1055 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1056              	.LVL78:
 1057 0066 DDE7     		b	.L65
 1058              	.LVL79:
 1059              	.L77:
 532:Src/main.c    **** 			any_fault = true;
 1060              		.loc 1 532 0
 1061 0068 0122     		movs	r2, #1
 1062 006a 2021     		movs	r1, #32
 1063 006c 2248     		ldr	r0, .L82+16
 1064 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1065              	.LVL80:
 1066 0072 DAE7     		b	.L67
 1067              	.L78:
 536:Src/main.c    **** 
 1068              		.loc 1 536 0
 1069 0074 0022     		movs	r2, #0
 1070 0076 2021     		movs	r1, #32
 1071 0078 1F48     		ldr	r0, .L82+16
 1072 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1073              	.LVL81:
 1074 007e D4E7     		b	.L67
 1075              	.L79:
ARM GAS  /tmp/ccKiGPfC.s 			page 32


 539:Src/main.c    **** 			any_fault = true;
 1076              		.loc 1 539 0
 1077 0080 0122     		movs	r2, #1
 1078 0082 4021     		movs	r1, #64
 1079 0084 1C48     		ldr	r0, .L82+16
 1080 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1081              	.LVL82:
 1082 008a D1E7     		b	.L69
 1083              	.L80:
 543:Src/main.c    **** 
 1084              		.loc 1 543 0
 1085 008c 0022     		movs	r2, #0
 1086 008e 4021     		movs	r1, #64
 1087 0090 1948     		ldr	r0, .L82+16
 1088 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1089              	.LVL83:
 1090 0096 CBE7     		b	.L69
 1091              	.LVL84:
 1092              	.L74:
 1093              	.LBE4:
 1094              	.LBB5:
 558:Src/main.c    **** 
 1095              		.loc 1 558 0
 1096 0098 154B     		ldr	r3, .L82+8
 1097 009a 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 1098              	.LVL85:
 560:Src/main.c    **** 			// if precharge is complete
 1099              		.loc 1 560 0
 1100 009c FF2C     		cmp	r4, #255
 1101 009e 12D0     		beq	.L81
 1102              	.L71:
 567:Src/main.c    **** 			// if precharge is not complete
 1103              		.loc 1 567 0
 1104 00a0 002C     		cmp	r4, #0
 1105 00a2 B4D1     		bne	.L70
 569:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1106              		.loc 1 569 0
 1107 00a4 134C     		ldr	r4, .L82+12
 1108              	.LVL86:
 1109 00a6 0022     		movs	r2, #0
 1110 00a8 2021     		movs	r1, #32
 1111 00aa 2046     		mov	r0, r4
 1112 00ac FFF7FEFF 		bl	HAL_GPIO_WritePin
 1113              	.LVL87:
 570:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 1114              		.loc 1 570 0
 1115 00b0 0022     		movs	r2, #0
 1116 00b2 4021     		movs	r1, #64
 1117 00b4 2046     		mov	r0, r4
 1118 00b6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1119              	.LVL88:
 571:Src/main.c    **** 
 1120              		.loc 1 571 0
 1121 00ba 0122     		movs	r2, #1
 1122 00bc 8021     		movs	r1, #128
 1123 00be 2046     		mov	r0, r4
 1124 00c0 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccKiGPfC.s 			page 33


 1125              	.LVL89:
 1126 00c4 A3E7     		b	.L70
 1127              	.LVL90:
 1128              	.L81:
 562:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1129              		.loc 1 562 0
 1130 00c6 0B4D     		ldr	r5, .L82+12
 1131 00c8 0122     		movs	r2, #1
 1132 00ca 2021     		movs	r1, #32
 1133 00cc 2846     		mov	r0, r5
 1134 00ce FFF7FEFF 		bl	HAL_GPIO_WritePin
 1135              	.LVL91:
 563:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1136              		.loc 1 563 0
 1137 00d2 0022     		movs	r2, #0
 1138 00d4 4021     		movs	r1, #64
 1139 00d6 2846     		mov	r0, r5
 1140 00d8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1141              	.LVL92:
 564:Src/main.c    **** 		}
 1142              		.loc 1 564 0
 1143 00dc 0022     		movs	r2, #0
 1144 00de 8021     		movs	r1, #128
 1145 00e0 2846     		mov	r0, r5
 1146 00e2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1147              	.LVL93:
 1148 00e6 DBE7     		b	.L71
 1149              	.L83:
 1150              		.align	2
 1151              	.L82:
 1152 00e8 00000000 		.word	RxHeader
 1153 00ec 00000000 		.word	CAN_flag
 1154 00f0 00000000 		.word	RxData
 1155 00f4 000C0140 		.word	1073810432
 1156 00f8 00080140 		.word	1073809408
 1157              	.LBE5:
 1158              		.cfi_endproc
 1159              	.LFE74:
 1161              		.section	.text.main,"ax",%progbits
 1162              		.align	1
 1163              		.global	main
 1164              		.syntax unified
 1165              		.thumb
 1166              		.thumb_func
 1167              		.fpu softvfp
 1169              	main:
 1170              	.LFB66:
  91:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1171              		.loc 1 91 0
 1172              		.cfi_startproc
 1173              		@ Volatile: function does not return.
 1174              		@ args = 0, pretend = 0, frame = 8
 1175              		@ frame_needed = 0, uses_anonymous_args = 0
 1176 0000 00B5     		push	{lr}
 1177              	.LCFI17:
 1178              		.cfi_def_cfa_offset 4
 1179              		.cfi_offset 14, -4
ARM GAS  /tmp/ccKiGPfC.s 			page 34


 1180 0002 83B0     		sub	sp, sp, #12
 1181              	.LCFI18:
 1182              		.cfi_def_cfa_offset 16
  99:Src/main.c    **** 
 1183              		.loc 1 99 0
 1184 0004 FFF7FEFF 		bl	HAL_Init
 1185              	.LVL94:
 106:Src/main.c    **** 
 1186              		.loc 1 106 0
 1187 0008 FFF7FEFF 		bl	SystemClock_Config
 1188              	.LVL95:
 113:Src/main.c    ****   MX_ADC1_Init();
 1189              		.loc 1 113 0
 1190 000c FFF7FEFF 		bl	MX_GPIO_Init
 1191              	.LVL96:
 114:Src/main.c    ****   MX_CAN_Init();
 1192              		.loc 1 114 0
 1193 0010 FFF7FEFF 		bl	MX_ADC1_Init
 1194              	.LVL97:
 115:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1195              		.loc 1 115 0
 1196 0014 FFF7FEFF 		bl	MX_CAN_Init
 1197              	.LVL98:
 1198 0018 17E0     		b	.L86
 1199              	.L85:
 1200              	.LBB6:
 134:Src/main.c    **** 	POT_interpret(pot_position);
 1201              		.loc 1 134 0
 1202 001a 6846     		mov	r0, sp
 1203 001c FFF7FEFF 		bl	POT_read
 1204              	.LVL99:
 135:Src/main.c    **** 
 1205              		.loc 1 135 0
 1206 0020 6846     		mov	r0, sp
 1207 0022 FFF7FEFF 		bl	POT_interpret
 1208              	.LVL100:
 138:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &POT_Txheader, POT_Data, &TxMailbox);
 1209              		.loc 1 138 0
 1210 0026 0D4D     		ldr	r5, .L88
 1211 0028 0D4C     		ldr	r4, .L88+4
 1212 002a 2B46     		mov	r3, r5
 1213 002c 0D4A     		ldr	r2, .L88+8
 1214 002e 0E49     		ldr	r1, .L88+12
 1215 0030 2046     		mov	r0, r4
 1216 0032 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1217              	.LVL101:
 139:Src/main.c    **** 
 1218              		.loc 1 139 0
 1219 0036 2B46     		mov	r3, r5
 1220 0038 0C4A     		ldr	r2, .L88+16
 1221 003a 0D49     		ldr	r1, .L88+20
 1222 003c 2046     		mov	r0, r4
 1223 003e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1224              	.LVL102:
 141:Src/main.c    **** 
 1225              		.loc 1 141 0
 1226 0042 4FF47A70 		mov	r0, #1000
ARM GAS  /tmp/ccKiGPfC.s 			page 35


 1227 0046 FFF7FEFF 		bl	HAL_Delay
 1228              	.LVL103:
 1229              	.L86:
 128:Src/main.c    **** 		CAN_interpret();
 1230              		.loc 1 128 0
 1231 004a 0A4B     		ldr	r3, .L88+24
 1232 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1233 004e DBB2     		uxtb	r3, r3
 1234 0050 FF2B     		cmp	r3, #255
 1235 0052 E2D1     		bne	.L85
 129:Src/main.c    **** 
 1236              		.loc 1 129 0
 1237 0054 FFF7FEFF 		bl	CAN_interpret
 1238              	.LVL104:
 1239 0058 DFE7     		b	.L85
 1240              	.L89:
 1241 005a 00BF     		.align	2
 1242              	.L88:
 1243 005c 00000000 		.word	TxMailbox
 1244 0060 00000000 		.word	hcan
 1245 0064 00000000 		.word	POT_data
 1246 0068 00000000 		.word	POT_TxHeader
 1247 006c 00000000 		.word	POT_Data
 1248 0070 00000000 		.word	POT_Txheader
 1249 0074 00000000 		.word	CAN_flag
 1250              	.LBE6:
 1251              		.cfi_endproc
 1252              	.LFE66:
 1254              		.section	.text.Error_Handler,"ax",%progbits
 1255              		.align	1
 1256              		.global	Error_Handler
 1257              		.syntax unified
 1258              		.thumb
 1259              		.thumb_func
 1260              		.fpu softvfp
 1262              	Error_Handler:
 1263              	.LFB75:
 580:Src/main.c    **** /* USER CODE END 4 */
 581:Src/main.c    **** 
 582:Src/main.c    **** /**
 583:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 584:Src/main.c    ****   * @retval None
 585:Src/main.c    ****   */
 586:Src/main.c    **** void Error_Handler(void)
 587:Src/main.c    **** {
 1264              		.loc 1 587 0
 1265              		.cfi_startproc
 1266              		@ args = 0, pretend = 0, frame = 0
 1267              		@ frame_needed = 0, uses_anonymous_args = 0
 1268              		@ link register save eliminated.
 588:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 589:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 590:Src/main.c    **** 
 591:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 592:Src/main.c    **** }
 1269              		.loc 1 592 0
 1270 0000 7047     		bx	lr
ARM GAS  /tmp/ccKiGPfC.s 			page 36


 1271              		.cfi_endproc
 1272              	.LFE75:
 1274              		.global	pot_threshold
 1275              		.comm	CAN_flag,1,1
 1276              		.comm	TxMailbox,4,4
 1277              		.comm	POT_Data,8,4
 1278              		.comm	POT_data,8,4
 1279              		.comm	POT_Txheader,24,4
 1280              		.comm	POT_TxHeader,24,4
 1281              		.comm	RxData,8,4
 1282              		.comm	RxHeader,28,4
 1283              		.comm	hcan,40,4
 1284              		.global	sConfig
 1285              		.comm	hadc1,48,4
 1286              		.section	.bss.sConfig,"aw",%nobits
 1287              		.align	2
 1288              		.set	.LANCHOR0,. + 0
 1291              	sConfig:
 1292 0000 00000000 		.space	12
 1292      00000000 
 1292      00000000 
 1293              		.section	.data.pot_threshold,"aw",%progbits
 1294              		.align	2
 1295              		.set	.LANCHOR1,. + 0
 1298              	pot_threshold:
 1299 0000 0000     		.short	0
 1300 0002 6702     		.short	615
 1301 0004 0104     		.short	1025
 1302 0006 9B05     		.short	1435
 1303 0008 3507     		.short	1845
 1304 000a CF08     		.short	2255
 1305 000c 690A     		.short	2665
 1306 000e 030C     		.short	3075
 1307 0010 9D0D     		.short	3485
 1308 0012 370F     		.short	3895
 1309 0014 FF0F     		.short	4095
 1310              		.text
 1311              	.Letext0:
 1312              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1313              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1314              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1315              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1316              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1317              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1318              		.file 8 "/usr/include/newlib/sys/lock.h"
 1319              		.file 9 "/usr/include/newlib/sys/_types.h"
 1320              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1321              		.file 11 "/usr/include/newlib/sys/reent.h"
 1322              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1323              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1324              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1325              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1326              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1327              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1328              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1329              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1330              		.file 20 "<built-in>"
ARM GAS  /tmp/ccKiGPfC.s 			page 37


ARM GAS  /tmp/ccKiGPfC.s 			page 38


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccKiGPfC.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccKiGPfC.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccKiGPfC.s:121    .text.MX_GPIO_Init:0000000000000088 $d
     /tmp/ccKiGPfC.s:128    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccKiGPfC.s:134    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccKiGPfC.s:221    .text.MX_ADC1_Init:0000000000000064 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccKiGPfC.s:228    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccKiGPfC.s:234    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccKiGPfC.s:351    .text.MX_CAN_Init:0000000000000080 $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 POT_TxHeader
                            *COM*:0000000000000018 POT_Txheader
     /tmp/ccKiGPfC.s:359    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccKiGPfC.s:366    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccKiGPfC.s:446    .text.POT_read:0000000000000000 $t
     /tmp/ccKiGPfC.s:453    .text.POT_read:0000000000000000 POT_read
     /tmp/ccKiGPfC.s:600    .text.POT_read:00000000000000d4 $d
     /tmp/ccKiGPfC.s:606    .text.POT_interpret:0000000000000000 $t
     /tmp/ccKiGPfC.s:613    .text.POT_interpret:0000000000000000 POT_interpret
     /tmp/ccKiGPfC.s:893    .text.POT_interpret:0000000000000174 $d
                            *COM*:0000000000000008 POT_data
                            *COM*:0000000000000008 POT_Data
     /tmp/ccKiGPfC.s:902    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccKiGPfC.s:909    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccKiGPfC.s:940    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000018 $d
                            *COM*:0000000000000008 RxData
                            *COM*:000000000000001c RxHeader
                            *COM*:0000000000000001 CAN_flag
     /tmp/ccKiGPfC.s:948    .text.CAN_interpret:0000000000000000 $t
     /tmp/ccKiGPfC.s:955    .text.CAN_interpret:0000000000000000 CAN_interpret
     /tmp/ccKiGPfC.s:1152   .text.CAN_interpret:00000000000000e8 $d
     /tmp/ccKiGPfC.s:1162   .text.main:0000000000000000 $t
     /tmp/ccKiGPfC.s:1169   .text.main:0000000000000000 main
     /tmp/ccKiGPfC.s:1243   .text.main:000000000000005c $d
                            *COM*:0000000000000004 TxMailbox
     /tmp/ccKiGPfC.s:1255   .text.Error_Handler:0000000000000000 $t
     /tmp/ccKiGPfC.s:1262   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccKiGPfC.s:1298   .data.pot_threshold:0000000000000000 pot_threshold
     /tmp/ccKiGPfC.s:1291   .bss.sConfig:0000000000000000 sConfig
     /tmp/ccKiGPfC.s:1287   .bss.sConfig:0000000000000000 $d
     /tmp/ccKiGPfC.s:1294   .data.pot_threshold:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
ARM GAS  /tmp/ccKiGPfC.s 			page 39


HAL_RCCEx_PeriphCLKConfig
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_CAN_GetRxMessage
HAL_Init
HAL_CAN_AddTxMessage
HAL_Delay

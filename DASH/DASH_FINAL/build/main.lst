ARM GAS  /tmp/ccZk6UHk.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB70:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "stdbool.h"
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccZk6UHk.s 			page 2


  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** #define DASH_CAN_ID			0x00F
  37:Src/main.c    **** #define RINEHARTCUR_CAN_ID			0x064
  38:Src/main.c    **** #define RINEHARTTOR_CAN_ID			0x082
  39:Src/main.c    **** #define FAULTS				0x0D0
  40:Src/main.c    **** #define STATES			0x0D1
  41:Src/main.c    **** #define ENABLE_SIG		0x0D2
  42:Src/main.c    **** #define MOTOR_POS		0x0A5
  43:Src/main.c    **** /* USER CODE END PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  51:Src/main.c    **** ADC_HandleTypeDef hadc1;
  52:Src/main.c    **** ADC_ChannelConfTypeDef sConfig = {0};
  53:Src/main.c    **** CAN_HandleTypeDef hcan;
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN PV */
  56:Src/main.c    **** 
  57:Src/main.c    **** CAN_RxHeaderTypeDef     RxHeader;
  58:Src/main.c    **** uint8_t                 RxData[8];
  59:Src/main.c    **** 
  60:Src/main.c    **** CAN_TxHeaderTypeDef     POT_TxHeader;
  61:Src/main.c    **** CAN_TxHeaderTypeDef     POT_Txheader;
  62:Src/main.c    **** CAN_TxHeaderTypeDef     POT_Txheader1;
  63:Src/main.c    **** uint8_t                 POT_data[8];
  64:Src/main.c    **** uint8_t                 POT_Data[8];
  65:Src/main.c    **** uint8_t                 POT_Data1[8];
  66:Src/main.c    **** uint32_t                TxMailbox;
  67:Src/main.c    **** 
  68:Src/main.c    **** volatile char					CAN_flag;
  69:Src/main.c    **** 
  70:Src/main.c    **** uint16_t				pot_threshold[11] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** static void MX_GPIO_Init(void);
  77:Src/main.c    **** static void MX_ADC1_Init(void);
  78:Src/main.c    **** static void MX_CAN_Init(void);
  79:Src/main.c    **** /* USER CODE BEGIN PFP */
  80:Src/main.c    **** void POT_read(uint16_t pot_values[4]);
  81:Src/main.c    **** void CAN_interpret(void);
  82:Src/main.c    **** void  POT_interpret(uint16_t pot_values[4]);
  83:Src/main.c    **** /* USER CODE END PFP */
  84:Src/main.c    **** 
  85:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  86:Src/main.c    **** /* USER CODE BEGIN 0 */
  87:Src/main.c    **** 
  88:Src/main.c    **** /* USER CODE END 0 */
  89:Src/main.c    **** 
  90:Src/main.c    **** /**
  91:Src/main.c    ****   * @brief  The application entry point.
ARM GAS  /tmp/ccZk6UHk.s 			page 3


  92:Src/main.c    ****   * @retval int
  93:Src/main.c    ****   */
  94:Src/main.c    **** int main(void)
  95:Src/main.c    **** {
  96:Src/main.c    ****   /* USER CODE BEGIN 1 */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE END 1 */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 103:Src/main.c    ****   HAL_Init();
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE BEGIN Init */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE END Init */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Configure the system clock */
 110:Src/main.c    ****   SystemClock_Config();
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE END SysInit */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Initialize all configured peripherals */
 117:Src/main.c    ****   MX_GPIO_Init();
 118:Src/main.c    ****   MX_ADC1_Init();
 119:Src/main.c    ****   MX_CAN_Init();
 120:Src/main.c    ****   /* USER CODE BEGIN 2 */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE END 2 */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* Infinite loop */
 125:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 126:Src/main.c    ****   while (1)
 127:Src/main.c    ****   {
 128:Src/main.c    ****     /* USER CODE END WHILE */
 129:Src/main.c    **** 
 130:Src/main.c    ****     /* USER CODE BEGIN 3 */
 131:Src/main.c    **** 
 132:Src/main.c    **** 	if (CAN_flag == 0xFF)
 133:Src/main.c    **** 		CAN_interpret();
 134:Src/main.c    **** 
 135:Src/main.c    **** 	//send POT positions CAN message
 136:Src/main.c    **** 
 137:Src/main.c    **** 	uint16_t pot_position[4];
 138:Src/main.c    **** 	POT_read(pot_position);
 139:Src/main.c    **** 	POT_interpret(pot_position);
 140:Src/main.c    **** 
 141:Src/main.c    **** 
 142:Src/main.c    **** 	HAL_CAN_AddTxMessage(&hcan, &POT_TxHeader, POT_data, &TxMailbox);
 143:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &POT_Txheader, POT_Data, &TxMailbox);
 144:Src/main.c    **** 
 145:Src/main.c    **** 	HAL_Delay(1000);
 146:Src/main.c    **** 
 147:Src/main.c    **** 
 148:Src/main.c    ****   }
ARM GAS  /tmp/ccZk6UHk.s 			page 4


 149:Src/main.c    ****   /* USER CODE END 3 */
 150:Src/main.c    **** }
 151:Src/main.c    **** 
 152:Src/main.c    **** /**
 153:Src/main.c    ****   * @brief System Clock Configuration
 154:Src/main.c    ****   * @retval None
 155:Src/main.c    ****   */
 156:Src/main.c    **** void SystemClock_Config(void)
 157:Src/main.c    **** {
 158:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 159:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 160:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 161:Src/main.c    **** 
 162:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 163:Src/main.c    ****   */
 164:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 165:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 166:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 167:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 168:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 169:Src/main.c    ****   {
 170:Src/main.c    ****     Error_Handler();
 171:Src/main.c    ****   }
 172:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 173:Src/main.c    ****   */
 174:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 175:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 176:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 177:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 178:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 179:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 180:Src/main.c    **** 
 181:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 182:Src/main.c    ****   {
 183:Src/main.c    ****     Error_Handler();
 184:Src/main.c    ****   }
 185:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 186:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 187:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 188:Src/main.c    ****   {
 189:Src/main.c    ****     Error_Handler();
 190:Src/main.c    ****   }
 191:Src/main.c    **** }
 192:Src/main.c    **** 
 193:Src/main.c    **** /**
 194:Src/main.c    ****   * @brief ADC1 Initialization Function
 195:Src/main.c    ****   * @param None
 196:Src/main.c    ****   * @retval None
 197:Src/main.c    ****   */
 198:Src/main.c    **** static void MX_ADC1_Init(void)
 199:Src/main.c    **** {
 200:Src/main.c    **** 
 201:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 202:Src/main.c    **** 
 203:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 204:Src/main.c    **** 
 205:Src/main.c    ****   //ADC_ChannelConfTypeDef sConfig = {0};
ARM GAS  /tmp/ccZk6UHk.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 208:Src/main.c    **** 
 209:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 210:Src/main.c    ****   /** Common config
 211:Src/main.c    ****   */
 212:Src/main.c    ****   hadc1.Instance = ADC1;
 213:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 214:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 215:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 216:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 217:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 218:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 219:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 220:Src/main.c    ****   {
 221:Src/main.c    ****     Error_Handler();
 222:Src/main.c    ****   }
 223:Src/main.c    ****   /** Configure Regular Channel
 224:Src/main.c    ****   */
 225:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 226:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 227:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 228:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 229:Src/main.c    ****   {
 230:Src/main.c    ****     Error_Handler();
 231:Src/main.c    ****   }
 232:Src/main.c    ****   /** Configure Regular Channel
 233:Src/main.c    ****   */
 234:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 235:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 236:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 237:Src/main.c    ****   {
 238:Src/main.c    ****     Error_Handler();
 239:Src/main.c    ****   }
 240:Src/main.c    ****   /** Configure Regular Channel
 241:Src/main.c    ****   */
 242:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_7;
 243:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 244:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 245:Src/main.c    ****   {
 246:Src/main.c    ****     Error_Handler();
 247:Src/main.c    ****   }
 248:Src/main.c    ****   /** Configure Regular Channel
 249:Src/main.c    ****   */
 250:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 251:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 252:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 253:Src/main.c    ****   {
 254:Src/main.c    ****     Error_Handler();
 255:Src/main.c    ****   }
 256:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 257:Src/main.c    **** 
 258:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 259:Src/main.c    **** 
 260:Src/main.c    **** }
 261:Src/main.c    **** 
 262:Src/main.c    **** /**
ARM GAS  /tmp/ccZk6UHk.s 			page 6


 263:Src/main.c    ****   * @brief CAN Initialization Function
 264:Src/main.c    ****   * @param None
 265:Src/main.c    ****   * @retval None
 266:Src/main.c    ****   */
 267:Src/main.c    **** static void MX_CAN_Init(void)
 268:Src/main.c    **** {
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 271:Src/main.c    **** 	CAN_FilterTypeDef     sFilterConfig;
 272:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 273:Src/main.c    **** 
 274:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 275:Src/main.c    **** 
 276:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 277:Src/main.c    **** hcan.Instance = CAN1;
 278:Src/main.c    ****   hcan.Init.Prescaler = 2; //500kbit/s
 279:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 280:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 281:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 282:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 283:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 284:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 285:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 286:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 287:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 288:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 289:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 290:Src/main.c    ****   {
 291:Src/main.c    ****     Error_Handler();
 292:Src/main.c    ****   }
 293:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 */
 294:Src/main.c    **** 	POT_TxHeader.StdId = DASH_CAN_ID; 						// CAN standard ID
 295:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 296:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 297:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 298:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 299:Src/main.c    **** 
 300:Src/main.c    ****   POT_Txheader.StdId = RINEHARTCUR_CAN_ID; 						// CAN standard ID
 301:Src/main.c    **** 	POT_Txheader.RTR = CAN_RTR_DATA; 						// CAN frame type
 302:Src/main.c    **** 	POT_Txheader.IDE = CAN_ID_STD; 							// CAN ID type
 303:Src/main.c    **** 	POT_Txheader.DLC = 2; 									// CAN frame length in bytes
 304:Src/main.c    **** 	POT_Txheader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 305:Src/main.c    **** 
 306:Src/main.c    ****   POT_Txheader1.StdId = RINEHARTTOR_CAN_ID; 						// CAN standard ID
 307:Src/main.c    ****   POT_Txheader1.RTR = CAN_RTR_DATA; 						// CAN frame type
 308:Src/main.c    ****   POT_Txheader1.IDE = CAN_ID_STD; 							// CAN ID type
 309:Src/main.c    ****   POT_Txheader1.DLC = 2; 									// CAN frame length in bytes
 310:Src/main.c    ****   POT_Txheader1.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 311:Src/main.c    **** 
 312:Src/main.c    **** 	sFilterConfig.FilterBank = 0;							// filter number (0-13)
 313:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 314:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 315:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 316:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 317:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 318:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 319:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
ARM GAS  /tmp/ccZk6UHk.s 			page 7


 320:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 321:Src/main.c    **** 
 322:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 323:Src/main.c    **** 
 324:Src/main.c    **** 	HAL_CAN_Start(&hcan);
 325:Src/main.c    **** 
 326:Src/main.c    **** 	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 327:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 328:Src/main.c    **** 
 329:Src/main.c    **** }
 330:Src/main.c    **** 
 331:Src/main.c    **** /**
 332:Src/main.c    ****   * @brief GPIO Initialization Function
 333:Src/main.c    ****   * @param None
 334:Src/main.c    ****   * @retval None
 335:Src/main.c    ****   */
 336:Src/main.c    **** static void MX_GPIO_Init(void)
 337:Src/main.c    **** {
  25              		.loc 1 337 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 86B0     		sub	sp, sp, #24
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 338:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 338 0
  42 0006 0024     		movs	r4, #0
  43 0008 0294     		str	r4, [sp, #8]
  44 000a 0394     		str	r4, [sp, #12]
  45 000c 0494     		str	r4, [sp, #16]
  46 000e 0594     		str	r4, [sp, #20]
  47              	.LBB2:
 339:Src/main.c    **** 
 340:Src/main.c    ****   /* GPIO Ports Clock Enable */
 341:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  48              		.loc 1 341 0
  49 0010 1D4B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F00402 		orr	r2, r2, #4
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F00402 		and	r2, r2, #4
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE2:
  58              	.LBB3:
 342:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  /tmp/ccZk6UHk.s 			page 8


  59              		.loc 1 342 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F00802 		orr	r2, r2, #8
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9B69     		ldr	r3, [r3, #24]
  64 002e 03F00803 		and	r3, r3, #8
  65 0032 0193     		str	r3, [sp, #4]
  66 0034 019B     		ldr	r3, [sp, #4]
  67              	.LBE3:
 343:Src/main.c    **** 
 344:Src/main.c    ****   /*Configure GPIO pin Output Level */
 345:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  68              		.loc 1 345 0
  69 0036 DFF85880 		ldr	r8, .L3+8
  70 003a 2246     		mov	r2, r4
  71 003c 4FF45E71 		mov	r1, #888
  72 0040 4046     		mov	r0, r8
  73 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  74              	.LVL0:
 346:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin, GPIO_PIN_RESET);
 347:Src/main.c    **** 
 348:Src/main.c    ****   /*Configure GPIO pin Output Level */
 349:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin, GPIO_PIN_RESET);
  75              		.loc 1 349 0
  76 0046 114D     		ldr	r5, .L3+4
  77 0048 2246     		mov	r2, r4
  78 004a 4FF4F071 		mov	r1, #480
  79 004e 2846     		mov	r0, r5
  80 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  81              	.LVL1:
 350:Src/main.c    **** 
 351:Src/main.c    ****   /*Configure GPIO pins : CUR_LED_Pin BMS_LED_ON_Pin IMD_LED_ON_Pin BSPD_LED_ON_Pin
 352:Src/main.c    ****                            DRS_LED_Pin TC_LED_Pin */
 353:Src/main.c    ****   GPIO_InitStruct.Pin = CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  82              		.loc 1 353 0
  83 0054 4FF45E73 		mov	r3, #888
  84 0058 0293     		str	r3, [sp, #8]
 354:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin;
 355:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  85              		.loc 1 355 0
  86 005a 0127     		movs	r7, #1
  87 005c 0397     		str	r7, [sp, #12]
 356:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  88              		.loc 1 356 0
  89 005e 0494     		str	r4, [sp, #16]
 357:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  90              		.loc 1 357 0
  91 0060 0226     		movs	r6, #2
  92 0062 0596     		str	r6, [sp, #20]
 358:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  93              		.loc 1 358 0
  94 0064 02A9     		add	r1, sp, #8
  95 0066 4046     		mov	r0, r8
  96 0068 FFF7FEFF 		bl	HAL_GPIO_Init
  97              	.LVL2:
 359:Src/main.c    **** 
 360:Src/main.c    ****   /*Configure GPIO pins : RGB_GREEN_Pin RGB_RED_Pin RGB_BLUE_Pin CUST_LED_Pin */
ARM GAS  /tmp/ccZk6UHk.s 			page 9


 361:Src/main.c    ****   GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin;
  98              		.loc 1 361 0
  99 006c 4FF4F073 		mov	r3, #480
 100 0070 0293     		str	r3, [sp, #8]
 362:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 101              		.loc 1 362 0
 102 0072 0397     		str	r7, [sp, #12]
 363:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 103              		.loc 1 363 0
 104 0074 0494     		str	r4, [sp, #16]
 364:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 105              		.loc 1 364 0
 106 0076 0596     		str	r6, [sp, #20]
 365:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 107              		.loc 1 365 0
 108 0078 02A9     		add	r1, sp, #8
 109 007a 2846     		mov	r0, r5
 110 007c FFF7FEFF 		bl	HAL_GPIO_Init
 111              	.LVL3:
 366:Src/main.c    **** 
 367:Src/main.c    **** }
 112              		.loc 1 367 0
 113 0080 06B0     		add	sp, sp, #24
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 24
 116              		@ sp needed
 117 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 118              	.L4:
 119 0086 00BF     		.align	2
 120              	.L3:
 121 0088 00100240 		.word	1073876992
 122 008c 000C0140 		.word	1073810432
 123 0090 00080140 		.word	1073809408
 124              		.cfi_endproc
 125              	.LFE70:
 127              		.section	.text.MX_ADC1_Init,"ax",%progbits
 128              		.align	1
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu softvfp
 134              	MX_ADC1_Init:
 135              	.LFB68:
 199:Src/main.c    **** 
 136              		.loc 1 199 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 24
 143              		.cfi_offset 3, -24
 144              		.cfi_offset 4, -20
 145              		.cfi_offset 5, -16
 146              		.cfi_offset 6, -12
 147              		.cfi_offset 7, -8
 148              		.cfi_offset 14, -4
ARM GAS  /tmp/ccZk6UHk.s 			page 10


 212:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 149              		.loc 1 212 0
 150 0002 184D     		ldr	r5, .L7
 151 0004 184B     		ldr	r3, .L7+4
 152 0006 2B60     		str	r3, [r5]
 213:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 153              		.loc 1 213 0
 154 0008 0026     		movs	r6, #0
 155 000a AE60     		str	r6, [r5, #8]
 214:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 156              		.loc 1 214 0
 157 000c EE60     		str	r6, [r5, #12]
 215:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 158              		.loc 1 215 0
 159 000e 6E61     		str	r6, [r5, #20]
 216:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 160              		.loc 1 216 0
 161 0010 4FF46023 		mov	r3, #917504
 162 0014 EB61     		str	r3, [r5, #28]
 217:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 163              		.loc 1 217 0
 164 0016 6E60     		str	r6, [r5, #4]
 218:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 165              		.loc 1 218 0
 166 0018 0427     		movs	r7, #4
 167 001a 2F61     		str	r7, [r5, #16]
 219:Src/main.c    ****   {
 168              		.loc 1 219 0
 169 001c 2846     		mov	r0, r5
 170 001e FFF7FEFF 		bl	HAL_ADC_Init
 171              	.LVL4:
 225:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 172              		.loc 1 225 0
 173 0022 124C     		ldr	r4, .L7+8
 174 0024 2660     		str	r6, [r4]
 226:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 175              		.loc 1 226 0
 176 0026 0126     		movs	r6, #1
 177 0028 6660     		str	r6, [r4, #4]
 227:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 178              		.loc 1 227 0
 179 002a A660     		str	r6, [r4, #8]
 228:Src/main.c    ****   {
 180              		.loc 1 228 0
 181 002c 2146     		mov	r1, r4
 182 002e 2846     		mov	r0, r5
 183 0030 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 184              	.LVL5:
 234:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 185              		.loc 1 234 0
 186 0034 2660     		str	r6, [r4]
 235:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 187              		.loc 1 235 0
 188 0036 0223     		movs	r3, #2
 189 0038 6360     		str	r3, [r4, #4]
 236:Src/main.c    ****   {
 190              		.loc 1 236 0
ARM GAS  /tmp/ccZk6UHk.s 			page 11


 191 003a 2146     		mov	r1, r4
 192 003c 2846     		mov	r0, r5
 193 003e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 194              	.LVL6:
 242:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 195              		.loc 1 242 0
 196 0042 0723     		movs	r3, #7
 197 0044 2360     		str	r3, [r4]
 243:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 198              		.loc 1 243 0
 199 0046 0323     		movs	r3, #3
 200 0048 6360     		str	r3, [r4, #4]
 244:Src/main.c    ****   {
 201              		.loc 1 244 0
 202 004a 2146     		mov	r1, r4
 203 004c 2846     		mov	r0, r5
 204 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 205              	.LVL7:
 250:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 206              		.loc 1 250 0
 207 0052 0923     		movs	r3, #9
 208 0054 2360     		str	r3, [r4]
 251:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 209              		.loc 1 251 0
 210 0056 6760     		str	r7, [r4, #4]
 252:Src/main.c    ****   {
 211              		.loc 1 252 0
 212 0058 2146     		mov	r1, r4
 213 005a 2846     		mov	r0, r5
 214 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 215              	.LVL8:
 260:Src/main.c    **** 
 216              		.loc 1 260 0
 217 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 218              	.L8:
 219 0062 00BF     		.align	2
 220              	.L7:
 221 0064 00000000 		.word	hadc1
 222 0068 00240140 		.word	1073816576
 223 006c 00000000 		.word	.LANCHOR0
 224              		.cfi_endproc
 225              	.LFE68:
 227              		.section	.text.MX_CAN_Init,"ax",%progbits
 228              		.align	1
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu softvfp
 234              	MX_CAN_Init:
 235              	.LFB69:
 268:Src/main.c    **** 
 236              		.loc 1 268 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 40
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240 0000 70B5     		push	{r4, r5, r6, lr}
 241              	.LCFI4:
ARM GAS  /tmp/ccZk6UHk.s 			page 12


 242              		.cfi_def_cfa_offset 16
 243              		.cfi_offset 4, -16
 244              		.cfi_offset 5, -12
 245              		.cfi_offset 6, -8
 246              		.cfi_offset 14, -4
 247 0002 8AB0     		sub	sp, sp, #40
 248              	.LCFI5:
 249              		.cfi_def_cfa_offset 56
 277:Src/main.c    ****   hcan.Init.Prescaler = 2; //500kbit/s
 250              		.loc 1 277 0
 251 0004 224D     		ldr	r5, .L11
 252 0006 234B     		ldr	r3, .L11+4
 253 0008 2B60     		str	r3, [r5]
 278:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 254              		.loc 1 278 0
 255 000a 0226     		movs	r6, #2
 256 000c 6E60     		str	r6, [r5, #4]
 279:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 257              		.loc 1 279 0
 258 000e 0024     		movs	r4, #0
 259 0010 AC60     		str	r4, [r5, #8]
 280:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 260              		.loc 1 280 0
 261 0012 4FF08073 		mov	r3, #16777216
 262 0016 EB60     		str	r3, [r5, #12]
 281:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 263              		.loc 1 281 0
 264 0018 4FF44023 		mov	r3, #786432
 265 001c 2B61     		str	r3, [r5, #16]
 282:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 266              		.loc 1 282 0
 267 001e 4FF48013 		mov	r3, #1048576
 268 0022 6B61     		str	r3, [r5, #20]
 283:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 269              		.loc 1 283 0
 270 0024 2C76     		strb	r4, [r5, #24]
 284:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 271              		.loc 1 284 0
 272 0026 6C76     		strb	r4, [r5, #25]
 285:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 273              		.loc 1 285 0
 274 0028 AC76     		strb	r4, [r5, #26]
 286:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 275              		.loc 1 286 0
 276 002a EC76     		strb	r4, [r5, #27]
 287:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 277              		.loc 1 287 0
 278 002c 2C77     		strb	r4, [r5, #28]
 288:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 279              		.loc 1 288 0
 280 002e 6C77     		strb	r4, [r5, #29]
 289:Src/main.c    ****   {
 281              		.loc 1 289 0
 282 0030 2846     		mov	r0, r5
 283 0032 FFF7FEFF 		bl	HAL_CAN_Init
 284              	.LVL9:
 294:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
ARM GAS  /tmp/ccZk6UHk.s 			page 13


 285              		.loc 1 294 0
 286 0036 184B     		ldr	r3, .L11+8
 287 0038 0F22     		movs	r2, #15
 288 003a 1A60     		str	r2, [r3]
 295:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 289              		.loc 1 295 0
 290 003c DC60     		str	r4, [r3, #12]
 296:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 291              		.loc 1 296 0
 292 003e 9C60     		str	r4, [r3, #8]
 297:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 293              		.loc 1 297 0
 294 0040 0422     		movs	r2, #4
 295 0042 1A61     		str	r2, [r3, #16]
 298:Src/main.c    **** 
 296              		.loc 1 298 0
 297 0044 1C75     		strb	r4, [r3, #20]
 300:Src/main.c    **** 	POT_Txheader.RTR = CAN_RTR_DATA; 						// CAN frame type
 298              		.loc 1 300 0
 299 0046 154B     		ldr	r3, .L11+12
 300 0048 6422     		movs	r2, #100
 301 004a 1A60     		str	r2, [r3]
 301:Src/main.c    **** 	POT_Txheader.IDE = CAN_ID_STD; 							// CAN ID type
 302              		.loc 1 301 0
 303 004c DC60     		str	r4, [r3, #12]
 302:Src/main.c    **** 	POT_Txheader.DLC = 2; 									// CAN frame length in bytes
 304              		.loc 1 302 0
 305 004e 9C60     		str	r4, [r3, #8]
 303:Src/main.c    **** 	POT_Txheader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 306              		.loc 1 303 0
 307 0050 1E61     		str	r6, [r3, #16]
 304:Src/main.c    **** 
 308              		.loc 1 304 0
 309 0052 1C75     		strb	r4, [r3, #20]
 306:Src/main.c    ****   POT_Txheader1.RTR = CAN_RTR_DATA; 						// CAN frame type
 310              		.loc 1 306 0
 311 0054 124B     		ldr	r3, .L11+16
 312 0056 8222     		movs	r2, #130
 313 0058 1A60     		str	r2, [r3]
 307:Src/main.c    ****   POT_Txheader1.IDE = CAN_ID_STD; 							// CAN ID type
 314              		.loc 1 307 0
 315 005a DC60     		str	r4, [r3, #12]
 308:Src/main.c    ****   POT_Txheader1.DLC = 2; 									// CAN frame length in bytes
 316              		.loc 1 308 0
 317 005c 9C60     		str	r4, [r3, #8]
 309:Src/main.c    ****   POT_Txheader1.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 318              		.loc 1 309 0
 319 005e 1E61     		str	r6, [r3, #16]
 310:Src/main.c    **** 
 320              		.loc 1 310 0
 321 0060 1C75     		strb	r4, [r3, #20]
 312:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 322              		.loc 1 312 0
 323 0062 0594     		str	r4, [sp, #20]
 313:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 324              		.loc 1 313 0
 325 0064 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/ccZk6UHk.s 			page 14


 314:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 326              		.loc 1 314 0
 327 0066 0123     		movs	r3, #1
 328 0068 0793     		str	r3, [sp, #28]
 315:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 329              		.loc 1 315 0
 330 006a 0094     		str	r4, [sp]
 316:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 331              		.loc 1 316 0
 332 006c 0194     		str	r4, [sp, #4]
 317:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 333              		.loc 1 317 0
 334 006e 0294     		str	r4, [sp, #8]
 318:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 335              		.loc 1 318 0
 336 0070 0394     		str	r4, [sp, #12]
 319:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 337              		.loc 1 319 0
 338 0072 0494     		str	r4, [sp, #16]
 320:Src/main.c    **** 
 339              		.loc 1 320 0
 340 0074 0893     		str	r3, [sp, #32]
 322:Src/main.c    **** 
 341              		.loc 1 322 0
 342 0076 6946     		mov	r1, sp
 343 0078 2846     		mov	r0, r5
 344 007a FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 345              	.LVL10:
 324:Src/main.c    **** 
 346              		.loc 1 324 0
 347 007e 2846     		mov	r0, r5
 348 0080 FFF7FEFF 		bl	HAL_CAN_Start
 349              	.LVL11:
 326:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 350              		.loc 1 326 0
 351 0084 3146     		mov	r1, r6
 352 0086 2846     		mov	r0, r5
 353 0088 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 354              	.LVL12:
 329:Src/main.c    **** 
 355              		.loc 1 329 0
 356 008c 0AB0     		add	sp, sp, #40
 357              	.LCFI6:
 358              		.cfi_def_cfa_offset 16
 359              		@ sp needed
 360 008e 70BD     		pop	{r4, r5, r6, pc}
 361              	.L12:
 362              		.align	2
 363              	.L11:
 364 0090 00000000 		.word	hcan
 365 0094 00640040 		.word	1073767424
 366 0098 00000000 		.word	POT_TxHeader
 367 009c 00000000 		.word	POT_Txheader
 368 00a0 00000000 		.word	POT_Txheader1
 369              		.cfi_endproc
 370              	.LFE69:
 372              		.section	.text.SystemClock_Config,"ax",%progbits
ARM GAS  /tmp/ccZk6UHk.s 			page 15


 373              		.align	1
 374              		.global	SystemClock_Config
 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 378              		.fpu softvfp
 380              	SystemClock_Config:
 381              	.LFB67:
 157:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 382              		.loc 1 157 0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 80
 385              		@ frame_needed = 0, uses_anonymous_args = 0
 386 0000 30B5     		push	{r4, r5, lr}
 387              	.LCFI7:
 388              		.cfi_def_cfa_offset 12
 389              		.cfi_offset 4, -12
 390              		.cfi_offset 5, -8
 391              		.cfi_offset 14, -4
 392 0002 95B0     		sub	sp, sp, #84
 393              	.LCFI8:
 394              		.cfi_def_cfa_offset 96
 158:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 395              		.loc 1 158 0
 396 0004 2422     		movs	r2, #36
 397 0006 0021     		movs	r1, #0
 398 0008 0BA8     		add	r0, sp, #44
 399 000a FFF7FEFF 		bl	memset
 400              	.LVL13:
 159:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 401              		.loc 1 159 0
 402 000e 0024     		movs	r4, #0
 403 0010 0594     		str	r4, [sp, #20]
 404 0012 0694     		str	r4, [sp, #24]
 405 0014 0794     		str	r4, [sp, #28]
 406 0016 0894     		str	r4, [sp, #32]
 407 0018 0994     		str	r4, [sp, #36]
 160:Src/main.c    **** 
 408              		.loc 1 160 0
 409 001a 0194     		str	r4, [sp, #4]
 410 001c 0294     		str	r4, [sp, #8]
 411 001e 0394     		str	r4, [sp, #12]
 412 0020 0494     		str	r4, [sp, #16]
 164:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 413              		.loc 1 164 0
 414 0022 0225     		movs	r5, #2
 415 0024 0A95     		str	r5, [sp, #40]
 165:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 416              		.loc 1 165 0
 417 0026 0123     		movs	r3, #1
 418 0028 0E93     		str	r3, [sp, #56]
 166:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 419              		.loc 1 166 0
 420 002a 1023     		movs	r3, #16
 421 002c 0F93     		str	r3, [sp, #60]
 168:Src/main.c    ****   {
 422              		.loc 1 168 0
ARM GAS  /tmp/ccZk6UHk.s 			page 16


 423 002e 0AA8     		add	r0, sp, #40
 424 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 425              	.LVL14:
 174:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 426              		.loc 1 174 0
 427 0034 0F23     		movs	r3, #15
 428 0036 0593     		str	r3, [sp, #20]
 176:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 429              		.loc 1 176 0
 430 0038 0694     		str	r4, [sp, #24]
 177:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 431              		.loc 1 177 0
 432 003a 0794     		str	r4, [sp, #28]
 178:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 433              		.loc 1 178 0
 434 003c 0894     		str	r4, [sp, #32]
 179:Src/main.c    **** 
 435              		.loc 1 179 0
 436 003e 0994     		str	r4, [sp, #36]
 181:Src/main.c    ****   {
 437              		.loc 1 181 0
 438 0040 2146     		mov	r1, r4
 439 0042 05A8     		add	r0, sp, #20
 440 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 441              	.LVL15:
 185:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 442              		.loc 1 185 0
 443 0048 0195     		str	r5, [sp, #4]
 186:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 444              		.loc 1 186 0
 445 004a 0394     		str	r4, [sp, #12]
 187:Src/main.c    ****   {
 446              		.loc 1 187 0
 447 004c 01A8     		add	r0, sp, #4
 448 004e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 449              	.LVL16:
 191:Src/main.c    **** 
 450              		.loc 1 191 0
 451 0052 15B0     		add	sp, sp, #84
 452              	.LCFI9:
 453              		.cfi_def_cfa_offset 12
 454              		@ sp needed
 455 0054 30BD     		pop	{r4, r5, pc}
 456              		.cfi_endproc
 457              	.LFE67:
 459              		.section	.text.POT_read,"ax",%progbits
 460              		.align	1
 461              		.global	POT_read
 462              		.syntax unified
 463              		.thumb
 464              		.thumb_func
 465              		.fpu softvfp
 467              	POT_read:
 468              	.LFB71:
 368:Src/main.c    **** 
 369:Src/main.c    **** 
 370:Src/main.c    **** 
ARM GAS  /tmp/ccZk6UHk.s 			page 17


 371:Src/main.c    **** /* USER CODE BEGIN 4 */
 372:Src/main.c    **** void POT_read(uint16_t pot_values[4]) {
 469              		.loc 1 372 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 473              	.LVL17:
 474 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 475              	.LCFI10:
 476              		.cfi_def_cfa_offset 24
 477              		.cfi_offset 4, -24
 478              		.cfi_offset 5, -20
 479              		.cfi_offset 6, -16
 480              		.cfi_offset 7, -12
 481              		.cfi_offset 8, -8
 482              		.cfi_offset 14, -4
 483 0004 0746     		mov	r7, r0
 373:Src/main.c    **** 	//0 1 7 9
 374:Src/main.c    **** 
 375:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_0;
 484              		.loc 1 375 0
 485 0006 334D     		ldr	r5, .L17
 486 0008 0023     		movs	r3, #0
 487 000a 2B60     		str	r3, [r5]
 376:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 488              		.loc 1 376 0
 489 000c 0126     		movs	r6, #1
 490 000e 6E60     		str	r6, [r5, #4]
 377:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 491              		.loc 1 377 0
 492 0010 4FF00608 		mov	r8, #6
 493 0014 C5F80880 		str	r8, [r5, #8]
 378:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 494              		.loc 1 378 0
 495 0018 2F4C     		ldr	r4, .L17+4
 496 001a 2946     		mov	r1, r5
 497 001c 2046     		mov	r0, r4
 498              	.LVL18:
 499 001e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 500              	.LVL19:
 379:Src/main.c    **** 
 380:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 501              		.loc 1 380 0
 502 0022 2046     		mov	r0, r4
 503 0024 FFF7FEFF 		bl	HAL_ADC_Start
 504              	.LVL20:
 381:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);		//change timeout to a HAL define
 505              		.loc 1 381 0
 506 0028 4FF47A71 		mov	r1, #1000
 507 002c 2046     		mov	r0, r4
 508 002e FFF7FEFF 		bl	HAL_ADC_PollForConversion
 509              	.LVL21:
 382:Src/main.c    **** 	pot_values[0] = HAL_ADC_GetValue(&hadc1);
 510              		.loc 1 382 0
 511 0032 2046     		mov	r0, r4
 512 0034 FFF7FEFF 		bl	HAL_ADC_GetValue
 513              	.LVL22:
ARM GAS  /tmp/ccZk6UHk.s 			page 18


 514 0038 3880     		strh	r0, [r7]	@ movhi
 383:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 515              		.loc 1 383 0
 516 003a 2046     		mov	r0, r4
 517 003c FFF7FEFF 		bl	HAL_ADC_Stop
 518              	.LVL23:
 384:Src/main.c    **** 
 385:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_1;
 519              		.loc 1 385 0
 520 0040 2E60     		str	r6, [r5]
 386:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 521              		.loc 1 386 0
 522 0042 6E60     		str	r6, [r5, #4]
 387:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 523              		.loc 1 387 0
 524 0044 C5F80880 		str	r8, [r5, #8]
 388:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 525              		.loc 1 388 0
 526 0048 2946     		mov	r1, r5
 527 004a 2046     		mov	r0, r4
 528 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 529              	.LVL24:
 389:Src/main.c    **** 
 390:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 530              		.loc 1 390 0
 531 0050 2046     		mov	r0, r4
 532 0052 FFF7FEFF 		bl	HAL_ADC_Start
 533              	.LVL25:
 391:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 534              		.loc 1 391 0
 535 0056 4FF47A71 		mov	r1, #1000
 536 005a 2046     		mov	r0, r4
 537 005c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 538              	.LVL26:
 392:Src/main.c    **** 	pot_values[1] = HAL_ADC_GetValue(&hadc1);
 539              		.loc 1 392 0
 540 0060 2046     		mov	r0, r4
 541 0062 FFF7FEFF 		bl	HAL_ADC_GetValue
 542              	.LVL27:
 543 0066 7880     		strh	r0, [r7, #2]	@ movhi
 393:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 544              		.loc 1 393 0
 545 0068 2046     		mov	r0, r4
 546 006a FFF7FEFF 		bl	HAL_ADC_Stop
 547              	.LVL28:
 394:Src/main.c    **** 
 395:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_7;
 548              		.loc 1 395 0
 549 006e 0723     		movs	r3, #7
 550 0070 2B60     		str	r3, [r5]
 396:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 551              		.loc 1 396 0
 552 0072 6E60     		str	r6, [r5, #4]
 397:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 553              		.loc 1 397 0
 554 0074 C5F80880 		str	r8, [r5, #8]
 398:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
ARM GAS  /tmp/ccZk6UHk.s 			page 19


 555              		.loc 1 398 0
 556 0078 2946     		mov	r1, r5
 557 007a 2046     		mov	r0, r4
 558 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 559              	.LVL29:
 399:Src/main.c    **** 
 400:Src/main.c    **** 
 401:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 560              		.loc 1 401 0
 561 0080 2046     		mov	r0, r4
 562 0082 FFF7FEFF 		bl	HAL_ADC_Start
 563              	.LVL30:
 402:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 564              		.loc 1 402 0
 565 0086 4FF47A71 		mov	r1, #1000
 566 008a 2046     		mov	r0, r4
 567 008c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 568              	.LVL31:
 403:Src/main.c    **** 	pot_values[2] = HAL_ADC_GetValue(&hadc1);
 569              		.loc 1 403 0
 570 0090 2046     		mov	r0, r4
 571 0092 FFF7FEFF 		bl	HAL_ADC_GetValue
 572              	.LVL32:
 573 0096 B880     		strh	r0, [r7, #4]	@ movhi
 404:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 574              		.loc 1 404 0
 575 0098 2046     		mov	r0, r4
 576 009a FFF7FEFF 		bl	HAL_ADC_Stop
 577              	.LVL33:
 405:Src/main.c    **** 
 406:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_9;
 578              		.loc 1 406 0
 579 009e 0923     		movs	r3, #9
 580 00a0 2B60     		str	r3, [r5]
 407:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 581              		.loc 1 407 0
 582 00a2 6E60     		str	r6, [r5, #4]
 408:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 583              		.loc 1 408 0
 584 00a4 C5F80880 		str	r8, [r5, #8]
 409:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 585              		.loc 1 409 0
 586 00a8 2946     		mov	r1, r5
 587 00aa 2046     		mov	r0, r4
 588 00ac FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 589              	.LVL34:
 410:Src/main.c    **** 
 411:Src/main.c    **** 
 412:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 590              		.loc 1 412 0
 591 00b0 2046     		mov	r0, r4
 592 00b2 FFF7FEFF 		bl	HAL_ADC_Start
 593              	.LVL35:
 413:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 594              		.loc 1 413 0
 595 00b6 4FF47A71 		mov	r1, #1000
 596 00ba 2046     		mov	r0, r4
ARM GAS  /tmp/ccZk6UHk.s 			page 20


 597 00bc FFF7FEFF 		bl	HAL_ADC_PollForConversion
 598              	.LVL36:
 414:Src/main.c    **** 	pot_values[3] = HAL_ADC_GetValue(&hadc1);
 599              		.loc 1 414 0
 600 00c0 2046     		mov	r0, r4
 601 00c2 FFF7FEFF 		bl	HAL_ADC_GetValue
 602              	.LVL37:
 603 00c6 F880     		strh	r0, [r7, #6]	@ movhi
 415:Src/main.c    **** 
 416:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 604              		.loc 1 416 0
 605 00c8 2046     		mov	r0, r4
 606 00ca FFF7FEFF 		bl	HAL_ADC_Stop
 607              	.LVL38:
 417:Src/main.c    **** 
 418:Src/main.c    **** }
 608              		.loc 1 418 0
 609 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 610              	.LVL39:
 611              	.L18:
 612 00d2 00BF     		.align	2
 613              	.L17:
 614 00d4 00000000 		.word	.LANCHOR0
 615 00d8 00000000 		.word	hadc1
 616              		.cfi_endproc
 617              	.LFE71:
 619              		.section	.text.POT_interpret,"ax",%progbits
 620              		.align	1
 621              		.global	POT_interpret
 622              		.syntax unified
 623              		.thumb
 624              		.thumb_func
 625              		.fpu softvfp
 627              	POT_interpret:
 628              	.LFB72:
 419:Src/main.c    **** 
 420:Src/main.c    **** void POT_interpret(uint16_t pot_values[4]) {
 629              		.loc 1 420 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 8
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              	.LVL40:
 634 0000 30B5     		push	{r4, r5, lr}
 635              	.LCFI11:
 636              		.cfi_def_cfa_offset 12
 637              		.cfi_offset 4, -12
 638              		.cfi_offset 5, -8
 639              		.cfi_offset 14, -4
 640 0002 83B0     		sub	sp, sp, #12
 641              	.LCFI12:
 642              		.cfi_def_cfa_offset 24
 643              	.LVL41:
 421:Src/main.c    **** 
 422:Src/main.c    **** 	uint8_t pot_pos[4];
 423:Src/main.c    **** 	uint8_t i, j;
 424:Src/main.c    **** 
 425:Src/main.c    **** 	for (i = 0; i < 4; i++) {
ARM GAS  /tmp/ccZk6UHk.s 			page 21


 644              		.loc 1 425 0
 645 0004 0024     		movs	r4, #0
 646 0006 1FE0     		b	.L20
 647              	.LVL42:
 648              	.L21:
 426:Src/main.c    **** 
 427:Src/main.c    **** 		for (j = 0; j < 10; j++) {
 649              		.loc 1 427 0 discriminator 2
 650 0008 0133     		adds	r3, r3, #1
 651              	.LVL43:
 652 000a DBB2     		uxtb	r3, r3
 653              	.LVL44:
 654              	.L23:
 655              		.loc 1 427 0 is_stmt 0 discriminator 1
 656 000c 092B     		cmp	r3, #9
 657 000e 13D8     		bhi	.L44
 428:Src/main.c    **** 
 429:Src/main.c    **** 			//uint16_t pot_threshold[12] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
 430:Src/main.c    **** 			if ((pot_values[i] > pot_threshold[j]) && (pot_values[i] <= pot_threshold[j + 1]))
 658              		.loc 1 430 0 is_stmt 1
 659 0010 30F81420 		ldrh	r2, [r0, r4, lsl #1]
 660 0014 5749     		ldr	r1, .L55
 661 0016 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 662 001a 8A42     		cmp	r2, r1
 663 001c F4D9     		bls	.L21
 664              		.loc 1 430 0 is_stmt 0 discriminator 1
 665 001e 591C     		adds	r1, r3, #1
 666 0020 544D     		ldr	r5, .L55
 667 0022 35F81110 		ldrh	r1, [r5, r1, lsl #1]
 668 0026 8A42     		cmp	r2, r1
 669 0028 EED8     		bhi	.L21
 431:Src/main.c    **** 				pot_pos[i] = 10 - (j + 1); // pot_pos[i] = 0 is ~3.3V, pot_pos[i] = 1 is ~3V, etc.
 670              		.loc 1 431 0 is_stmt 1
 671 002a C3F10902 		rsb	r2, r3, #9
 672 002e 02A9     		add	r1, sp, #8
 673 0030 2144     		add	r1, r1, r4
 674 0032 01F8042C 		strb	r2, [r1, #-4]
 675 0036 E7E7     		b	.L21
 676              	.L44:
 432:Src/main.c    **** 			}
 433:Src/main.c    **** 
 434:Src/main.c    **** 		POT_data[i] = pot_pos[i];
 677              		.loc 1 434 0 discriminator 2
 678 0038 02AB     		add	r3, sp, #8
 679              	.LVL45:
 680 003a 2344     		add	r3, r3, r4
 681 003c 13F8042C 		ldrb	r2, [r3, #-4]	@ zero_extendqisi2
 682 0040 4D4B     		ldr	r3, .L55+4
 683 0042 1A55     		strb	r2, [r3, r4]
 425:Src/main.c    **** 
 684              		.loc 1 425 0 discriminator 2
 685 0044 0134     		adds	r4, r4, #1
 686              	.LVL46:
 687 0046 E4B2     		uxtb	r4, r4
 688              	.LVL47:
 689              	.L20:
 425:Src/main.c    **** 
ARM GAS  /tmp/ccZk6UHk.s 			page 22


 690              		.loc 1 425 0 is_stmt 0 discriminator 1
 691 0048 032C     		cmp	r4, #3
 692 004a 01D8     		bhi	.L45
 427:Src/main.c    **** 
 693              		.loc 1 427 0 is_stmt 1
 694 004c 0023     		movs	r3, #0
 695 004e DDE7     		b	.L23
 696              	.L45:
 435:Src/main.c    **** 		//POT_data[0] = 0x00;
 436:Src/main.c    **** 
 437:Src/main.c    **** 	}
 438:Src/main.c    **** 
 439:Src/main.c    **** if (pot_pos[1] == 0){
 697              		.loc 1 439 0
 698 0050 9DF80540 		ldrb	r4, [sp, #5]	@ zero_extendqisi2
 699              	.LVL48:
 700 0054 5CBB     		cbnz	r4, .L24
 440:Src/main.c    **** 	POT_Data[1] = 1;
 701              		.loc 1 440 0
 702 0056 494B     		ldr	r3, .L55+8
 703 0058 0122     		movs	r2, #1
 704 005a 5A70     		strb	r2, [r3, #1]
 441:Src/main.c    ****   POT_Data[0] = 244;
 705              		.loc 1 441 0
 706 005c F422     		movs	r2, #244
 707 005e 1A70     		strb	r2, [r3]
 708              	.L25:
 442:Src/main.c    ****   }
 443:Src/main.c    **** 
 444:Src/main.c    **** else if (pot_pos[1] == 1){
 445:Src/main.c    ****   	POT_Data[1] = 3;
 446:Src/main.c    ****     POT_Data[0] = 232;
 447:Src/main.c    ****   }
 448:Src/main.c    **** 
 449:Src/main.c    **** else if (pot_pos[1] == 2){
 450:Src/main.c    ****     	POT_Data[1] = 4;
 451:Src/main.c    ****       POT_Data[0] = 176;
 452:Src/main.c    ****   }
 453:Src/main.c    **** 
 454:Src/main.c    **** else if (pot_pos[1] == 3){
 455:Src/main.c    ****     	POT_Data[1] = 5;
 456:Src/main.c    ****       POT_Data[0] = 70;
 457:Src/main.c    ****   }
 458:Src/main.c    **** 
 459:Src/main.c    **** else if (pot_pos[1] == 4){
 460:Src/main.c    ****       	POT_Data[1] = 5;
 461:Src/main.c    ****         POT_Data[0] = 220;
 462:Src/main.c    ****   }
 463:Src/main.c    **** 
 464:Src/main.c    **** else if (pot_pos[1] == 5){
 465:Src/main.c    ****         	POT_Data[1] = 6;
 466:Src/main.c    ****           POT_Data[0] = 114;
 467:Src/main.c    ****   }
 468:Src/main.c    **** 
 469:Src/main.c    **** else if (pot_pos[1] == 6){
 470:Src/main.c    ****     	POT_Data[1] = 7;
 471:Src/main.c    ****       POT_Data[0] = 8;
ARM GAS  /tmp/ccZk6UHk.s 			page 23


 472:Src/main.c    ****   }
 473:Src/main.c    **** 
 474:Src/main.c    **** else if (pot_pos[1] == 7){
 475:Src/main.c    ****     	POT_Data[1] = 7;
 476:Src/main.c    ****       POT_Data[0] = 158;
 477:Src/main.c    ****   }
 478:Src/main.c    **** 
 479:Src/main.c    **** else if (pot_pos[1] == 8){
 480:Src/main.c    ****     	POT_Data[1] = 8;
 481:Src/main.c    ****       POT_Data[0] = 52;
 482:Src/main.c    ****   }
 483:Src/main.c    **** 
 484:Src/main.c    **** else if (pot_pos[1] == 9){
 485:Src/main.c    ****     	POT_Data[1] = 8;
 486:Src/main.c    ****       POT_Data[0] = 202;
 487:Src/main.c    ****   }
 488:Src/main.c    **** 
 489:Src/main.c    **** 	if (pot_pos[0] != 0) // if CURRENT_POT is in any position other than first, turn on CUR_LED
 709              		.loc 1 489 0
 710 0060 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 711 0064 002B     		cmp	r3, #0
 712 0066 6AD0     		beq	.L34
 490:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_SET);
 713              		.loc 1 490 0
 714 0068 0122     		movs	r2, #1
 715 006a 4FF48071 		mov	r1, #256
 716 006e 4448     		ldr	r0, .L55+12
 717              	.LVL49:
 718 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 719              	.LVL50:
 720              	.L35:
 491:Src/main.c    ****   else
 492:Src/main.c    ****   	HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_RESET);
 493:Src/main.c    **** 
 494:Src/main.c    **** 	if (pot_pos[1] != 0) // if CUSTOM_POT is in any position other than first, turn on CUST_LED
 721              		.loc 1 494 0
 722 0074 002C     		cmp	r4, #0
 723 0076 69D0     		beq	.L36
 495:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_SET);
 724              		.loc 1 495 0
 725 0078 0122     		movs	r2, #1
 726 007a 0821     		movs	r1, #8
 727 007c 4148     		ldr	r0, .L55+16
 728 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 729              	.LVL51:
 730              	.L37:
 496:Src/main.c    **** 	else
 497:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_RESET);
 498:Src/main.c    **** 
 499:Src/main.c    **** 	if (pot_pos[2] != 0) // if TC_POT is in any position other than first, turn on TC_LED
 731              		.loc 1 499 0
 732 0082 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 733 0086 002B     		cmp	r3, #0
 734 0088 66D0     		beq	.L38
 500:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_SET);
 735              		.loc 1 500 0
 736 008a 0122     		movs	r2, #1
ARM GAS  /tmp/ccZk6UHk.s 			page 24


 737 008c 4FF40071 		mov	r1, #512
 738 0090 3C48     		ldr	r0, .L55+16
 739 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 740              	.LVL52:
 741              	.L39:
 501:Src/main.c    **** 	else
 502:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_RESET);
 503:Src/main.c    **** 
 504:Src/main.c    **** 	if (pot_pos[3] != 0) // if DRS_POT is in any position other than first, turn on DRS_LED
 742              		.loc 1 504 0
 743 0096 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 744 009a 002B     		cmp	r3, #0
 745 009c 63D1     		bne	.L46
 505:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_SET);
 506:Src/main.c    **** 	else
 507:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_RESET);
 746              		.loc 1 507 0
 747 009e 0022     		movs	r2, #0
 748 00a0 4FF48071 		mov	r1, #256
 749 00a4 3748     		ldr	r0, .L55+16
 750 00a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 751              	.LVL53:
 752              	.L19:
 508:Src/main.c    **** 
 509:Src/main.c    **** }
 753              		.loc 1 509 0
 754 00aa 03B0     		add	sp, sp, #12
 755              	.LCFI13:
 756              		.cfi_remember_state
 757              		.cfi_def_cfa_offset 12
 758              		@ sp needed
 759 00ac 30BD     		pop	{r4, r5, pc}
 760              	.LVL54:
 761              	.L24:
 762              	.LCFI14:
 763              		.cfi_restore_state
 444:Src/main.c    ****   	POT_Data[1] = 3;
 764              		.loc 1 444 0
 765 00ae 012C     		cmp	r4, #1
 766 00b0 15D0     		beq	.L47
 449:Src/main.c    ****     	POT_Data[1] = 4;
 767              		.loc 1 449 0
 768 00b2 022C     		cmp	r4, #2
 769 00b4 19D0     		beq	.L48
 454:Src/main.c    ****     	POT_Data[1] = 5;
 770              		.loc 1 454 0
 771 00b6 032C     		cmp	r4, #3
 772 00b8 1DD0     		beq	.L49
 459:Src/main.c    ****       	POT_Data[1] = 5;
 773              		.loc 1 459 0
 774 00ba 042C     		cmp	r4, #4
 775 00bc 21D0     		beq	.L50
 464:Src/main.c    ****         	POT_Data[1] = 6;
 776              		.loc 1 464 0
 777 00be 052C     		cmp	r4, #5
 778 00c0 25D0     		beq	.L51
 469:Src/main.c    ****     	POT_Data[1] = 7;
ARM GAS  /tmp/ccZk6UHk.s 			page 25


 779              		.loc 1 469 0
 780 00c2 062C     		cmp	r4, #6
 781 00c4 29D0     		beq	.L52
 474:Src/main.c    ****     	POT_Data[1] = 7;
 782              		.loc 1 474 0
 783 00c6 072C     		cmp	r4, #7
 784 00c8 2DD0     		beq	.L53
 479:Src/main.c    ****     	POT_Data[1] = 8;
 785              		.loc 1 479 0
 786 00ca 082C     		cmp	r4, #8
 787 00cc 31D0     		beq	.L54
 484:Src/main.c    ****     	POT_Data[1] = 8;
 788              		.loc 1 484 0
 789 00ce 092C     		cmp	r4, #9
 790 00d0 C6D1     		bne	.L25
 485:Src/main.c    ****       POT_Data[0] = 202;
 791              		.loc 1 485 0
 792 00d2 2A4B     		ldr	r3, .L55+8
 793 00d4 0822     		movs	r2, #8
 794 00d6 5A70     		strb	r2, [r3, #1]
 486:Src/main.c    ****   }
 795              		.loc 1 486 0
 796 00d8 CA22     		movs	r2, #202
 797 00da 1A70     		strb	r2, [r3]
 798 00dc C0E7     		b	.L25
 799              	.L47:
 445:Src/main.c    ****     POT_Data[0] = 232;
 800              		.loc 1 445 0
 801 00de 274B     		ldr	r3, .L55+8
 802 00e0 0322     		movs	r2, #3
 803 00e2 5A70     		strb	r2, [r3, #1]
 446:Src/main.c    ****   }
 804              		.loc 1 446 0
 805 00e4 E822     		movs	r2, #232
 806 00e6 1A70     		strb	r2, [r3]
 807 00e8 BAE7     		b	.L25
 808              	.L48:
 450:Src/main.c    ****       POT_Data[0] = 176;
 809              		.loc 1 450 0
 810 00ea 244B     		ldr	r3, .L55+8
 811 00ec 0422     		movs	r2, #4
 812 00ee 5A70     		strb	r2, [r3, #1]
 451:Src/main.c    ****   }
 813              		.loc 1 451 0
 814 00f0 B022     		movs	r2, #176
 815 00f2 1A70     		strb	r2, [r3]
 816 00f4 B4E7     		b	.L25
 817              	.L49:
 455:Src/main.c    ****       POT_Data[0] = 70;
 818              		.loc 1 455 0
 819 00f6 214B     		ldr	r3, .L55+8
 820 00f8 0522     		movs	r2, #5
 821 00fa 5A70     		strb	r2, [r3, #1]
 456:Src/main.c    ****   }
 822              		.loc 1 456 0
 823 00fc 4622     		movs	r2, #70
 824 00fe 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccZk6UHk.s 			page 26


 825 0100 AEE7     		b	.L25
 826              	.L50:
 460:Src/main.c    ****         POT_Data[0] = 220;
 827              		.loc 1 460 0
 828 0102 1E4B     		ldr	r3, .L55+8
 829 0104 0522     		movs	r2, #5
 830 0106 5A70     		strb	r2, [r3, #1]
 461:Src/main.c    ****   }
 831              		.loc 1 461 0
 832 0108 DC22     		movs	r2, #220
 833 010a 1A70     		strb	r2, [r3]
 834 010c A8E7     		b	.L25
 835              	.L51:
 465:Src/main.c    ****           POT_Data[0] = 114;
 836              		.loc 1 465 0
 837 010e 1B4B     		ldr	r3, .L55+8
 838 0110 0622     		movs	r2, #6
 839 0112 5A70     		strb	r2, [r3, #1]
 466:Src/main.c    ****   }
 840              		.loc 1 466 0
 841 0114 7222     		movs	r2, #114
 842 0116 1A70     		strb	r2, [r3]
 843 0118 A2E7     		b	.L25
 844              	.L52:
 470:Src/main.c    ****       POT_Data[0] = 8;
 845              		.loc 1 470 0
 846 011a 184B     		ldr	r3, .L55+8
 847 011c 0722     		movs	r2, #7
 848 011e 5A70     		strb	r2, [r3, #1]
 471:Src/main.c    ****   }
 849              		.loc 1 471 0
 850 0120 0822     		movs	r2, #8
 851 0122 1A70     		strb	r2, [r3]
 852 0124 9CE7     		b	.L25
 853              	.L53:
 475:Src/main.c    ****       POT_Data[0] = 158;
 854              		.loc 1 475 0
 855 0126 154B     		ldr	r3, .L55+8
 856 0128 0722     		movs	r2, #7
 857 012a 5A70     		strb	r2, [r3, #1]
 476:Src/main.c    ****   }
 858              		.loc 1 476 0
 859 012c 9E22     		movs	r2, #158
 860 012e 1A70     		strb	r2, [r3]
 861 0130 96E7     		b	.L25
 862              	.L54:
 480:Src/main.c    ****       POT_Data[0] = 52;
 863              		.loc 1 480 0
 864 0132 124B     		ldr	r3, .L55+8
 865 0134 0822     		movs	r2, #8
 866 0136 5A70     		strb	r2, [r3, #1]
 481:Src/main.c    ****   }
 867              		.loc 1 481 0
 868 0138 3422     		movs	r2, #52
 869 013a 1A70     		strb	r2, [r3]
 870 013c 90E7     		b	.L25
 871              	.L34:
ARM GAS  /tmp/ccZk6UHk.s 			page 27


 492:Src/main.c    **** 
 872              		.loc 1 492 0
 873 013e 0022     		movs	r2, #0
 874 0140 4FF48071 		mov	r1, #256
 875 0144 0E48     		ldr	r0, .L55+12
 876              	.LVL55:
 877 0146 FFF7FEFF 		bl	HAL_GPIO_WritePin
 878              	.LVL56:
 879 014a 93E7     		b	.L35
 880              	.L36:
 497:Src/main.c    **** 
 881              		.loc 1 497 0
 882 014c 0022     		movs	r2, #0
 883 014e 0821     		movs	r1, #8
 884 0150 0C48     		ldr	r0, .L55+16
 885 0152 FFF7FEFF 		bl	HAL_GPIO_WritePin
 886              	.LVL57:
 887 0156 94E7     		b	.L37
 888              	.L38:
 502:Src/main.c    **** 
 889              		.loc 1 502 0
 890 0158 0022     		movs	r2, #0
 891 015a 4FF40071 		mov	r1, #512
 892 015e 0948     		ldr	r0, .L55+16
 893 0160 FFF7FEFF 		bl	HAL_GPIO_WritePin
 894              	.LVL58:
 895 0164 97E7     		b	.L39
 896              	.L46:
 505:Src/main.c    **** 	else
 897              		.loc 1 505 0
 898 0166 0122     		movs	r2, #1
 899 0168 4FF48071 		mov	r1, #256
 900 016c 0548     		ldr	r0, .L55+16
 901 016e FFF7FEFF 		bl	HAL_GPIO_WritePin
 902              	.LVL59:
 903 0172 9AE7     		b	.L19
 904              	.L56:
 905              		.align	2
 906              	.L55:
 907 0174 00000000 		.word	.LANCHOR1
 908 0178 00000000 		.word	POT_data
 909 017c 00000000 		.word	POT_Data
 910 0180 000C0140 		.word	1073810432
 911 0184 00080140 		.word	1073809408
 912              		.cfi_endproc
 913              	.LFE72:
 915              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 916              		.align	1
 917              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu softvfp
 923              	HAL_CAN_RxFifo0MsgPendingCallback:
 924              	.LFB73:
 510:Src/main.c    **** 
 511:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
ARM GAS  /tmp/ccZk6UHk.s 			page 28


 512:Src/main.c    **** {
 925              		.loc 1 512 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              	.LVL60:
 930 0000 08B5     		push	{r3, lr}
 931              	.LCFI15:
 932              		.cfi_def_cfa_offset 8
 933              		.cfi_offset 3, -8
 934              		.cfi_offset 14, -4
 513:Src/main.c    ****   if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 935              		.loc 1 513 0
 936 0002 054B     		ldr	r3, .L60
 937 0004 054A     		ldr	r2, .L60+4
 938 0006 0021     		movs	r1, #0
 939 0008 0548     		ldr	r0, .L60+8
 940              	.LVL61:
 941 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 942              	.LVL62:
 943 000e 10B9     		cbnz	r0, .L57
 514:Src/main.c    **** 	  CAN_flag = 0xFF;
 944              		.loc 1 514 0
 945 0010 044B     		ldr	r3, .L60+12
 946 0012 FF22     		movs	r2, #255
 947 0014 1A70     		strb	r2, [r3]
 948              	.L57:
 515:Src/main.c    **** }
 949              		.loc 1 515 0
 950 0016 08BD     		pop	{r3, pc}
 951              	.L61:
 952              		.align	2
 953              	.L60:
 954 0018 00000000 		.word	RxData
 955 001c 00000000 		.word	RxHeader
 956 0020 00000000 		.word	hcan
 957 0024 00000000 		.word	CAN_flag
 958              		.cfi_endproc
 959              	.LFE73:
 961              		.section	.text.CAN_interpret,"ax",%progbits
 962              		.align	1
 963              		.global	CAN_interpret
 964              		.syntax unified
 965              		.thumb
 966              		.thumb_func
 967              		.fpu softvfp
 969              	CAN_interpret:
 970              	.LFB74:
 516:Src/main.c    **** 
 517:Src/main.c    **** void CAN_interpret(void) {
 971              		.loc 1 517 0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 0
 974              		@ frame_needed = 0, uses_anonymous_args = 0
 975 0000 70B5     		push	{r4, r5, r6, lr}
 976              	.LCFI16:
 977              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccZk6UHk.s 			page 29


 978              		.cfi_offset 4, -16
 979              		.cfi_offset 5, -12
 980              		.cfi_offset 6, -8
 981              		.cfi_offset 14, -4
 518:Src/main.c    **** 
 519:Src/main.c    **** 	uint16_t received_ID;
 520:Src/main.c    **** 	received_ID = RxHeader.StdId;
 982              		.loc 1 520 0
 983 0002 954B     		ldr	r3, .L108
 984 0004 1C88     		ldrh	r4, [r3]
 985              	.LVL63:
 521:Src/main.c    **** 
 522:Src/main.c    **** 	if (received_ID == FAULTS) {
 986              		.loc 1 522 0
 987 0006 D02C     		cmp	r4, #208
 988 0008 08D0     		beq	.L86
 989              	.L63:
 523:Src/main.c    **** 
 524:Src/main.c    **** 		uint8_t BMS_fault;
 525:Src/main.c    **** 		uint8_t IMD_fault;
 526:Src/main.c    **** 		uint8_t BSPD_fault;
 527:Src/main.c    **** 		bool any_fault;
 528:Src/main.c    **** 
 529:Src/main.c    **** 		BMS_fault = RxData[0];
 530:Src/main.c    **** 		IMD_fault = RxData[1];
 531:Src/main.c    **** 		BSPD_fault = RxData[2];
 532:Src/main.c    **** 
 533:Src/main.c    **** 		if (BMS_fault == 0xFF) {
 534:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 535:Src/main.c    **** 			any_fault = true;
 536:Src/main.c    **** 		}
 537:Src/main.c    **** 		else if (BMS_fault == 0x00)
 538:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 539:Src/main.c    **** 
 540:Src/main.c    **** 		if (IMD_fault == 0xFF) {
 541:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 542:Src/main.c    **** 			any_fault = true;
 543:Src/main.c    **** 		}
 544:Src/main.c    **** 		else if (IMD_fault == 0x00)
 545:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 546:Src/main.c    **** 
 547:Src/main.c    **** 		if (BSPD_fault == 0xFF) {
 548:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 549:Src/main.c    **** 			any_fault = true;
 550:Src/main.c    **** 		}
 551:Src/main.c    **** 		else if (BSPD_fault == 0x00)
 552:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 553:Src/main.c    **** 
 554:Src/main.c    **** 		if (any_fault == true) {
 555:Src/main.c    **** 			// if there is any fault
 556:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 557:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 558:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 559:Src/main.c    **** 			any_fault = false;
 560:Src/main.c    **** 		}
 561:Src/main.c    **** 
 562:Src/main.c    **** 	}
ARM GAS  /tmp/ccZk6UHk.s 			page 30


 563:Src/main.c    **** 
 564:Src/main.c    **** 	if (received_ID == STATES) {
 990              		.loc 1 564 0
 991 000a D12C     		cmp	r4, #209
 992 000c 47D0     		beq	.L87
 993              	.L70:
 565:Src/main.c    **** 
 566:Src/main.c    **** 		uint8_t Precharge_state;
 567:Src/main.c    **** 		Precharge_state = RxData[0];
 568:Src/main.c    **** 
 569:Src/main.c    **** 		if (Precharge_state == 0x01) {
 570:Src/main.c    **** 			// if precharge is complete
 571:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED green
 572:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 573:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 574:Src/main.c    **** 		}
 575:Src/main.c    **** 
 576:Src/main.c    **** 		if (Precharge_state == 0x02) {
 577:Src/main.c    **** 			// if precharge is not complete
 578:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 579:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 580:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 581:Src/main.c    **** 
 582:Src/main.c    **** 		}
 583:Src/main.c    **** 
 584:Src/main.c    ****   if (Precharge_state == 0x04) {
 585:Src/main.c    ****       // if precharge is not complete
 586:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED blue
 587:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 588:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 589:Src/main.c    **** 
 590:Src/main.c    ****     }
 591:Src/main.c    ****     if (Precharge_state == 0x08) {
 592:Src/main.c    ****       // if precharge is not complete
 593:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED blue
 594:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 595:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 596:Src/main.c    **** 
 597:Src/main.c    ****     }
 598:Src/main.c    ****     if (Precharge_state == 0x10) {
 599:Src/main.c    ****       // if precharge is not complete
 600:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED blue
 601:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 602:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 603:Src/main.c    **** 
 604:Src/main.c    ****     }
 605:Src/main.c    ****     if (Precharge_state == 0x20) {
 606:Src/main.c    ****       // if precharge is not complete
 607:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 608:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOB, RGB_RED_Pin);
 609:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOB, RGB_BLUE_Pin);
 610:Src/main.c    **** 
 611:Src/main.c    ****     }
 612:Src/main.c    ****     uint8_t BMS_fault;
 613:Src/main.c    ****     uint8_t IMD_fault;
 614:Src/main.c    ****     uint8_t BSPD_fault;
 615:Src/main.c    ****     bool any_fault;
ARM GAS  /tmp/ccZk6UHk.s 			page 31


 616:Src/main.c    **** 
 617:Src/main.c    ****     BMS_fault = RxData[1];
 618:Src/main.c    ****     IMD_fault = RxData[2];
 619:Src/main.c    ****     BSPD_fault = RxData[3];
 620:Src/main.c    **** 
 621:Src/main.c    ****     if (BMS_fault == 0xFF) {
 622:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 623:Src/main.c    ****       any_fault = true;
 624:Src/main.c    ****     }
 625:Src/main.c    ****     else if (BMS_fault == 0x00)
 626:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 627:Src/main.c    **** 
 628:Src/main.c    ****     if (IMD_fault == 0xFF) {
 629:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 630:Src/main.c    ****       any_fault = true;
 631:Src/main.c    ****     }
 632:Src/main.c    ****     else if (IMD_fault == 0x00)
 633:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 634:Src/main.c    **** 
 635:Src/main.c    ****     if (BSPD_fault == 0xFF) {
 636:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 637:Src/main.c    ****       any_fault = true;
 638:Src/main.c    ****     }
 639:Src/main.c    ****     else if (BSPD_fault == 0x00)
 640:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 641:Src/main.c    **** 
 642:Src/main.c    ****     if (any_fault == true) {
 643:Src/main.c    ****       // if there is any fault
 644:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 645:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 646:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 647:Src/main.c    ****       any_fault = false;
 648:Src/main.c    ****     }
 649:Src/main.c    **** 
 650:Src/main.c    **** 	}
 651:Src/main.c    **** 
 652:Src/main.c    **** 
 653:Src/main.c    **** if (received_ID == MOTOR_POS) {
 994              		.loc 1 653 0
 995 000e A52C     		cmp	r4, #165
 996 0010 00F00181 		beq	.L88
 997              	.LVL64:
 998              	.L83:
 654:Src/main.c    ****   uint16_t Rpm;
 655:Src/main.c    ****   Rpm = RxData[2] + 256*RxData[3];
 656:Src/main.c    **** 
 657:Src/main.c    ****   if (Rpm < 50){
 658:Src/main.c    ****     POT_Data1[1] = 0;
 659:Src/main.c    ****     POT_Data1[0] = 0;
 660:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 661:Src/main.c    ****   }
 662:Src/main.c    **** 
 663:Src/main.c    ****   if (Rpm >= 50){
 664:Src/main.c    ****     POT_Data1[1] = 3;
 665:Src/main.c    ****     POT_Data1[0] = 232;
 666:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 667:Src/main.c    ****   }
ARM GAS  /tmp/ccZk6UHk.s 			page 32


 668:Src/main.c    **** 
 669:Src/main.c    **** }
 670:Src/main.c    **** 
 671:Src/main.c    **** 
 672:Src/main.c    **** 	CAN_flag = 0x00;
 999              		.loc 1 672 0
 1000 0014 914B     		ldr	r3, .L108+4
 1001 0016 0022     		movs	r2, #0
 1002 0018 1A70     		strb	r2, [r3]
 673:Src/main.c    **** 
 674:Src/main.c    **** }
 1003              		.loc 1 674 0
 1004 001a 70BD     		pop	{r4, r5, r6, pc}
 1005              	.LVL65:
 1006              	.L86:
 1007              	.LBB4:
 529:Src/main.c    **** 		IMD_fault = RxData[1];
 1008              		.loc 1 529 0
 1009 001c 904B     		ldr	r3, .L108+8
 1010 001e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1011              	.LVL66:
 530:Src/main.c    **** 		BSPD_fault = RxData[2];
 1012              		.loc 1 530 0
 1013 0020 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 1014              	.LVL67:
 531:Src/main.c    **** 
 1015              		.loc 1 531 0
 1016 0022 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 1017              	.LVL68:
 533:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 1018              		.loc 1 533 0
 1019 0024 FF2A     		cmp	r2, #255
 1020 0026 17D0     		beq	.L89
 537:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 1021              		.loc 1 537 0
 1022 0028 E2B1     		cbz	r2, .L90
 1023              	.LVL69:
 1024              	.L65:
 540:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 1025              		.loc 1 540 0
 1026 002a FF2E     		cmp	r6, #255
 1027 002c 1FD0     		beq	.L91
 544:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 1028              		.loc 1 544 0
 1029 002e 26B3     		cbz	r6, .L92
 1030              	.L67:
 547:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 1031              		.loc 1 547 0
 1032 0030 FF2D     		cmp	r5, #255
 1033 0032 28D0     		beq	.L93
 551:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 1034              		.loc 1 551 0
 1035 0034 6DB3     		cbz	r5, .L94
 1036              	.L69:
 556:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 1037              		.loc 1 556 0
 1038 0036 8B4D     		ldr	r5, .L108+12
ARM GAS  /tmp/ccZk6UHk.s 			page 33


 1039              	.LVL70:
 1040 0038 0022     		movs	r2, #0
 1041 003a 2021     		movs	r1, #32
 1042 003c 2846     		mov	r0, r5
 1043 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1044              	.LVL71:
 557:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1045              		.loc 1 557 0
 1046 0042 0122     		movs	r2, #1
 1047 0044 4021     		movs	r1, #64
 1048 0046 2846     		mov	r0, r5
 1049 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1050              	.LVL72:
 558:Src/main.c    **** 			any_fault = false;
 1051              		.loc 1 558 0
 1052 004c 0022     		movs	r2, #0
 1053 004e 8021     		movs	r1, #128
 1054 0050 2846     		mov	r0, r5
 1055 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1056              	.LVL73:
 1057 0056 D8E7     		b	.L63
 1058              	.LVL74:
 1059              	.L89:
 534:Src/main.c    **** 			any_fault = true;
 1060              		.loc 1 534 0
 1061 0058 0122     		movs	r2, #1
 1062              	.LVL75:
 1063 005a 1021     		movs	r1, #16
 1064 005c 8248     		ldr	r0, .L108+16
 1065 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1066              	.LVL76:
 1067 0062 E2E7     		b	.L65
 1068              	.LVL77:
 1069              	.L90:
 538:Src/main.c    **** 
 1070              		.loc 1 538 0
 1071 0064 1021     		movs	r1, #16
 1072 0066 8048     		ldr	r0, .L108+16
 1073 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1074              	.LVL78:
 1075 006c DDE7     		b	.L65
 1076              	.LVL79:
 1077              	.L91:
 541:Src/main.c    **** 			any_fault = true;
 1078              		.loc 1 541 0
 1079 006e 0122     		movs	r2, #1
 1080 0070 2021     		movs	r1, #32
 1081 0072 7D48     		ldr	r0, .L108+16
 1082 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1083              	.LVL80:
 1084 0078 DAE7     		b	.L67
 1085              	.L92:
 545:Src/main.c    **** 
 1086              		.loc 1 545 0
 1087 007a 0022     		movs	r2, #0
 1088 007c 2021     		movs	r1, #32
 1089 007e 7A48     		ldr	r0, .L108+16
ARM GAS  /tmp/ccZk6UHk.s 			page 34


 1090 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1091              	.LVL81:
 1092 0084 D4E7     		b	.L67
 1093              	.L93:
 548:Src/main.c    **** 			any_fault = true;
 1094              		.loc 1 548 0
 1095 0086 0122     		movs	r2, #1
 1096 0088 4021     		movs	r1, #64
 1097 008a 7748     		ldr	r0, .L108+16
 1098 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1099              	.LVL82:
 1100 0090 D1E7     		b	.L69
 1101              	.L94:
 552:Src/main.c    **** 
 1102              		.loc 1 552 0
 1103 0092 0022     		movs	r2, #0
 1104 0094 4021     		movs	r1, #64
 1105 0096 7448     		ldr	r0, .L108+16
 1106 0098 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1107              	.LVL83:
 1108 009c CBE7     		b	.L69
 1109              	.LVL84:
 1110              	.L87:
 1111              	.LBE4:
 1112              	.LBB5:
 567:Src/main.c    **** 
 1113              		.loc 1 567 0
 1114 009e 704B     		ldr	r3, .L108+8
 1115 00a0 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 1116              	.LVL85:
 569:Src/main.c    **** 			// if precharge is complete
 1117              		.loc 1 569 0
 1118 00a2 012D     		cmp	r5, #1
 1119 00a4 30D0     		beq	.L95
 1120              	.L71:
 576:Src/main.c    **** 			// if precharge is not complete
 1121              		.loc 1 576 0
 1122 00a6 022D     		cmp	r5, #2
 1123 00a8 3FD0     		beq	.L96
 1124              	.L72:
 584:Src/main.c    ****       // if precharge is not complete
 1125              		.loc 1 584 0
 1126 00aa 042D     		cmp	r5, #4
 1127 00ac 4ED0     		beq	.L97
 1128              	.L73:
 591:Src/main.c    ****       // if precharge is not complete
 1129              		.loc 1 591 0
 1130 00ae 082D     		cmp	r5, #8
 1131 00b0 5DD0     		beq	.L98
 1132              	.L74:
 598:Src/main.c    ****       // if precharge is not complete
 1133              		.loc 1 598 0
 1134 00b2 102D     		cmp	r5, #16
 1135 00b4 6CD0     		beq	.L99
 1136              	.L75:
 605:Src/main.c    ****       // if precharge is not complete
 1137              		.loc 1 605 0
ARM GAS  /tmp/ccZk6UHk.s 			page 35


 1138 00b6 202D     		cmp	r5, #32
 1139 00b8 7BD0     		beq	.L100
 1140              	.LVL86:
 1141              	.L76:
 617:Src/main.c    ****     IMD_fault = RxData[2];
 1142              		.loc 1 617 0
 1143 00ba 694B     		ldr	r3, .L108+8
 1144 00bc 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 1145              	.LVL87:
 618:Src/main.c    ****     BSPD_fault = RxData[3];
 1146              		.loc 1 618 0
 1147 00be 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 1148              	.LVL88:
 619:Src/main.c    **** 
 1149              		.loc 1 619 0
 1150 00c0 DD78     		ldrb	r5, [r3, #3]	@ zero_extendqisi2
 1151              	.LVL89:
 621:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 1152              		.loc 1 621 0
 1153 00c2 FF2A     		cmp	r2, #255
 1154 00c4 00F08480 		beq	.L101
 625:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 1155              		.loc 1 625 0
 1156 00c8 002A     		cmp	r2, #0
 1157 00ca 00F08780 		beq	.L102
 1158              	.LVL90:
 1159              	.L78:
 628:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 1160              		.loc 1 628 0
 1161 00ce FF2E     		cmp	r6, #255
 1162 00d0 00F08980 		beq	.L103
 632:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 1163              		.loc 1 632 0
 1164 00d4 002E     		cmp	r6, #0
 1165 00d6 00F08C80 		beq	.L104
 1166              	.L80:
 635:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 1167              		.loc 1 635 0
 1168 00da FF2D     		cmp	r5, #255
 1169 00dc 00F08F80 		beq	.L105
 639:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 1170              		.loc 1 639 0
 1171 00e0 002D     		cmp	r5, #0
 1172 00e2 00F09280 		beq	.L106
 1173              	.L82:
 644:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 1174              		.loc 1 644 0
 1175 00e6 5F4D     		ldr	r5, .L108+12
 1176              	.LVL91:
 1177 00e8 0022     		movs	r2, #0
 1178 00ea 2021     		movs	r1, #32
 1179 00ec 2846     		mov	r0, r5
 1180 00ee FFF7FEFF 		bl	HAL_GPIO_WritePin
 1181              	.LVL92:
 645:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1182              		.loc 1 645 0
 1183 00f2 0122     		movs	r2, #1
ARM GAS  /tmp/ccZk6UHk.s 			page 36


 1184 00f4 4021     		movs	r1, #64
 1185 00f6 2846     		mov	r0, r5
 1186 00f8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1187              	.LVL93:
 646:Src/main.c    ****       any_fault = false;
 1188              		.loc 1 646 0
 1189 00fc 0022     		movs	r2, #0
 1190 00fe 8021     		movs	r1, #128
 1191 0100 2846     		mov	r0, r5
 1192 0102 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1193              	.LVL94:
 1194 0106 82E7     		b	.L70
 1195              	.LVL95:
 1196              	.L95:
 571:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1197              		.loc 1 571 0
 1198 0108 564E     		ldr	r6, .L108+12
 1199 010a 0022     		movs	r2, #0
 1200 010c 2021     		movs	r1, #32
 1201 010e 3046     		mov	r0, r6
 1202 0110 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1203              	.LVL96:
 572:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1204              		.loc 1 572 0
 1205 0114 0022     		movs	r2, #0
 1206 0116 4021     		movs	r1, #64
 1207 0118 3046     		mov	r0, r6
 1208 011a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1209              	.LVL97:
 573:Src/main.c    **** 		}
 1210              		.loc 1 573 0
 1211 011e 0022     		movs	r2, #0
 1212 0120 8021     		movs	r1, #128
 1213 0122 3046     		mov	r0, r6
 1214 0124 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1215              	.LVL98:
 1216 0128 BDE7     		b	.L71
 1217              	.L96:
 578:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1218              		.loc 1 578 0
 1219 012a 4E4E     		ldr	r6, .L108+12
 1220 012c 0022     		movs	r2, #0
 1221 012e 2021     		movs	r1, #32
 1222 0130 3046     		mov	r0, r6
 1223 0132 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1224              	.LVL99:
 579:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 1225              		.loc 1 579 0
 1226 0136 0022     		movs	r2, #0
 1227 0138 4021     		movs	r1, #64
 1228 013a 3046     		mov	r0, r6
 1229 013c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1230              	.LVL100:
 580:Src/main.c    **** 
 1231              		.loc 1 580 0
 1232 0140 0122     		movs	r2, #1
 1233 0142 8021     		movs	r1, #128
ARM GAS  /tmp/ccZk6UHk.s 			page 37


 1234 0144 3046     		mov	r0, r6
 1235 0146 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1236              	.LVL101:
 1237 014a AEE7     		b	.L72
 1238              	.L97:
 586:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1239              		.loc 1 586 0
 1240 014c 454E     		ldr	r6, .L108+12
 1241 014e 0122     		movs	r2, #1
 1242 0150 2021     		movs	r1, #32
 1243 0152 3046     		mov	r0, r6
 1244 0154 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1245              	.LVL102:
 587:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 1246              		.loc 1 587 0
 1247 0158 0022     		movs	r2, #0
 1248 015a 4021     		movs	r1, #64
 1249 015c 3046     		mov	r0, r6
 1250 015e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1251              	.LVL103:
 588:Src/main.c    **** 
 1252              		.loc 1 588 0
 1253 0162 0122     		movs	r2, #1
 1254 0164 8021     		movs	r1, #128
 1255 0166 3046     		mov	r0, r6
 1256 0168 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1257              	.LVL104:
 1258 016c 9FE7     		b	.L73
 1259              	.L98:
 593:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1260              		.loc 1 593 0
 1261 016e 3D4E     		ldr	r6, .L108+12
 1262 0170 0122     		movs	r2, #1
 1263 0172 2021     		movs	r1, #32
 1264 0174 3046     		mov	r0, r6
 1265 0176 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1266              	.LVL105:
 594:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1267              		.loc 1 594 0
 1268 017a 0022     		movs	r2, #0
 1269 017c 4021     		movs	r1, #64
 1270 017e 3046     		mov	r0, r6
 1271 0180 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1272              	.LVL106:
 595:Src/main.c    **** 
 1273              		.loc 1 595 0
 1274 0184 0022     		movs	r2, #0
 1275 0186 8021     		movs	r1, #128
 1276 0188 3046     		mov	r0, r6
 1277 018a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1278              	.LVL107:
 1279 018e 90E7     		b	.L74
 1280              	.L99:
 600:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1281              		.loc 1 600 0
 1282 0190 344E     		ldr	r6, .L108+12
 1283 0192 0122     		movs	r2, #1
ARM GAS  /tmp/ccZk6UHk.s 			page 38


 1284 0194 2021     		movs	r1, #32
 1285 0196 3046     		mov	r0, r6
 1286 0198 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1287              	.LVL108:
 601:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1288              		.loc 1 601 0
 1289 019c 0022     		movs	r2, #0
 1290 019e 4021     		movs	r1, #64
 1291 01a0 3046     		mov	r0, r6
 1292 01a2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1293              	.LVL109:
 602:Src/main.c    **** 
 1294              		.loc 1 602 0
 1295 01a6 0022     		movs	r2, #0
 1296 01a8 8021     		movs	r1, #128
 1297 01aa 3046     		mov	r0, r6
 1298 01ac FFF7FEFF 		bl	HAL_GPIO_WritePin
 1299              	.LVL110:
 1300 01b0 81E7     		b	.L75
 1301              	.L100:
 607:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOB, RGB_RED_Pin);
 1302              		.loc 1 607 0
 1303 01b2 2C4D     		ldr	r5, .L108+12
 1304              	.LVL111:
 1305 01b4 0022     		movs	r2, #0
 1306 01b6 2021     		movs	r1, #32
 1307 01b8 2846     		mov	r0, r5
 1308 01ba FFF7FEFF 		bl	HAL_GPIO_WritePin
 1309              	.LVL112:
 608:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOB, RGB_BLUE_Pin);
 1310              		.loc 1 608 0
 1311 01be 4021     		movs	r1, #64
 1312 01c0 2846     		mov	r0, r5
 1313 01c2 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1314              	.LVL113:
 609:Src/main.c    **** 
 1315              		.loc 1 609 0
 1316 01c6 8021     		movs	r1, #128
 1317 01c8 2846     		mov	r0, r5
 1318 01ca FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1319              	.LVL114:
 1320 01ce 74E7     		b	.L76
 1321              	.LVL115:
 1322              	.L101:
 622:Src/main.c    ****       any_fault = true;
 1323              		.loc 1 622 0
 1324 01d0 0122     		movs	r2, #1
 1325              	.LVL116:
 1326 01d2 1021     		movs	r1, #16
 1327 01d4 2448     		ldr	r0, .L108+16
 1328 01d6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1329              	.LVL117:
 1330 01da 78E7     		b	.L78
 1331              	.LVL118:
 1332              	.L102:
 626:Src/main.c    **** 
 1333              		.loc 1 626 0
ARM GAS  /tmp/ccZk6UHk.s 			page 39


 1334 01dc 1021     		movs	r1, #16
 1335 01de 2248     		ldr	r0, .L108+16
 1336 01e0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1337              	.LVL119:
 1338 01e4 73E7     		b	.L78
 1339              	.LVL120:
 1340              	.L103:
 629:Src/main.c    ****       any_fault = true;
 1341              		.loc 1 629 0
 1342 01e6 0122     		movs	r2, #1
 1343 01e8 2021     		movs	r1, #32
 1344 01ea 1F48     		ldr	r0, .L108+16
 1345 01ec FFF7FEFF 		bl	HAL_GPIO_WritePin
 1346              	.LVL121:
 1347 01f0 73E7     		b	.L80
 1348              	.L104:
 633:Src/main.c    **** 
 1349              		.loc 1 633 0
 1350 01f2 0022     		movs	r2, #0
 1351 01f4 2021     		movs	r1, #32
 1352 01f6 1C48     		ldr	r0, .L108+16
 1353 01f8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1354              	.LVL122:
 1355 01fc 6DE7     		b	.L80
 1356              	.L105:
 636:Src/main.c    ****       any_fault = true;
 1357              		.loc 1 636 0
 1358 01fe 0122     		movs	r2, #1
 1359 0200 4021     		movs	r1, #64
 1360 0202 1948     		ldr	r0, .L108+16
 1361 0204 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1362              	.LVL123:
 1363 0208 6DE7     		b	.L82
 1364              	.L106:
 640:Src/main.c    **** 
 1365              		.loc 1 640 0
 1366 020a 0022     		movs	r2, #0
 1367 020c 4021     		movs	r1, #64
 1368 020e 1648     		ldr	r0, .L108+16
 1369 0210 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1370              	.LVL124:
 1371 0214 67E7     		b	.L82
 1372              	.LVL125:
 1373              	.L88:
 1374              	.LBE5:
 1375              	.LBB6:
 655:Src/main.c    **** 
 1376              		.loc 1 655 0
 1377 0216 124B     		ldr	r3, .L108+8
 1378 0218 9C78     		ldrb	r4, [r3, #2]	@ zero_extendqisi2
 1379              	.LVL126:
 1380 021a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1381 021c 04EB0324 		add	r4, r4, r3, lsl #8
 1382 0220 A4B2     		uxth	r4, r4
 1383              	.LVL127:
 657:Src/main.c    ****     POT_Data1[1] = 0;
 1384              		.loc 1 657 0
ARM GAS  /tmp/ccZk6UHk.s 			page 40


 1385 0222 312C     		cmp	r4, #49
 1386 0224 0DD9     		bls	.L107
 1387              	.L84:
 663:Src/main.c    ****     POT_Data1[1] = 3;
 1388              		.loc 1 663 0
 1389 0226 312C     		cmp	r4, #49
 1390 0228 7FF6F4AE 		bls	.L83
 664:Src/main.c    ****     POT_Data1[0] = 232;
 1391              		.loc 1 664 0
 1392 022c 0F4A     		ldr	r2, .L108+20
 1393 022e 0323     		movs	r3, #3
 1394 0230 5370     		strb	r3, [r2, #1]
 665:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 1395              		.loc 1 665 0
 1396 0232 E823     		movs	r3, #232
 1397 0234 1370     		strb	r3, [r2]
 666:Src/main.c    ****   }
 1398              		.loc 1 666 0
 1399 0236 0E4B     		ldr	r3, .L108+24
 1400 0238 0E49     		ldr	r1, .L108+28
 1401 023a 0F48     		ldr	r0, .L108+32
 1402 023c FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1403              	.LVL128:
 1404 0240 E8E6     		b	.L83
 1405              	.L107:
 658:Src/main.c    ****     POT_Data1[0] = 0;
 1406              		.loc 1 658 0
 1407 0242 0A4A     		ldr	r2, .L108+20
 1408 0244 0023     		movs	r3, #0
 1409 0246 5370     		strb	r3, [r2, #1]
 659:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 1410              		.loc 1 659 0
 1411 0248 1370     		strb	r3, [r2]
 660:Src/main.c    ****   }
 1412              		.loc 1 660 0
 1413 024a 094B     		ldr	r3, .L108+24
 1414 024c 0949     		ldr	r1, .L108+28
 1415 024e 0A48     		ldr	r0, .L108+32
 1416 0250 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1417              	.LVL129:
 1418 0254 E7E7     		b	.L84
 1419              	.L109:
 1420 0256 00BF     		.align	2
 1421              	.L108:
 1422 0258 00000000 		.word	RxHeader
 1423 025c 00000000 		.word	CAN_flag
 1424 0260 00000000 		.word	RxData
 1425 0264 000C0140 		.word	1073810432
 1426 0268 00080140 		.word	1073809408
 1427 026c 00000000 		.word	POT_Data1
 1428 0270 00000000 		.word	TxMailbox
 1429 0274 00000000 		.word	POT_Txheader1
 1430 0278 00000000 		.word	hcan
 1431              	.LBE6:
 1432              		.cfi_endproc
 1433              	.LFE74:
 1435              		.section	.text.main,"ax",%progbits
ARM GAS  /tmp/ccZk6UHk.s 			page 41


 1436              		.align	1
 1437              		.global	main
 1438              		.syntax unified
 1439              		.thumb
 1440              		.thumb_func
 1441              		.fpu softvfp
 1443              	main:
 1444              	.LFB66:
  95:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1445              		.loc 1 95 0
 1446              		.cfi_startproc
 1447              		@ Volatile: function does not return.
 1448              		@ args = 0, pretend = 0, frame = 8
 1449              		@ frame_needed = 0, uses_anonymous_args = 0
 1450 0000 00B5     		push	{lr}
 1451              	.LCFI17:
 1452              		.cfi_def_cfa_offset 4
 1453              		.cfi_offset 14, -4
 1454 0002 83B0     		sub	sp, sp, #12
 1455              	.LCFI18:
 1456              		.cfi_def_cfa_offset 16
 103:Src/main.c    **** 
 1457              		.loc 1 103 0
 1458 0004 FFF7FEFF 		bl	HAL_Init
 1459              	.LVL130:
 110:Src/main.c    **** 
 1460              		.loc 1 110 0
 1461 0008 FFF7FEFF 		bl	SystemClock_Config
 1462              	.LVL131:
 117:Src/main.c    ****   MX_ADC1_Init();
 1463              		.loc 1 117 0
 1464 000c FFF7FEFF 		bl	MX_GPIO_Init
 1465              	.LVL132:
 118:Src/main.c    ****   MX_CAN_Init();
 1466              		.loc 1 118 0
 1467 0010 FFF7FEFF 		bl	MX_ADC1_Init
 1468              	.LVL133:
 119:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1469              		.loc 1 119 0
 1470 0014 FFF7FEFF 		bl	MX_CAN_Init
 1471              	.LVL134:
 1472 0018 17E0     		b	.L112
 1473              	.L111:
 1474              	.LBB7:
 138:Src/main.c    **** 	POT_interpret(pot_position);
 1475              		.loc 1 138 0
 1476 001a 6846     		mov	r0, sp
 1477 001c FFF7FEFF 		bl	POT_read
 1478              	.LVL135:
 139:Src/main.c    **** 
 1479              		.loc 1 139 0
 1480 0020 6846     		mov	r0, sp
 1481 0022 FFF7FEFF 		bl	POT_interpret
 1482              	.LVL136:
 142:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &POT_Txheader, POT_Data, &TxMailbox);
 1483              		.loc 1 142 0
 1484 0026 0D4D     		ldr	r5, .L114
ARM GAS  /tmp/ccZk6UHk.s 			page 42


 1485 0028 0D4C     		ldr	r4, .L114+4
 1486 002a 2B46     		mov	r3, r5
 1487 002c 0D4A     		ldr	r2, .L114+8
 1488 002e 0E49     		ldr	r1, .L114+12
 1489 0030 2046     		mov	r0, r4
 1490 0032 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1491              	.LVL137:
 143:Src/main.c    **** 
 1492              		.loc 1 143 0
 1493 0036 2B46     		mov	r3, r5
 1494 0038 0C4A     		ldr	r2, .L114+16
 1495 003a 0D49     		ldr	r1, .L114+20
 1496 003c 2046     		mov	r0, r4
 1497 003e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1498              	.LVL138:
 145:Src/main.c    **** 
 1499              		.loc 1 145 0
 1500 0042 4FF47A70 		mov	r0, #1000
 1501 0046 FFF7FEFF 		bl	HAL_Delay
 1502              	.LVL139:
 1503              	.L112:
 132:Src/main.c    **** 		CAN_interpret();
 1504              		.loc 1 132 0
 1505 004a 0A4B     		ldr	r3, .L114+24
 1506 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1507 004e DBB2     		uxtb	r3, r3
 1508 0050 FF2B     		cmp	r3, #255
 1509 0052 E2D1     		bne	.L111
 133:Src/main.c    **** 
 1510              		.loc 1 133 0
 1511 0054 FFF7FEFF 		bl	CAN_interpret
 1512              	.LVL140:
 1513 0058 DFE7     		b	.L111
 1514              	.L115:
 1515 005a 00BF     		.align	2
 1516              	.L114:
 1517 005c 00000000 		.word	TxMailbox
 1518 0060 00000000 		.word	hcan
 1519 0064 00000000 		.word	POT_data
 1520 0068 00000000 		.word	POT_TxHeader
 1521 006c 00000000 		.word	POT_Data
 1522 0070 00000000 		.word	POT_Txheader
 1523 0074 00000000 		.word	CAN_flag
 1524              	.LBE7:
 1525              		.cfi_endproc
 1526              	.LFE66:
 1528              		.section	.text.Error_Handler,"ax",%progbits
 1529              		.align	1
 1530              		.global	Error_Handler
 1531              		.syntax unified
 1532              		.thumb
 1533              		.thumb_func
 1534              		.fpu softvfp
 1536              	Error_Handler:
 1537              	.LFB75:
 675:Src/main.c    **** /* USER CODE END 4 */
 676:Src/main.c    **** 
ARM GAS  /tmp/ccZk6UHk.s 			page 43


 677:Src/main.c    **** /**
 678:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 679:Src/main.c    ****   * @retval None
 680:Src/main.c    ****   */
 681:Src/main.c    **** void Error_Handler(void)
 682:Src/main.c    **** {
 1538              		.loc 1 682 0
 1539              		.cfi_startproc
 1540              		@ args = 0, pretend = 0, frame = 0
 1541              		@ frame_needed = 0, uses_anonymous_args = 0
 1542              		@ link register save eliminated.
 683:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 684:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 685:Src/main.c    **** 
 686:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 687:Src/main.c    **** }
 1543              		.loc 1 687 0
 1544 0000 7047     		bx	lr
 1545              		.cfi_endproc
 1546              	.LFE75:
 1548              		.global	pot_threshold
 1549              		.comm	CAN_flag,1,1
 1550              		.comm	TxMailbox,4,4
 1551              		.comm	POT_Data1,8,4
 1552              		.comm	POT_Data,8,4
 1553              		.comm	POT_data,8,4
 1554              		.comm	POT_Txheader1,24,4
 1555              		.comm	POT_Txheader,24,4
 1556              		.comm	POT_TxHeader,24,4
 1557              		.comm	RxData,8,4
 1558              		.comm	RxHeader,28,4
 1559              		.comm	hcan,40,4
 1560              		.global	sConfig
 1561              		.comm	hadc1,48,4
 1562              		.section	.bss.sConfig,"aw",%nobits
 1563              		.align	2
 1564              		.set	.LANCHOR0,. + 0
 1567              	sConfig:
 1568 0000 00000000 		.space	12
 1568      00000000 
 1568      00000000 
 1569              		.section	.data.pot_threshold,"aw",%progbits
 1570              		.align	2
 1571              		.set	.LANCHOR1,. + 0
 1574              	pot_threshold:
 1575 0000 0000     		.short	0
 1576 0002 6702     		.short	615
 1577 0004 0104     		.short	1025
 1578 0006 9B05     		.short	1435
 1579 0008 3507     		.short	1845
 1580 000a CF08     		.short	2255
 1581 000c 690A     		.short	2665
 1582 000e 030C     		.short	3075
 1583 0010 9D0D     		.short	3485
 1584 0012 370F     		.short	3895
 1585 0014 FF0F     		.short	4095
 1586              		.text
ARM GAS  /tmp/ccZk6UHk.s 			page 44


 1587              	.Letext0:
 1588              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1589              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1590              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1591              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1592              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1593              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1594              		.file 8 "/usr/include/newlib/sys/lock.h"
 1595              		.file 9 "/usr/include/newlib/sys/_types.h"
 1596              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1597              		.file 11 "/usr/include/newlib/sys/reent.h"
 1598              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1599              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1600              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1601              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1602              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1603              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1604              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1605              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1606              		.file 20 "<built-in>"
ARM GAS  /tmp/ccZk6UHk.s 			page 45


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccZk6UHk.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccZk6UHk.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccZk6UHk.s:121    .text.MX_GPIO_Init:0000000000000088 $d
     /tmp/ccZk6UHk.s:128    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccZk6UHk.s:134    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccZk6UHk.s:221    .text.MX_ADC1_Init:0000000000000064 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccZk6UHk.s:228    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccZk6UHk.s:234    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccZk6UHk.s:364    .text.MX_CAN_Init:0000000000000090 $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 POT_TxHeader
                            *COM*:0000000000000018 POT_Txheader
                            *COM*:0000000000000018 POT_Txheader1
     /tmp/ccZk6UHk.s:373    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccZk6UHk.s:380    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccZk6UHk.s:460    .text.POT_read:0000000000000000 $t
     /tmp/ccZk6UHk.s:467    .text.POT_read:0000000000000000 POT_read
     /tmp/ccZk6UHk.s:614    .text.POT_read:00000000000000d4 $d
     /tmp/ccZk6UHk.s:620    .text.POT_interpret:0000000000000000 $t
     /tmp/ccZk6UHk.s:627    .text.POT_interpret:0000000000000000 POT_interpret
     /tmp/ccZk6UHk.s:907    .text.POT_interpret:0000000000000174 $d
                            *COM*:0000000000000008 POT_data
                            *COM*:0000000000000008 POT_Data
     /tmp/ccZk6UHk.s:916    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccZk6UHk.s:923    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccZk6UHk.s:954    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000018 $d
                            *COM*:0000000000000008 RxData
                            *COM*:000000000000001c RxHeader
                            *COM*:0000000000000001 CAN_flag
     /tmp/ccZk6UHk.s:962    .text.CAN_interpret:0000000000000000 $t
     /tmp/ccZk6UHk.s:969    .text.CAN_interpret:0000000000000000 CAN_interpret
     /tmp/ccZk6UHk.s:1422   .text.CAN_interpret:0000000000000258 $d
                            *COM*:0000000000000008 POT_Data1
                            *COM*:0000000000000004 TxMailbox
     /tmp/ccZk6UHk.s:1436   .text.main:0000000000000000 $t
     /tmp/ccZk6UHk.s:1443   .text.main:0000000000000000 main
     /tmp/ccZk6UHk.s:1517   .text.main:000000000000005c $d
     /tmp/ccZk6UHk.s:1529   .text.Error_Handler:0000000000000000 $t
     /tmp/ccZk6UHk.s:1536   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccZk6UHk.s:1574   .data.pot_threshold:0000000000000000 pot_threshold
     /tmp/ccZk6UHk.s:1567   .bss.sConfig:0000000000000000 sConfig
     /tmp/ccZk6UHk.s:1563   .bss.sConfig:0000000000000000 $d
     /tmp/ccZk6UHk.s:1570   .data.pot_threshold:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
memset
ARM GAS  /tmp/ccZk6UHk.s 			page 46


HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_CAN_GetRxMessage
HAL_GPIO_TogglePin
HAL_CAN_AddTxMessage
HAL_Init
HAL_Delay

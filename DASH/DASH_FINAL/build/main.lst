ARM GAS  /tmp/ccIDeUdu.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB70:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "stdbool.h"
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
ARM GAS  /tmp/ccIDeUdu.s 			page 2


  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** #define DASH_CAN_ID			0x00F
  37:Src/main.c    **** #define RINEHARTCUR_CAN_ID			0x064
  38:Src/main.c    **** #define RINEHARTTOR_CAN_ID			0x082
  39:Src/main.c    **** #define FAULTS				0x0D0
  40:Src/main.c    **** #define STATES			0x00E
  41:Src/main.c    **** #define ENABLE_SIG		0x0D2
  42:Src/main.c    **** #define MOTOR_POS		0x0A5
  43:Src/main.c    **** #define BASiC     69
  44:Src/main.c    **** /* USER CODE END PD */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  47:Src/main.c    **** /* USER CODE BEGIN PM */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PM */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:Src/main.c    **** ADC_HandleTypeDef hadc1;
  53:Src/main.c    **** ADC_ChannelConfTypeDef sConfig = {0};
  54:Src/main.c    **** CAN_HandleTypeDef hcan;
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE BEGIN PV */
  57:Src/main.c    **** 
  58:Src/main.c    **** CAN_RxHeaderTypeDef     RxHeader;
  59:Src/main.c    **** uint8_t                 RxData[8];
  60:Src/main.c    **** 
  61:Src/main.c    **** CAN_TxHeaderTypeDef     POT_TxHeader;
  62:Src/main.c    **** CAN_TxHeaderTypeDef     POT_Txheader;
  63:Src/main.c    **** CAN_TxHeaderTypeDef     POT_Txheader1;
  64:Src/main.c    **** uint8_t                 POT_data[8];
  65:Src/main.c    **** uint8_t                 POT_Data[8];
  66:Src/main.c    **** uint8_t                 POT_Data1[8];
  67:Src/main.c    **** uint32_t                TxMailbox;
  68:Src/main.c    **** 
  69:Src/main.c    **** volatile char					CAN_flag;
  70:Src/main.c    **** 
  71:Src/main.c    **** uint16_t				pot_threshold[11] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE END PV */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  76:Src/main.c    **** void SystemClock_Config(void);
  77:Src/main.c    **** static void MX_GPIO_Init(void);
  78:Src/main.c    **** static void MX_ADC1_Init(void);
  79:Src/main.c    **** static void MX_CAN_Init(void);
  80:Src/main.c    **** /* USER CODE BEGIN PFP */
  81:Src/main.c    **** void POT_read(uint16_t pot_values[4]);
  82:Src/main.c    **** void CAN_interpret(void);
  83:Src/main.c    **** void  POT_interpret(uint16_t pot_values[4]);
  84:Src/main.c    **** /* USER CODE END PFP */
  85:Src/main.c    **** 
  86:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  87:Src/main.c    **** /* USER CODE BEGIN 0 */
  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END 0 */
  90:Src/main.c    **** 
ARM GAS  /tmp/ccIDeUdu.s 			page 3


  91:Src/main.c    **** /**
  92:Src/main.c    ****   * @brief  The application entry point.
  93:Src/main.c    ****   * @retval int
  94:Src/main.c    ****   */
  95:Src/main.c    **** int main(void)
  96:Src/main.c    **** {
  97:Src/main.c    ****   /* USER CODE BEGIN 1 */
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* USER CODE END 1 */
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 104:Src/main.c    ****   HAL_Init();
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* USER CODE BEGIN Init */
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE END Init */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* Configure the system clock */
 111:Src/main.c    ****   SystemClock_Config();
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* USER CODE END SysInit */
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* Initialize all configured peripherals */
 118:Src/main.c    ****   MX_GPIO_Init();
 119:Src/main.c    ****   MX_ADC1_Init();
 120:Src/main.c    ****   MX_CAN_Init();
 121:Src/main.c    ****   /* USER CODE BEGIN 2 */
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* USER CODE END 2 */
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* Infinite loop */
 126:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 127:Src/main.c    ****   while (1)
 128:Src/main.c    ****   {
 129:Src/main.c    ****     /* USER CODE END WHILE */
 130:Src/main.c    **** 
 131:Src/main.c    ****     /* USER CODE BEGIN 3 */
 132:Src/main.c    **** 
 133:Src/main.c    **** 	//if (CAN_flag == 0xFF)
 134:Src/main.c    **** 	//	CAN_interpret();
 135:Src/main.c    **** 
 136:Src/main.c    **** 	//send POT positions CAN message
 137:Src/main.c    **** 
 138:Src/main.c    **** 	uint16_t pot_position[4];
 139:Src/main.c    **** 	POT_read(pot_position);
 140:Src/main.c    **** 	POT_interpret(pot_position);
 141:Src/main.c    **** 
 142:Src/main.c    **** 
 143:Src/main.c    **** 	//HAL_CAN_AddTxMessage(&hcan, &POT_TxHeader, POT_data, &TxMailbox);
 144:Src/main.c    ****   //HAL_CAN_AddTxMessage(&hcan, &POT_Txheader, POT_Data, &TxMailbox);
 145:Src/main.c    **** 
 146:Src/main.c    **** 	//HAL_Delay(1000);
 147:Src/main.c    **** 
ARM GAS  /tmp/ccIDeUdu.s 			page 4


 148:Src/main.c    **** 
 149:Src/main.c    ****   }
 150:Src/main.c    ****   /* USER CODE END 3 */
 151:Src/main.c    **** }
 152:Src/main.c    **** 
 153:Src/main.c    **** /**
 154:Src/main.c    ****   * @brief System Clock Configuration
 155:Src/main.c    ****   * @retval None
 156:Src/main.c    ****   */
 157:Src/main.c    **** void SystemClock_Config(void)
 158:Src/main.c    **** {
 159:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 160:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 161:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 162:Src/main.c    **** 
 163:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 164:Src/main.c    ****   */
 165:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 166:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 167:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 168:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 169:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 170:Src/main.c    ****   {
 171:Src/main.c    ****     Error_Handler();
 172:Src/main.c    ****   }
 173:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 174:Src/main.c    ****   */
 175:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 176:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 177:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 178:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 179:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 180:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 181:Src/main.c    **** 
 182:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 183:Src/main.c    ****   {
 184:Src/main.c    ****     Error_Handler();
 185:Src/main.c    ****   }
 186:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 187:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 188:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 189:Src/main.c    ****   {
 190:Src/main.c    ****     Error_Handler();
 191:Src/main.c    ****   }
 192:Src/main.c    **** }
 193:Src/main.c    **** 
 194:Src/main.c    **** /**
 195:Src/main.c    ****   * @brief ADC1 Initialization Function
 196:Src/main.c    ****   * @param None
 197:Src/main.c    ****   * @retval None
 198:Src/main.c    ****   */
 199:Src/main.c    **** static void MX_ADC1_Init(void)
 200:Src/main.c    **** {
 201:Src/main.c    **** 
 202:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 203:Src/main.c    **** 
 204:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
ARM GAS  /tmp/ccIDeUdu.s 			page 5


 205:Src/main.c    **** 
 206:Src/main.c    ****   //ADC_ChannelConfTypeDef sConfig = {0};
 207:Src/main.c    **** 
 208:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 209:Src/main.c    **** 
 210:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 211:Src/main.c    ****   /** Common config
 212:Src/main.c    ****   */
 213:Src/main.c    ****   hadc1.Instance = ADC1;
 214:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 215:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 216:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 217:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 218:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 219:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 220:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 221:Src/main.c    ****   {
 222:Src/main.c    ****     Error_Handler();
 223:Src/main.c    ****   }
 224:Src/main.c    ****   /** Configure Regular Channel
 225:Src/main.c    ****   */
 226:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 227:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 228:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 229:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 230:Src/main.c    ****   {
 231:Src/main.c    ****     Error_Handler();
 232:Src/main.c    ****   }
 233:Src/main.c    ****   /** Configure Regular Channel
 234:Src/main.c    ****   */
 235:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 236:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 237:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 238:Src/main.c    ****   {
 239:Src/main.c    ****     Error_Handler();
 240:Src/main.c    ****   }
 241:Src/main.c    ****   /** Configure Regular Channel
 242:Src/main.c    ****   */
 243:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_7;
 244:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 245:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 246:Src/main.c    ****   {
 247:Src/main.c    ****     Error_Handler();
 248:Src/main.c    ****   }
 249:Src/main.c    ****   /** Configure Regular Channel
 250:Src/main.c    ****   */
 251:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 252:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 253:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 254:Src/main.c    ****   {
 255:Src/main.c    ****     Error_Handler();
 256:Src/main.c    ****   }
 257:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 258:Src/main.c    **** 
 259:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 260:Src/main.c    **** 
 261:Src/main.c    **** }
ARM GAS  /tmp/ccIDeUdu.s 			page 6


 262:Src/main.c    **** 
 263:Src/main.c    **** /**
 264:Src/main.c    ****   * @brief CAN Initialization Function
 265:Src/main.c    ****   * @param None
 266:Src/main.c    ****   * @retval None
 267:Src/main.c    ****   */
 268:Src/main.c    **** static void MX_CAN_Init(void)
 269:Src/main.c    **** {
 270:Src/main.c    **** 
 271:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 272:Src/main.c    **** 	CAN_FilterTypeDef     sFilterConfig;
 273:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 274:Src/main.c    **** 
 275:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 276:Src/main.c    **** 
 277:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 278:Src/main.c    **** hcan.Instance = CAN1;
 279:Src/main.c    ****   hcan.Init.Prescaler = 2; //500kbit/s
 280:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 281:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 282:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 283:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 284:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 285:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 286:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 287:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 288:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 289:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 290:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 291:Src/main.c    ****   {
 292:Src/main.c    ****     Error_Handler();
 293:Src/main.c    ****   }
 294:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 */
 295:Src/main.c    **** 	POT_TxHeader.StdId = DASH_CAN_ID; 						// CAN standard ID
 296:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 297:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 298:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 299:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 300:Src/main.c    **** 
 301:Src/main.c    ****   POT_Txheader.StdId = RINEHARTCUR_CAN_ID; 						// CAN standard ID
 302:Src/main.c    **** 	POT_Txheader.RTR = CAN_RTR_DATA; 						// CAN frame type
 303:Src/main.c    **** 	POT_Txheader.IDE = CAN_ID_STD; 							// CAN ID type
 304:Src/main.c    **** 	POT_Txheader.DLC = 2; 									// CAN frame length in bytes
 305:Src/main.c    **** 	POT_Txheader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 306:Src/main.c    **** 
 307:Src/main.c    ****   POT_Txheader1.StdId = RINEHARTTOR_CAN_ID; 						// CAN standard ID
 308:Src/main.c    ****   POT_Txheader1.RTR = CAN_RTR_DATA; 						// CAN frame type
 309:Src/main.c    ****   POT_Txheader1.IDE = CAN_ID_STD; 							// CAN ID type
 310:Src/main.c    ****   POT_Txheader1.DLC = 2; 									// CAN frame length in bytes
 311:Src/main.c    ****   POT_Txheader1.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 312:Src/main.c    **** 
 313:Src/main.c    **** 	sFilterConfig.FilterBank = 0;							// filter number (0-13)
 314:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 315:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 316:Src/main.c    **** 	sFilterConfig.FilterIdHigh = (0x000E << 5);					// received ID must match filter ID for each bit s
 317:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 318:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0FFE0;				// specifies which bits of the received ID to compare
ARM GAS  /tmp/ccIDeUdu.s 			page 7


 319:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 320:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 321:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 322:Src/main.c    **** 
 323:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 324:Src/main.c    **** 
 325:Src/main.c    **** 	HAL_CAN_Start(&hcan);
 326:Src/main.c    **** 
 327:Src/main.c    **** 	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 328:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 329:Src/main.c    **** 
 330:Src/main.c    **** }
 331:Src/main.c    **** 
 332:Src/main.c    **** /**
 333:Src/main.c    ****   * @brief GPIO Initialization Function
 334:Src/main.c    ****   * @param None
 335:Src/main.c    ****   * @retval None
 336:Src/main.c    ****   */
 337:Src/main.c    **** static void MX_GPIO_Init(void)
 338:Src/main.c    **** {
  26              		.loc 1 338 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 24
  33              		.cfi_offset 4, -24
  34              		.cfi_offset 5, -20
  35              		.cfi_offset 6, -16
  36              		.cfi_offset 7, -12
  37              		.cfi_offset 8, -8
  38              		.cfi_offset 14, -4
  39 0004 86B0     		sub	sp, sp, #24
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 48
 339:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 339 3 view .LVU1
  43              		.loc 1 339 20 is_stmt 0 view .LVU2
  44 0006 0024     		movs	r4, #0
  45 0008 0294     		str	r4, [sp, #8]
  46 000a 0394     		str	r4, [sp, #12]
  47 000c 0494     		str	r4, [sp, #16]
  48 000e 0594     		str	r4, [sp, #20]
 340:Src/main.c    **** 
 341:Src/main.c    ****   /* GPIO Ports Clock Enable */
 342:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  49              		.loc 1 342 3 is_stmt 1 view .LVU3
  50              	.LBB2:
  51              		.loc 1 342 3 view .LVU4
  52              		.loc 1 342 3 view .LVU5
  53 0010 1D4B     		ldr	r3, .L3
  54 0012 9A69     		ldr	r2, [r3, #24]
  55 0014 42F00402 		orr	r2, r2, #4
  56 0018 9A61     		str	r2, [r3, #24]
  57              		.loc 1 342 3 view .LVU6
  58 001a 9A69     		ldr	r2, [r3, #24]
ARM GAS  /tmp/ccIDeUdu.s 			page 8


  59 001c 02F00402 		and	r2, r2, #4
  60 0020 0092     		str	r2, [sp]
  61              		.loc 1 342 3 view .LVU7
  62 0022 009A     		ldr	r2, [sp]
  63              	.LBE2:
 343:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  64              		.loc 1 343 3 view .LVU8
  65              	.LBB3:
  66              		.loc 1 343 3 view .LVU9
  67              		.loc 1 343 3 view .LVU10
  68 0024 9A69     		ldr	r2, [r3, #24]
  69 0026 42F00802 		orr	r2, r2, #8
  70 002a 9A61     		str	r2, [r3, #24]
  71              		.loc 1 343 3 view .LVU11
  72 002c 9B69     		ldr	r3, [r3, #24]
  73 002e 03F00803 		and	r3, r3, #8
  74 0032 0193     		str	r3, [sp, #4]
  75              		.loc 1 343 3 view .LVU12
  76 0034 019B     		ldr	r3, [sp, #4]
  77              	.LBE3:
 344:Src/main.c    **** 
 345:Src/main.c    ****   /*Configure GPIO pin Output Level */
 346:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  78              		.loc 1 346 3 view .LVU13
  79 0036 DFF85880 		ldr	r8, .L3+8
  80 003a 2246     		mov	r2, r4
  81 003c 4FF45E71 		mov	r1, #888
  82 0040 4046     		mov	r0, r8
  83 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  84              	.LVL0:
 347:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin, GPIO_PIN_RESET);
 348:Src/main.c    **** 
 349:Src/main.c    ****   /*Configure GPIO pin Output Level */
 350:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin, GPIO_PIN_RESET);
  85              		.loc 1 350 3 view .LVU14
  86 0046 114D     		ldr	r5, .L3+4
  87 0048 2246     		mov	r2, r4
  88 004a 4FF4F071 		mov	r1, #480
  89 004e 2846     		mov	r0, r5
  90 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  91              	.LVL1:
 351:Src/main.c    **** 
 352:Src/main.c    ****   /*Configure GPIO pins : CUR_LED_Pin BMS_LED_ON_Pin IMD_LED_ON_Pin BSPD_LED_ON_Pin
 353:Src/main.c    ****                            DRS_LED_Pin TC_LED_Pin */
 354:Src/main.c    ****   GPIO_InitStruct.Pin = CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  92              		.loc 1 354 3 view .LVU15
  93              		.loc 1 354 23 is_stmt 0 view .LVU16
  94 0054 4FF45E73 		mov	r3, #888
  95 0058 0293     		str	r3, [sp, #8]
 355:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin;
 356:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  96              		.loc 1 356 3 is_stmt 1 view .LVU17
  97              		.loc 1 356 24 is_stmt 0 view .LVU18
  98 005a 0127     		movs	r7, #1
  99 005c 0397     		str	r7, [sp, #12]
 357:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 100              		.loc 1 357 3 is_stmt 1 view .LVU19
ARM GAS  /tmp/ccIDeUdu.s 			page 9


 101              		.loc 1 357 24 is_stmt 0 view .LVU20
 102 005e 0494     		str	r4, [sp, #16]
 358:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 103              		.loc 1 358 3 is_stmt 1 view .LVU21
 104              		.loc 1 358 25 is_stmt 0 view .LVU22
 105 0060 0226     		movs	r6, #2
 106 0062 0596     		str	r6, [sp, #20]
 359:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 107              		.loc 1 359 3 is_stmt 1 view .LVU23
 108 0064 02A9     		add	r1, sp, #8
 109 0066 4046     		mov	r0, r8
 110 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 111              	.LVL2:
 360:Src/main.c    **** 
 361:Src/main.c    ****   /*Configure GPIO pins : RGB_GREEN_Pin RGB_RED_Pin RGB_BLUE_Pin CUST_LED_Pin */
 362:Src/main.c    ****   GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin;
 112              		.loc 1 362 3 view .LVU24
 113              		.loc 1 362 23 is_stmt 0 view .LVU25
 114 006c 4FF4F073 		mov	r3, #480
 115 0070 0293     		str	r3, [sp, #8]
 363:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 116              		.loc 1 363 3 is_stmt 1 view .LVU26
 117              		.loc 1 363 24 is_stmt 0 view .LVU27
 118 0072 0397     		str	r7, [sp, #12]
 364:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 119              		.loc 1 364 3 is_stmt 1 view .LVU28
 120              		.loc 1 364 24 is_stmt 0 view .LVU29
 121 0074 0494     		str	r4, [sp, #16]
 365:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 122              		.loc 1 365 3 is_stmt 1 view .LVU30
 123              		.loc 1 365 25 is_stmt 0 view .LVU31
 124 0076 0596     		str	r6, [sp, #20]
 366:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 125              		.loc 1 366 3 is_stmt 1 view .LVU32
 126 0078 02A9     		add	r1, sp, #8
 127 007a 2846     		mov	r0, r5
 128 007c FFF7FEFF 		bl	HAL_GPIO_Init
 129              	.LVL3:
 367:Src/main.c    **** 
 368:Src/main.c    **** }
 130              		.loc 1 368 1 is_stmt 0 view .LVU33
 131 0080 06B0     		add	sp, sp, #24
 132              	.LCFI2:
 133              		.cfi_def_cfa_offset 24
 134              		@ sp needed
 135 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 136              	.L4:
 137 0086 00BF     		.align	2
 138              	.L3:
 139 0088 00100240 		.word	1073876992
 140 008c 000C0140 		.word	1073810432
 141 0090 00080140 		.word	1073809408
 142              		.cfi_endproc
 143              	.LFE70:
 145              		.section	.text.MX_ADC1_Init,"ax",%progbits
 146              		.align	1
 147              		.syntax unified
ARM GAS  /tmp/ccIDeUdu.s 			page 10


 148              		.thumb
 149              		.thumb_func
 150              		.fpu softvfp
 152              	MX_ADC1_Init:
 153              	.LFB68:
 200:Src/main.c    **** 
 154              		.loc 1 200 1 is_stmt 1 view -0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 159              	.LCFI3:
 160              		.cfi_def_cfa_offset 24
 161              		.cfi_offset 3, -24
 162              		.cfi_offset 4, -20
 163              		.cfi_offset 5, -16
 164              		.cfi_offset 6, -12
 165              		.cfi_offset 7, -8
 166              		.cfi_offset 14, -4
 213:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 167              		.loc 1 213 3 view .LVU35
 213:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 168              		.loc 1 213 18 is_stmt 0 view .LVU36
 169 0002 184D     		ldr	r5, .L7
 170 0004 184B     		ldr	r3, .L7+4
 171 0006 2B60     		str	r3, [r5]
 214:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 172              		.loc 1 214 3 is_stmt 1 view .LVU37
 214:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 173              		.loc 1 214 27 is_stmt 0 view .LVU38
 174 0008 0026     		movs	r6, #0
 175 000a AE60     		str	r6, [r5, #8]
 215:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 176              		.loc 1 215 3 is_stmt 1 view .LVU39
 215:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 177              		.loc 1 215 33 is_stmt 0 view .LVU40
 178 000c EE60     		str	r6, [r5, #12]
 216:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 179              		.loc 1 216 3 is_stmt 1 view .LVU41
 216:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 180              		.loc 1 216 36 is_stmt 0 view .LVU42
 181 000e 6E61     		str	r6, [r5, #20]
 217:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 182              		.loc 1 217 3 is_stmt 1 view .LVU43
 217:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 183              		.loc 1 217 31 is_stmt 0 view .LVU44
 184 0010 4FF46023 		mov	r3, #917504
 185 0014 EB61     		str	r3, [r5, #28]
 218:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 186              		.loc 1 218 3 is_stmt 1 view .LVU45
 218:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 187              		.loc 1 218 24 is_stmt 0 view .LVU46
 188 0016 6E60     		str	r6, [r5, #4]
 219:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 189              		.loc 1 219 3 is_stmt 1 view .LVU47
 219:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 190              		.loc 1 219 30 is_stmt 0 view .LVU48
ARM GAS  /tmp/ccIDeUdu.s 			page 11


 191 0018 0427     		movs	r7, #4
 192 001a 2F61     		str	r7, [r5, #16]
 220:Src/main.c    ****   {
 193              		.loc 1 220 3 is_stmt 1 view .LVU49
 220:Src/main.c    ****   {
 194              		.loc 1 220 7 is_stmt 0 view .LVU50
 195 001c 2846     		mov	r0, r5
 196 001e FFF7FEFF 		bl	HAL_ADC_Init
 197              	.LVL4:
 226:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 198              		.loc 1 226 3 is_stmt 1 view .LVU51
 226:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 199              		.loc 1 226 19 is_stmt 0 view .LVU52
 200 0022 124C     		ldr	r4, .L7+8
 201 0024 2660     		str	r6, [r4]
 227:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 202              		.loc 1 227 3 is_stmt 1 view .LVU53
 227:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 203              		.loc 1 227 16 is_stmt 0 view .LVU54
 204 0026 0126     		movs	r6, #1
 205 0028 6660     		str	r6, [r4, #4]
 228:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 206              		.loc 1 228 3 is_stmt 1 view .LVU55
 228:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 207              		.loc 1 228 24 is_stmt 0 view .LVU56
 208 002a A660     		str	r6, [r4, #8]
 229:Src/main.c    ****   {
 209              		.loc 1 229 3 is_stmt 1 view .LVU57
 229:Src/main.c    ****   {
 210              		.loc 1 229 7 is_stmt 0 view .LVU58
 211 002c 2146     		mov	r1, r4
 212 002e 2846     		mov	r0, r5
 213 0030 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 214              	.LVL5:
 235:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 215              		.loc 1 235 3 is_stmt 1 view .LVU59
 235:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 216              		.loc 1 235 19 is_stmt 0 view .LVU60
 217 0034 2660     		str	r6, [r4]
 236:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 218              		.loc 1 236 3 is_stmt 1 view .LVU61
 236:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 219              		.loc 1 236 16 is_stmt 0 view .LVU62
 220 0036 0223     		movs	r3, #2
 221 0038 6360     		str	r3, [r4, #4]
 237:Src/main.c    ****   {
 222              		.loc 1 237 3 is_stmt 1 view .LVU63
 237:Src/main.c    ****   {
 223              		.loc 1 237 7 is_stmt 0 view .LVU64
 224 003a 2146     		mov	r1, r4
 225 003c 2846     		mov	r0, r5
 226 003e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 227              	.LVL6:
 243:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 228              		.loc 1 243 3 is_stmt 1 view .LVU65
 243:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 229              		.loc 1 243 19 is_stmt 0 view .LVU66
ARM GAS  /tmp/ccIDeUdu.s 			page 12


 230 0042 0723     		movs	r3, #7
 231 0044 2360     		str	r3, [r4]
 244:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 232              		.loc 1 244 3 is_stmt 1 view .LVU67
 244:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 233              		.loc 1 244 16 is_stmt 0 view .LVU68
 234 0046 0323     		movs	r3, #3
 235 0048 6360     		str	r3, [r4, #4]
 245:Src/main.c    ****   {
 236              		.loc 1 245 3 is_stmt 1 view .LVU69
 245:Src/main.c    ****   {
 237              		.loc 1 245 7 is_stmt 0 view .LVU70
 238 004a 2146     		mov	r1, r4
 239 004c 2846     		mov	r0, r5
 240 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 241              	.LVL7:
 251:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 242              		.loc 1 251 3 is_stmt 1 view .LVU71
 251:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 243              		.loc 1 251 19 is_stmt 0 view .LVU72
 244 0052 0923     		movs	r3, #9
 245 0054 2360     		str	r3, [r4]
 252:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 246              		.loc 1 252 3 is_stmt 1 view .LVU73
 252:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 247              		.loc 1 252 16 is_stmt 0 view .LVU74
 248 0056 6760     		str	r7, [r4, #4]
 253:Src/main.c    ****   {
 249              		.loc 1 253 3 is_stmt 1 view .LVU75
 253:Src/main.c    ****   {
 250              		.loc 1 253 7 is_stmt 0 view .LVU76
 251 0058 2146     		mov	r1, r4
 252 005a 2846     		mov	r0, r5
 253 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 254              	.LVL8:
 261:Src/main.c    **** 
 255              		.loc 1 261 1 view .LVU77
 256 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 257              	.L8:
 258 0062 00BF     		.align	2
 259              	.L7:
 260 0064 00000000 		.word	hadc1
 261 0068 00240140 		.word	1073816576
 262 006c 00000000 		.word	.LANCHOR0
 263              		.cfi_endproc
 264              	.LFE68:
 266              		.section	.text.MX_CAN_Init,"ax",%progbits
 267              		.align	1
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 271              		.fpu softvfp
 273              	MX_CAN_Init:
 274              	.LFB69:
 269:Src/main.c    **** 
 275              		.loc 1 269 1 is_stmt 1 view -0
 276              		.cfi_startproc
ARM GAS  /tmp/ccIDeUdu.s 			page 13


 277              		@ args = 0, pretend = 0, frame = 40
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279 0000 70B5     		push	{r4, r5, r6, lr}
 280              	.LCFI4:
 281              		.cfi_def_cfa_offset 16
 282              		.cfi_offset 4, -16
 283              		.cfi_offset 5, -12
 284              		.cfi_offset 6, -8
 285              		.cfi_offset 14, -4
 286 0002 8AB0     		sub	sp, sp, #40
 287              	.LCFI5:
 288              		.cfi_def_cfa_offset 56
 272:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 289              		.loc 1 272 2 view .LVU79
 278:Src/main.c    ****   hcan.Init.Prescaler = 2; //500kbit/s
 290              		.loc 1 278 1 view .LVU80
 278:Src/main.c    ****   hcan.Init.Prescaler = 2; //500kbit/s
 291              		.loc 1 278 15 is_stmt 0 view .LVU81
 292 0004 244D     		ldr	r5, .L11
 293 0006 254B     		ldr	r3, .L11+4
 294 0008 2B60     		str	r3, [r5]
 279:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 295              		.loc 1 279 3 is_stmt 1 view .LVU82
 279:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 296              		.loc 1 279 23 is_stmt 0 view .LVU83
 297 000a 0226     		movs	r6, #2
 298 000c 6E60     		str	r6, [r5, #4]
 280:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 299              		.loc 1 280 3 is_stmt 1 view .LVU84
 280:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 300              		.loc 1 280 18 is_stmt 0 view .LVU85
 301 000e 0024     		movs	r4, #0
 302 0010 AC60     		str	r4, [r5, #8]
 281:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 303              		.loc 1 281 3 is_stmt 1 view .LVU86
 281:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 304              		.loc 1 281 27 is_stmt 0 view .LVU87
 305 0012 4FF08073 		mov	r3, #16777216
 306 0016 EB60     		str	r3, [r5, #12]
 282:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 307              		.loc 1 282 3 is_stmt 1 view .LVU88
 282:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 308              		.loc 1 282 22 is_stmt 0 view .LVU89
 309 0018 4FF44023 		mov	r3, #786432
 310 001c 2B61     		str	r3, [r5, #16]
 283:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 311              		.loc 1 283 3 is_stmt 1 view .LVU90
 283:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 312              		.loc 1 283 22 is_stmt 0 view .LVU91
 313 001e 4FF48013 		mov	r3, #1048576
 314 0022 6B61     		str	r3, [r5, #20]
 284:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 315              		.loc 1 284 3 is_stmt 1 view .LVU92
 284:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 316              		.loc 1 284 31 is_stmt 0 view .LVU93
 317 0024 2C76     		strb	r4, [r5, #24]
 285:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
ARM GAS  /tmp/ccIDeUdu.s 			page 14


 318              		.loc 1 285 3 is_stmt 1 view .LVU94
 285:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 319              		.loc 1 285 24 is_stmt 0 view .LVU95
 320 0026 6C76     		strb	r4, [r5, #25]
 286:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 321              		.loc 1 286 3 is_stmt 1 view .LVU96
 286:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 322              		.loc 1 286 24 is_stmt 0 view .LVU97
 323 0028 AC76     		strb	r4, [r5, #26]
 287:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 324              		.loc 1 287 3 is_stmt 1 view .LVU98
 287:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 325              		.loc 1 287 32 is_stmt 0 view .LVU99
 326 002a EC76     		strb	r4, [r5, #27]
 288:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 327              		.loc 1 288 3 is_stmt 1 view .LVU100
 288:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 328              		.loc 1 288 31 is_stmt 0 view .LVU101
 329 002c 2C77     		strb	r4, [r5, #28]
 289:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 330              		.loc 1 289 3 is_stmt 1 view .LVU102
 289:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 331              		.loc 1 289 34 is_stmt 0 view .LVU103
 332 002e 6C77     		strb	r4, [r5, #29]
 290:Src/main.c    ****   {
 333              		.loc 1 290 3 is_stmt 1 view .LVU104
 290:Src/main.c    ****   {
 334              		.loc 1 290 7 is_stmt 0 view .LVU105
 335 0030 2846     		mov	r0, r5
 336 0032 FFF7FEFF 		bl	HAL_CAN_Init
 337              	.LVL9:
 295:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 338              		.loc 1 295 2 is_stmt 1 view .LVU106
 295:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 339              		.loc 1 295 21 is_stmt 0 view .LVU107
 340 0036 1A4B     		ldr	r3, .L11+8
 341 0038 0F22     		movs	r2, #15
 342 003a 1A60     		str	r2, [r3]
 296:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 343              		.loc 1 296 2 is_stmt 1 view .LVU108
 296:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 344              		.loc 1 296 19 is_stmt 0 view .LVU109
 345 003c DC60     		str	r4, [r3, #12]
 297:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 346              		.loc 1 297 2 is_stmt 1 view .LVU110
 297:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 347              		.loc 1 297 19 is_stmt 0 view .LVU111
 348 003e 9C60     		str	r4, [r3, #8]
 298:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 349              		.loc 1 298 2 is_stmt 1 view .LVU112
 298:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 350              		.loc 1 298 19 is_stmt 0 view .LVU113
 351 0040 0422     		movs	r2, #4
 352 0042 1A61     		str	r2, [r3, #16]
 299:Src/main.c    **** 
 353              		.loc 1 299 2 is_stmt 1 view .LVU114
 299:Src/main.c    **** 
ARM GAS  /tmp/ccIDeUdu.s 			page 15


 354              		.loc 1 299 34 is_stmt 0 view .LVU115
 355 0044 1C75     		strb	r4, [r3, #20]
 301:Src/main.c    **** 	POT_Txheader.RTR = CAN_RTR_DATA; 						// CAN frame type
 356              		.loc 1 301 3 is_stmt 1 view .LVU116
 301:Src/main.c    **** 	POT_Txheader.RTR = CAN_RTR_DATA; 						// CAN frame type
 357              		.loc 1 301 22 is_stmt 0 view .LVU117
 358 0046 174B     		ldr	r3, .L11+12
 359 0048 6422     		movs	r2, #100
 360 004a 1A60     		str	r2, [r3]
 302:Src/main.c    **** 	POT_Txheader.IDE = CAN_ID_STD; 							// CAN ID type
 361              		.loc 1 302 2 is_stmt 1 view .LVU118
 302:Src/main.c    **** 	POT_Txheader.IDE = CAN_ID_STD; 							// CAN ID type
 362              		.loc 1 302 19 is_stmt 0 view .LVU119
 363 004c DC60     		str	r4, [r3, #12]
 303:Src/main.c    **** 	POT_Txheader.DLC = 2; 									// CAN frame length in bytes
 364              		.loc 1 303 2 is_stmt 1 view .LVU120
 303:Src/main.c    **** 	POT_Txheader.DLC = 2; 									// CAN frame length in bytes
 365              		.loc 1 303 19 is_stmt 0 view .LVU121
 366 004e 9C60     		str	r4, [r3, #8]
 304:Src/main.c    **** 	POT_Txheader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 367              		.loc 1 304 2 is_stmt 1 view .LVU122
 304:Src/main.c    **** 	POT_Txheader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 368              		.loc 1 304 19 is_stmt 0 view .LVU123
 369 0050 1E61     		str	r6, [r3, #16]
 305:Src/main.c    **** 
 370              		.loc 1 305 2 is_stmt 1 view .LVU124
 305:Src/main.c    **** 
 371              		.loc 1 305 34 is_stmt 0 view .LVU125
 372 0052 1C75     		strb	r4, [r3, #20]
 307:Src/main.c    ****   POT_Txheader1.RTR = CAN_RTR_DATA; 						// CAN frame type
 373              		.loc 1 307 3 is_stmt 1 view .LVU126
 307:Src/main.c    ****   POT_Txheader1.RTR = CAN_RTR_DATA; 						// CAN frame type
 374              		.loc 1 307 23 is_stmt 0 view .LVU127
 375 0054 144B     		ldr	r3, .L11+16
 376 0056 8222     		movs	r2, #130
 377 0058 1A60     		str	r2, [r3]
 308:Src/main.c    ****   POT_Txheader1.IDE = CAN_ID_STD; 							// CAN ID type
 378              		.loc 1 308 3 is_stmt 1 view .LVU128
 308:Src/main.c    ****   POT_Txheader1.IDE = CAN_ID_STD; 							// CAN ID type
 379              		.loc 1 308 21 is_stmt 0 view .LVU129
 380 005a DC60     		str	r4, [r3, #12]
 309:Src/main.c    ****   POT_Txheader1.DLC = 2; 									// CAN frame length in bytes
 381              		.loc 1 309 3 is_stmt 1 view .LVU130
 309:Src/main.c    ****   POT_Txheader1.DLC = 2; 									// CAN frame length in bytes
 382              		.loc 1 309 21 is_stmt 0 view .LVU131
 383 005c 9C60     		str	r4, [r3, #8]
 310:Src/main.c    ****   POT_Txheader1.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 384              		.loc 1 310 3 is_stmt 1 view .LVU132
 310:Src/main.c    ****   POT_Txheader1.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 385              		.loc 1 310 21 is_stmt 0 view .LVU133
 386 005e 1E61     		str	r6, [r3, #16]
 311:Src/main.c    **** 
 387              		.loc 1 311 3 is_stmt 1 view .LVU134
 311:Src/main.c    **** 
 388              		.loc 1 311 36 is_stmt 0 view .LVU135
 389 0060 1C75     		strb	r4, [r3, #20]
 313:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
ARM GAS  /tmp/ccIDeUdu.s 			page 16


 390              		.loc 1 313 2 is_stmt 1 view .LVU136
 313:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 391              		.loc 1 313 27 is_stmt 0 view .LVU137
 392 0062 0594     		str	r4, [sp, #20]
 314:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 393              		.loc 1 314 2 is_stmt 1 view .LVU138
 314:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 394              		.loc 1 314 27 is_stmt 0 view .LVU139
 395 0064 0694     		str	r4, [sp, #24]
 315:Src/main.c    **** 	sFilterConfig.FilterIdHigh = (0x000E << 5);					// received ID must match filter ID for each bit s
 396              		.loc 1 315 2 is_stmt 1 view .LVU140
 315:Src/main.c    **** 	sFilterConfig.FilterIdHigh = (0x000E << 5);					// received ID must match filter ID for each bit s
 397              		.loc 1 315 28 is_stmt 0 view .LVU141
 398 0066 0123     		movs	r3, #1
 399 0068 0793     		str	r3, [sp, #28]
 316:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 400              		.loc 1 316 2 is_stmt 1 view .LVU142
 316:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 401              		.loc 1 316 29 is_stmt 0 view .LVU143
 402 006a 4FF4E072 		mov	r2, #448
 403 006e 0092     		str	r2, [sp]
 317:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0FFE0;				// specifies which bits of the received ID to compare
 404              		.loc 1 317 2 is_stmt 1 view .LVU144
 317:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0FFE0;				// specifies which bits of the received ID to compare
 405              		.loc 1 317 28 is_stmt 0 view .LVU145
 406 0070 0194     		str	r4, [sp, #4]
 318:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 407              		.loc 1 318 2 is_stmt 1 view .LVU146
 318:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 408              		.loc 1 318 33 is_stmt 0 view .LVU147
 409 0072 4FF6E072 		movw	r2, #65504
 410 0076 0292     		str	r2, [sp, #8]
 319:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 411              		.loc 1 319 2 is_stmt 1 view .LVU148
 319:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 412              		.loc 1 319 32 is_stmt 0 view .LVU149
 413 0078 0394     		str	r4, [sp, #12]
 320:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 414              		.loc 1 320 2 is_stmt 1 view .LVU150
 320:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 415              		.loc 1 320 37 is_stmt 0 view .LVU151
 416 007a 0494     		str	r4, [sp, #16]
 321:Src/main.c    **** 
 417              		.loc 1 321 2 is_stmt 1 view .LVU152
 321:Src/main.c    **** 
 418              		.loc 1 321 33 is_stmt 0 view .LVU153
 419 007c 0893     		str	r3, [sp, #32]
 323:Src/main.c    **** 
 420              		.loc 1 323 2 is_stmt 1 view .LVU154
 421 007e 6946     		mov	r1, sp
 422 0080 2846     		mov	r0, r5
 423 0082 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 424              	.LVL10:
 325:Src/main.c    **** 
 425              		.loc 1 325 2 view .LVU155
 426 0086 2846     		mov	r0, r5
 427 0088 FFF7FEFF 		bl	HAL_CAN_Start
ARM GAS  /tmp/ccIDeUdu.s 			page 17


 428              	.LVL11:
 327:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 429              		.loc 1 327 2 view .LVU156
 430 008c 3146     		mov	r1, r6
 431 008e 2846     		mov	r0, r5
 432 0090 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 433              	.LVL12:
 330:Src/main.c    **** 
 434              		.loc 1 330 1 is_stmt 0 view .LVU157
 435 0094 0AB0     		add	sp, sp, #40
 436              	.LCFI6:
 437              		.cfi_def_cfa_offset 16
 438              		@ sp needed
 439 0096 70BD     		pop	{r4, r5, r6, pc}
 440              	.L12:
 441              		.align	2
 442              	.L11:
 443 0098 00000000 		.word	hcan
 444 009c 00640040 		.word	1073767424
 445 00a0 00000000 		.word	POT_TxHeader
 446 00a4 00000000 		.word	POT_Txheader
 447 00a8 00000000 		.word	POT_Txheader1
 448              		.cfi_endproc
 449              	.LFE69:
 451              		.section	.text.SystemClock_Config,"ax",%progbits
 452              		.align	1
 453              		.global	SystemClock_Config
 454              		.syntax unified
 455              		.thumb
 456              		.thumb_func
 457              		.fpu softvfp
 459              	SystemClock_Config:
 460              	.LFB67:
 158:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 461              		.loc 1 158 1 is_stmt 1 view -0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 80
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465 0000 30B5     		push	{r4, r5, lr}
 466              	.LCFI7:
 467              		.cfi_def_cfa_offset 12
 468              		.cfi_offset 4, -12
 469              		.cfi_offset 5, -8
 470              		.cfi_offset 14, -4
 471 0002 95B0     		sub	sp, sp, #84
 472              	.LCFI8:
 473              		.cfi_def_cfa_offset 96
 159:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 474              		.loc 1 159 3 view .LVU159
 159:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 475              		.loc 1 159 22 is_stmt 0 view .LVU160
 476 0004 2422     		movs	r2, #36
 477 0006 0021     		movs	r1, #0
 478 0008 0BA8     		add	r0, sp, #44
 479 000a FFF7FEFF 		bl	memset
 480              	.LVL13:
 160:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
ARM GAS  /tmp/ccIDeUdu.s 			page 18


 481              		.loc 1 160 3 is_stmt 1 view .LVU161
 160:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 482              		.loc 1 160 22 is_stmt 0 view .LVU162
 483 000e 0024     		movs	r4, #0
 484 0010 0594     		str	r4, [sp, #20]
 485 0012 0694     		str	r4, [sp, #24]
 486 0014 0794     		str	r4, [sp, #28]
 487 0016 0894     		str	r4, [sp, #32]
 488 0018 0994     		str	r4, [sp, #36]
 161:Src/main.c    **** 
 489              		.loc 1 161 3 is_stmt 1 view .LVU163
 161:Src/main.c    **** 
 490              		.loc 1 161 28 is_stmt 0 view .LVU164
 491 001a 0194     		str	r4, [sp, #4]
 492 001c 0294     		str	r4, [sp, #8]
 493 001e 0394     		str	r4, [sp, #12]
 494 0020 0494     		str	r4, [sp, #16]
 165:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 495              		.loc 1 165 3 is_stmt 1 view .LVU165
 165:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 496              		.loc 1 165 36 is_stmt 0 view .LVU166
 497 0022 0225     		movs	r5, #2
 498 0024 0A95     		str	r5, [sp, #40]
 166:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 499              		.loc 1 166 3 is_stmt 1 view .LVU167
 166:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 500              		.loc 1 166 30 is_stmt 0 view .LVU168
 501 0026 0123     		movs	r3, #1
 502 0028 0E93     		str	r3, [sp, #56]
 167:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 503              		.loc 1 167 3 is_stmt 1 view .LVU169
 167:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 504              		.loc 1 167 41 is_stmt 0 view .LVU170
 505 002a 1023     		movs	r3, #16
 506 002c 0F93     		str	r3, [sp, #60]
 168:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 507              		.loc 1 168 3 is_stmt 1 view .LVU171
 169:Src/main.c    ****   {
 508              		.loc 1 169 3 view .LVU172
 169:Src/main.c    ****   {
 509              		.loc 1 169 7 is_stmt 0 view .LVU173
 510 002e 0AA8     		add	r0, sp, #40
 511 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 512              	.LVL14:
 175:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 513              		.loc 1 175 3 is_stmt 1 view .LVU174
 175:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 514              		.loc 1 175 31 is_stmt 0 view .LVU175
 515 0034 0F23     		movs	r3, #15
 516 0036 0593     		str	r3, [sp, #20]
 177:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 517              		.loc 1 177 3 is_stmt 1 view .LVU176
 177:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 518              		.loc 1 177 34 is_stmt 0 view .LVU177
 519 0038 0694     		str	r4, [sp, #24]
 178:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 520              		.loc 1 178 3 is_stmt 1 view .LVU178
ARM GAS  /tmp/ccIDeUdu.s 			page 19


 178:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 521              		.loc 1 178 35 is_stmt 0 view .LVU179
 522 003a 0794     		str	r4, [sp, #28]
 179:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 523              		.loc 1 179 3 is_stmt 1 view .LVU180
 179:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 524              		.loc 1 179 36 is_stmt 0 view .LVU181
 525 003c 0894     		str	r4, [sp, #32]
 180:Src/main.c    **** 
 526              		.loc 1 180 3 is_stmt 1 view .LVU182
 180:Src/main.c    **** 
 527              		.loc 1 180 36 is_stmt 0 view .LVU183
 528 003e 0994     		str	r4, [sp, #36]
 182:Src/main.c    ****   {
 529              		.loc 1 182 3 is_stmt 1 view .LVU184
 182:Src/main.c    ****   {
 530              		.loc 1 182 7 is_stmt 0 view .LVU185
 531 0040 2146     		mov	r1, r4
 532 0042 05A8     		add	r0, sp, #20
 533 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 534              	.LVL15:
 186:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 535              		.loc 1 186 3 is_stmt 1 view .LVU186
 186:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 536              		.loc 1 186 38 is_stmt 0 view .LVU187
 537 0048 0195     		str	r5, [sp, #4]
 187:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 538              		.loc 1 187 3 is_stmt 1 view .LVU188
 187:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 539              		.loc 1 187 35 is_stmt 0 view .LVU189
 540 004a 0394     		str	r4, [sp, #12]
 188:Src/main.c    ****   {
 541              		.loc 1 188 3 is_stmt 1 view .LVU190
 188:Src/main.c    ****   {
 542              		.loc 1 188 7 is_stmt 0 view .LVU191
 543 004c 01A8     		add	r0, sp, #4
 544 004e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 545              	.LVL16:
 192:Src/main.c    **** 
 546              		.loc 1 192 1 view .LVU192
 547 0052 15B0     		add	sp, sp, #84
 548              	.LCFI9:
 549              		.cfi_def_cfa_offset 12
 550              		@ sp needed
 551 0054 30BD     		pop	{r4, r5, pc}
 552              		.cfi_endproc
 553              	.LFE67:
 555              		.section	.text.POT_read,"ax",%progbits
 556              		.align	1
 557              		.global	POT_read
 558              		.syntax unified
 559              		.thumb
 560              		.thumb_func
 561              		.fpu softvfp
 563              	POT_read:
 564              	.LVL17:
 565              	.LFB71:
ARM GAS  /tmp/ccIDeUdu.s 			page 20


 369:Src/main.c    **** 
 370:Src/main.c    **** 
 371:Src/main.c    **** 
 372:Src/main.c    **** /* USER CODE BEGIN 4 */
 373:Src/main.c    **** void POT_read(uint16_t pot_values[4]) {
 566              		.loc 1 373 39 is_stmt 1 view -0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		.loc 1 373 39 is_stmt 0 view .LVU194
 571 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 572              	.LCFI10:
 573              		.cfi_def_cfa_offset 24
 574              		.cfi_offset 4, -24
 575              		.cfi_offset 5, -20
 576              		.cfi_offset 6, -16
 577              		.cfi_offset 7, -12
 578              		.cfi_offset 8, -8
 579              		.cfi_offset 14, -4
 580 0004 0746     		mov	r7, r0
 374:Src/main.c    **** 	//0 1 7 9
 375:Src/main.c    **** 
 376:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_0;
 581              		.loc 1 376 2 is_stmt 1 view .LVU195
 582              		.loc 1 376 18 is_stmt 0 view .LVU196
 583 0006 334D     		ldr	r5, .L17
 584 0008 0023     		movs	r3, #0
 585 000a 2B60     		str	r3, [r5]
 377:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 586              		.loc 1 377 2 is_stmt 1 view .LVU197
 587              		.loc 1 377 15 is_stmt 0 view .LVU198
 588 000c 0126     		movs	r6, #1
 589 000e 6E60     		str	r6, [r5, #4]
 378:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 590              		.loc 1 378 2 is_stmt 1 view .LVU199
 591              		.loc 1 378 23 is_stmt 0 view .LVU200
 592 0010 4FF00608 		mov	r8, #6
 593 0014 C5F80880 		str	r8, [r5, #8]
 379:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 594              		.loc 1 379 2 is_stmt 1 view .LVU201
 595 0018 2F4C     		ldr	r4, .L17+4
 596 001a 2946     		mov	r1, r5
 597 001c 2046     		mov	r0, r4
 598              	.LVL18:
 599              		.loc 1 379 2 is_stmt 0 view .LVU202
 600 001e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 601              	.LVL19:
 380:Src/main.c    **** 
 381:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 602              		.loc 1 381 2 is_stmt 1 view .LVU203
 603 0022 2046     		mov	r0, r4
 604 0024 FFF7FEFF 		bl	HAL_ADC_Start
 605              	.LVL20:
 382:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);		//change timeout to a HAL define
 606              		.loc 1 382 2 view .LVU204
 607 0028 4FF47A71 		mov	r1, #1000
 608 002c 2046     		mov	r0, r4
ARM GAS  /tmp/ccIDeUdu.s 			page 21


 609 002e FFF7FEFF 		bl	HAL_ADC_PollForConversion
 610              	.LVL21:
 383:Src/main.c    **** 	pot_values[0] = HAL_ADC_GetValue(&hadc1);
 611              		.loc 1 383 2 view .LVU205
 612              		.loc 1 383 18 is_stmt 0 view .LVU206
 613 0032 2046     		mov	r0, r4
 614 0034 FFF7FEFF 		bl	HAL_ADC_GetValue
 615              	.LVL22:
 616              		.loc 1 383 16 view .LVU207
 617 0038 3880     		strh	r0, [r7]	@ movhi
 384:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 618              		.loc 1 384 2 is_stmt 1 view .LVU208
 619 003a 2046     		mov	r0, r4
 620 003c FFF7FEFF 		bl	HAL_ADC_Stop
 621              	.LVL23:
 385:Src/main.c    **** 
 386:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_1;
 622              		.loc 1 386 2 view .LVU209
 623              		.loc 1 386 18 is_stmt 0 view .LVU210
 624 0040 2E60     		str	r6, [r5]
 387:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 625              		.loc 1 387 2 is_stmt 1 view .LVU211
 626              		.loc 1 387 15 is_stmt 0 view .LVU212
 627 0042 6E60     		str	r6, [r5, #4]
 388:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 628              		.loc 1 388 2 is_stmt 1 view .LVU213
 629              		.loc 1 388 23 is_stmt 0 view .LVU214
 630 0044 C5F80880 		str	r8, [r5, #8]
 389:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 631              		.loc 1 389 2 is_stmt 1 view .LVU215
 632 0048 2946     		mov	r1, r5
 633 004a 2046     		mov	r0, r4
 634 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 635              	.LVL24:
 390:Src/main.c    **** 
 391:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 636              		.loc 1 391 2 view .LVU216
 637 0050 2046     		mov	r0, r4
 638 0052 FFF7FEFF 		bl	HAL_ADC_Start
 639              	.LVL25:
 392:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 640              		.loc 1 392 2 view .LVU217
 641 0056 4FF47A71 		mov	r1, #1000
 642 005a 2046     		mov	r0, r4
 643 005c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 644              	.LVL26:
 393:Src/main.c    **** 	pot_values[1] = HAL_ADC_GetValue(&hadc1);
 645              		.loc 1 393 2 view .LVU218
 646              		.loc 1 393 18 is_stmt 0 view .LVU219
 647 0060 2046     		mov	r0, r4
 648 0062 FFF7FEFF 		bl	HAL_ADC_GetValue
 649              	.LVL27:
 650              		.loc 1 393 16 view .LVU220
 651 0066 7880     		strh	r0, [r7, #2]	@ movhi
 394:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 652              		.loc 1 394 2 is_stmt 1 view .LVU221
 653 0068 2046     		mov	r0, r4
ARM GAS  /tmp/ccIDeUdu.s 			page 22


 654 006a FFF7FEFF 		bl	HAL_ADC_Stop
 655              	.LVL28:
 395:Src/main.c    **** 
 396:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_7;
 656              		.loc 1 396 2 view .LVU222
 657              		.loc 1 396 18 is_stmt 0 view .LVU223
 658 006e 0723     		movs	r3, #7
 659 0070 2B60     		str	r3, [r5]
 397:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 660              		.loc 1 397 2 is_stmt 1 view .LVU224
 661              		.loc 1 397 15 is_stmt 0 view .LVU225
 662 0072 6E60     		str	r6, [r5, #4]
 398:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 663              		.loc 1 398 2 is_stmt 1 view .LVU226
 664              		.loc 1 398 23 is_stmt 0 view .LVU227
 665 0074 C5F80880 		str	r8, [r5, #8]
 399:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 666              		.loc 1 399 2 is_stmt 1 view .LVU228
 667 0078 2946     		mov	r1, r5
 668 007a 2046     		mov	r0, r4
 669 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 670              	.LVL29:
 400:Src/main.c    **** 
 401:Src/main.c    **** 
 402:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 671              		.loc 1 402 2 view .LVU229
 672 0080 2046     		mov	r0, r4
 673 0082 FFF7FEFF 		bl	HAL_ADC_Start
 674              	.LVL30:
 403:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 675              		.loc 1 403 2 view .LVU230
 676 0086 4FF47A71 		mov	r1, #1000
 677 008a 2046     		mov	r0, r4
 678 008c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 679              	.LVL31:
 404:Src/main.c    **** 	pot_values[2] = HAL_ADC_GetValue(&hadc1);
 680              		.loc 1 404 2 view .LVU231
 681              		.loc 1 404 18 is_stmt 0 view .LVU232
 682 0090 2046     		mov	r0, r4
 683 0092 FFF7FEFF 		bl	HAL_ADC_GetValue
 684              	.LVL32:
 685              		.loc 1 404 16 view .LVU233
 686 0096 B880     		strh	r0, [r7, #4]	@ movhi
 405:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 687              		.loc 1 405 2 is_stmt 1 view .LVU234
 688 0098 2046     		mov	r0, r4
 689 009a FFF7FEFF 		bl	HAL_ADC_Stop
 690              	.LVL33:
 406:Src/main.c    **** 
 407:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_9;
 691              		.loc 1 407 2 view .LVU235
 692              		.loc 1 407 18 is_stmt 0 view .LVU236
 693 009e 0923     		movs	r3, #9
 694 00a0 2B60     		str	r3, [r5]
 408:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 695              		.loc 1 408 2 is_stmt 1 view .LVU237
 696              		.loc 1 408 15 is_stmt 0 view .LVU238
ARM GAS  /tmp/ccIDeUdu.s 			page 23


 697 00a2 6E60     		str	r6, [r5, #4]
 409:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 698              		.loc 1 409 2 is_stmt 1 view .LVU239
 699              		.loc 1 409 23 is_stmt 0 view .LVU240
 700 00a4 C5F80880 		str	r8, [r5, #8]
 410:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 701              		.loc 1 410 2 is_stmt 1 view .LVU241
 702 00a8 2946     		mov	r1, r5
 703 00aa 2046     		mov	r0, r4
 704 00ac FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 705              	.LVL34:
 411:Src/main.c    **** 
 412:Src/main.c    **** 
 413:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 706              		.loc 1 413 2 view .LVU242
 707 00b0 2046     		mov	r0, r4
 708 00b2 FFF7FEFF 		bl	HAL_ADC_Start
 709              	.LVL35:
 414:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 710              		.loc 1 414 2 view .LVU243
 711 00b6 4FF47A71 		mov	r1, #1000
 712 00ba 2046     		mov	r0, r4
 713 00bc FFF7FEFF 		bl	HAL_ADC_PollForConversion
 714              	.LVL36:
 415:Src/main.c    **** 	pot_values[3] = HAL_ADC_GetValue(&hadc1);
 715              		.loc 1 415 2 view .LVU244
 716              		.loc 1 415 18 is_stmt 0 view .LVU245
 717 00c0 2046     		mov	r0, r4
 718 00c2 FFF7FEFF 		bl	HAL_ADC_GetValue
 719              	.LVL37:
 720              		.loc 1 415 16 view .LVU246
 721 00c6 F880     		strh	r0, [r7, #6]	@ movhi
 416:Src/main.c    **** 
 417:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 722              		.loc 1 417 2 is_stmt 1 view .LVU247
 723 00c8 2046     		mov	r0, r4
 724 00ca FFF7FEFF 		bl	HAL_ADC_Stop
 725              	.LVL38:
 418:Src/main.c    **** 
 419:Src/main.c    **** }
 726              		.loc 1 419 1 is_stmt 0 view .LVU248
 727 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 728              	.LVL39:
 729              	.L18:
 730              		.loc 1 419 1 view .LVU249
 731 00d2 00BF     		.align	2
 732              	.L17:
 733 00d4 00000000 		.word	.LANCHOR0
 734 00d8 00000000 		.word	hadc1
 735              		.cfi_endproc
 736              	.LFE71:
 738              		.section	.text.POT_interpret,"ax",%progbits
 739              		.align	1
 740              		.global	POT_interpret
 741              		.syntax unified
 742              		.thumb
 743              		.thumb_func
ARM GAS  /tmp/ccIDeUdu.s 			page 24


 744              		.fpu softvfp
 746              	POT_interpret:
 747              	.LVL40:
 748              	.LFB72:
 420:Src/main.c    **** 
 421:Src/main.c    **** void POT_interpret(uint16_t pot_values[4]) {
 749              		.loc 1 421 44 is_stmt 1 view -0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 8
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753              		.loc 1 421 44 is_stmt 0 view .LVU251
 754 0000 30B5     		push	{r4, r5, lr}
 755              	.LCFI11:
 756              		.cfi_def_cfa_offset 12
 757              		.cfi_offset 4, -12
 758              		.cfi_offset 5, -8
 759              		.cfi_offset 14, -4
 760 0002 83B0     		sub	sp, sp, #12
 761              	.LCFI12:
 762              		.cfi_def_cfa_offset 24
 422:Src/main.c    **** 
 423:Src/main.c    **** 	uint8_t pot_pos[4];
 763              		.loc 1 423 2 is_stmt 1 view .LVU252
 424:Src/main.c    **** 	uint8_t i, j;
 764              		.loc 1 424 2 view .LVU253
 425:Src/main.c    **** 
 426:Src/main.c    **** 	for (i = 0; i < 4; i++) {
 765              		.loc 1 426 2 view .LVU254
 766              	.LVL41:
 767              		.loc 1 426 9 is_stmt 0 view .LVU255
 768 0004 0024     		movs	r4, #0
 769              		.loc 1 426 2 view .LVU256
 770 0006 1FE0     		b	.L20
 771              	.LVL42:
 772              	.L21:
 427:Src/main.c    **** 
 428:Src/main.c    **** 		for (j = 0; j < 10; j++) {
 773              		.loc 1 428 24 discriminator 2 view .LVU257
 774 0008 0133     		adds	r3, r3, #1
 775              	.LVL43:
 776              		.loc 1 428 24 discriminator 2 view .LVU258
 777 000a DBB2     		uxtb	r3, r3
 778              	.LVL44:
 779              	.L23:
 780              		.loc 1 428 3 discriminator 1 view .LVU259
 781 000c 092B     		cmp	r3, #9
 782 000e 13D8     		bhi	.L44
 429:Src/main.c    **** 
 430:Src/main.c    **** 			//uint16_t pot_threshold[12] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
 431:Src/main.c    **** 			if ((pot_values[i] > pot_threshold[j]) && (pot_values[i] <= pot_threshold[j + 1]))
 783              		.loc 1 431 4 is_stmt 1 view .LVU260
 784              		.loc 1 431 19 is_stmt 0 view .LVU261
 785 0010 30F81420 		ldrh	r2, [r0, r4, lsl #1]
 786              		.loc 1 431 38 view .LVU262
 787 0014 5849     		ldr	r1, .L54
 788 0016 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 789              		.loc 1 431 7 view .LVU263
ARM GAS  /tmp/ccIDeUdu.s 			page 25


 790 001a 8A42     		cmp	r2, r1
 791 001c F4D9     		bls	.L21
 792              		.loc 1 431 80 discriminator 1 view .LVU264
 793 001e 591C     		adds	r1, r3, #1
 794              		.loc 1 431 77 discriminator 1 view .LVU265
 795 0020 554D     		ldr	r5, .L54
 796 0022 35F81110 		ldrh	r1, [r5, r1, lsl #1]
 797              		.loc 1 431 43 discriminator 1 view .LVU266
 798 0026 8A42     		cmp	r2, r1
 799 0028 EED8     		bhi	.L21
 432:Src/main.c    **** 				pot_pos[i] = 10 - (j + 1); // pot_pos[i] = 0 is ~3.3V, pot_pos[i] = 1 is ~3V, etc.
 800              		.loc 1 432 5 is_stmt 1 view .LVU267
 801              		.loc 1 432 21 is_stmt 0 view .LVU268
 802 002a C3F10902 		rsb	r2, r3, #9
 803              		.loc 1 432 16 view .LVU269
 804 002e 02A9     		add	r1, sp, #8
 805 0030 2144     		add	r1, r1, r4
 806 0032 01F8042C 		strb	r2, [r1, #-4]
 807 0036 E7E7     		b	.L21
 808              	.L44:
 433:Src/main.c    **** 			}
 434:Src/main.c    **** 
 435:Src/main.c    **** 		POT_data[i] = pot_pos[i];
 809              		.loc 1 435 3 is_stmt 1 discriminator 2 view .LVU270
 810              		.loc 1 435 24 is_stmt 0 discriminator 2 view .LVU271
 811 0038 02AB     		add	r3, sp, #8
 812              	.LVL45:
 813              		.loc 1 435 24 discriminator 2 view .LVU272
 814 003a 2344     		add	r3, r3, r4
 815 003c 13F8042C 		ldrb	r2, [r3, #-4]	@ zero_extendqisi2
 816              		.loc 1 435 15 discriminator 2 view .LVU273
 817 0040 4E4B     		ldr	r3, .L54+4
 818 0042 1A55     		strb	r2, [r3, r4]
 426:Src/main.c    **** 
 819              		.loc 1 426 22 discriminator 2 view .LVU274
 820 0044 0134     		adds	r4, r4, #1
 821              	.LVL46:
 426:Src/main.c    **** 
 822              		.loc 1 426 22 discriminator 2 view .LVU275
 823 0046 E4B2     		uxtb	r4, r4
 824              	.LVL47:
 825              	.L20:
 426:Src/main.c    **** 
 826              		.loc 1 426 2 discriminator 1 view .LVU276
 827 0048 032C     		cmp	r4, #3
 828 004a 01D8     		bhi	.L45
 428:Src/main.c    **** 
 829              		.loc 1 428 10 view .LVU277
 830 004c 0023     		movs	r3, #0
 831 004e DDE7     		b	.L23
 832              	.L45:
 436:Src/main.c    **** 		//POT_data[0] = 0x00;
 437:Src/main.c    **** 
 438:Src/main.c    **** 	}
 439:Src/main.c    **** 
 440:Src/main.c    **** if (pot_pos[1] == 0){
 833              		.loc 1 440 1 is_stmt 1 view .LVU278
ARM GAS  /tmp/ccIDeUdu.s 			page 26


 834              		.loc 1 440 12 is_stmt 0 view .LVU279
 835 0050 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 836              		.loc 1 440 4 view .LVU280
 837 0054 6BBB     		cbnz	r3, .L24
 441:Src/main.c    **** 	POT_Data[1] = 1;
 838              		.loc 1 441 2 is_stmt 1 view .LVU281
 839              		.loc 1 441 14 is_stmt 0 view .LVU282
 840 0056 4A4B     		ldr	r3, .L54+8
 841 0058 0122     		movs	r2, #1
 842 005a 5A70     		strb	r2, [r3, #1]
 442:Src/main.c    ****   POT_Data[0] = 244;
 843              		.loc 1 442 3 is_stmt 1 view .LVU283
 844              		.loc 1 442 15 is_stmt 0 view .LVU284
 845 005c F422     		movs	r2, #244
 846 005e 1A70     		strb	r2, [r3]
 847              	.L25:
 443:Src/main.c    ****   }
 444:Src/main.c    **** 
 445:Src/main.c    **** else if (pot_pos[1] == 1){
 446:Src/main.c    ****   	POT_Data[1] = 3;
 447:Src/main.c    ****     POT_Data[0] = 232;
 448:Src/main.c    ****   }
 449:Src/main.c    **** 
 450:Src/main.c    **** else if (pot_pos[1] == 2){
 451:Src/main.c    ****     	POT_Data[1] = 4;
 452:Src/main.c    ****       POT_Data[0] = 176;
 453:Src/main.c    ****   }
 454:Src/main.c    **** 
 455:Src/main.c    **** else if (pot_pos[1] == 3){
 456:Src/main.c    ****     	POT_Data[1] = 5;
 457:Src/main.c    ****       POT_Data[0] = 70;
 458:Src/main.c    ****   }
 459:Src/main.c    **** 
 460:Src/main.c    **** else if (pot_pos[1] == 4){
 461:Src/main.c    ****       	POT_Data[1] = 5;
 462:Src/main.c    ****         POT_Data[0] = 220;
 463:Src/main.c    ****   }
 464:Src/main.c    **** 
 465:Src/main.c    **** else if (pot_pos[1] == 5){
 466:Src/main.c    ****         	POT_Data[1] = 6;
 467:Src/main.c    ****           POT_Data[0] = 114;
 468:Src/main.c    ****   }
 469:Src/main.c    **** 
 470:Src/main.c    **** else if (pot_pos[1] == 6){
 471:Src/main.c    ****     	POT_Data[1] = 7;
 472:Src/main.c    ****       POT_Data[0] = 8;
 473:Src/main.c    ****   }
 474:Src/main.c    **** 
 475:Src/main.c    **** else if (pot_pos[1] == 7){
 476:Src/main.c    ****     	POT_Data[1] = 7;
 477:Src/main.c    ****       POT_Data[0] = 158;
 478:Src/main.c    ****   }
 479:Src/main.c    **** 
 480:Src/main.c    **** else if (pot_pos[1] == 8){
 481:Src/main.c    ****     	POT_Data[1] = 8;
 482:Src/main.c    ****       POT_Data[0] = 52;
 483:Src/main.c    ****   }
ARM GAS  /tmp/ccIDeUdu.s 			page 27


 484:Src/main.c    **** 
 485:Src/main.c    **** else if (pot_pos[1] == 9){
 486:Src/main.c    ****     	POT_Data[1] = 8;
 487:Src/main.c    ****       POT_Data[0] = 202;
 488:Src/main.c    ****   }
 489:Src/main.c    **** 
 490:Src/main.c    **** 	if (pot_pos[0] != 0) // if CURRENT_POT is in any position other than first, turn on CUR_LED
 848              		.loc 1 490 2 is_stmt 1 view .LVU285
 849              		.loc 1 490 13 is_stmt 0 view .LVU286
 850 0060 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 851              		.loc 1 490 5 view .LVU287
 852 0064 002B     		cmp	r3, #0
 853 0066 6CD0     		beq	.L34
 491:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_SET);
 854              		.loc 1 491 3 is_stmt 1 view .LVU288
 855 0068 0122     		movs	r2, #1
 856 006a 4FF48071 		mov	r1, #256
 857 006e 4548     		ldr	r0, .L54+12
 858              	.LVL48:
 859              		.loc 1 491 3 is_stmt 0 view .LVU289
 860 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 861              	.LVL49:
 862              	.L35:
 492:Src/main.c    ****   else
 493:Src/main.c    ****   	HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_RESET);
 494:Src/main.c    **** 
 495:Src/main.c    **** 	if (pot_pos[1] != 0) // if CUSTOM_POT is in any position other than first, turn on CUST_LED
 863              		.loc 1 495 2 is_stmt 1 view .LVU290
 864              		.loc 1 495 13 is_stmt 0 view .LVU291
 865 0074 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 866              		.loc 1 495 5 view .LVU292
 867 0078 002B     		cmp	r3, #0
 868 007a 69D0     		beq	.L36
 496:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_SET);
 869              		.loc 1 496 3 is_stmt 1 view .LVU293
 870 007c 0122     		movs	r2, #1
 871 007e 0821     		movs	r1, #8
 872 0080 4148     		ldr	r0, .L54+16
 873 0082 FFF7FEFF 		bl	HAL_GPIO_WritePin
 874              	.LVL50:
 875              	.L37:
 497:Src/main.c    **** 	else
 498:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_RESET);
 499:Src/main.c    **** 
 500:Src/main.c    **** 	if (pot_pos[2] != 0) // if TC_POT is in any position other than first, turn on TC_LED
 876              		.loc 1 500 2 view .LVU294
 877              		.loc 1 500 13 is_stmt 0 view .LVU295
 878 0086 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 879              		.loc 1 500 5 view .LVU296
 880 008a 002B     		cmp	r3, #0
 881 008c 66D0     		beq	.L38
 501:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_SET);
 882              		.loc 1 501 3 is_stmt 1 view .LVU297
 883 008e 0122     		movs	r2, #1
 884 0090 4FF40071 		mov	r1, #512
 885 0094 3C48     		ldr	r0, .L54+16
 886 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccIDeUdu.s 			page 28


 887              	.LVL51:
 888              	.L39:
 502:Src/main.c    **** 	else
 503:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_RESET);
 504:Src/main.c    **** 
 505:Src/main.c    **** 	if (pot_pos[3] != 0) // if DRS_POT is in any position other than first, turn on DRS_LED
 889              		.loc 1 505 2 view .LVU298
 890              		.loc 1 505 13 is_stmt 0 view .LVU299
 891 009a 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 892              		.loc 1 505 5 view .LVU300
 893 009e 002B     		cmp	r3, #0
 894 00a0 63D0     		beq	.L40
 506:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_SET);
 895              		.loc 1 506 3 is_stmt 1 view .LVU301
 896 00a2 0122     		movs	r2, #1
 897 00a4 4FF48071 		mov	r1, #256
 898 00a8 3748     		ldr	r0, .L54+16
 899 00aa FFF7FEFF 		bl	HAL_GPIO_WritePin
 900              	.LVL52:
 901              	.L19:
 507:Src/main.c    **** 	else
 508:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_RESET);
 509:Src/main.c    **** 
 510:Src/main.c    **** }
 902              		.loc 1 510 1 is_stmt 0 view .LVU302
 903 00ae 03B0     		add	sp, sp, #12
 904              	.LCFI13:
 905              		.cfi_remember_state
 906              		.cfi_def_cfa_offset 12
 907              		@ sp needed
 908 00b0 30BD     		pop	{r4, r5, pc}
 909              	.LVL53:
 910              	.L24:
 911              	.LCFI14:
 912              		.cfi_restore_state
 445:Src/main.c    ****   	POT_Data[1] = 3;
 913              		.loc 1 445 6 is_stmt 1 view .LVU303
 445:Src/main.c    ****   	POT_Data[1] = 3;
 914              		.loc 1 445 9 is_stmt 0 view .LVU304
 915 00b2 012B     		cmp	r3, #1
 916 00b4 15D0     		beq	.L46
 450:Src/main.c    ****     	POT_Data[1] = 4;
 917              		.loc 1 450 6 is_stmt 1 view .LVU305
 450:Src/main.c    ****     	POT_Data[1] = 4;
 918              		.loc 1 450 9 is_stmt 0 view .LVU306
 919 00b6 022B     		cmp	r3, #2
 920 00b8 19D0     		beq	.L47
 455:Src/main.c    ****     	POT_Data[1] = 5;
 921              		.loc 1 455 6 is_stmt 1 view .LVU307
 455:Src/main.c    ****     	POT_Data[1] = 5;
 922              		.loc 1 455 9 is_stmt 0 view .LVU308
 923 00ba 032B     		cmp	r3, #3
 924 00bc 1DD0     		beq	.L48
 460:Src/main.c    ****       	POT_Data[1] = 5;
 925              		.loc 1 460 6 is_stmt 1 view .LVU309
 460:Src/main.c    ****       	POT_Data[1] = 5;
 926              		.loc 1 460 9 is_stmt 0 view .LVU310
ARM GAS  /tmp/ccIDeUdu.s 			page 29


 927 00be 042B     		cmp	r3, #4
 928 00c0 21D0     		beq	.L49
 465:Src/main.c    ****         	POT_Data[1] = 6;
 929              		.loc 1 465 6 is_stmt 1 view .LVU311
 465:Src/main.c    ****         	POT_Data[1] = 6;
 930              		.loc 1 465 9 is_stmt 0 view .LVU312
 931 00c2 052B     		cmp	r3, #5
 932 00c4 25D0     		beq	.L50
 470:Src/main.c    ****     	POT_Data[1] = 7;
 933              		.loc 1 470 6 is_stmt 1 view .LVU313
 470:Src/main.c    ****     	POT_Data[1] = 7;
 934              		.loc 1 470 9 is_stmt 0 view .LVU314
 935 00c6 062B     		cmp	r3, #6
 936 00c8 29D0     		beq	.L51
 475:Src/main.c    ****     	POT_Data[1] = 7;
 937              		.loc 1 475 6 is_stmt 1 view .LVU315
 475:Src/main.c    ****     	POT_Data[1] = 7;
 938              		.loc 1 475 9 is_stmt 0 view .LVU316
 939 00ca 072B     		cmp	r3, #7
 940 00cc 2DD0     		beq	.L52
 480:Src/main.c    ****     	POT_Data[1] = 8;
 941              		.loc 1 480 6 is_stmt 1 view .LVU317
 480:Src/main.c    ****     	POT_Data[1] = 8;
 942              		.loc 1 480 9 is_stmt 0 view .LVU318
 943 00ce 082B     		cmp	r3, #8
 944 00d0 31D0     		beq	.L53
 485:Src/main.c    ****     	POT_Data[1] = 8;
 945              		.loc 1 485 6 is_stmt 1 view .LVU319
 485:Src/main.c    ****     	POT_Data[1] = 8;
 946              		.loc 1 485 9 is_stmt 0 view .LVU320
 947 00d2 092B     		cmp	r3, #9
 948 00d4 C4D1     		bne	.L25
 486:Src/main.c    ****       POT_Data[0] = 202;
 949              		.loc 1 486 6 is_stmt 1 view .LVU321
 486:Src/main.c    ****       POT_Data[0] = 202;
 950              		.loc 1 486 18 is_stmt 0 view .LVU322
 951 00d6 2A4B     		ldr	r3, .L54+8
 952 00d8 0822     		movs	r2, #8
 953 00da 5A70     		strb	r2, [r3, #1]
 487:Src/main.c    ****   }
 954              		.loc 1 487 7 is_stmt 1 view .LVU323
 487:Src/main.c    ****   }
 955              		.loc 1 487 19 is_stmt 0 view .LVU324
 956 00dc CA22     		movs	r2, #202
 957 00de 1A70     		strb	r2, [r3]
 958 00e0 BEE7     		b	.L25
 959              	.L46:
 446:Src/main.c    ****     POT_Data[0] = 232;
 960              		.loc 1 446 4 is_stmt 1 view .LVU325
 446:Src/main.c    ****     POT_Data[0] = 232;
 961              		.loc 1 446 16 is_stmt 0 view .LVU326
 962 00e2 274B     		ldr	r3, .L54+8
 963 00e4 0322     		movs	r2, #3
 964 00e6 5A70     		strb	r2, [r3, #1]
 447:Src/main.c    ****   }
 965              		.loc 1 447 5 is_stmt 1 view .LVU327
 447:Src/main.c    ****   }
ARM GAS  /tmp/ccIDeUdu.s 			page 30


 966              		.loc 1 447 17 is_stmt 0 view .LVU328
 967 00e8 E822     		movs	r2, #232
 968 00ea 1A70     		strb	r2, [r3]
 969 00ec B8E7     		b	.L25
 970              	.L47:
 451:Src/main.c    ****       POT_Data[0] = 176;
 971              		.loc 1 451 6 is_stmt 1 view .LVU329
 451:Src/main.c    ****       POT_Data[0] = 176;
 972              		.loc 1 451 18 is_stmt 0 view .LVU330
 973 00ee 244B     		ldr	r3, .L54+8
 974 00f0 0422     		movs	r2, #4
 975 00f2 5A70     		strb	r2, [r3, #1]
 452:Src/main.c    ****   }
 976              		.loc 1 452 7 is_stmt 1 view .LVU331
 452:Src/main.c    ****   }
 977              		.loc 1 452 19 is_stmt 0 view .LVU332
 978 00f4 B022     		movs	r2, #176
 979 00f6 1A70     		strb	r2, [r3]
 980 00f8 B2E7     		b	.L25
 981              	.L48:
 456:Src/main.c    ****       POT_Data[0] = 70;
 982              		.loc 1 456 6 is_stmt 1 view .LVU333
 456:Src/main.c    ****       POT_Data[0] = 70;
 983              		.loc 1 456 18 is_stmt 0 view .LVU334
 984 00fa 214B     		ldr	r3, .L54+8
 985 00fc 0522     		movs	r2, #5
 986 00fe 5A70     		strb	r2, [r3, #1]
 457:Src/main.c    ****   }
 987              		.loc 1 457 7 is_stmt 1 view .LVU335
 457:Src/main.c    ****   }
 988              		.loc 1 457 19 is_stmt 0 view .LVU336
 989 0100 4622     		movs	r2, #70
 990 0102 1A70     		strb	r2, [r3]
 991 0104 ACE7     		b	.L25
 992              	.L49:
 461:Src/main.c    ****         POT_Data[0] = 220;
 993              		.loc 1 461 8 is_stmt 1 view .LVU337
 461:Src/main.c    ****         POT_Data[0] = 220;
 994              		.loc 1 461 20 is_stmt 0 view .LVU338
 995 0106 1E4B     		ldr	r3, .L54+8
 996 0108 0522     		movs	r2, #5
 997 010a 5A70     		strb	r2, [r3, #1]
 462:Src/main.c    ****   }
 998              		.loc 1 462 9 is_stmt 1 view .LVU339
 462:Src/main.c    ****   }
 999              		.loc 1 462 21 is_stmt 0 view .LVU340
 1000 010c DC22     		movs	r2, #220
 1001 010e 1A70     		strb	r2, [r3]
 1002 0110 A6E7     		b	.L25
 1003              	.L50:
 466:Src/main.c    ****           POT_Data[0] = 114;
 1004              		.loc 1 466 10 is_stmt 1 view .LVU341
 466:Src/main.c    ****           POT_Data[0] = 114;
 1005              		.loc 1 466 22 is_stmt 0 view .LVU342
 1006 0112 1B4B     		ldr	r3, .L54+8
 1007 0114 0622     		movs	r2, #6
 1008 0116 5A70     		strb	r2, [r3, #1]
ARM GAS  /tmp/ccIDeUdu.s 			page 31


 467:Src/main.c    ****   }
 1009              		.loc 1 467 11 is_stmt 1 view .LVU343
 467:Src/main.c    ****   }
 1010              		.loc 1 467 23 is_stmt 0 view .LVU344
 1011 0118 7222     		movs	r2, #114
 1012 011a 1A70     		strb	r2, [r3]
 1013 011c A0E7     		b	.L25
 1014              	.L51:
 471:Src/main.c    ****       POT_Data[0] = 8;
 1015              		.loc 1 471 6 is_stmt 1 view .LVU345
 471:Src/main.c    ****       POT_Data[0] = 8;
 1016              		.loc 1 471 18 is_stmt 0 view .LVU346
 1017 011e 184B     		ldr	r3, .L54+8
 1018 0120 0722     		movs	r2, #7
 1019 0122 5A70     		strb	r2, [r3, #1]
 472:Src/main.c    ****   }
 1020              		.loc 1 472 7 is_stmt 1 view .LVU347
 472:Src/main.c    ****   }
 1021              		.loc 1 472 19 is_stmt 0 view .LVU348
 1022 0124 0822     		movs	r2, #8
 1023 0126 1A70     		strb	r2, [r3]
 1024 0128 9AE7     		b	.L25
 1025              	.L52:
 476:Src/main.c    ****       POT_Data[0] = 158;
 1026              		.loc 1 476 6 is_stmt 1 view .LVU349
 476:Src/main.c    ****       POT_Data[0] = 158;
 1027              		.loc 1 476 18 is_stmt 0 view .LVU350
 1028 012a 154B     		ldr	r3, .L54+8
 1029 012c 0722     		movs	r2, #7
 1030 012e 5A70     		strb	r2, [r3, #1]
 477:Src/main.c    ****   }
 1031              		.loc 1 477 7 is_stmt 1 view .LVU351
 477:Src/main.c    ****   }
 1032              		.loc 1 477 19 is_stmt 0 view .LVU352
 1033 0130 9E22     		movs	r2, #158
 1034 0132 1A70     		strb	r2, [r3]
 1035 0134 94E7     		b	.L25
 1036              	.L53:
 481:Src/main.c    ****       POT_Data[0] = 52;
 1037              		.loc 1 481 6 is_stmt 1 view .LVU353
 481:Src/main.c    ****       POT_Data[0] = 52;
 1038              		.loc 1 481 18 is_stmt 0 view .LVU354
 1039 0136 124B     		ldr	r3, .L54+8
 1040 0138 0822     		movs	r2, #8
 1041 013a 5A70     		strb	r2, [r3, #1]
 482:Src/main.c    ****   }
 1042              		.loc 1 482 7 is_stmt 1 view .LVU355
 482:Src/main.c    ****   }
 1043              		.loc 1 482 19 is_stmt 0 view .LVU356
 1044 013c 3422     		movs	r2, #52
 1045 013e 1A70     		strb	r2, [r3]
 1046 0140 8EE7     		b	.L25
 1047              	.L34:
 493:Src/main.c    **** 
 1048              		.loc 1 493 4 is_stmt 1 view .LVU357
 1049 0142 0022     		movs	r2, #0
 1050 0144 4FF48071 		mov	r1, #256
ARM GAS  /tmp/ccIDeUdu.s 			page 32


 1051 0148 0E48     		ldr	r0, .L54+12
 1052              	.LVL54:
 493:Src/main.c    **** 
 1053              		.loc 1 493 4 is_stmt 0 view .LVU358
 1054 014a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1055              	.LVL55:
 1056 014e 91E7     		b	.L35
 1057              	.L36:
 498:Src/main.c    **** 
 1058              		.loc 1 498 3 is_stmt 1 view .LVU359
 1059 0150 0022     		movs	r2, #0
 1060 0152 0821     		movs	r1, #8
 1061 0154 0C48     		ldr	r0, .L54+16
 1062 0156 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1063              	.LVL56:
 1064 015a 94E7     		b	.L37
 1065              	.L38:
 503:Src/main.c    **** 
 1066              		.loc 1 503 3 view .LVU360
 1067 015c 0022     		movs	r2, #0
 1068 015e 4FF40071 		mov	r1, #512
 1069 0162 0948     		ldr	r0, .L54+16
 1070 0164 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1071              	.LVL57:
 1072 0168 97E7     		b	.L39
 1073              	.L40:
 508:Src/main.c    **** 
 1074              		.loc 1 508 3 view .LVU361
 1075 016a 0022     		movs	r2, #0
 1076 016c 4FF48071 		mov	r1, #256
 1077 0170 0548     		ldr	r0, .L54+16
 1078 0172 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1079              	.LVL58:
 1080              		.loc 1 510 1 is_stmt 0 view .LVU362
 1081 0176 9AE7     		b	.L19
 1082              	.L55:
 1083              		.align	2
 1084              	.L54:
 1085 0178 00000000 		.word	.LANCHOR1
 1086 017c 00000000 		.word	POT_data
 1087 0180 00000000 		.word	POT_Data
 1088 0184 000C0140 		.word	1073810432
 1089 0188 00080140 		.word	1073809408
 1090              		.cfi_endproc
 1091              	.LFE72:
 1093              		.section	.text.main,"ax",%progbits
 1094              		.align	1
 1095              		.global	main
 1096              		.syntax unified
 1097              		.thumb
 1098              		.thumb_func
 1099              		.fpu softvfp
 1101              	main:
 1102              	.LFB66:
  96:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1103              		.loc 1 96 1 is_stmt 1 view -0
 1104              		.cfi_startproc
ARM GAS  /tmp/ccIDeUdu.s 			page 33


 1105              		@ Volatile: function does not return.
 1106              		@ args = 0, pretend = 0, frame = 8
 1107              		@ frame_needed = 0, uses_anonymous_args = 0
 1108 0000 00B5     		push	{lr}
 1109              	.LCFI15:
 1110              		.cfi_def_cfa_offset 4
 1111              		.cfi_offset 14, -4
 1112 0002 83B0     		sub	sp, sp, #12
 1113              	.LCFI16:
 1114              		.cfi_def_cfa_offset 16
 104:Src/main.c    **** 
 1115              		.loc 1 104 3 view .LVU364
 1116 0004 FFF7FEFF 		bl	HAL_Init
 1117              	.LVL59:
 111:Src/main.c    **** 
 1118              		.loc 1 111 3 view .LVU365
 1119 0008 FFF7FEFF 		bl	SystemClock_Config
 1120              	.LVL60:
 118:Src/main.c    ****   MX_ADC1_Init();
 1121              		.loc 1 118 3 view .LVU366
 1122 000c FFF7FEFF 		bl	MX_GPIO_Init
 1123              	.LVL61:
 119:Src/main.c    ****   MX_CAN_Init();
 1124              		.loc 1 119 3 view .LVU367
 1125 0010 FFF7FEFF 		bl	MX_ADC1_Init
 1126              	.LVL62:
 120:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1127              		.loc 1 120 3 view .LVU368
 1128 0014 FFF7FEFF 		bl	MX_CAN_Init
 1129              	.LVL63:
 1130              	.L57:
 127:Src/main.c    ****   {
 1131              		.loc 1 127 3 discriminator 1 view .LVU369
 1132              	.LBB4:
 138:Src/main.c    **** 	POT_read(pot_position);
 1133              		.loc 1 138 2 discriminator 1 view .LVU370
 139:Src/main.c    **** 	POT_interpret(pot_position);
 1134              		.loc 1 139 2 discriminator 1 view .LVU371
 1135 0018 6846     		mov	r0, sp
 1136 001a FFF7FEFF 		bl	POT_read
 1137              	.LVL64:
 140:Src/main.c    **** 
 1138              		.loc 1 140 2 discriminator 1 view .LVU372
 1139 001e 6846     		mov	r0, sp
 1140 0020 FFF7FEFF 		bl	POT_interpret
 1141              	.LVL65:
 1142 0024 F8E7     		b	.L57
 1143              	.LBE4:
 1144              		.cfi_endproc
 1145              	.LFE66:
 1147              		.section	.text.CAN_interpret,"ax",%progbits
 1148              		.align	1
 1149              		.global	CAN_interpret
 1150              		.syntax unified
 1151              		.thumb
 1152              		.thumb_func
 1153              		.fpu softvfp
ARM GAS  /tmp/ccIDeUdu.s 			page 34


 1155              	CAN_interpret:
 1156              	.LFB74:
 511:Src/main.c    **** 
 512:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
 513:Src/main.c    **** {
 514:Src/main.c    ****   //HAL_GPIO_TogglePin(GPIOB, TC_LED_Pin);
 515:Src/main.c    ****   if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 516:Src/main.c    **** 	  CAN_interpret();
 517:Src/main.c    **** }
 518:Src/main.c    **** 
 519:Src/main.c    **** void CAN_interpret(void) {
 1157              		.loc 1 519 26 view -0
 1158              		.cfi_startproc
 1159              		@ args = 0, pretend = 0, frame = 0
 1160              		@ frame_needed = 0, uses_anonymous_args = 0
 520:Src/main.c    **** 
 521:Src/main.c    **** 	uint16_t received_ID;
 1161              		.loc 1 521 2 view .LVU374
 522:Src/main.c    **** 	received_ID = RxHeader.StdId;
 1162              		.loc 1 522 2 view .LVU375
 1163              		.loc 1 522 14 is_stmt 0 view .LVU376
 1164 0000 704B     		ldr	r3, .L89
 1165 0002 1B88     		ldrh	r3, [r3]
 1166              	.LVL66:
 523:Src/main.c    ****   //HAL_GPIO_TogglePin(GPIOB, CUST_LED_Pin);
 524:Src/main.c    **** 
 525:Src/main.c    **** 	if (received_ID == STATES) {
 1167              		.loc 1 525 2 is_stmt 1 view .LVU377
 1168              		.loc 1 525 5 is_stmt 0 view .LVU378
 1169 0004 0E2B     		cmp	r3, #14
 1170 0006 00D0     		beq	.L76
 1171 0008 7047     		bx	lr
 1172              	.L76:
 519:Src/main.c    **** 
 1173              		.loc 1 519 26 view .LVU379
 1174 000a 70B5     		push	{r4, r5, r6, lr}
 1175              	.LCFI17:
 1176              		.cfi_def_cfa_offset 16
 1177              		.cfi_offset 4, -16
 1178              		.cfi_offset 5, -12
 1179              		.cfi_offset 6, -8
 1180              		.cfi_offset 14, -4
 1181              	.LBB5:
 526:Src/main.c    **** 
 527:Src/main.c    **** 		uint8_t Precharge_state;
 1182              		.loc 1 527 3 is_stmt 1 view .LVU380
 528:Src/main.c    **** 		Precharge_state = RxData[0];
 1183              		.loc 1 528 3 view .LVU381
 1184              		.loc 1 528 19 is_stmt 0 view .LVU382
 1185 000c 6E4B     		ldr	r3, .L89+4
 1186              	.LVL67:
 1187              		.loc 1 528 19 view .LVU383
 1188 000e 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 1189              	.LVL68:
 529:Src/main.c    **** 
 530:Src/main.c    **** 		if (Precharge_state == 0x01) {
 1190              		.loc 1 530 3 is_stmt 1 view .LVU384
ARM GAS  /tmp/ccIDeUdu.s 			page 35


 1191              		.loc 1 530 6 is_stmt 0 view .LVU385
 1192 0010 012C     		cmp	r4, #1
 1193 0012 1FD0     		beq	.L77
 1194              	.LVL69:
 1195              	.L61:
 531:Src/main.c    **** 			// if precharge is complete
 532:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED green
 533:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 534:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 535:Src/main.c    **** 		}
 536:Src/main.c    **** 
 537:Src/main.c    **** 		if (Precharge_state == 0x02) {
 1196              		.loc 1 537 3 is_stmt 1 view .LVU386
 1197              		.loc 1 537 6 is_stmt 0 view .LVU387
 1198 0014 022C     		cmp	r4, #2
 1199 0016 2ED0     		beq	.L78
 1200              	.L62:
 538:Src/main.c    **** 			// if precharge is not complete
 539:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 540:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 541:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 542:Src/main.c    **** 
 543:Src/main.c    **** 		}
 544:Src/main.c    **** 
 545:Src/main.c    ****   if (Precharge_state == 0x04) {
 1201              		.loc 1 545 3 is_stmt 1 view .LVU388
 1202              		.loc 1 545 6 is_stmt 0 view .LVU389
 1203 0018 042C     		cmp	r4, #4
 1204 001a 3DD0     		beq	.L79
 1205              	.L63:
 546:Src/main.c    ****       // if precharge is not complete
 547:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED blue
 548:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 549:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 550:Src/main.c    **** 
 551:Src/main.c    ****     }
 552:Src/main.c    ****     if (Precharge_state == 0x08) {
 1206              		.loc 1 552 5 is_stmt 1 view .LVU390
 1207              		.loc 1 552 8 is_stmt 0 view .LVU391
 1208 001c 082C     		cmp	r4, #8
 1209 001e 4CD0     		beq	.L80
 1210              	.L64:
 553:Src/main.c    ****       // if precharge is not complete
 554:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED blue
 555:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 556:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 557:Src/main.c    **** 
 558:Src/main.c    ****     }
 559:Src/main.c    ****     if (Precharge_state == 0x10) {
 1211              		.loc 1 559 5 is_stmt 1 view .LVU392
 1212              		.loc 1 559 8 is_stmt 0 view .LVU393
 1213 0020 102C     		cmp	r4, #16
 1214 0022 5BD0     		beq	.L81
 1215              	.L65:
 560:Src/main.c    ****       // if precharge is not complete
 561:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED blue
 562:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
ARM GAS  /tmp/ccIDeUdu.s 			page 36


 563:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 564:Src/main.c    **** 
 565:Src/main.c    ****     }
 566:Src/main.c    ****     if (Precharge_state == 0x20) {
 1216              		.loc 1 566 5 is_stmt 1 view .LVU394
 1217              		.loc 1 566 8 is_stmt 0 view .LVU395
 1218 0024 202C     		cmp	r4, #32
 1219 0026 6AD0     		beq	.L82
 1220              	.LVL70:
 1221              	.L66:
 567:Src/main.c    ****       // if precharge is not complete
 568:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 569:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOB, RGB_RED_Pin);
 570:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOB, RGB_BLUE_Pin);
 571:Src/main.c    **** 
 572:Src/main.c    ****     }
 573:Src/main.c    ****     uint8_t BMS_fault;
 1222              		.loc 1 573 5 is_stmt 1 view .LVU396
 574:Src/main.c    ****     uint8_t IMD_fault;
 1223              		.loc 1 574 5 view .LVU397
 575:Src/main.c    ****     uint8_t BSPD_fault;
 1224              		.loc 1 575 5 view .LVU398
 576:Src/main.c    ****     bool any_fault;
 1225              		.loc 1 576 5 view .LVU399
 577:Src/main.c    **** 
 578:Src/main.c    ****     BMS_fault = RxData[1];
 1226              		.loc 1 578 5 view .LVU400
 1227              		.loc 1 578 15 is_stmt 0 view .LVU401
 1228 0028 674B     		ldr	r3, .L89+4
 1229 002a 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 1230              	.LVL71:
 579:Src/main.c    ****     IMD_fault = RxData[2];
 1231              		.loc 1 579 5 is_stmt 1 view .LVU402
 1232              		.loc 1 579 15 is_stmt 0 view .LVU403
 1233 002c 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 1234              	.LVL72:
 580:Src/main.c    ****     BSPD_fault = RxData[3];
 1235              		.loc 1 580 5 is_stmt 1 view .LVU404
 1236              		.loc 1 580 16 is_stmt 0 view .LVU405
 1237 002e DC78     		ldrb	r4, [r3, #3]	@ zero_extendqisi2
 1238              	.LVL73:
 581:Src/main.c    **** 
 582:Src/main.c    ****     if (BMS_fault == 0xFF) {
 1239              		.loc 1 582 5 is_stmt 1 view .LVU406
 1240              		.loc 1 582 8 is_stmt 0 view .LVU407
 1241 0030 FF2A     		cmp	r2, #255
 1242 0032 73D0     		beq	.L83
 583:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 584:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 585:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 586:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 587:Src/main.c    ****     }
 588:Src/main.c    ****     else if (BMS_fault == 0x00)
 1243              		.loc 1 588 10 is_stmt 1 view .LVU408
 1244              		.loc 1 588 13 is_stmt 0 view .LVU409
 1245 0034 002A     		cmp	r2, #0
 1246 0036 00F08780 		beq	.L84
ARM GAS  /tmp/ccIDeUdu.s 			page 37


 1247              	.LVL74:
 1248              	.L68:
 589:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 590:Src/main.c    **** 
 591:Src/main.c    ****     if (IMD_fault == 0xFF) {
 1249              		.loc 1 591 5 is_stmt 1 view .LVU410
 1250              		.loc 1 591 8 is_stmt 0 view .LVU411
 1251 003a FF2D     		cmp	r5, #255
 1252 003c 00F08980 		beq	.L85
 592:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 593:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 594:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 595:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 596:Src/main.c    ****     }
 597:Src/main.c    ****     else if (IMD_fault == 0x00)
 1253              		.loc 1 597 10 is_stmt 1 view .LVU412
 1254              		.loc 1 597 13 is_stmt 0 view .LVU413
 1255 0040 002D     		cmp	r5, #0
 1256 0042 00F09C80 		beq	.L86
 1257              	.LVL75:
 1258              	.L70:
 598:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 599:Src/main.c    **** 
 600:Src/main.c    ****     if (BSPD_fault == 0xFF) {
 1259              		.loc 1 600 5 is_stmt 1 view .LVU414
 1260              		.loc 1 600 8 is_stmt 0 view .LVU415
 1261 0046 FF2C     		cmp	r4, #255
 1262 0048 00F09F80 		beq	.L87
 601:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 602:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 603:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 604:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 605:Src/main.c    ****     }
 606:Src/main.c    ****     else if (BSPD_fault == 0x00)
 1263              		.loc 1 606 10 is_stmt 1 view .LVU416
 1264              		.loc 1 606 13 is_stmt 0 view .LVU417
 1265 004c 002C     		cmp	r4, #0
 1266 004e 00F0B280 		beq	.L88
 1267              	.LVL76:
 1268              	.L59:
 1269              		.loc 1 606 13 view .LVU418
 1270              	.LBE5:
 607:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 608:Src/main.c    **** 	}
 609:Src/main.c    **** }
 1271              		.loc 1 609 1 view .LVU419
 1272 0052 70BD     		pop	{r4, r5, r6, pc}
 1273              	.LVL77:
 1274              	.L77:
 1275              	.LBB6:
 532:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1276              		.loc 1 532 4 is_stmt 1 view .LVU420
 1277 0054 5D4D     		ldr	r5, .L89+8
 1278 0056 0022     		movs	r2, #0
 1279 0058 2021     		movs	r1, #32
 1280 005a 2846     		mov	r0, r5
 1281 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccIDeUdu.s 			page 38


 1282              	.LVL78:
 533:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1283              		.loc 1 533 4 view .LVU421
 1284 0060 0022     		movs	r2, #0
 1285 0062 4021     		movs	r1, #64
 1286 0064 2846     		mov	r0, r5
 1287 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1288              	.LVL79:
 534:Src/main.c    **** 		}
 1289              		.loc 1 534 4 view .LVU422
 1290 006a 0022     		movs	r2, #0
 1291 006c 8021     		movs	r1, #128
 1292 006e 2846     		mov	r0, r5
 1293 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1294              	.LVL80:
 1295 0074 CEE7     		b	.L61
 1296              	.L78:
 539:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1297              		.loc 1 539 4 view .LVU423
 1298 0076 554D     		ldr	r5, .L89+8
 1299 0078 0022     		movs	r2, #0
 1300 007a 2021     		movs	r1, #32
 1301 007c 2846     		mov	r0, r5
 1302 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1303              	.LVL81:
 540:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 1304              		.loc 1 540 4 view .LVU424
 1305 0082 0022     		movs	r2, #0
 1306 0084 4021     		movs	r1, #64
 1307 0086 2846     		mov	r0, r5
 1308 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1309              	.LVL82:
 541:Src/main.c    **** 
 1310              		.loc 1 541 4 view .LVU425
 1311 008c 0122     		movs	r2, #1
 1312 008e 8021     		movs	r1, #128
 1313 0090 2846     		mov	r0, r5
 1314 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1315              	.LVL83:
 1316 0096 BFE7     		b	.L62
 1317              	.L79:
 547:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1318              		.loc 1 547 7 view .LVU426
 1319 0098 4C4D     		ldr	r5, .L89+8
 1320 009a 0122     		movs	r2, #1
 1321 009c 2021     		movs	r1, #32
 1322 009e 2846     		mov	r0, r5
 1323 00a0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1324              	.LVL84:
 548:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 1325              		.loc 1 548 7 view .LVU427
 1326 00a4 0022     		movs	r2, #0
 1327 00a6 4021     		movs	r1, #64
 1328 00a8 2846     		mov	r0, r5
 1329 00aa FFF7FEFF 		bl	HAL_GPIO_WritePin
 1330              	.LVL85:
 549:Src/main.c    **** 
ARM GAS  /tmp/ccIDeUdu.s 			page 39


 1331              		.loc 1 549 7 view .LVU428
 1332 00ae 0122     		movs	r2, #1
 1333 00b0 8021     		movs	r1, #128
 1334 00b2 2846     		mov	r0, r5
 1335 00b4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1336              	.LVL86:
 1337 00b8 B0E7     		b	.L63
 1338              	.L80:
 554:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1339              		.loc 1 554 7 view .LVU429
 1340 00ba 444D     		ldr	r5, .L89+8
 1341 00bc 0122     		movs	r2, #1
 1342 00be 2021     		movs	r1, #32
 1343 00c0 2846     		mov	r0, r5
 1344 00c2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1345              	.LVL87:
 555:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1346              		.loc 1 555 7 view .LVU430
 1347 00c6 0022     		movs	r2, #0
 1348 00c8 4021     		movs	r1, #64
 1349 00ca 2846     		mov	r0, r5
 1350 00cc FFF7FEFF 		bl	HAL_GPIO_WritePin
 1351              	.LVL88:
 556:Src/main.c    **** 
 1352              		.loc 1 556 7 view .LVU431
 1353 00d0 0022     		movs	r2, #0
 1354 00d2 8021     		movs	r1, #128
 1355 00d4 2846     		mov	r0, r5
 1356 00d6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1357              	.LVL89:
 1358 00da A1E7     		b	.L64
 1359              	.L81:
 561:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1360              		.loc 1 561 7 view .LVU432
 1361 00dc 3B4D     		ldr	r5, .L89+8
 1362 00de 0122     		movs	r2, #1
 1363 00e0 2021     		movs	r1, #32
 1364 00e2 2846     		mov	r0, r5
 1365 00e4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1366              	.LVL90:
 562:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1367              		.loc 1 562 7 view .LVU433
 1368 00e8 0022     		movs	r2, #0
 1369 00ea 4021     		movs	r1, #64
 1370 00ec 2846     		mov	r0, r5
 1371 00ee FFF7FEFF 		bl	HAL_GPIO_WritePin
 1372              	.LVL91:
 563:Src/main.c    **** 
 1373              		.loc 1 563 7 view .LVU434
 1374 00f2 0022     		movs	r2, #0
 1375 00f4 8021     		movs	r1, #128
 1376 00f6 2846     		mov	r0, r5
 1377 00f8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1378              	.LVL92:
 1379 00fc 92E7     		b	.L65
 1380              	.L82:
 568:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOB, RGB_RED_Pin);
ARM GAS  /tmp/ccIDeUdu.s 			page 40


 1381              		.loc 1 568 7 view .LVU435
 1382 00fe 334C     		ldr	r4, .L89+8
 1383              	.LVL93:
 568:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOB, RGB_RED_Pin);
 1384              		.loc 1 568 7 is_stmt 0 view .LVU436
 1385 0100 0022     		movs	r2, #0
 1386 0102 2021     		movs	r1, #32
 1387 0104 2046     		mov	r0, r4
 1388 0106 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1389              	.LVL94:
 569:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOB, RGB_BLUE_Pin);
 1390              		.loc 1 569 7 is_stmt 1 view .LVU437
 1391 010a 4021     		movs	r1, #64
 1392 010c 2046     		mov	r0, r4
 1393 010e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1394              	.LVL95:
 570:Src/main.c    **** 
 1395              		.loc 1 570 7 view .LVU438
 1396 0112 8021     		movs	r1, #128
 1397 0114 2046     		mov	r0, r4
 1398 0116 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1399              	.LVL96:
 1400 011a 85E7     		b	.L66
 1401              	.LVL97:
 1402              	.L83:
 583:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 1403              		.loc 1 583 7 view .LVU439
 1404 011c 0122     		movs	r2, #1
 1405              	.LVL98:
 583:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 1406              		.loc 1 583 7 is_stmt 0 view .LVU440
 1407 011e 1021     		movs	r1, #16
 1408 0120 2B48     		ldr	r0, .L89+12
 1409 0122 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1410              	.LVL99:
 584:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 1411              		.loc 1 584 7 is_stmt 1 view .LVU441
 1412 0126 294E     		ldr	r6, .L89+8
 1413 0128 0022     		movs	r2, #0
 1414 012a 2021     		movs	r1, #32
 1415 012c 3046     		mov	r0, r6
 1416 012e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1417              	.LVL100:
 585:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1418              		.loc 1 585 7 view .LVU442
 1419 0132 0122     		movs	r2, #1
 1420 0134 4021     		movs	r1, #64
 1421 0136 3046     		mov	r0, r6
 1422 0138 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1423              	.LVL101:
 586:Src/main.c    ****     }
 1424              		.loc 1 586 7 view .LVU443
 1425 013c 0022     		movs	r2, #0
 1426 013e 8021     		movs	r1, #128
 1427 0140 3046     		mov	r0, r6
 1428 0142 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1429              	.LVL102:
ARM GAS  /tmp/ccIDeUdu.s 			page 41


 1430 0146 78E7     		b	.L68
 1431              	.LVL103:
 1432              	.L84:
 589:Src/main.c    **** 
 1433              		.loc 1 589 7 view .LVU444
 1434 0148 1021     		movs	r1, #16
 1435 014a 2148     		ldr	r0, .L89+12
 1436 014c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1437              	.LVL104:
 589:Src/main.c    **** 
 1438              		.loc 1 589 7 is_stmt 0 view .LVU445
 1439 0150 73E7     		b	.L68
 1440              	.L85:
 592:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 1441              		.loc 1 592 7 is_stmt 1 view .LVU446
 1442 0152 0122     		movs	r2, #1
 1443 0154 2021     		movs	r1, #32
 1444 0156 1E48     		ldr	r0, .L89+12
 1445 0158 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1446              	.LVL105:
 593:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 1447              		.loc 1 593 7 view .LVU447
 1448 015c 1B4D     		ldr	r5, .L89+8
 1449              	.LVL106:
 593:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 1450              		.loc 1 593 7 is_stmt 0 view .LVU448
 1451 015e 0022     		movs	r2, #0
 1452 0160 2021     		movs	r1, #32
 1453 0162 2846     		mov	r0, r5
 1454 0164 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1455              	.LVL107:
 594:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1456              		.loc 1 594 7 is_stmt 1 view .LVU449
 1457 0168 0122     		movs	r2, #1
 1458 016a 4021     		movs	r1, #64
 1459 016c 2846     		mov	r0, r5
 1460 016e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1461              	.LVL108:
 595:Src/main.c    ****     }
 1462              		.loc 1 595 7 view .LVU450
 1463 0172 0022     		movs	r2, #0
 1464 0174 8021     		movs	r1, #128
 1465 0176 2846     		mov	r0, r5
 1466 0178 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1467              	.LVL109:
 1468 017c 63E7     		b	.L70
 1469              	.LVL110:
 1470              	.L86:
 598:Src/main.c    **** 
 1471              		.loc 1 598 7 view .LVU451
 1472 017e 0022     		movs	r2, #0
 1473 0180 2021     		movs	r1, #32
 1474 0182 1348     		ldr	r0, .L89+12
 1475 0184 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1476              	.LVL111:
 1477 0188 5DE7     		b	.L70
 1478              	.LVL112:
ARM GAS  /tmp/ccIDeUdu.s 			page 42


 1479              	.L87:
 601:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 1480              		.loc 1 601 7 view .LVU452
 1481 018a 0122     		movs	r2, #1
 1482 018c 4021     		movs	r1, #64
 1483 018e 1048     		ldr	r0, .L89+12
 1484 0190 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1485              	.LVL113:
 602:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 1486              		.loc 1 602 7 view .LVU453
 1487 0194 0D4C     		ldr	r4, .L89+8
 1488              	.LVL114:
 602:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 1489              		.loc 1 602 7 is_stmt 0 view .LVU454
 1490 0196 0022     		movs	r2, #0
 1491 0198 2021     		movs	r1, #32
 1492 019a 2046     		mov	r0, r4
 1493 019c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1494              	.LVL115:
 603:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1495              		.loc 1 603 7 is_stmt 1 view .LVU455
 1496 01a0 0122     		movs	r2, #1
 1497 01a2 4021     		movs	r1, #64
 1498 01a4 2046     		mov	r0, r4
 1499 01a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1500              	.LVL116:
 604:Src/main.c    ****     }
 1501              		.loc 1 604 7 view .LVU456
 1502 01aa 0022     		movs	r2, #0
 1503 01ac 8021     		movs	r1, #128
 1504 01ae 2046     		mov	r0, r4
 1505 01b0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1506              	.LVL117:
 1507 01b4 4DE7     		b	.L59
 1508              	.LVL118:
 1509              	.L88:
 607:Src/main.c    **** 	}
 1510              		.loc 1 607 7 view .LVU457
 1511 01b6 0022     		movs	r2, #0
 1512 01b8 4021     		movs	r1, #64
 1513 01ba 0548     		ldr	r0, .L89+12
 1514 01bc FFF7FEFF 		bl	HAL_GPIO_WritePin
 1515              	.LVL119:
 1516              	.LBE6:
 1517              		.loc 1 609 1 is_stmt 0 view .LVU458
 1518 01c0 47E7     		b	.L59
 1519              	.L90:
 1520 01c2 00BF     		.align	2
 1521              	.L89:
 1522 01c4 00000000 		.word	RxHeader
 1523 01c8 00000000 		.word	RxData
 1524 01cc 000C0140 		.word	1073810432
 1525 01d0 00080140 		.word	1073809408
 1526              		.cfi_endproc
 1527              	.LFE74:
 1529              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1530              		.align	1
ARM GAS  /tmp/ccIDeUdu.s 			page 43


 1531              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 1532              		.syntax unified
 1533              		.thumb
 1534              		.thumb_func
 1535              		.fpu softvfp
 1537              	HAL_CAN_RxFifo0MsgPendingCallback:
 1538              	.LVL120:
 1539              	.LFB73:
 513:Src/main.c    ****   //HAL_GPIO_TogglePin(GPIOB, TC_LED_Pin);
 1540              		.loc 1 513 1 is_stmt 1 view -0
 1541              		.cfi_startproc
 1542              		@ args = 0, pretend = 0, frame = 0
 1543              		@ frame_needed = 0, uses_anonymous_args = 0
 513:Src/main.c    ****   //HAL_GPIO_TogglePin(GPIOB, TC_LED_Pin);
 1544              		.loc 1 513 1 is_stmt 0 view .LVU460
 1545 0000 08B5     		push	{r3, lr}
 1546              	.LCFI18:
 1547              		.cfi_def_cfa_offset 8
 1548              		.cfi_offset 3, -8
 1549              		.cfi_offset 14, -4
 515:Src/main.c    **** 	  CAN_interpret();
 1550              		.loc 1 515 3 is_stmt 1 view .LVU461
 515:Src/main.c    **** 	  CAN_interpret();
 1551              		.loc 1 515 7 is_stmt 0 view .LVU462
 1552 0002 054B     		ldr	r3, .L95
 1553 0004 054A     		ldr	r2, .L95+4
 1554 0006 0021     		movs	r1, #0
 1555 0008 0548     		ldr	r0, .L95+8
 1556              	.LVL121:
 515:Src/main.c    **** 	  CAN_interpret();
 1557              		.loc 1 515 7 view .LVU463
 1558 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1559              	.LVL122:
 515:Src/main.c    **** 	  CAN_interpret();
 1560              		.loc 1 515 6 view .LVU464
 1561 000e 00B1     		cbz	r0, .L94
 1562              	.L91:
 517:Src/main.c    **** 
 1563              		.loc 1 517 1 view .LVU465
 1564 0010 08BD     		pop	{r3, pc}
 1565              	.L94:
 516:Src/main.c    **** }
 1566              		.loc 1 516 4 is_stmt 1 view .LVU466
 1567 0012 FFF7FEFF 		bl	CAN_interpret
 1568              	.LVL123:
 517:Src/main.c    **** 
 1569              		.loc 1 517 1 is_stmt 0 view .LVU467
 1570 0016 FBE7     		b	.L91
 1571              	.L96:
 1572              		.align	2
 1573              	.L95:
 1574 0018 00000000 		.word	RxData
 1575 001c 00000000 		.word	RxHeader
 1576 0020 00000000 		.word	hcan
 1577              		.cfi_endproc
 1578              	.LFE73:
 1580              		.section	.text.Error_Handler,"ax",%progbits
ARM GAS  /tmp/ccIDeUdu.s 			page 44


 1581              		.align	1
 1582              		.global	Error_Handler
 1583              		.syntax unified
 1584              		.thumb
 1585              		.thumb_func
 1586              		.fpu softvfp
 1588              	Error_Handler:
 1589              	.LFB75:
 610:Src/main.c    **** /* USER CODE END 4 */
 611:Src/main.c    **** 
 612:Src/main.c    **** /**
 613:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 614:Src/main.c    ****   * @retval None
 615:Src/main.c    ****   */
 616:Src/main.c    **** void Error_Handler(void)
 617:Src/main.c    **** {
 1590              		.loc 1 617 1 is_stmt 1 view -0
 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 0
 1593              		@ frame_needed = 0, uses_anonymous_args = 0
 1594              		@ link register save eliminated.
 618:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 619:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 620:Src/main.c    **** 
 621:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 622:Src/main.c    **** }
 1595              		.loc 1 622 1 view .LVU469
 1596 0000 7047     		bx	lr
 1597              		.cfi_endproc
 1598              	.LFE75:
 1600              		.global	pot_threshold
 1601              		.comm	CAN_flag,1,1
 1602              		.comm	TxMailbox,4,4
 1603              		.comm	POT_Data1,8,4
 1604              		.comm	POT_Data,8,4
 1605              		.comm	POT_data,8,4
 1606              		.comm	POT_Txheader1,24,4
 1607              		.comm	POT_Txheader,24,4
 1608              		.comm	POT_TxHeader,24,4
 1609              		.comm	RxData,8,4
 1610              		.comm	RxHeader,28,4
 1611              		.comm	hcan,40,4
 1612              		.global	sConfig
 1613              		.comm	hadc1,48,4
 1614              		.section	.bss.sConfig,"aw",%nobits
 1615              		.align	2
 1616              		.set	.LANCHOR0,. + 0
 1619              	sConfig:
 1620 0000 00000000 		.space	12
 1620      00000000 
 1620      00000000 
 1621              		.section	.data.pot_threshold,"aw"
 1622              		.align	2
 1623              		.set	.LANCHOR1,. + 0
 1626              	pot_threshold:
 1627 0000 0000     		.short	0
 1628 0002 6702     		.short	615
ARM GAS  /tmp/ccIDeUdu.s 			page 45


 1629 0004 0104     		.short	1025
 1630 0006 9B05     		.short	1435
 1631 0008 3507     		.short	1845
 1632 000a CF08     		.short	2255
 1633 000c 690A     		.short	2665
 1634 000e 030C     		.short	3075
 1635 0010 9D0D     		.short	3485
 1636 0012 370F     		.short	3895
 1637 0014 FF0F     		.short	4095
 1638              		.text
 1639              	.Letext0:
 1640              		.file 2 "/mnt/c/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/machine/_default_types.h"
 1641              		.file 3 "/mnt/c/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1642              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1643              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1644              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1645              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1646              		.file 8 "/mnt/c/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/lock.h"
 1647              		.file 9 "/mnt/c/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_types.h"
 1648              		.file 10 "/mnt/c/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eabi/8.2.1/include/stddef.h"
 1649              		.file 11 "/mnt/c/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/reent.h"
 1650              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1651              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1652              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1653              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1654              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1655              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1656              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1657              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1658              		.file 20 "<built-in>"
ARM GAS  /tmp/ccIDeUdu.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccIDeUdu.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccIDeUdu.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccIDeUdu.s:139    .text.MX_GPIO_Init:0000000000000088 $d
     /tmp/ccIDeUdu.s:146    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccIDeUdu.s:152    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccIDeUdu.s:260    .text.MX_ADC1_Init:0000000000000064 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccIDeUdu.s:267    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccIDeUdu.s:273    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccIDeUdu.s:443    .text.MX_CAN_Init:0000000000000098 $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 POT_TxHeader
                            *COM*:0000000000000018 POT_Txheader
                            *COM*:0000000000000018 POT_Txheader1
     /tmp/ccIDeUdu.s:452    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccIDeUdu.s:459    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccIDeUdu.s:556    .text.POT_read:0000000000000000 $t
     /tmp/ccIDeUdu.s:563    .text.POT_read:0000000000000000 POT_read
     /tmp/ccIDeUdu.s:733    .text.POT_read:00000000000000d4 $d
     /tmp/ccIDeUdu.s:739    .text.POT_interpret:0000000000000000 $t
     /tmp/ccIDeUdu.s:746    .text.POT_interpret:0000000000000000 POT_interpret
     /tmp/ccIDeUdu.s:1085   .text.POT_interpret:0000000000000178 $d
                            *COM*:0000000000000008 POT_data
                            *COM*:0000000000000008 POT_Data
     /tmp/ccIDeUdu.s:1094   .text.main:0000000000000000 $t
     /tmp/ccIDeUdu.s:1101   .text.main:0000000000000000 main
     /tmp/ccIDeUdu.s:1148   .text.CAN_interpret:0000000000000000 $t
     /tmp/ccIDeUdu.s:1155   .text.CAN_interpret:0000000000000000 CAN_interpret
     /tmp/ccIDeUdu.s:1522   .text.CAN_interpret:00000000000001c4 $d
                            *COM*:000000000000001c RxHeader
                            *COM*:0000000000000008 RxData
     /tmp/ccIDeUdu.s:1530   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccIDeUdu.s:1537   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccIDeUdu.s:1574   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000018 $d
     /tmp/ccIDeUdu.s:1581   .text.Error_Handler:0000000000000000 $t
     /tmp/ccIDeUdu.s:1588   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccIDeUdu.s:1626   .data.pot_threshold:0000000000000000 pot_threshold
                            *COM*:0000000000000001 CAN_flag
                            *COM*:0000000000000004 TxMailbox
                            *COM*:0000000000000008 POT_Data1
     /tmp/ccIDeUdu.s:1619   .bss.sConfig:0000000000000000 sConfig
     /tmp/ccIDeUdu.s:1615   .bss.sConfig:0000000000000000 $d
     /tmp/ccIDeUdu.s:1622   .data.pot_threshold:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
memset
HAL_RCC_OscConfig
ARM GAS  /tmp/ccIDeUdu.s 			page 47


HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_Init
HAL_GPIO_TogglePin
HAL_CAN_GetRxMessage

ARM GAS  /tmp/ccKlY4m7.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB70:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "stdbool.h"
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccKlY4m7.s 			page 2


  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** #define DASH_CAN_ID			0x00F
  37:Src/main.c    **** 
  38:Src/main.c    **** #define FAULTS				0x0D0
  39:Src/main.c    **** #define PRECHARGE			0x0D1
  40:Src/main.c    **** #define ENABLE_SIG		0x0D2
  41:Src/main.c    **** /* USER CODE END PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  44:Src/main.c    **** /* USER CODE BEGIN PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* USER CODE END PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  49:Src/main.c    **** ADC_HandleTypeDef hadc1;
  50:Src/main.c    **** ADC_ChannelConfTypeDef sConfig = {0};
  51:Src/main.c    **** CAN_HandleTypeDef hcan;
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN PV */
  54:Src/main.c    **** 
  55:Src/main.c    **** CAN_RxHeaderTypeDef   	RxHeader;
  56:Src/main.c    **** uint8_t               	RxData[8];
  57:Src/main.c    **** 
  58:Src/main.c    **** CAN_TxHeaderTypeDef   	POT_TxHeader;
  59:Src/main.c    **** uint8_t               	POT_data[8];
  60:Src/main.c    **** uint32_t              	TxMailbox;
  61:Src/main.c    **** 
  62:Src/main.c    **** volatile char					CAN_flag;
  63:Src/main.c    **** 
  64:Src/main.c    **** uint16_t				pot_threshold[11] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE END PV */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  69:Src/main.c    **** void SystemClock_Config(void);
  70:Src/main.c    **** static void MX_GPIO_Init(void);
  71:Src/main.c    **** static void MX_ADC1_Init(void);
  72:Src/main.c    **** static void MX_CAN_Init(void);
  73:Src/main.c    **** /* USER CODE BEGIN PFP */
  74:Src/main.c    **** void POT_read(uint16_t pot_values[4]);
  75:Src/main.c    **** void CAN_interpret(void);
  76:Src/main.c    **** void  POT_interpret(uint16_t pot_values[4]);
  77:Src/main.c    **** /* USER CODE END PFP */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  80:Src/main.c    **** /* USER CODE BEGIN 0 */
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE END 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** /**
  85:Src/main.c    ****   * @brief  The application entry point.
  86:Src/main.c    ****   * @retval int
  87:Src/main.c    ****   */
  88:Src/main.c    **** int main(void)
  89:Src/main.c    **** {
  90:Src/main.c    ****   /* USER CODE BEGIN 1 */
  91:Src/main.c    **** 
ARM GAS  /tmp/ccKlY4m7.s 			page 3


  92:Src/main.c    ****   /* USER CODE END 1 */
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  97:Src/main.c    ****   HAL_Init();
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* USER CODE BEGIN Init */
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE END Init */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* Configure the system clock */
 104:Src/main.c    ****   SystemClock_Config();
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE END SysInit */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* Initialize all configured peripherals */
 111:Src/main.c    ****   MX_GPIO_Init();
 112:Src/main.c    ****   MX_ADC1_Init();
 113:Src/main.c    ****   MX_CAN_Init();
 114:Src/main.c    ****   /* USER CODE BEGIN 2 */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* USER CODE END 2 */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* Infinite loop */
 119:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 120:Src/main.c    ****   while (1)
 121:Src/main.c    ****   {
 122:Src/main.c    ****     /* USER CODE END WHILE */
 123:Src/main.c    **** 
 124:Src/main.c    ****     /* USER CODE BEGIN 3 */
 125:Src/main.c    **** 	
 126:Src/main.c    **** 	if (CAN_flag == 0xFF)
 127:Src/main.c    **** 		CAN_interpret();
 128:Src/main.c    **** 
 129:Src/main.c    **** 	//send POT positions CAN message
 130:Src/main.c    **** 	
 131:Src/main.c    **** 	uint16_t pot_position[4];
 132:Src/main.c    **** 	POT_read(pot_position);
 133:Src/main.c    **** 	POT_interpret(pot_position);
 134:Src/main.c    **** 
 135:Src/main.c    **** 	
 136:Src/main.c    **** 	HAL_CAN_AddTxMessage(&hcan, &POT_TxHeader, POT_data, &TxMailbox);
 137:Src/main.c    **** 
 138:Src/main.c    **** 	
 139:Src/main.c    **** 	HAL_Delay(1000);
 140:Src/main.c    **** 
 141:Src/main.c    **** 	
 142:Src/main.c    ****   }
 143:Src/main.c    ****   /* USER CODE END 3 */
 144:Src/main.c    **** }
 145:Src/main.c    **** 
 146:Src/main.c    **** /**
 147:Src/main.c    ****   * @brief System Clock Configuration
 148:Src/main.c    ****   * @retval None
ARM GAS  /tmp/ccKlY4m7.s 			page 4


 149:Src/main.c    ****   */
 150:Src/main.c    **** void SystemClock_Config(void)
 151:Src/main.c    **** {
 152:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 153:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 154:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 155:Src/main.c    **** 
 156:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 157:Src/main.c    ****   */
 158:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 159:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 160:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 161:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 162:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 163:Src/main.c    ****   {
 164:Src/main.c    ****     Error_Handler();
 165:Src/main.c    ****   }
 166:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 167:Src/main.c    ****   */
 168:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 169:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 170:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 171:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 172:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 173:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 174:Src/main.c    **** 
 175:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 176:Src/main.c    ****   {
 177:Src/main.c    ****     Error_Handler();
 178:Src/main.c    ****   }
 179:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 180:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 181:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 182:Src/main.c    ****   {
 183:Src/main.c    ****     Error_Handler();
 184:Src/main.c    ****   }
 185:Src/main.c    **** }
 186:Src/main.c    **** 
 187:Src/main.c    **** /**
 188:Src/main.c    ****   * @brief ADC1 Initialization Function
 189:Src/main.c    ****   * @param None
 190:Src/main.c    ****   * @retval None
 191:Src/main.c    ****   */
 192:Src/main.c    **** static void MX_ADC1_Init(void)
 193:Src/main.c    **** {
 194:Src/main.c    **** 
 195:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 196:Src/main.c    **** 
 197:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 198:Src/main.c    **** 
 199:Src/main.c    ****   //ADC_ChannelConfTypeDef sConfig = {0};
 200:Src/main.c    **** 
 201:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 202:Src/main.c    **** 
 203:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 204:Src/main.c    ****   /** Common config 
 205:Src/main.c    ****   */
ARM GAS  /tmp/ccKlY4m7.s 			page 5


 206:Src/main.c    ****   hadc1.Instance = ADC1;
 207:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 208:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 209:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 210:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 211:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 212:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 213:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 214:Src/main.c    ****   {
 215:Src/main.c    ****     Error_Handler();
 216:Src/main.c    ****   }
 217:Src/main.c    ****   /** Configure Regular Channel 
 218:Src/main.c    ****   */
 219:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 220:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 221:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 222:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 223:Src/main.c    ****   {
 224:Src/main.c    ****     Error_Handler();
 225:Src/main.c    ****   }
 226:Src/main.c    ****   /** Configure Regular Channel 
 227:Src/main.c    ****   */
 228:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 229:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 230:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 231:Src/main.c    ****   {
 232:Src/main.c    ****     Error_Handler();
 233:Src/main.c    ****   }
 234:Src/main.c    ****   /** Configure Regular Channel 
 235:Src/main.c    ****   */
 236:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_7;
 237:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 238:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 239:Src/main.c    ****   {
 240:Src/main.c    ****     Error_Handler();
 241:Src/main.c    ****   }
 242:Src/main.c    ****   /** Configure Regular Channel 
 243:Src/main.c    ****   */
 244:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 245:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 246:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 247:Src/main.c    ****   {
 248:Src/main.c    ****     Error_Handler();
 249:Src/main.c    ****   }
 250:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 251:Src/main.c    **** 
 252:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 253:Src/main.c    **** 
 254:Src/main.c    **** }
 255:Src/main.c    **** 
 256:Src/main.c    **** /**
 257:Src/main.c    ****   * @brief CAN Initialization Function
 258:Src/main.c    ****   * @param None
 259:Src/main.c    ****   * @retval None
 260:Src/main.c    ****   */
 261:Src/main.c    **** static void MX_CAN_Init(void)
 262:Src/main.c    **** {
ARM GAS  /tmp/ccKlY4m7.s 			page 6


 263:Src/main.c    **** 
 264:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 265:Src/main.c    **** 	CAN_FilterTypeDef     sFilterConfig;
 266:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 267:Src/main.c    **** 
 268:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 271:Src/main.c    ****   hcan.Instance = CAN1;
 272:Src/main.c    ****   hcan.Init.Prescaler = 2;
 273:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 274:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_4TQ;
 275:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 276:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 277:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 278:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 279:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 280:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 281:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 282:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 283:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 284:Src/main.c    ****   {
 285:Src/main.c    ****     Error_Handler();
 286:Src/main.c    ****   }
 287:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 */
 288:Src/main.c    **** 	POT_TxHeader.StdId = DASH_CAN_ID; 						// CAN standard ID
 289:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 290:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 291:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 292:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 293:Src/main.c    ****   
 294:Src/main.c    **** 	sFilterConfig.FilterBank = 0;							// filter number (0-13)
 295:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode		
 296:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;		
 297:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 298:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 299:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 300:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 301:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 302:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 303:Src/main.c    **** 	
 304:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 305:Src/main.c    **** 	
 306:Src/main.c    **** 	HAL_CAN_Start(&hcan);
 307:Src/main.c    **** 	
 308:Src/main.c    **** 	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); 
 309:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 310:Src/main.c    **** 
 311:Src/main.c    **** }
 312:Src/main.c    **** 
 313:Src/main.c    **** /**
 314:Src/main.c    ****   * @brief GPIO Initialization Function
 315:Src/main.c    ****   * @param None
 316:Src/main.c    ****   * @retval None
 317:Src/main.c    ****   */
 318:Src/main.c    **** static void MX_GPIO_Init(void)
 319:Src/main.c    **** {
ARM GAS  /tmp/ccKlY4m7.s 			page 7


  25              		.loc 1 319 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 86B0     		sub	sp, sp, #24
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 320:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 320 0
  42 0006 0024     		movs	r4, #0
  43 0008 0294     		str	r4, [sp, #8]
  44 000a 0394     		str	r4, [sp, #12]
  45 000c 0494     		str	r4, [sp, #16]
  46 000e 0594     		str	r4, [sp, #20]
  47              	.LBB2:
 321:Src/main.c    **** 
 322:Src/main.c    ****   /* GPIO Ports Clock Enable */
 323:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  48              		.loc 1 323 0
  49 0010 1D4B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F00402 		orr	r2, r2, #4
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F00402 		and	r2, r2, #4
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE2:
  58              	.LBB3:
 324:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  59              		.loc 1 324 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F00802 		orr	r2, r2, #8
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9B69     		ldr	r3, [r3, #24]
  64 002e 03F00803 		and	r3, r3, #8
  65 0032 0193     		str	r3, [sp, #4]
  66 0034 019B     		ldr	r3, [sp, #4]
  67              	.LBE3:
 325:Src/main.c    **** 
 326:Src/main.c    ****   /*Configure GPIO pin Output Level */
 327:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin 
  68              		.loc 1 327 0
  69 0036 DFF85880 		ldr	r8, .L3+8
  70 003a 2246     		mov	r2, r4
  71 003c 4FF45E71 		mov	r1, #888
  72 0040 4046     		mov	r0, r8
  73 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccKlY4m7.s 			page 8


  74              	.LVL0:
 328:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin, GPIO_PIN_RESET);
 329:Src/main.c    **** 
 330:Src/main.c    ****   /*Configure GPIO pin Output Level */
 331:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin, GPIO_PIN_RESET);
  75              		.loc 1 331 0
  76 0046 114D     		ldr	r5, .L3+4
  77 0048 2246     		mov	r2, r4
  78 004a 4FF4F071 		mov	r1, #480
  79 004e 2846     		mov	r0, r5
  80 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  81              	.LVL1:
 332:Src/main.c    **** 
 333:Src/main.c    ****   /*Configure GPIO pins : CUR_LED_Pin BMS_LED_ON_Pin IMD_LED_ON_Pin BSPD_LED_ON_Pin 
 334:Src/main.c    ****                            DRS_LED_Pin TC_LED_Pin */
 335:Src/main.c    ****   GPIO_InitStruct.Pin = CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin 
  82              		.loc 1 335 0
  83 0054 4FF45E73 		mov	r3, #888
  84 0058 0293     		str	r3, [sp, #8]
 336:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin;
 337:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  85              		.loc 1 337 0
  86 005a 0127     		movs	r7, #1
  87 005c 0397     		str	r7, [sp, #12]
 338:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  88              		.loc 1 338 0
  89 005e 0494     		str	r4, [sp, #16]
 339:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  90              		.loc 1 339 0
  91 0060 0226     		movs	r6, #2
  92 0062 0596     		str	r6, [sp, #20]
 340:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  93              		.loc 1 340 0
  94 0064 02A9     		add	r1, sp, #8
  95 0066 4046     		mov	r0, r8
  96 0068 FFF7FEFF 		bl	HAL_GPIO_Init
  97              	.LVL2:
 341:Src/main.c    **** 
 342:Src/main.c    ****   /*Configure GPIO pins : RGB_GREEN_Pin RGB_RED_Pin RGB_BLUE_Pin CUST_LED_Pin */
 343:Src/main.c    ****   GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin;
  98              		.loc 1 343 0
  99 006c 4FF4F073 		mov	r3, #480
 100 0070 0293     		str	r3, [sp, #8]
 344:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 101              		.loc 1 344 0
 102 0072 0397     		str	r7, [sp, #12]
 345:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 103              		.loc 1 345 0
 104 0074 0494     		str	r4, [sp, #16]
 346:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 105              		.loc 1 346 0
 106 0076 0596     		str	r6, [sp, #20]
 347:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 107              		.loc 1 347 0
 108 0078 02A9     		add	r1, sp, #8
 109 007a 2846     		mov	r0, r5
 110 007c FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccKlY4m7.s 			page 9


 111              	.LVL3:
 348:Src/main.c    **** 
 349:Src/main.c    **** }
 112              		.loc 1 349 0
 113 0080 06B0     		add	sp, sp, #24
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 24
 116              		@ sp needed
 117 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 118              	.L4:
 119 0086 00BF     		.align	2
 120              	.L3:
 121 0088 00100240 		.word	1073876992
 122 008c 000C0140 		.word	1073810432
 123 0090 00080140 		.word	1073809408
 124              		.cfi_endproc
 125              	.LFE70:
 127              		.section	.text.MX_ADC1_Init,"ax",%progbits
 128              		.align	1
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu softvfp
 134              	MX_ADC1_Init:
 135              	.LFB68:
 193:Src/main.c    **** 
 136              		.loc 1 193 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 24
 143              		.cfi_offset 3, -24
 144              		.cfi_offset 4, -20
 145              		.cfi_offset 5, -16
 146              		.cfi_offset 6, -12
 147              		.cfi_offset 7, -8
 148              		.cfi_offset 14, -4
 206:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 149              		.loc 1 206 0
 150 0002 184D     		ldr	r5, .L7
 151 0004 184B     		ldr	r3, .L7+4
 152 0006 2B60     		str	r3, [r5]
 207:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 153              		.loc 1 207 0
 154 0008 0026     		movs	r6, #0
 155 000a AE60     		str	r6, [r5, #8]
 208:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 156              		.loc 1 208 0
 157 000c EE60     		str	r6, [r5, #12]
 209:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 158              		.loc 1 209 0
 159 000e 6E61     		str	r6, [r5, #20]
 210:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 160              		.loc 1 210 0
 161 0010 4FF46023 		mov	r3, #917504
ARM GAS  /tmp/ccKlY4m7.s 			page 10


 162 0014 EB61     		str	r3, [r5, #28]
 211:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 163              		.loc 1 211 0
 164 0016 6E60     		str	r6, [r5, #4]
 212:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 165              		.loc 1 212 0
 166 0018 0427     		movs	r7, #4
 167 001a 2F61     		str	r7, [r5, #16]
 213:Src/main.c    ****   {
 168              		.loc 1 213 0
 169 001c 2846     		mov	r0, r5
 170 001e FFF7FEFF 		bl	HAL_ADC_Init
 171              	.LVL4:
 219:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 172              		.loc 1 219 0
 173 0022 124C     		ldr	r4, .L7+8
 174 0024 2660     		str	r6, [r4]
 220:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 175              		.loc 1 220 0
 176 0026 0126     		movs	r6, #1
 177 0028 6660     		str	r6, [r4, #4]
 221:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 178              		.loc 1 221 0
 179 002a A660     		str	r6, [r4, #8]
 222:Src/main.c    ****   {
 180              		.loc 1 222 0
 181 002c 2146     		mov	r1, r4
 182 002e 2846     		mov	r0, r5
 183 0030 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 184              	.LVL5:
 228:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 185              		.loc 1 228 0
 186 0034 2660     		str	r6, [r4]
 229:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 187              		.loc 1 229 0
 188 0036 0223     		movs	r3, #2
 189 0038 6360     		str	r3, [r4, #4]
 230:Src/main.c    ****   {
 190              		.loc 1 230 0
 191 003a 2146     		mov	r1, r4
 192 003c 2846     		mov	r0, r5
 193 003e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 194              	.LVL6:
 236:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 195              		.loc 1 236 0
 196 0042 0723     		movs	r3, #7
 197 0044 2360     		str	r3, [r4]
 237:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 198              		.loc 1 237 0
 199 0046 0323     		movs	r3, #3
 200 0048 6360     		str	r3, [r4, #4]
 238:Src/main.c    ****   {
 201              		.loc 1 238 0
 202 004a 2146     		mov	r1, r4
 203 004c 2846     		mov	r0, r5
 204 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 205              	.LVL7:
ARM GAS  /tmp/ccKlY4m7.s 			page 11


 244:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 206              		.loc 1 244 0
 207 0052 0923     		movs	r3, #9
 208 0054 2360     		str	r3, [r4]
 245:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 209              		.loc 1 245 0
 210 0056 6760     		str	r7, [r4, #4]
 246:Src/main.c    ****   {
 211              		.loc 1 246 0
 212 0058 2146     		mov	r1, r4
 213 005a 2846     		mov	r0, r5
 214 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 215              	.LVL8:
 254:Src/main.c    **** 
 216              		.loc 1 254 0
 217 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 218              	.L8:
 219 0062 00BF     		.align	2
 220              	.L7:
 221 0064 00000000 		.word	hadc1
 222 0068 00240140 		.word	1073816576
 223 006c 00000000 		.word	.LANCHOR0
 224              		.cfi_endproc
 225              	.LFE68:
 227              		.section	.text.MX_CAN_Init,"ax",%progbits
 228              		.align	1
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu softvfp
 234              	MX_CAN_Init:
 235              	.LFB69:
 262:Src/main.c    **** 
 236              		.loc 1 262 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 40
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240 0000 70B5     		push	{r4, r5, r6, lr}
 241              	.LCFI4:
 242              		.cfi_def_cfa_offset 16
 243              		.cfi_offset 4, -16
 244              		.cfi_offset 5, -12
 245              		.cfi_offset 6, -8
 246              		.cfi_offset 14, -4
 247 0002 8AB0     		sub	sp, sp, #40
 248              	.LCFI5:
 249              		.cfi_def_cfa_offset 56
 271:Src/main.c    ****   hcan.Init.Prescaler = 2;
 250              		.loc 1 271 0
 251 0004 1B4D     		ldr	r5, .L11
 252 0006 1C4B     		ldr	r3, .L11+4
 253 0008 2B60     		str	r3, [r5]
 272:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 254              		.loc 1 272 0
 255 000a 0226     		movs	r6, #2
 256 000c 6E60     		str	r6, [r5, #4]
 273:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_4TQ;
ARM GAS  /tmp/ccKlY4m7.s 			page 12


 257              		.loc 1 273 0
 258 000e 0024     		movs	r4, #0
 259 0010 AC60     		str	r4, [r5, #8]
 274:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 260              		.loc 1 274 0
 261 0012 4FF04073 		mov	r3, #50331648
 262 0016 EB60     		str	r3, [r5, #12]
 275:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 263              		.loc 1 275 0
 264 0018 4FF42023 		mov	r3, #655360
 265 001c 2B61     		str	r3, [r5, #16]
 276:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 266              		.loc 1 276 0
 267 001e 4FF44013 		mov	r3, #3145728
 268 0022 6B61     		str	r3, [r5, #20]
 277:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 269              		.loc 1 277 0
 270 0024 2C76     		strb	r4, [r5, #24]
 278:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 271              		.loc 1 278 0
 272 0026 6C76     		strb	r4, [r5, #25]
 279:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 273              		.loc 1 279 0
 274 0028 AC76     		strb	r4, [r5, #26]
 280:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 275              		.loc 1 280 0
 276 002a EC76     		strb	r4, [r5, #27]
 281:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 277              		.loc 1 281 0
 278 002c 2C77     		strb	r4, [r5, #28]
 282:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 279              		.loc 1 282 0
 280 002e 6C77     		strb	r4, [r5, #29]
 283:Src/main.c    ****   {
 281              		.loc 1 283 0
 282 0030 2846     		mov	r0, r5
 283 0032 FFF7FEFF 		bl	HAL_CAN_Init
 284              	.LVL9:
 288:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 285              		.loc 1 288 0
 286 0036 114B     		ldr	r3, .L11+8
 287 0038 0F22     		movs	r2, #15
 288 003a 1A60     		str	r2, [r3]
 289:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 289              		.loc 1 289 0
 290 003c DC60     		str	r4, [r3, #12]
 290:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 291              		.loc 1 290 0
 292 003e 9C60     		str	r4, [r3, #8]
 291:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 293              		.loc 1 291 0
 294 0040 0422     		movs	r2, #4
 295 0042 1A61     		str	r2, [r3, #16]
 292:Src/main.c    ****   
 296              		.loc 1 292 0
 297 0044 1C75     		strb	r4, [r3, #20]
 294:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode		
ARM GAS  /tmp/ccKlY4m7.s 			page 13


 298              		.loc 1 294 0
 299 0046 0594     		str	r4, [sp, #20]
 295:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;		
 300              		.loc 1 295 0
 301 0048 0694     		str	r4, [sp, #24]
 296:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 302              		.loc 1 296 0
 303 004a 0123     		movs	r3, #1
 304 004c 0793     		str	r3, [sp, #28]
 297:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 305              		.loc 1 297 0
 306 004e 0094     		str	r4, [sp]
 298:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 307              		.loc 1 298 0
 308 0050 0194     		str	r4, [sp, #4]
 299:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 309              		.loc 1 299 0
 310 0052 0294     		str	r4, [sp, #8]
 300:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 311              		.loc 1 300 0
 312 0054 0394     		str	r4, [sp, #12]
 301:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 313              		.loc 1 301 0
 314 0056 0494     		str	r4, [sp, #16]
 302:Src/main.c    **** 	
 315              		.loc 1 302 0
 316 0058 0893     		str	r3, [sp, #32]
 304:Src/main.c    **** 	
 317              		.loc 1 304 0
 318 005a 6946     		mov	r1, sp
 319 005c 2846     		mov	r0, r5
 320 005e FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 321              	.LVL10:
 306:Src/main.c    **** 	
 322              		.loc 1 306 0
 323 0062 2846     		mov	r0, r5
 324 0064 FFF7FEFF 		bl	HAL_CAN_Start
 325              	.LVL11:
 308:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 326              		.loc 1 308 0
 327 0068 3146     		mov	r1, r6
 328 006a 2846     		mov	r0, r5
 329 006c FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 330              	.LVL12:
 311:Src/main.c    **** 
 331              		.loc 1 311 0
 332 0070 0AB0     		add	sp, sp, #40
 333              	.LCFI6:
 334              		.cfi_def_cfa_offset 16
 335              		@ sp needed
 336 0072 70BD     		pop	{r4, r5, r6, pc}
 337              	.L12:
 338              		.align	2
 339              	.L11:
 340 0074 00000000 		.word	hcan
 341 0078 00640040 		.word	1073767424
 342 007c 00000000 		.word	POT_TxHeader
ARM GAS  /tmp/ccKlY4m7.s 			page 14


 343              		.cfi_endproc
 344              	.LFE69:
 346              		.section	.text.SystemClock_Config,"ax",%progbits
 347              		.align	1
 348              		.global	SystemClock_Config
 349              		.syntax unified
 350              		.thumb
 351              		.thumb_func
 352              		.fpu softvfp
 354              	SystemClock_Config:
 355              	.LFB67:
 151:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 356              		.loc 1 151 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 80
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360 0000 30B5     		push	{r4, r5, lr}
 361              	.LCFI7:
 362              		.cfi_def_cfa_offset 12
 363              		.cfi_offset 4, -12
 364              		.cfi_offset 5, -8
 365              		.cfi_offset 14, -4
 366 0002 95B0     		sub	sp, sp, #84
 367              	.LCFI8:
 368              		.cfi_def_cfa_offset 96
 152:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 369              		.loc 1 152 0
 370 0004 2422     		movs	r2, #36
 371 0006 0021     		movs	r1, #0
 372 0008 0BA8     		add	r0, sp, #44
 373 000a FFF7FEFF 		bl	memset
 374              	.LVL13:
 153:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 375              		.loc 1 153 0
 376 000e 0024     		movs	r4, #0
 377 0010 0594     		str	r4, [sp, #20]
 378 0012 0694     		str	r4, [sp, #24]
 379 0014 0794     		str	r4, [sp, #28]
 380 0016 0894     		str	r4, [sp, #32]
 381 0018 0994     		str	r4, [sp, #36]
 154:Src/main.c    **** 
 382              		.loc 1 154 0
 383 001a 0194     		str	r4, [sp, #4]
 384 001c 0294     		str	r4, [sp, #8]
 385 001e 0394     		str	r4, [sp, #12]
 386 0020 0494     		str	r4, [sp, #16]
 158:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 387              		.loc 1 158 0
 388 0022 0225     		movs	r5, #2
 389 0024 0A95     		str	r5, [sp, #40]
 159:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 390              		.loc 1 159 0
 391 0026 0123     		movs	r3, #1
 392 0028 0E93     		str	r3, [sp, #56]
 160:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 393              		.loc 1 160 0
 394 002a 1023     		movs	r3, #16
ARM GAS  /tmp/ccKlY4m7.s 			page 15


 395 002c 0F93     		str	r3, [sp, #60]
 162:Src/main.c    ****   {
 396              		.loc 1 162 0
 397 002e 0AA8     		add	r0, sp, #40
 398 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 399              	.LVL14:
 168:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 400              		.loc 1 168 0
 401 0034 0F23     		movs	r3, #15
 402 0036 0593     		str	r3, [sp, #20]
 170:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 403              		.loc 1 170 0
 404 0038 0694     		str	r4, [sp, #24]
 171:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 405              		.loc 1 171 0
 406 003a 0794     		str	r4, [sp, #28]
 172:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 407              		.loc 1 172 0
 408 003c 0894     		str	r4, [sp, #32]
 173:Src/main.c    **** 
 409              		.loc 1 173 0
 410 003e 0994     		str	r4, [sp, #36]
 175:Src/main.c    ****   {
 411              		.loc 1 175 0
 412 0040 2146     		mov	r1, r4
 413 0042 05A8     		add	r0, sp, #20
 414 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 415              	.LVL15:
 179:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 416              		.loc 1 179 0
 417 0048 0195     		str	r5, [sp, #4]
 180:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 418              		.loc 1 180 0
 419 004a 0394     		str	r4, [sp, #12]
 181:Src/main.c    ****   {
 420              		.loc 1 181 0
 421 004c 01A8     		add	r0, sp, #4
 422 004e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 423              	.LVL16:
 185:Src/main.c    **** 
 424              		.loc 1 185 0
 425 0052 15B0     		add	sp, sp, #84
 426              	.LCFI9:
 427              		.cfi_def_cfa_offset 12
 428              		@ sp needed
 429 0054 30BD     		pop	{r4, r5, pc}
 430              		.cfi_endproc
 431              	.LFE67:
 433              		.section	.text.POT_read,"ax",%progbits
 434              		.align	1
 435              		.global	POT_read
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu softvfp
 441              	POT_read:
 442              	.LFB71:
ARM GAS  /tmp/ccKlY4m7.s 			page 16


 350:Src/main.c    **** 
 351:Src/main.c    **** /* USER CODE BEGIN 4 */
 352:Src/main.c    **** void POT_read(uint16_t pot_values[4]) {
 443              		.loc 1 352 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447              	.LVL17:
 448 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 449              	.LCFI10:
 450              		.cfi_def_cfa_offset 24
 451              		.cfi_offset 4, -24
 452              		.cfi_offset 5, -20
 453              		.cfi_offset 6, -16
 454              		.cfi_offset 7, -12
 455              		.cfi_offset 8, -8
 456              		.cfi_offset 14, -4
 457 0004 0746     		mov	r7, r0
 353:Src/main.c    **** 	//0 1 7 9
 354:Src/main.c    **** 
 355:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_0;
 458              		.loc 1 355 0
 459 0006 334D     		ldr	r5, .L17
 460 0008 0023     		movs	r3, #0
 461 000a 2B60     		str	r3, [r5]
 356:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 462              		.loc 1 356 0
 463 000c 0126     		movs	r6, #1
 464 000e 6E60     		str	r6, [r5, #4]
 357:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 465              		.loc 1 357 0
 466 0010 4FF00608 		mov	r8, #6
 467 0014 C5F80880 		str	r8, [r5, #8]
 358:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 468              		.loc 1 358 0
 469 0018 2F4C     		ldr	r4, .L17+4
 470 001a 2946     		mov	r1, r5
 471 001c 2046     		mov	r0, r4
 472              	.LVL18:
 473 001e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 474              	.LVL19:
 359:Src/main.c    **** 	
 360:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 475              		.loc 1 360 0
 476 0022 2046     		mov	r0, r4
 477 0024 FFF7FEFF 		bl	HAL_ADC_Start
 478              	.LVL20:
 361:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);		//change timeout to a HAL define
 479              		.loc 1 361 0
 480 0028 4FF47A71 		mov	r1, #1000
 481 002c 2046     		mov	r0, r4
 482 002e FFF7FEFF 		bl	HAL_ADC_PollForConversion
 483              	.LVL21:
 362:Src/main.c    **** 	pot_values[0] = HAL_ADC_GetValue(&hadc1);
 484              		.loc 1 362 0
 485 0032 2046     		mov	r0, r4
 486 0034 FFF7FEFF 		bl	HAL_ADC_GetValue
ARM GAS  /tmp/ccKlY4m7.s 			page 17


 487              	.LVL22:
 488 0038 3880     		strh	r0, [r7]	@ movhi
 363:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 489              		.loc 1 363 0
 490 003a 2046     		mov	r0, r4
 491 003c FFF7FEFF 		bl	HAL_ADC_Stop
 492              	.LVL23:
 364:Src/main.c    **** 	
 365:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_1;
 493              		.loc 1 365 0
 494 0040 2E60     		str	r6, [r5]
 366:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 495              		.loc 1 366 0
 496 0042 6E60     		str	r6, [r5, #4]
 367:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 497              		.loc 1 367 0
 498 0044 C5F80880 		str	r8, [r5, #8]
 368:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 499              		.loc 1 368 0
 500 0048 2946     		mov	r1, r5
 501 004a 2046     		mov	r0, r4
 502 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 503              	.LVL24:
 369:Src/main.c    **** 	
 370:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 504              		.loc 1 370 0
 505 0050 2046     		mov	r0, r4
 506 0052 FFF7FEFF 		bl	HAL_ADC_Start
 507              	.LVL25:
 371:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 508              		.loc 1 371 0
 509 0056 4FF47A71 		mov	r1, #1000
 510 005a 2046     		mov	r0, r4
 511 005c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 512              	.LVL26:
 372:Src/main.c    **** 	pot_values[1] = HAL_ADC_GetValue(&hadc1);
 513              		.loc 1 372 0
 514 0060 2046     		mov	r0, r4
 515 0062 FFF7FEFF 		bl	HAL_ADC_GetValue
 516              	.LVL27:
 517 0066 7880     		strh	r0, [r7, #2]	@ movhi
 373:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 518              		.loc 1 373 0
 519 0068 2046     		mov	r0, r4
 520 006a FFF7FEFF 		bl	HAL_ADC_Stop
 521              	.LVL28:
 374:Src/main.c    **** 	
 375:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_7;
 522              		.loc 1 375 0
 523 006e 0723     		movs	r3, #7
 524 0070 2B60     		str	r3, [r5]
 376:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 525              		.loc 1 376 0
 526 0072 6E60     		str	r6, [r5, #4]
 377:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 527              		.loc 1 377 0
 528 0074 C5F80880 		str	r8, [r5, #8]
ARM GAS  /tmp/ccKlY4m7.s 			page 18


 378:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 529              		.loc 1 378 0
 530 0078 2946     		mov	r1, r5
 531 007a 2046     		mov	r0, r4
 532 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 533              	.LVL29:
 379:Src/main.c    **** 	
 380:Src/main.c    **** 	
 381:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 534              		.loc 1 381 0
 535 0080 2046     		mov	r0, r4
 536 0082 FFF7FEFF 		bl	HAL_ADC_Start
 537              	.LVL30:
 382:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 538              		.loc 1 382 0
 539 0086 4FF47A71 		mov	r1, #1000
 540 008a 2046     		mov	r0, r4
 541 008c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 542              	.LVL31:
 383:Src/main.c    **** 	pot_values[2] = HAL_ADC_GetValue(&hadc1);
 543              		.loc 1 383 0
 544 0090 2046     		mov	r0, r4
 545 0092 FFF7FEFF 		bl	HAL_ADC_GetValue
 546              	.LVL32:
 547 0096 B880     		strh	r0, [r7, #4]	@ movhi
 384:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 548              		.loc 1 384 0
 549 0098 2046     		mov	r0, r4
 550 009a FFF7FEFF 		bl	HAL_ADC_Stop
 551              	.LVL33:
 385:Src/main.c    **** 	
 386:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_9;
 552              		.loc 1 386 0
 553 009e 0923     		movs	r3, #9
 554 00a0 2B60     		str	r3, [r5]
 387:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 555              		.loc 1 387 0
 556 00a2 6E60     		str	r6, [r5, #4]
 388:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 557              		.loc 1 388 0
 558 00a4 C5F80880 		str	r8, [r5, #8]
 389:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 559              		.loc 1 389 0
 560 00a8 2946     		mov	r1, r5
 561 00aa 2046     		mov	r0, r4
 562 00ac FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 563              	.LVL34:
 390:Src/main.c    **** 	
 391:Src/main.c    **** 	
 392:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 564              		.loc 1 392 0
 565 00b0 2046     		mov	r0, r4
 566 00b2 FFF7FEFF 		bl	HAL_ADC_Start
 567              	.LVL35:
 393:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 568              		.loc 1 393 0
 569 00b6 4FF47A71 		mov	r1, #1000
ARM GAS  /tmp/ccKlY4m7.s 			page 19


 570 00ba 2046     		mov	r0, r4
 571 00bc FFF7FEFF 		bl	HAL_ADC_PollForConversion
 572              	.LVL36:
 394:Src/main.c    **** 	pot_values[3] = HAL_ADC_GetValue(&hadc1);
 573              		.loc 1 394 0
 574 00c0 2046     		mov	r0, r4
 575 00c2 FFF7FEFF 		bl	HAL_ADC_GetValue
 576              	.LVL37:
 577 00c6 F880     		strh	r0, [r7, #6]	@ movhi
 395:Src/main.c    **** 	
 396:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 578              		.loc 1 396 0
 579 00c8 2046     		mov	r0, r4
 580 00ca FFF7FEFF 		bl	HAL_ADC_Stop
 581              	.LVL38:
 397:Src/main.c    **** 	
 398:Src/main.c    **** }
 582              		.loc 1 398 0
 583 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 584              	.LVL39:
 585              	.L18:
 586 00d2 00BF     		.align	2
 587              	.L17:
 588 00d4 00000000 		.word	.LANCHOR0
 589 00d8 00000000 		.word	hadc1
 590              		.cfi_endproc
 591              	.LFE71:
 593              		.section	.text.POT_interpret,"ax",%progbits
 594              		.align	1
 595              		.global	POT_interpret
 596              		.syntax unified
 597              		.thumb
 598              		.thumb_func
 599              		.fpu softvfp
 601              	POT_interpret:
 602              	.LFB72:
 399:Src/main.c    **** 
 400:Src/main.c    **** void POT_interpret(uint16_t pot_values[4]) {
 603              		.loc 1 400 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 8
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              	.LVL40:
 608 0000 30B5     		push	{r4, r5, lr}
 609              	.LCFI11:
 610              		.cfi_def_cfa_offset 12
 611              		.cfi_offset 4, -12
 612              		.cfi_offset 5, -8
 613              		.cfi_offset 14, -4
 614 0002 83B0     		sub	sp, sp, #12
 615              	.LCFI12:
 616              		.cfi_def_cfa_offset 24
 617              	.LVL41:
 401:Src/main.c    **** 	
 402:Src/main.c    **** 	uint8_t pot_pos[4];
 403:Src/main.c    **** 	uint8_t i, j;
 404:Src/main.c    **** 	
ARM GAS  /tmp/ccKlY4m7.s 			page 20


 405:Src/main.c    **** 	for (i = 0; i < 4; i++) {
 618              		.loc 1 405 0
 619 0004 0024     		movs	r4, #0
 620 0006 1FE0     		b	.L20
 621              	.LVL42:
 622              	.L21:
 406:Src/main.c    **** 		
 407:Src/main.c    **** 		for (j = 0; j < 10; j++) {
 623              		.loc 1 407 0 discriminator 2
 624 0008 0133     		adds	r3, r3, #1
 625              	.LVL43:
 626 000a DBB2     		uxtb	r3, r3
 627              	.LVL44:
 628              	.L23:
 629              		.loc 1 407 0 is_stmt 0 discriminator 1
 630 000c 092B     		cmp	r3, #9
 631 000e 13D8     		bhi	.L34
 408:Src/main.c    **** 			
 409:Src/main.c    **** 			//uint16_t pot_threshold[12] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
 410:Src/main.c    **** 			if ((pot_values[i] > pot_threshold[j]) && (pot_values[i] <= pot_threshold[j + 1]))
 632              		.loc 1 410 0 is_stmt 1
 633 0010 30F81420 		ldrh	r2, [r0, r4, lsl #1]
 634 0014 2E49     		ldr	r1, .L37
 635 0016 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 636 001a 8A42     		cmp	r2, r1
 637 001c F4D9     		bls	.L21
 638              		.loc 1 410 0 is_stmt 0 discriminator 1
 639 001e 591C     		adds	r1, r3, #1
 640 0020 2B4D     		ldr	r5, .L37
 641 0022 35F81110 		ldrh	r1, [r5, r1, lsl #1]
 642 0026 8A42     		cmp	r2, r1
 643 0028 EED8     		bhi	.L21
 411:Src/main.c    **** 				pot_pos[i] = 10 - (j + 1); // pot_pos[i] = 0 is ~3.3V, pot_pos[i] = 1 is ~3V, etc.
 644              		.loc 1 411 0 is_stmt 1
 645 002a C3F10902 		rsb	r2, r3, #9
 646 002e 02A9     		add	r1, sp, #8
 647 0030 2144     		add	r1, r1, r4
 648 0032 01F8042C 		strb	r2, [r1, #-4]
 649 0036 E7E7     		b	.L21
 650              	.L34:
 412:Src/main.c    **** 			}
 413:Src/main.c    **** 
 414:Src/main.c    **** 		POT_data[i] = pot_pos[i];
 651              		.loc 1 414 0 discriminator 2
 652 0038 02AB     		add	r3, sp, #8
 653              	.LVL45:
 654 003a 2344     		add	r3, r3, r4
 655 003c 13F8042C 		ldrb	r2, [r3, #-4]	@ zero_extendqisi2
 656 0040 244B     		ldr	r3, .L37+4
 657 0042 1A55     		strb	r2, [r3, r4]
 405:Src/main.c    **** 		
 658              		.loc 1 405 0 discriminator 2
 659 0044 0134     		adds	r4, r4, #1
 660              	.LVL46:
 661 0046 E4B2     		uxtb	r4, r4
 662              	.LVL47:
 663              	.L20:
ARM GAS  /tmp/ccKlY4m7.s 			page 21


 405:Src/main.c    **** 		
 664              		.loc 1 405 0 is_stmt 0 discriminator 1
 665 0048 032C     		cmp	r4, #3
 666 004a 01D8     		bhi	.L35
 407:Src/main.c    **** 			
 667              		.loc 1 407 0 is_stmt 1
 668 004c 0023     		movs	r3, #0
 669 004e DDE7     		b	.L23
 670              	.L35:
 415:Src/main.c    **** 		//POT_data[0] = 0x00;
 416:Src/main.c    **** 			
 417:Src/main.c    **** 	}
 418:Src/main.c    **** 	
 419:Src/main.c    **** 	if (pot_pos[0] != 0) // if CURRENT_POT is in any position other than first, turn on CUR_LED
 671              		.loc 1 419 0
 672 0050 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 673 0054 0BB3     		cbz	r3, .L24
 420:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_SET);
 674              		.loc 1 420 0
 675 0056 0122     		movs	r2, #1
 676 0058 4FF48071 		mov	r1, #256
 677 005c 1E48     		ldr	r0, .L37+8
 678              	.LVL48:
 679 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 680              	.LVL49:
 681              	.L25:
 421:Src/main.c    **** 	else
 422:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_RESET);
 423:Src/main.c    **** 	
 424:Src/main.c    **** 	if (pot_pos[1] != 0) // if CUSTOM_POT is in any position other than first, turn on CUST_LED
 682              		.loc 1 424 0
 683 0062 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 684 0066 FBB1     		cbz	r3, .L26
 425:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_SET);
 685              		.loc 1 425 0
 686 0068 0122     		movs	r2, #1
 687 006a 0821     		movs	r1, #8
 688 006c 1B48     		ldr	r0, .L37+12
 689 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 690              	.LVL50:
 691              	.L27:
 426:Src/main.c    **** 	else
 427:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_RESET);
 428:Src/main.c    **** 	
 429:Src/main.c    **** 	if (pot_pos[2] != 0) // if TC_POT is in any position other than first, turn on TC_LED
 692              		.loc 1 429 0
 693 0072 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 694 0076 EBB1     		cbz	r3, .L28
 430:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_SET);
 695              		.loc 1 430 0
 696 0078 0122     		movs	r2, #1
 697 007a 4FF40071 		mov	r1, #512
 698 007e 1748     		ldr	r0, .L37+12
 699 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 700              	.LVL51:
 701              	.L29:
 431:Src/main.c    **** 	else
ARM GAS  /tmp/ccKlY4m7.s 			page 22


 432:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_RESET);
 433:Src/main.c    **** 	
 434:Src/main.c    **** 	if (pot_pos[3] != 0) // if DRS_POT is in any position other than first, turn on DRS_LED
 702              		.loc 1 434 0
 703 0084 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 704 0088 DBB9     		cbnz	r3, .L36
 435:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_SET);
 436:Src/main.c    **** 	else
 437:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_RESET);
 705              		.loc 1 437 0
 706 008a 0022     		movs	r2, #0
 707 008c 4FF48071 		mov	r1, #256
 708 0090 1248     		ldr	r0, .L37+12
 709 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 710              	.LVL52:
 711              	.L19:
 438:Src/main.c    **** 	
 439:Src/main.c    **** }
 712              		.loc 1 439 0
 713 0096 03B0     		add	sp, sp, #12
 714              	.LCFI13:
 715              		.cfi_remember_state
 716              		.cfi_def_cfa_offset 12
 717              		@ sp needed
 718 0098 30BD     		pop	{r4, r5, pc}
 719              	.LVL53:
 720              	.L24:
 721              	.LCFI14:
 722              		.cfi_restore_state
 422:Src/main.c    **** 	
 723              		.loc 1 422 0
 724 009a 0022     		movs	r2, #0
 725 009c 4FF48071 		mov	r1, #256
 726 00a0 0D48     		ldr	r0, .L37+8
 727              	.LVL54:
 728 00a2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 729              	.LVL55:
 730 00a6 DCE7     		b	.L25
 731              	.L26:
 427:Src/main.c    **** 	
 732              		.loc 1 427 0
 733 00a8 0022     		movs	r2, #0
 734 00aa 0821     		movs	r1, #8
 735 00ac 0B48     		ldr	r0, .L37+12
 736 00ae FFF7FEFF 		bl	HAL_GPIO_WritePin
 737              	.LVL56:
 738 00b2 DEE7     		b	.L27
 739              	.L28:
 432:Src/main.c    **** 	
 740              		.loc 1 432 0
 741 00b4 0022     		movs	r2, #0
 742 00b6 4FF40071 		mov	r1, #512
 743 00ba 0848     		ldr	r0, .L37+12
 744 00bc FFF7FEFF 		bl	HAL_GPIO_WritePin
 745              	.LVL57:
 746 00c0 E0E7     		b	.L29
 747              	.L36:
ARM GAS  /tmp/ccKlY4m7.s 			page 23


 435:Src/main.c    **** 	else
 748              		.loc 1 435 0
 749 00c2 0122     		movs	r2, #1
 750 00c4 4FF48071 		mov	r1, #256
 751 00c8 0448     		ldr	r0, .L37+12
 752 00ca FFF7FEFF 		bl	HAL_GPIO_WritePin
 753              	.LVL58:
 754 00ce E2E7     		b	.L19
 755              	.L38:
 756              		.align	2
 757              	.L37:
 758 00d0 00000000 		.word	.LANCHOR1
 759 00d4 00000000 		.word	POT_data
 760 00d8 000C0140 		.word	1073810432
 761 00dc 00080140 		.word	1073809408
 762              		.cfi_endproc
 763              	.LFE72:
 765              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 766              		.align	1
 767              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 768              		.syntax unified
 769              		.thumb
 770              		.thumb_func
 771              		.fpu softvfp
 773              	HAL_CAN_RxFifo0MsgPendingCallback:
 774              	.LFB73:
 440:Src/main.c    **** 
 441:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
 442:Src/main.c    **** {
 775              		.loc 1 442 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              	.LVL59:
 780 0000 08B5     		push	{r3, lr}
 781              	.LCFI15:
 782              		.cfi_def_cfa_offset 8
 783              		.cfi_offset 3, -8
 784              		.cfi_offset 14, -4
 443:Src/main.c    ****   if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 785              		.loc 1 443 0
 786 0002 054B     		ldr	r3, .L42
 787 0004 054A     		ldr	r2, .L42+4
 788 0006 0021     		movs	r1, #0
 789 0008 0548     		ldr	r0, .L42+8
 790              	.LVL60:
 791 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 792              	.LVL61:
 793 000e 10B9     		cbnz	r0, .L39
 444:Src/main.c    **** 	  CAN_flag = 0xFF;
 794              		.loc 1 444 0
 795 0010 044B     		ldr	r3, .L42+12
 796 0012 FF22     		movs	r2, #255
 797 0014 1A70     		strb	r2, [r3]
 798              	.L39:
 445:Src/main.c    **** }
 799              		.loc 1 445 0
ARM GAS  /tmp/ccKlY4m7.s 			page 24


 800 0016 08BD     		pop	{r3, pc}
 801              	.L43:
 802              		.align	2
 803              	.L42:
 804 0018 00000000 		.word	RxData
 805 001c 00000000 		.word	RxHeader
 806 0020 00000000 		.word	hcan
 807 0024 00000000 		.word	CAN_flag
 808              		.cfi_endproc
 809              	.LFE73:
 811              		.section	.text.CAN_interpret,"ax",%progbits
 812              		.align	1
 813              		.global	CAN_interpret
 814              		.syntax unified
 815              		.thumb
 816              		.thumb_func
 817              		.fpu softvfp
 819              	CAN_interpret:
 820              	.LFB74:
 446:Src/main.c    **** 
 447:Src/main.c    **** void CAN_interpret(void) {
 821              		.loc 1 447 0
 822              		.cfi_startproc
 823              		@ args = 0, pretend = 0, frame = 0
 824              		@ frame_needed = 0, uses_anonymous_args = 0
 825 0000 70B5     		push	{r4, r5, r6, lr}
 826              	.LCFI16:
 827              		.cfi_def_cfa_offset 16
 828              		.cfi_offset 4, -16
 829              		.cfi_offset 5, -12
 830              		.cfi_offset 6, -8
 831              		.cfi_offset 14, -4
 448:Src/main.c    **** 	
 449:Src/main.c    **** 	uint16_t received_ID;
 450:Src/main.c    **** 	received_ID = RxHeader.StdId;
 832              		.loc 1 450 0
 833 0002 394B     		ldr	r3, .L64
 834 0004 1C88     		ldrh	r4, [r3]
 835              	.LVL62:
 451:Src/main.c    **** 	
 452:Src/main.c    **** 	if (received_ID == FAULTS) {
 836              		.loc 1 452 0
 837 0006 D02C     		cmp	r4, #208
 838 0008 05D0     		beq	.L55
 839              	.L45:
 453:Src/main.c    **** 		
 454:Src/main.c    **** 		uint8_t BMS_fault;
 455:Src/main.c    **** 		uint8_t IMD_fault;
 456:Src/main.c    **** 		uint8_t BSPD_fault;
 457:Src/main.c    **** 		bool any_fault;
 458:Src/main.c    **** 
 459:Src/main.c    **** 		BMS_fault = RxData[0];
 460:Src/main.c    **** 		IMD_fault = RxData[1];
 461:Src/main.c    **** 		BSPD_fault = RxData[2];
 462:Src/main.c    **** 
 463:Src/main.c    **** 		if (BMS_fault == 0xFF) {
 464:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
ARM GAS  /tmp/ccKlY4m7.s 			page 25


 465:Src/main.c    **** 			any_fault = true;
 466:Src/main.c    **** 		}
 467:Src/main.c    **** 		else if (BMS_fault == 0x00)
 468:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);	
 469:Src/main.c    **** 			
 470:Src/main.c    **** 		if (IMD_fault == 0xFF) {
 471:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 472:Src/main.c    **** 			any_fault = true;
 473:Src/main.c    **** 		}
 474:Src/main.c    **** 		else if (IMD_fault == 0x00)
 475:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 476:Src/main.c    **** 			
 477:Src/main.c    **** 		if (BSPD_fault == 0xFF) {
 478:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 479:Src/main.c    **** 			any_fault = true;
 480:Src/main.c    **** 		}
 481:Src/main.c    **** 		else if (BSPD_fault == 0x00)
 482:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 483:Src/main.c    **** 			
 484:Src/main.c    **** 		if (any_fault == true) {
 485:Src/main.c    **** 			// if there is any fault
 486:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 487:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 488:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 489:Src/main.c    **** 			any_fault = false;
 490:Src/main.c    **** 		}
 491:Src/main.c    **** 
 492:Src/main.c    **** 	}
 493:Src/main.c    **** 
 494:Src/main.c    **** 	if (received_ID == PRECHARGE) {
 840              		.loc 1 494 0
 841 000a D12C     		cmp	r4, #209
 842 000c 44D0     		beq	.L56
 843              	.LVL63:
 844              	.L52:
 495:Src/main.c    **** 		
 496:Src/main.c    **** 		uint8_t Precharge_state;
 497:Src/main.c    **** 		Precharge_state = RxData[0];
 498:Src/main.c    **** 		
 499:Src/main.c    **** 		if (Precharge_state == 0xFF) {
 500:Src/main.c    **** 			// if precharge is complete 
 501:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED green
 502:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 503:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 504:Src/main.c    **** 		}
 505:Src/main.c    **** 		
 506:Src/main.c    **** 		if (Precharge_state == 0x00) {
 507:Src/main.c    **** 			// if precharge is not complete 
 508:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 509:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 510:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 511:Src/main.c    **** 			
 512:Src/main.c    **** 		}
 513:Src/main.c    **** 		
 514:Src/main.c    **** 	}
 515:Src/main.c    **** 	
 516:Src/main.c    **** 	CAN_flag = 0x00;
ARM GAS  /tmp/ccKlY4m7.s 			page 26


 845              		.loc 1 516 0
 846 000e 374B     		ldr	r3, .L64+4
 847 0010 0022     		movs	r2, #0
 848 0012 1A70     		strb	r2, [r3]
 517:Src/main.c    **** 	
 518:Src/main.c    **** }
 849              		.loc 1 518 0
 850 0014 70BD     		pop	{r4, r5, r6, pc}
 851              	.LVL64:
 852              	.L55:
 853              	.LBB4:
 459:Src/main.c    **** 		IMD_fault = RxData[1];
 854              		.loc 1 459 0
 855 0016 364B     		ldr	r3, .L64+8
 856 0018 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 857              	.LVL65:
 460:Src/main.c    **** 		BSPD_fault = RxData[2];
 858              		.loc 1 460 0
 859 001a 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 860              	.LVL66:
 461:Src/main.c    **** 
 861              		.loc 1 461 0
 862 001c 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 863              	.LVL67:
 463:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 864              		.loc 1 463 0
 865 001e FF2A     		cmp	r2, #255
 866 0020 17D0     		beq	.L57
 467:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);	
 867              		.loc 1 467 0
 868 0022 E2B1     		cbz	r2, .L58
 869              	.LVL68:
 870              	.L47:
 470:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 871              		.loc 1 470 0
 872 0024 FF2E     		cmp	r6, #255
 873 0026 1FD0     		beq	.L59
 474:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 874              		.loc 1 474 0
 875 0028 26B3     		cbz	r6, .L60
 876              	.L49:
 477:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 877              		.loc 1 477 0
 878 002a FF2D     		cmp	r5, #255
 879 002c 28D0     		beq	.L61
 481:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 880              		.loc 1 481 0
 881 002e 6DB3     		cbz	r5, .L62
 882              	.L51:
 486:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 883              		.loc 1 486 0
 884 0030 304D     		ldr	r5, .L64+12
 885              	.LVL69:
 886 0032 0022     		movs	r2, #0
 887 0034 2021     		movs	r1, #32
 888 0036 2846     		mov	r0, r5
 889 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccKlY4m7.s 			page 27


 890              	.LVL70:
 487:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 891              		.loc 1 487 0
 892 003c 0122     		movs	r2, #1
 893 003e 4021     		movs	r1, #64
 894 0040 2846     		mov	r0, r5
 895 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 896              	.LVL71:
 488:Src/main.c    **** 			any_fault = false;
 897              		.loc 1 488 0
 898 0046 0022     		movs	r2, #0
 899 0048 8021     		movs	r1, #128
 900 004a 2846     		mov	r0, r5
 901 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 902              	.LVL72:
 903 0050 DBE7     		b	.L45
 904              	.LVL73:
 905              	.L57:
 464:Src/main.c    **** 			any_fault = true;
 906              		.loc 1 464 0
 907 0052 0122     		movs	r2, #1
 908              	.LVL74:
 909 0054 1021     		movs	r1, #16
 910 0056 2848     		ldr	r0, .L64+16
 911 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 912              	.LVL75:
 913 005c E2E7     		b	.L47
 914              	.LVL76:
 915              	.L58:
 468:Src/main.c    **** 			
 916              		.loc 1 468 0
 917 005e 1021     		movs	r1, #16
 918 0060 2548     		ldr	r0, .L64+16
 919 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 920              	.LVL77:
 921 0066 DDE7     		b	.L47
 922              	.LVL78:
 923              	.L59:
 471:Src/main.c    **** 			any_fault = true;
 924              		.loc 1 471 0
 925 0068 0122     		movs	r2, #1
 926 006a 2021     		movs	r1, #32
 927 006c 2248     		ldr	r0, .L64+16
 928 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 929              	.LVL79:
 930 0072 DAE7     		b	.L49
 931              	.L60:
 475:Src/main.c    **** 			
 932              		.loc 1 475 0
 933 0074 0022     		movs	r2, #0
 934 0076 2021     		movs	r1, #32
 935 0078 1F48     		ldr	r0, .L64+16
 936 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 937              	.LVL80:
 938 007e D4E7     		b	.L49
 939              	.L61:
 478:Src/main.c    **** 			any_fault = true;
ARM GAS  /tmp/ccKlY4m7.s 			page 28


 940              		.loc 1 478 0
 941 0080 0122     		movs	r2, #1
 942 0082 4021     		movs	r1, #64
 943 0084 1C48     		ldr	r0, .L64+16
 944 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 945              	.LVL81:
 946 008a D1E7     		b	.L51
 947              	.L62:
 482:Src/main.c    **** 			
 948              		.loc 1 482 0
 949 008c 0022     		movs	r2, #0
 950 008e 4021     		movs	r1, #64
 951 0090 1948     		ldr	r0, .L64+16
 952 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 953              	.LVL82:
 954 0096 CBE7     		b	.L51
 955              	.LVL83:
 956              	.L56:
 957              	.LBE4:
 958              	.LBB5:
 497:Src/main.c    **** 		
 959              		.loc 1 497 0
 960 0098 154B     		ldr	r3, .L64+8
 961 009a 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 962              	.LVL84:
 499:Src/main.c    **** 			// if precharge is complete 
 963              		.loc 1 499 0
 964 009c FF2C     		cmp	r4, #255
 965 009e 12D0     		beq	.L63
 966              	.L53:
 506:Src/main.c    **** 			// if precharge is not complete 
 967              		.loc 1 506 0
 968 00a0 002C     		cmp	r4, #0
 969 00a2 B4D1     		bne	.L52
 508:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 970              		.loc 1 508 0
 971 00a4 134C     		ldr	r4, .L64+12
 972              	.LVL85:
 973 00a6 0022     		movs	r2, #0
 974 00a8 2021     		movs	r1, #32
 975 00aa 2046     		mov	r0, r4
 976 00ac FFF7FEFF 		bl	HAL_GPIO_WritePin
 977              	.LVL86:
 509:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 978              		.loc 1 509 0
 979 00b0 0022     		movs	r2, #0
 980 00b2 4021     		movs	r1, #64
 981 00b4 2046     		mov	r0, r4
 982 00b6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 983              	.LVL87:
 510:Src/main.c    **** 			
 984              		.loc 1 510 0
 985 00ba 0122     		movs	r2, #1
 986 00bc 8021     		movs	r1, #128
 987 00be 2046     		mov	r0, r4
 988 00c0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 989              	.LVL88:
ARM GAS  /tmp/ccKlY4m7.s 			page 29


 990 00c4 A3E7     		b	.L52
 991              	.LVL89:
 992              	.L63:
 501:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 993              		.loc 1 501 0
 994 00c6 0B4D     		ldr	r5, .L64+12
 995 00c8 0122     		movs	r2, #1
 996 00ca 2021     		movs	r1, #32
 997 00cc 2846     		mov	r0, r5
 998 00ce FFF7FEFF 		bl	HAL_GPIO_WritePin
 999              	.LVL90:
 502:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1000              		.loc 1 502 0
 1001 00d2 0022     		movs	r2, #0
 1002 00d4 4021     		movs	r1, #64
 1003 00d6 2846     		mov	r0, r5
 1004 00d8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1005              	.LVL91:
 503:Src/main.c    **** 		}
 1006              		.loc 1 503 0
 1007 00dc 0022     		movs	r2, #0
 1008 00de 8021     		movs	r1, #128
 1009 00e0 2846     		mov	r0, r5
 1010 00e2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1011              	.LVL92:
 1012 00e6 DBE7     		b	.L53
 1013              	.L65:
 1014              		.align	2
 1015              	.L64:
 1016 00e8 00000000 		.word	RxHeader
 1017 00ec 00000000 		.word	CAN_flag
 1018 00f0 00000000 		.word	RxData
 1019 00f4 000C0140 		.word	1073810432
 1020 00f8 00080140 		.word	1073809408
 1021              	.LBE5:
 1022              		.cfi_endproc
 1023              	.LFE74:
 1025              		.section	.text.main,"ax",%progbits
 1026              		.align	1
 1027              		.global	main
 1028              		.syntax unified
 1029              		.thumb
 1030              		.thumb_func
 1031              		.fpu softvfp
 1033              	main:
 1034              	.LFB66:
  89:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1035              		.loc 1 89 0
 1036              		.cfi_startproc
 1037              		@ Volatile: function does not return.
 1038              		@ args = 0, pretend = 0, frame = 8
 1039              		@ frame_needed = 0, uses_anonymous_args = 0
 1040 0000 00B5     		push	{lr}
 1041              	.LCFI17:
 1042              		.cfi_def_cfa_offset 4
 1043              		.cfi_offset 14, -4
 1044 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccKlY4m7.s 			page 30


 1045              	.LCFI18:
 1046              		.cfi_def_cfa_offset 16
  97:Src/main.c    **** 
 1047              		.loc 1 97 0
 1048 0004 FFF7FEFF 		bl	HAL_Init
 1049              	.LVL93:
 104:Src/main.c    **** 
 1050              		.loc 1 104 0
 1051 0008 FFF7FEFF 		bl	SystemClock_Config
 1052              	.LVL94:
 111:Src/main.c    ****   MX_ADC1_Init();
 1053              		.loc 1 111 0
 1054 000c FFF7FEFF 		bl	MX_GPIO_Init
 1055              	.LVL95:
 112:Src/main.c    ****   MX_CAN_Init();
 1056              		.loc 1 112 0
 1057 0010 FFF7FEFF 		bl	MX_ADC1_Init
 1058              	.LVL96:
 113:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1059              		.loc 1 113 0
 1060 0014 FFF7FEFF 		bl	MX_CAN_Init
 1061              	.LVL97:
 1062 0018 0FE0     		b	.L68
 1063              	.L67:
 1064              	.LBB6:
 132:Src/main.c    **** 	POT_interpret(pot_position);
 1065              		.loc 1 132 0
 1066 001a 6846     		mov	r0, sp
 1067 001c FFF7FEFF 		bl	POT_read
 1068              	.LVL98:
 133:Src/main.c    **** 
 1069              		.loc 1 133 0
 1070 0020 6846     		mov	r0, sp
 1071 0022 FFF7FEFF 		bl	POT_interpret
 1072              	.LVL99:
 136:Src/main.c    **** 
 1073              		.loc 1 136 0
 1074 0026 094B     		ldr	r3, .L70
 1075 0028 094A     		ldr	r2, .L70+4
 1076 002a 0A49     		ldr	r1, .L70+8
 1077 002c 0A48     		ldr	r0, .L70+12
 1078 002e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1079              	.LVL100:
 139:Src/main.c    **** 
 1080              		.loc 1 139 0
 1081 0032 4FF47A70 		mov	r0, #1000
 1082 0036 FFF7FEFF 		bl	HAL_Delay
 1083              	.LVL101:
 1084              	.L68:
 126:Src/main.c    **** 		CAN_interpret();
 1085              		.loc 1 126 0
 1086 003a 084B     		ldr	r3, .L70+16
 1087 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1088 003e DBB2     		uxtb	r3, r3
 1089 0040 FF2B     		cmp	r3, #255
 1090 0042 EAD1     		bne	.L67
 127:Src/main.c    **** 
ARM GAS  /tmp/ccKlY4m7.s 			page 31


 1091              		.loc 1 127 0
 1092 0044 FFF7FEFF 		bl	CAN_interpret
 1093              	.LVL102:
 1094 0048 E7E7     		b	.L67
 1095              	.L71:
 1096 004a 00BF     		.align	2
 1097              	.L70:
 1098 004c 00000000 		.word	TxMailbox
 1099 0050 00000000 		.word	POT_data
 1100 0054 00000000 		.word	POT_TxHeader
 1101 0058 00000000 		.word	hcan
 1102 005c 00000000 		.word	CAN_flag
 1103              	.LBE6:
 1104              		.cfi_endproc
 1105              	.LFE66:
 1107              		.section	.text.Error_Handler,"ax",%progbits
 1108              		.align	1
 1109              		.global	Error_Handler
 1110              		.syntax unified
 1111              		.thumb
 1112              		.thumb_func
 1113              		.fpu softvfp
 1115              	Error_Handler:
 1116              	.LFB75:
 519:Src/main.c    **** /* USER CODE END 4 */
 520:Src/main.c    **** 
 521:Src/main.c    **** /**
 522:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 523:Src/main.c    ****   * @retval None
 524:Src/main.c    ****   */
 525:Src/main.c    **** void Error_Handler(void)
 526:Src/main.c    **** {
 1117              		.loc 1 526 0
 1118              		.cfi_startproc
 1119              		@ args = 0, pretend = 0, frame = 0
 1120              		@ frame_needed = 0, uses_anonymous_args = 0
 1121              		@ link register save eliminated.
 527:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 528:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 529:Src/main.c    **** 
 530:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 531:Src/main.c    **** }
 1122              		.loc 1 531 0
 1123 0000 7047     		bx	lr
 1124              		.cfi_endproc
 1125              	.LFE75:
 1127              		.global	pot_threshold
 1128              		.comm	CAN_flag,1,1
 1129              		.comm	TxMailbox,4,4
 1130              		.comm	POT_data,8,4
 1131              		.comm	POT_TxHeader,24,4
 1132              		.comm	RxData,8,4
 1133              		.comm	RxHeader,28,4
 1134              		.comm	hcan,40,4
 1135              		.global	sConfig
 1136              		.comm	hadc1,48,4
 1137              		.section	.bss.sConfig,"aw",%nobits
ARM GAS  /tmp/ccKlY4m7.s 			page 32


 1138              		.align	2
 1139              		.set	.LANCHOR0,. + 0
 1142              	sConfig:
 1143 0000 00000000 		.space	12
 1143      00000000 
 1143      00000000 
 1144              		.section	.data.pot_threshold,"aw",%progbits
 1145              		.align	2
 1146              		.set	.LANCHOR1,. + 0
 1149              	pot_threshold:
 1150 0000 0000     		.short	0
 1151 0002 6702     		.short	615
 1152 0004 0104     		.short	1025
 1153 0006 9B05     		.short	1435
 1154 0008 3507     		.short	1845
 1155 000a CF08     		.short	2255
 1156 000c 690A     		.short	2665
 1157 000e 030C     		.short	3075
 1158 0010 9D0D     		.short	3485
 1159 0012 370F     		.short	3895
 1160 0014 FF0F     		.short	4095
 1161              		.text
 1162              	.Letext0:
 1163              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1164              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1165              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1166              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1167              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1168              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1169              		.file 8 "/usr/include/newlib/sys/lock.h"
 1170              		.file 9 "/usr/include/newlib/sys/_types.h"
 1171              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1172              		.file 11 "/usr/include/newlib/sys/reent.h"
 1173              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1174              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1175              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1176              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1177              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1178              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1179              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1180              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1181              		.file 20 "<built-in>"
ARM GAS  /tmp/ccKlY4m7.s 			page 33


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccKlY4m7.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccKlY4m7.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccKlY4m7.s:121    .text.MX_GPIO_Init:0000000000000088 $d
     /tmp/ccKlY4m7.s:128    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccKlY4m7.s:134    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccKlY4m7.s:221    .text.MX_ADC1_Init:0000000000000064 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccKlY4m7.s:228    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccKlY4m7.s:234    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccKlY4m7.s:340    .text.MX_CAN_Init:0000000000000074 $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 POT_TxHeader
     /tmp/ccKlY4m7.s:347    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccKlY4m7.s:354    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccKlY4m7.s:434    .text.POT_read:0000000000000000 $t
     /tmp/ccKlY4m7.s:441    .text.POT_read:0000000000000000 POT_read
     /tmp/ccKlY4m7.s:588    .text.POT_read:00000000000000d4 $d
     /tmp/ccKlY4m7.s:594    .text.POT_interpret:0000000000000000 $t
     /tmp/ccKlY4m7.s:601    .text.POT_interpret:0000000000000000 POT_interpret
     /tmp/ccKlY4m7.s:758    .text.POT_interpret:00000000000000d0 $d
                            *COM*:0000000000000008 POT_data
     /tmp/ccKlY4m7.s:766    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccKlY4m7.s:773    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccKlY4m7.s:804    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000018 $d
                            *COM*:0000000000000008 RxData
                            *COM*:000000000000001c RxHeader
                            *COM*:0000000000000001 CAN_flag
     /tmp/ccKlY4m7.s:812    .text.CAN_interpret:0000000000000000 $t
     /tmp/ccKlY4m7.s:819    .text.CAN_interpret:0000000000000000 CAN_interpret
     /tmp/ccKlY4m7.s:1016   .text.CAN_interpret:00000000000000e8 $d
     /tmp/ccKlY4m7.s:1026   .text.main:0000000000000000 $t
     /tmp/ccKlY4m7.s:1033   .text.main:0000000000000000 main
     /tmp/ccKlY4m7.s:1098   .text.main:000000000000004c $d
                            *COM*:0000000000000004 TxMailbox
     /tmp/ccKlY4m7.s:1108   .text.Error_Handler:0000000000000000 $t
     /tmp/ccKlY4m7.s:1115   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccKlY4m7.s:1149   .data.pot_threshold:0000000000000000 pot_threshold
     /tmp/ccKlY4m7.s:1142   .bss.sConfig:0000000000000000 sConfig
     /tmp/ccKlY4m7.s:1138   .bss.sConfig:0000000000000000 $d
     /tmp/ccKlY4m7.s:1145   .data.pot_threshold:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_ADC_Start
ARM GAS  /tmp/ccKlY4m7.s 			page 34


HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_CAN_GetRxMessage
HAL_Init
HAL_CAN_AddTxMessage
HAL_Delay

ARM GAS  /tmp/cc4zYLd7.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB70:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "stdbool.h"
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/cc4zYLd7.s 			page 2


  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** #define DASH_CAN_ID			0x00F
  37:Src/main.c    **** #define RINEHARTCUR_CAN_ID			0x064
  38:Src/main.c    **** #define RINEHARTTOR_CAN_ID			0x082
  39:Src/main.c    **** #define FAULTS				0x0D0
  40:Src/main.c    **** #define PRECHARGE			0x0D1
  41:Src/main.c    **** #define ENABLE_SIG		0x0D2
  42:Src/main.c    **** #define MOTOR_POS		0x0A5
  43:Src/main.c    **** /* USER CODE END PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  51:Src/main.c    **** ADC_HandleTypeDef hadc1;
  52:Src/main.c    **** ADC_ChannelConfTypeDef sConfig = {0};
  53:Src/main.c    **** CAN_HandleTypeDef hcan;
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN PV */
  56:Src/main.c    **** 
  57:Src/main.c    **** CAN_RxHeaderTypeDef   	RxHeader;
  58:Src/main.c    **** uint8_t               	RxData[8];
  59:Src/main.c    **** 
  60:Src/main.c    **** CAN_TxHeaderTypeDef   	POT_TxHeader;
  61:Src/main.c    **** CAN_TxHeaderTypeDef     POT_Txheader;
  62:Src/main.c    **** CAN_TxHeaderTypeDef     POT_Txheader1;
  63:Src/main.c    **** uint8_t               	POT_data[8];
  64:Src/main.c    **** uint8_t               	POT_Data[8];
  65:Src/main.c    **** uint8_t               	POT_Data1[8];
  66:Src/main.c    **** uint32_t              	TxMailbox;
  67:Src/main.c    **** 
  68:Src/main.c    **** volatile char					CAN_flag;
  69:Src/main.c    **** 
  70:Src/main.c    **** uint16_t				pot_threshold[11] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** static void MX_GPIO_Init(void);
  77:Src/main.c    **** static void MX_ADC1_Init(void);
  78:Src/main.c    **** static void MX_CAN_Init(void);
  79:Src/main.c    **** /* USER CODE BEGIN PFP */
  80:Src/main.c    **** void POT_read(uint16_t pot_values[4]);
  81:Src/main.c    **** void CAN_interpret(void);
  82:Src/main.c    **** void  POT_interpret(uint16_t pot_values[4]);
  83:Src/main.c    **** /* USER CODE END PFP */
  84:Src/main.c    **** 
  85:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  86:Src/main.c    **** /* USER CODE BEGIN 0 */
  87:Src/main.c    **** 
  88:Src/main.c    **** /* USER CODE END 0 */
  89:Src/main.c    **** 
  90:Src/main.c    **** /**
  91:Src/main.c    ****   * @brief  The application entry point.
ARM GAS  /tmp/cc4zYLd7.s 			page 3


  92:Src/main.c    ****   * @retval int
  93:Src/main.c    ****   */
  94:Src/main.c    **** int main(void)
  95:Src/main.c    **** {
  96:Src/main.c    ****   /* USER CODE BEGIN 1 */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE END 1 */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 103:Src/main.c    ****   HAL_Init();
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE BEGIN Init */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE END Init */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Configure the system clock */
 110:Src/main.c    ****   SystemClock_Config();
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE END SysInit */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Initialize all configured peripherals */
 117:Src/main.c    ****   MX_GPIO_Init();
 118:Src/main.c    ****   MX_ADC1_Init();
 119:Src/main.c    ****   MX_CAN_Init();
 120:Src/main.c    ****   /* USER CODE BEGIN 2 */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE END 2 */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* Infinite loop */
 125:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 126:Src/main.c    ****   while (1)
 127:Src/main.c    ****   {
 128:Src/main.c    ****     /* USER CODE END WHILE */
 129:Src/main.c    **** 
 130:Src/main.c    ****     /* USER CODE BEGIN 3 */
 131:Src/main.c    **** 
 132:Src/main.c    **** 	if (CAN_flag == 0xFF)
 133:Src/main.c    **** 		CAN_interpret();
 134:Src/main.c    **** 
 135:Src/main.c    **** 	//send POT positions CAN message
 136:Src/main.c    **** 
 137:Src/main.c    **** 	uint16_t pot_position[4];
 138:Src/main.c    **** 	POT_read(pot_position);
 139:Src/main.c    **** 	POT_interpret(pot_position);
 140:Src/main.c    **** 
 141:Src/main.c    **** 
 142:Src/main.c    **** 	HAL_CAN_AddTxMessage(&hcan, &POT_TxHeader, POT_data, &TxMailbox);
 143:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &POT_Txheader, POT_Data, &TxMailbox);
 144:Src/main.c    **** 
 145:Src/main.c    **** 	HAL_Delay(1000);
 146:Src/main.c    **** 
 147:Src/main.c    **** 
 148:Src/main.c    ****   }
ARM GAS  /tmp/cc4zYLd7.s 			page 4


 149:Src/main.c    ****   /* USER CODE END 3 */
 150:Src/main.c    **** }
 151:Src/main.c    **** 
 152:Src/main.c    **** /**
 153:Src/main.c    ****   * @brief System Clock Configuration
 154:Src/main.c    ****   * @retval None
 155:Src/main.c    ****   */
 156:Src/main.c    **** void SystemClock_Config(void)
 157:Src/main.c    **** {
 158:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 159:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 160:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 161:Src/main.c    **** 
 162:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 163:Src/main.c    ****   */
 164:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 165:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 166:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 167:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 168:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 169:Src/main.c    ****   {
 170:Src/main.c    ****     Error_Handler();
 171:Src/main.c    ****   }
 172:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 173:Src/main.c    ****   */
 174:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 175:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 176:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 177:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 178:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 179:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 180:Src/main.c    **** 
 181:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 182:Src/main.c    ****   {
 183:Src/main.c    ****     Error_Handler();
 184:Src/main.c    ****   }
 185:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 186:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 187:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 188:Src/main.c    ****   {
 189:Src/main.c    ****     Error_Handler();
 190:Src/main.c    ****   }
 191:Src/main.c    **** }
 192:Src/main.c    **** 
 193:Src/main.c    **** /**
 194:Src/main.c    ****   * @brief ADC1 Initialization Function
 195:Src/main.c    ****   * @param None
 196:Src/main.c    ****   * @retval None
 197:Src/main.c    ****   */
 198:Src/main.c    **** static void MX_ADC1_Init(void)
 199:Src/main.c    **** {
 200:Src/main.c    **** 
 201:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 202:Src/main.c    **** 
 203:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 204:Src/main.c    **** 
 205:Src/main.c    ****   //ADC_ChannelConfTypeDef sConfig = {0};
ARM GAS  /tmp/cc4zYLd7.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 208:Src/main.c    **** 
 209:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 210:Src/main.c    ****   /** Common config
 211:Src/main.c    ****   */
 212:Src/main.c    ****   hadc1.Instance = ADC1;
 213:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 214:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 215:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 216:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 217:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 218:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 219:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 220:Src/main.c    ****   {
 221:Src/main.c    ****     Error_Handler();
 222:Src/main.c    ****   }
 223:Src/main.c    ****   /** Configure Regular Channel
 224:Src/main.c    ****   */
 225:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 226:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 227:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 228:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 229:Src/main.c    ****   {
 230:Src/main.c    ****     Error_Handler();
 231:Src/main.c    ****   }
 232:Src/main.c    ****   /** Configure Regular Channel
 233:Src/main.c    ****   */
 234:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 235:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 236:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 237:Src/main.c    ****   {
 238:Src/main.c    ****     Error_Handler();
 239:Src/main.c    ****   }
 240:Src/main.c    ****   /** Configure Regular Channel
 241:Src/main.c    ****   */
 242:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_7;
 243:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 244:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 245:Src/main.c    ****   {
 246:Src/main.c    ****     Error_Handler();
 247:Src/main.c    ****   }
 248:Src/main.c    ****   /** Configure Regular Channel
 249:Src/main.c    ****   */
 250:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 251:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 252:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 253:Src/main.c    ****   {
 254:Src/main.c    ****     Error_Handler();
 255:Src/main.c    ****   }
 256:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 257:Src/main.c    **** 
 258:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 259:Src/main.c    **** 
 260:Src/main.c    **** }
 261:Src/main.c    **** 
 262:Src/main.c    **** /**
ARM GAS  /tmp/cc4zYLd7.s 			page 6


 263:Src/main.c    ****   * @brief CAN Initialization Function
 264:Src/main.c    ****   * @param None
 265:Src/main.c    ****   * @retval None
 266:Src/main.c    ****   */
 267:Src/main.c    **** static void MX_CAN_Init(void)
 268:Src/main.c    **** {
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 271:Src/main.c    **** 	CAN_FilterTypeDef     sFilterConfig;
 272:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 273:Src/main.c    **** 
 274:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 275:Src/main.c    **** 
 276:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 277:Src/main.c    ****   hcan.Instance = CAN1;
 278:Src/main.c    ****   hcan.Init.Prescaler = 2;
 279:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 280:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 281:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 282:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 283:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 284:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 285:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 286:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 287:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 288:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 289:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 290:Src/main.c    ****   {
 291:Src/main.c    ****     Error_Handler();
 292:Src/main.c    ****   }
 293:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 */
 294:Src/main.c    **** 	POT_TxHeader.StdId = DASH_CAN_ID; 						// CAN standard ID
 295:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 296:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 297:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 298:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 299:Src/main.c    **** 
 300:Src/main.c    ****   POT_Txheader.StdId = RINEHARTCUR_CAN_ID; 						// CAN standard ID
 301:Src/main.c    **** 	POT_Txheader.RTR = CAN_RTR_DATA; 						// CAN frame type
 302:Src/main.c    **** 	POT_Txheader.IDE = CAN_ID_STD; 							// CAN ID type
 303:Src/main.c    **** 	POT_Txheader.DLC = 2; 									// CAN frame length in bytes
 304:Src/main.c    **** 	POT_Txheader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 305:Src/main.c    **** 
 306:Src/main.c    ****   POT_Txheader1.StdId = RINEHARTTOR_CAN_ID; 						// CAN standard ID
 307:Src/main.c    ****   POT_Txheader1.RTR = CAN_RTR_DATA; 						// CAN frame type
 308:Src/main.c    ****   POT_Txheader1.IDE = CAN_ID_STD; 							// CAN ID type
 309:Src/main.c    ****   POT_Txheader1.DLC = 2; 									// CAN frame length in bytes
 310:Src/main.c    ****   POT_Txheader1.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 311:Src/main.c    **** 
 312:Src/main.c    **** 	sFilterConfig.FilterBank = 0;							// filter number (0-13)
 313:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 314:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 315:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 316:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 317:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 318:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 319:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
ARM GAS  /tmp/cc4zYLd7.s 			page 7


 320:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 321:Src/main.c    **** 
 322:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 323:Src/main.c    **** 
 324:Src/main.c    **** 	HAL_CAN_Start(&hcan);
 325:Src/main.c    **** 
 326:Src/main.c    **** 	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 327:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 328:Src/main.c    **** 
 329:Src/main.c    **** }
 330:Src/main.c    **** 
 331:Src/main.c    **** /**
 332:Src/main.c    ****   * @brief GPIO Initialization Function
 333:Src/main.c    ****   * @param None
 334:Src/main.c    ****   * @retval None
 335:Src/main.c    ****   */
 336:Src/main.c    **** static void MX_GPIO_Init(void)
 337:Src/main.c    **** {
  25              		.loc 1 337 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 86B0     		sub	sp, sp, #24
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 338:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 338 0
  42 0006 0024     		movs	r4, #0
  43 0008 0294     		str	r4, [sp, #8]
  44 000a 0394     		str	r4, [sp, #12]
  45 000c 0494     		str	r4, [sp, #16]
  46 000e 0594     		str	r4, [sp, #20]
  47              	.LBB2:
 339:Src/main.c    **** 
 340:Src/main.c    ****   /* GPIO Ports Clock Enable */
 341:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  48              		.loc 1 341 0
  49 0010 1D4B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F00402 		orr	r2, r2, #4
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F00402 		and	r2, r2, #4
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE2:
  58              	.LBB3:
 342:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  /tmp/cc4zYLd7.s 			page 8


  59              		.loc 1 342 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F00802 		orr	r2, r2, #8
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9B69     		ldr	r3, [r3, #24]
  64 002e 03F00803 		and	r3, r3, #8
  65 0032 0193     		str	r3, [sp, #4]
  66 0034 019B     		ldr	r3, [sp, #4]
  67              	.LBE3:
 343:Src/main.c    **** 
 344:Src/main.c    ****   /*Configure GPIO pin Output Level */
 345:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  68              		.loc 1 345 0
  69 0036 DFF85880 		ldr	r8, .L3+8
  70 003a 2246     		mov	r2, r4
  71 003c 4FF45E71 		mov	r1, #888
  72 0040 4046     		mov	r0, r8
  73 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  74              	.LVL0:
 346:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin, GPIO_PIN_RESET);
 347:Src/main.c    **** 
 348:Src/main.c    ****   /*Configure GPIO pin Output Level */
 349:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin, GPIO_PIN_RESET);
  75              		.loc 1 349 0
  76 0046 114D     		ldr	r5, .L3+4
  77 0048 2246     		mov	r2, r4
  78 004a 4FF4F071 		mov	r1, #480
  79 004e 2846     		mov	r0, r5
  80 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  81              	.LVL1:
 350:Src/main.c    **** 
 351:Src/main.c    ****   /*Configure GPIO pins : CUR_LED_Pin BMS_LED_ON_Pin IMD_LED_ON_Pin BSPD_LED_ON_Pin
 352:Src/main.c    ****                            DRS_LED_Pin TC_LED_Pin */
 353:Src/main.c    ****   GPIO_InitStruct.Pin = CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  82              		.loc 1 353 0
  83 0054 4FF45E73 		mov	r3, #888
  84 0058 0293     		str	r3, [sp, #8]
 354:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin;
 355:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  85              		.loc 1 355 0
  86 005a 0127     		movs	r7, #1
  87 005c 0397     		str	r7, [sp, #12]
 356:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  88              		.loc 1 356 0
  89 005e 0494     		str	r4, [sp, #16]
 357:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  90              		.loc 1 357 0
  91 0060 0226     		movs	r6, #2
  92 0062 0596     		str	r6, [sp, #20]
 358:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  93              		.loc 1 358 0
  94 0064 02A9     		add	r1, sp, #8
  95 0066 4046     		mov	r0, r8
  96 0068 FFF7FEFF 		bl	HAL_GPIO_Init
  97              	.LVL2:
 359:Src/main.c    **** 
 360:Src/main.c    ****   /*Configure GPIO pins : RGB_GREEN_Pin RGB_RED_Pin RGB_BLUE_Pin CUST_LED_Pin */
ARM GAS  /tmp/cc4zYLd7.s 			page 9


 361:Src/main.c    ****   GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin;
  98              		.loc 1 361 0
  99 006c 4FF4F073 		mov	r3, #480
 100 0070 0293     		str	r3, [sp, #8]
 362:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 101              		.loc 1 362 0
 102 0072 0397     		str	r7, [sp, #12]
 363:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 103              		.loc 1 363 0
 104 0074 0494     		str	r4, [sp, #16]
 364:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 105              		.loc 1 364 0
 106 0076 0596     		str	r6, [sp, #20]
 365:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 107              		.loc 1 365 0
 108 0078 02A9     		add	r1, sp, #8
 109 007a 2846     		mov	r0, r5
 110 007c FFF7FEFF 		bl	HAL_GPIO_Init
 111              	.LVL3:
 366:Src/main.c    **** 
 367:Src/main.c    **** }
 112              		.loc 1 367 0
 113 0080 06B0     		add	sp, sp, #24
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 24
 116              		@ sp needed
 117 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 118              	.L4:
 119 0086 00BF     		.align	2
 120              	.L3:
 121 0088 00100240 		.word	1073876992
 122 008c 000C0140 		.word	1073810432
 123 0090 00080140 		.word	1073809408
 124              		.cfi_endproc
 125              	.LFE70:
 127              		.section	.text.MX_ADC1_Init,"ax",%progbits
 128              		.align	1
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu softvfp
 134              	MX_ADC1_Init:
 135              	.LFB68:
 199:Src/main.c    **** 
 136              		.loc 1 199 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 24
 143              		.cfi_offset 3, -24
 144              		.cfi_offset 4, -20
 145              		.cfi_offset 5, -16
 146              		.cfi_offset 6, -12
 147              		.cfi_offset 7, -8
 148              		.cfi_offset 14, -4
ARM GAS  /tmp/cc4zYLd7.s 			page 10


 212:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 149              		.loc 1 212 0
 150 0002 184D     		ldr	r5, .L7
 151 0004 184B     		ldr	r3, .L7+4
 152 0006 2B60     		str	r3, [r5]
 213:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 153              		.loc 1 213 0
 154 0008 0026     		movs	r6, #0
 155 000a AE60     		str	r6, [r5, #8]
 214:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 156              		.loc 1 214 0
 157 000c EE60     		str	r6, [r5, #12]
 215:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 158              		.loc 1 215 0
 159 000e 6E61     		str	r6, [r5, #20]
 216:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 160              		.loc 1 216 0
 161 0010 4FF46023 		mov	r3, #917504
 162 0014 EB61     		str	r3, [r5, #28]
 217:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 163              		.loc 1 217 0
 164 0016 6E60     		str	r6, [r5, #4]
 218:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 165              		.loc 1 218 0
 166 0018 0427     		movs	r7, #4
 167 001a 2F61     		str	r7, [r5, #16]
 219:Src/main.c    ****   {
 168              		.loc 1 219 0
 169 001c 2846     		mov	r0, r5
 170 001e FFF7FEFF 		bl	HAL_ADC_Init
 171              	.LVL4:
 225:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 172              		.loc 1 225 0
 173 0022 124C     		ldr	r4, .L7+8
 174 0024 2660     		str	r6, [r4]
 226:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 175              		.loc 1 226 0
 176 0026 0126     		movs	r6, #1
 177 0028 6660     		str	r6, [r4, #4]
 227:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 178              		.loc 1 227 0
 179 002a A660     		str	r6, [r4, #8]
 228:Src/main.c    ****   {
 180              		.loc 1 228 0
 181 002c 2146     		mov	r1, r4
 182 002e 2846     		mov	r0, r5
 183 0030 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 184              	.LVL5:
 234:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 185              		.loc 1 234 0
 186 0034 2660     		str	r6, [r4]
 235:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 187              		.loc 1 235 0
 188 0036 0223     		movs	r3, #2
 189 0038 6360     		str	r3, [r4, #4]
 236:Src/main.c    ****   {
 190              		.loc 1 236 0
ARM GAS  /tmp/cc4zYLd7.s 			page 11


 191 003a 2146     		mov	r1, r4
 192 003c 2846     		mov	r0, r5
 193 003e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 194              	.LVL6:
 242:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 195              		.loc 1 242 0
 196 0042 0723     		movs	r3, #7
 197 0044 2360     		str	r3, [r4]
 243:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 198              		.loc 1 243 0
 199 0046 0323     		movs	r3, #3
 200 0048 6360     		str	r3, [r4, #4]
 244:Src/main.c    ****   {
 201              		.loc 1 244 0
 202 004a 2146     		mov	r1, r4
 203 004c 2846     		mov	r0, r5
 204 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 205              	.LVL7:
 250:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 206              		.loc 1 250 0
 207 0052 0923     		movs	r3, #9
 208 0054 2360     		str	r3, [r4]
 251:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 209              		.loc 1 251 0
 210 0056 6760     		str	r7, [r4, #4]
 252:Src/main.c    ****   {
 211              		.loc 1 252 0
 212 0058 2146     		mov	r1, r4
 213 005a 2846     		mov	r0, r5
 214 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 215              	.LVL8:
 260:Src/main.c    **** 
 216              		.loc 1 260 0
 217 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 218              	.L8:
 219 0062 00BF     		.align	2
 220              	.L7:
 221 0064 00000000 		.word	hadc1
 222 0068 00240140 		.word	1073816576
 223 006c 00000000 		.word	.LANCHOR0
 224              		.cfi_endproc
 225              	.LFE68:
 227              		.section	.text.MX_CAN_Init,"ax",%progbits
 228              		.align	1
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu softvfp
 234              	MX_CAN_Init:
 235              	.LFB69:
 268:Src/main.c    **** 
 236              		.loc 1 268 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 40
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240 0000 70B5     		push	{r4, r5, r6, lr}
 241              	.LCFI4:
ARM GAS  /tmp/cc4zYLd7.s 			page 12


 242              		.cfi_def_cfa_offset 16
 243              		.cfi_offset 4, -16
 244              		.cfi_offset 5, -12
 245              		.cfi_offset 6, -8
 246              		.cfi_offset 14, -4
 247 0002 8AB0     		sub	sp, sp, #40
 248              	.LCFI5:
 249              		.cfi_def_cfa_offset 56
 277:Src/main.c    ****   hcan.Init.Prescaler = 2;
 250              		.loc 1 277 0
 251 0004 214D     		ldr	r5, .L11
 252 0006 224B     		ldr	r3, .L11+4
 253 0008 2B60     		str	r3, [r5]
 278:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 254              		.loc 1 278 0
 255 000a 0226     		movs	r6, #2
 256 000c 6E60     		str	r6, [r5, #4]
 279:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 257              		.loc 1 279 0
 258 000e 0024     		movs	r4, #0
 259 0010 AC60     		str	r4, [r5, #8]
 280:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 260              		.loc 1 280 0
 261 0012 EC60     		str	r4, [r5, #12]
 281:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 262              		.loc 1 281 0
 263 0014 4FF40033 		mov	r3, #131072
 264 0018 2B61     		str	r3, [r5, #16]
 282:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 265              		.loc 1 282 0
 266 001a 4FF44013 		mov	r3, #3145728
 267 001e 6B61     		str	r3, [r5, #20]
 283:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 268              		.loc 1 283 0
 269 0020 2C76     		strb	r4, [r5, #24]
 284:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 270              		.loc 1 284 0
 271 0022 6C76     		strb	r4, [r5, #25]
 285:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 272              		.loc 1 285 0
 273 0024 AC76     		strb	r4, [r5, #26]
 286:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 274              		.loc 1 286 0
 275 0026 EC76     		strb	r4, [r5, #27]
 287:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 276              		.loc 1 287 0
 277 0028 2C77     		strb	r4, [r5, #28]
 288:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 278              		.loc 1 288 0
 279 002a 6C77     		strb	r4, [r5, #29]
 289:Src/main.c    ****   {
 280              		.loc 1 289 0
 281 002c 2846     		mov	r0, r5
 282 002e FFF7FEFF 		bl	HAL_CAN_Init
 283              	.LVL9:
 294:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 284              		.loc 1 294 0
ARM GAS  /tmp/cc4zYLd7.s 			page 13


 285 0032 184B     		ldr	r3, .L11+8
 286 0034 0F22     		movs	r2, #15
 287 0036 1A60     		str	r2, [r3]
 295:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 288              		.loc 1 295 0
 289 0038 DC60     		str	r4, [r3, #12]
 296:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 290              		.loc 1 296 0
 291 003a 9C60     		str	r4, [r3, #8]
 297:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 292              		.loc 1 297 0
 293 003c 0422     		movs	r2, #4
 294 003e 1A61     		str	r2, [r3, #16]
 298:Src/main.c    **** 
 295              		.loc 1 298 0
 296 0040 1C75     		strb	r4, [r3, #20]
 300:Src/main.c    **** 	POT_Txheader.RTR = CAN_RTR_DATA; 						// CAN frame type
 297              		.loc 1 300 0
 298 0042 154B     		ldr	r3, .L11+12
 299 0044 6422     		movs	r2, #100
 300 0046 1A60     		str	r2, [r3]
 301:Src/main.c    **** 	POT_Txheader.IDE = CAN_ID_STD; 							// CAN ID type
 301              		.loc 1 301 0
 302 0048 DC60     		str	r4, [r3, #12]
 302:Src/main.c    **** 	POT_Txheader.DLC = 2; 									// CAN frame length in bytes
 303              		.loc 1 302 0
 304 004a 9C60     		str	r4, [r3, #8]
 303:Src/main.c    **** 	POT_Txheader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 305              		.loc 1 303 0
 306 004c 1E61     		str	r6, [r3, #16]
 304:Src/main.c    **** 
 307              		.loc 1 304 0
 308 004e 1C75     		strb	r4, [r3, #20]
 306:Src/main.c    ****   POT_Txheader1.RTR = CAN_RTR_DATA; 						// CAN frame type
 309              		.loc 1 306 0
 310 0050 124B     		ldr	r3, .L11+16
 311 0052 8222     		movs	r2, #130
 312 0054 1A60     		str	r2, [r3]
 307:Src/main.c    ****   POT_Txheader1.IDE = CAN_ID_STD; 							// CAN ID type
 313              		.loc 1 307 0
 314 0056 DC60     		str	r4, [r3, #12]
 308:Src/main.c    ****   POT_Txheader1.DLC = 2; 									// CAN frame length in bytes
 315              		.loc 1 308 0
 316 0058 9C60     		str	r4, [r3, #8]
 309:Src/main.c    ****   POT_Txheader1.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 317              		.loc 1 309 0
 318 005a 1E61     		str	r6, [r3, #16]
 310:Src/main.c    **** 
 319              		.loc 1 310 0
 320 005c 1C75     		strb	r4, [r3, #20]
 312:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 321              		.loc 1 312 0
 322 005e 0594     		str	r4, [sp, #20]
 313:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 323              		.loc 1 313 0
 324 0060 0694     		str	r4, [sp, #24]
 314:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
ARM GAS  /tmp/cc4zYLd7.s 			page 14


 325              		.loc 1 314 0
 326 0062 0123     		movs	r3, #1
 327 0064 0793     		str	r3, [sp, #28]
 315:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 328              		.loc 1 315 0
 329 0066 0094     		str	r4, [sp]
 316:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 330              		.loc 1 316 0
 331 0068 0194     		str	r4, [sp, #4]
 317:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 332              		.loc 1 317 0
 333 006a 0294     		str	r4, [sp, #8]
 318:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 334              		.loc 1 318 0
 335 006c 0394     		str	r4, [sp, #12]
 319:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 336              		.loc 1 319 0
 337 006e 0494     		str	r4, [sp, #16]
 320:Src/main.c    **** 
 338              		.loc 1 320 0
 339 0070 0893     		str	r3, [sp, #32]
 322:Src/main.c    **** 
 340              		.loc 1 322 0
 341 0072 6946     		mov	r1, sp
 342 0074 2846     		mov	r0, r5
 343 0076 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 344              	.LVL10:
 324:Src/main.c    **** 
 345              		.loc 1 324 0
 346 007a 2846     		mov	r0, r5
 347 007c FFF7FEFF 		bl	HAL_CAN_Start
 348              	.LVL11:
 326:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 349              		.loc 1 326 0
 350 0080 3146     		mov	r1, r6
 351 0082 2846     		mov	r0, r5
 352 0084 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 353              	.LVL12:
 329:Src/main.c    **** 
 354              		.loc 1 329 0
 355 0088 0AB0     		add	sp, sp, #40
 356              	.LCFI6:
 357              		.cfi_def_cfa_offset 16
 358              		@ sp needed
 359 008a 70BD     		pop	{r4, r5, r6, pc}
 360              	.L12:
 361              		.align	2
 362              	.L11:
 363 008c 00000000 		.word	hcan
 364 0090 00640040 		.word	1073767424
 365 0094 00000000 		.word	POT_TxHeader
 366 0098 00000000 		.word	POT_Txheader
 367 009c 00000000 		.word	POT_Txheader1
 368              		.cfi_endproc
 369              	.LFE69:
 371              		.section	.text.SystemClock_Config,"ax",%progbits
 372              		.align	1
ARM GAS  /tmp/cc4zYLd7.s 			page 15


 373              		.global	SystemClock_Config
 374              		.syntax unified
 375              		.thumb
 376              		.thumb_func
 377              		.fpu softvfp
 379              	SystemClock_Config:
 380              	.LFB67:
 157:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 381              		.loc 1 157 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 80
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385 0000 30B5     		push	{r4, r5, lr}
 386              	.LCFI7:
 387              		.cfi_def_cfa_offset 12
 388              		.cfi_offset 4, -12
 389              		.cfi_offset 5, -8
 390              		.cfi_offset 14, -4
 391 0002 95B0     		sub	sp, sp, #84
 392              	.LCFI8:
 393              		.cfi_def_cfa_offset 96
 158:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 394              		.loc 1 158 0
 395 0004 2422     		movs	r2, #36
 396 0006 0021     		movs	r1, #0
 397 0008 0BA8     		add	r0, sp, #44
 398 000a FFF7FEFF 		bl	memset
 399              	.LVL13:
 159:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 400              		.loc 1 159 0
 401 000e 0024     		movs	r4, #0
 402 0010 0594     		str	r4, [sp, #20]
 403 0012 0694     		str	r4, [sp, #24]
 404 0014 0794     		str	r4, [sp, #28]
 405 0016 0894     		str	r4, [sp, #32]
 406 0018 0994     		str	r4, [sp, #36]
 160:Src/main.c    **** 
 407              		.loc 1 160 0
 408 001a 0194     		str	r4, [sp, #4]
 409 001c 0294     		str	r4, [sp, #8]
 410 001e 0394     		str	r4, [sp, #12]
 411 0020 0494     		str	r4, [sp, #16]
 164:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 412              		.loc 1 164 0
 413 0022 0225     		movs	r5, #2
 414 0024 0A95     		str	r5, [sp, #40]
 165:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 415              		.loc 1 165 0
 416 0026 0123     		movs	r3, #1
 417 0028 0E93     		str	r3, [sp, #56]
 166:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 418              		.loc 1 166 0
 419 002a 1023     		movs	r3, #16
 420 002c 0F93     		str	r3, [sp, #60]
 168:Src/main.c    ****   {
 421              		.loc 1 168 0
 422 002e 0AA8     		add	r0, sp, #40
ARM GAS  /tmp/cc4zYLd7.s 			page 16


 423 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 424              	.LVL14:
 174:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 425              		.loc 1 174 0
 426 0034 0F23     		movs	r3, #15
 427 0036 0593     		str	r3, [sp, #20]
 176:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 428              		.loc 1 176 0
 429 0038 0694     		str	r4, [sp, #24]
 177:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 430              		.loc 1 177 0
 431 003a 0794     		str	r4, [sp, #28]
 178:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 432              		.loc 1 178 0
 433 003c 0894     		str	r4, [sp, #32]
 179:Src/main.c    **** 
 434              		.loc 1 179 0
 435 003e 0994     		str	r4, [sp, #36]
 181:Src/main.c    ****   {
 436              		.loc 1 181 0
 437 0040 2146     		mov	r1, r4
 438 0042 05A8     		add	r0, sp, #20
 439 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 440              	.LVL15:
 185:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 441              		.loc 1 185 0
 442 0048 0195     		str	r5, [sp, #4]
 186:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 443              		.loc 1 186 0
 444 004a 0394     		str	r4, [sp, #12]
 187:Src/main.c    ****   {
 445              		.loc 1 187 0
 446 004c 01A8     		add	r0, sp, #4
 447 004e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 448              	.LVL16:
 191:Src/main.c    **** 
 449              		.loc 1 191 0
 450 0052 15B0     		add	sp, sp, #84
 451              	.LCFI9:
 452              		.cfi_def_cfa_offset 12
 453              		@ sp needed
 454 0054 30BD     		pop	{r4, r5, pc}
 455              		.cfi_endproc
 456              	.LFE67:
 458              		.section	.text.POT_read,"ax",%progbits
 459              		.align	1
 460              		.global	POT_read
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 464              		.fpu softvfp
 466              	POT_read:
 467              	.LFB71:
 368:Src/main.c    **** 
 369:Src/main.c    **** 
 370:Src/main.c    **** 
 371:Src/main.c    **** /* USER CODE BEGIN 4 */
ARM GAS  /tmp/cc4zYLd7.s 			page 17


 372:Src/main.c    **** void POT_read(uint16_t pot_values[4]) {
 468              		.loc 1 372 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              	.LVL17:
 473 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 474              	.LCFI10:
 475              		.cfi_def_cfa_offset 24
 476              		.cfi_offset 4, -24
 477              		.cfi_offset 5, -20
 478              		.cfi_offset 6, -16
 479              		.cfi_offset 7, -12
 480              		.cfi_offset 8, -8
 481              		.cfi_offset 14, -4
 482 0004 0746     		mov	r7, r0
 373:Src/main.c    **** 	//0 1 7 9
 374:Src/main.c    **** 
 375:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_0;
 483              		.loc 1 375 0
 484 0006 334D     		ldr	r5, .L17
 485 0008 0023     		movs	r3, #0
 486 000a 2B60     		str	r3, [r5]
 376:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 487              		.loc 1 376 0
 488 000c 0126     		movs	r6, #1
 489 000e 6E60     		str	r6, [r5, #4]
 377:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 490              		.loc 1 377 0
 491 0010 4FF00608 		mov	r8, #6
 492 0014 C5F80880 		str	r8, [r5, #8]
 378:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 493              		.loc 1 378 0
 494 0018 2F4C     		ldr	r4, .L17+4
 495 001a 2946     		mov	r1, r5
 496 001c 2046     		mov	r0, r4
 497              	.LVL18:
 498 001e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 499              	.LVL19:
 379:Src/main.c    **** 
 380:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 500              		.loc 1 380 0
 501 0022 2046     		mov	r0, r4
 502 0024 FFF7FEFF 		bl	HAL_ADC_Start
 503              	.LVL20:
 381:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);		//change timeout to a HAL define
 504              		.loc 1 381 0
 505 0028 4FF47A71 		mov	r1, #1000
 506 002c 2046     		mov	r0, r4
 507 002e FFF7FEFF 		bl	HAL_ADC_PollForConversion
 508              	.LVL21:
 382:Src/main.c    **** 	pot_values[0] = HAL_ADC_GetValue(&hadc1);
 509              		.loc 1 382 0
 510 0032 2046     		mov	r0, r4
 511 0034 FFF7FEFF 		bl	HAL_ADC_GetValue
 512              	.LVL22:
 513 0038 3880     		strh	r0, [r7]	@ movhi
ARM GAS  /tmp/cc4zYLd7.s 			page 18


 383:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 514              		.loc 1 383 0
 515 003a 2046     		mov	r0, r4
 516 003c FFF7FEFF 		bl	HAL_ADC_Stop
 517              	.LVL23:
 384:Src/main.c    **** 
 385:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_1;
 518              		.loc 1 385 0
 519 0040 2E60     		str	r6, [r5]
 386:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 520              		.loc 1 386 0
 521 0042 6E60     		str	r6, [r5, #4]
 387:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 522              		.loc 1 387 0
 523 0044 C5F80880 		str	r8, [r5, #8]
 388:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 524              		.loc 1 388 0
 525 0048 2946     		mov	r1, r5
 526 004a 2046     		mov	r0, r4
 527 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 528              	.LVL24:
 389:Src/main.c    **** 
 390:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 529              		.loc 1 390 0
 530 0050 2046     		mov	r0, r4
 531 0052 FFF7FEFF 		bl	HAL_ADC_Start
 532              	.LVL25:
 391:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 533              		.loc 1 391 0
 534 0056 4FF47A71 		mov	r1, #1000
 535 005a 2046     		mov	r0, r4
 536 005c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 537              	.LVL26:
 392:Src/main.c    **** 	pot_values[1] = HAL_ADC_GetValue(&hadc1);
 538              		.loc 1 392 0
 539 0060 2046     		mov	r0, r4
 540 0062 FFF7FEFF 		bl	HAL_ADC_GetValue
 541              	.LVL27:
 542 0066 7880     		strh	r0, [r7, #2]	@ movhi
 393:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 543              		.loc 1 393 0
 544 0068 2046     		mov	r0, r4
 545 006a FFF7FEFF 		bl	HAL_ADC_Stop
 546              	.LVL28:
 394:Src/main.c    **** 
 395:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_7;
 547              		.loc 1 395 0
 548 006e 0723     		movs	r3, #7
 549 0070 2B60     		str	r3, [r5]
 396:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 550              		.loc 1 396 0
 551 0072 6E60     		str	r6, [r5, #4]
 397:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 552              		.loc 1 397 0
 553 0074 C5F80880 		str	r8, [r5, #8]
 398:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 554              		.loc 1 398 0
ARM GAS  /tmp/cc4zYLd7.s 			page 19


 555 0078 2946     		mov	r1, r5
 556 007a 2046     		mov	r0, r4
 557 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 558              	.LVL29:
 399:Src/main.c    **** 
 400:Src/main.c    **** 
 401:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 559              		.loc 1 401 0
 560 0080 2046     		mov	r0, r4
 561 0082 FFF7FEFF 		bl	HAL_ADC_Start
 562              	.LVL30:
 402:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 563              		.loc 1 402 0
 564 0086 4FF47A71 		mov	r1, #1000
 565 008a 2046     		mov	r0, r4
 566 008c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 567              	.LVL31:
 403:Src/main.c    **** 	pot_values[2] = HAL_ADC_GetValue(&hadc1);
 568              		.loc 1 403 0
 569 0090 2046     		mov	r0, r4
 570 0092 FFF7FEFF 		bl	HAL_ADC_GetValue
 571              	.LVL32:
 572 0096 B880     		strh	r0, [r7, #4]	@ movhi
 404:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 573              		.loc 1 404 0
 574 0098 2046     		mov	r0, r4
 575 009a FFF7FEFF 		bl	HAL_ADC_Stop
 576              	.LVL33:
 405:Src/main.c    **** 
 406:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_9;
 577              		.loc 1 406 0
 578 009e 0923     		movs	r3, #9
 579 00a0 2B60     		str	r3, [r5]
 407:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 580              		.loc 1 407 0
 581 00a2 6E60     		str	r6, [r5, #4]
 408:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 582              		.loc 1 408 0
 583 00a4 C5F80880 		str	r8, [r5, #8]
 409:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 584              		.loc 1 409 0
 585 00a8 2946     		mov	r1, r5
 586 00aa 2046     		mov	r0, r4
 587 00ac FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 588              	.LVL34:
 410:Src/main.c    **** 
 411:Src/main.c    **** 
 412:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 589              		.loc 1 412 0
 590 00b0 2046     		mov	r0, r4
 591 00b2 FFF7FEFF 		bl	HAL_ADC_Start
 592              	.LVL35:
 413:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 593              		.loc 1 413 0
 594 00b6 4FF47A71 		mov	r1, #1000
 595 00ba 2046     		mov	r0, r4
 596 00bc FFF7FEFF 		bl	HAL_ADC_PollForConversion
ARM GAS  /tmp/cc4zYLd7.s 			page 20


 597              	.LVL36:
 414:Src/main.c    **** 	pot_values[3] = HAL_ADC_GetValue(&hadc1);
 598              		.loc 1 414 0
 599 00c0 2046     		mov	r0, r4
 600 00c2 FFF7FEFF 		bl	HAL_ADC_GetValue
 601              	.LVL37:
 602 00c6 F880     		strh	r0, [r7, #6]	@ movhi
 415:Src/main.c    **** 
 416:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 603              		.loc 1 416 0
 604 00c8 2046     		mov	r0, r4
 605 00ca FFF7FEFF 		bl	HAL_ADC_Stop
 606              	.LVL38:
 417:Src/main.c    **** 
 418:Src/main.c    **** }
 607              		.loc 1 418 0
 608 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 609              	.LVL39:
 610              	.L18:
 611 00d2 00BF     		.align	2
 612              	.L17:
 613 00d4 00000000 		.word	.LANCHOR0
 614 00d8 00000000 		.word	hadc1
 615              		.cfi_endproc
 616              	.LFE71:
 618              		.section	.text.POT_interpret,"ax",%progbits
 619              		.align	1
 620              		.global	POT_interpret
 621              		.syntax unified
 622              		.thumb
 623              		.thumb_func
 624              		.fpu softvfp
 626              	POT_interpret:
 627              	.LFB72:
 419:Src/main.c    **** 
 420:Src/main.c    **** void POT_interpret(uint16_t pot_values[4]) {
 628              		.loc 1 420 0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 8
 631              		@ frame_needed = 0, uses_anonymous_args = 0
 632              	.LVL40:
 633 0000 30B5     		push	{r4, r5, lr}
 634              	.LCFI11:
 635              		.cfi_def_cfa_offset 12
 636              		.cfi_offset 4, -12
 637              		.cfi_offset 5, -8
 638              		.cfi_offset 14, -4
 639 0002 83B0     		sub	sp, sp, #12
 640              	.LCFI12:
 641              		.cfi_def_cfa_offset 24
 642              	.LVL41:
 421:Src/main.c    **** 
 422:Src/main.c    **** 	uint8_t pot_pos[4];
 423:Src/main.c    **** 	uint8_t i, j;
 424:Src/main.c    **** 
 425:Src/main.c    **** 	for (i = 0; i < 4; i++) {
 643              		.loc 1 425 0
ARM GAS  /tmp/cc4zYLd7.s 			page 21


 644 0004 0024     		movs	r4, #0
 645 0006 1FE0     		b	.L20
 646              	.LVL42:
 647              	.L21:
 426:Src/main.c    **** 
 427:Src/main.c    **** 		for (j = 0; j < 10; j++) {
 648              		.loc 1 427 0 discriminator 2
 649 0008 0133     		adds	r3, r3, #1
 650              	.LVL43:
 651 000a DBB2     		uxtb	r3, r3
 652              	.LVL44:
 653              	.L23:
 654              		.loc 1 427 0 is_stmt 0 discriminator 1
 655 000c 092B     		cmp	r3, #9
 656 000e 13D8     		bhi	.L44
 428:Src/main.c    **** 
 429:Src/main.c    **** 			//uint16_t pot_threshold[12] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
 430:Src/main.c    **** 			if ((pot_values[i] > pot_threshold[j]) && (pot_values[i] <= pot_threshold[j + 1]))
 657              		.loc 1 430 0 is_stmt 1
 658 0010 30F81420 		ldrh	r2, [r0, r4, lsl #1]
 659 0014 5749     		ldr	r1, .L55
 660 0016 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 661 001a 8A42     		cmp	r2, r1
 662 001c F4D9     		bls	.L21
 663              		.loc 1 430 0 is_stmt 0 discriminator 1
 664 001e 591C     		adds	r1, r3, #1
 665 0020 544D     		ldr	r5, .L55
 666 0022 35F81110 		ldrh	r1, [r5, r1, lsl #1]
 667 0026 8A42     		cmp	r2, r1
 668 0028 EED8     		bhi	.L21
 431:Src/main.c    **** 				pot_pos[i] = 10 - (j + 1); // pot_pos[i] = 0 is ~3.3V, pot_pos[i] = 1 is ~3V, etc.
 669              		.loc 1 431 0 is_stmt 1
 670 002a C3F10902 		rsb	r2, r3, #9
 671 002e 02A9     		add	r1, sp, #8
 672 0030 2144     		add	r1, r1, r4
 673 0032 01F8042C 		strb	r2, [r1, #-4]
 674 0036 E7E7     		b	.L21
 675              	.L44:
 432:Src/main.c    **** 			}
 433:Src/main.c    **** 
 434:Src/main.c    **** 		POT_data[i] = pot_pos[i];
 676              		.loc 1 434 0 discriminator 2
 677 0038 02AB     		add	r3, sp, #8
 678              	.LVL45:
 679 003a 2344     		add	r3, r3, r4
 680 003c 13F8042C 		ldrb	r2, [r3, #-4]	@ zero_extendqisi2
 681 0040 4D4B     		ldr	r3, .L55+4
 682 0042 1A55     		strb	r2, [r3, r4]
 425:Src/main.c    **** 
 683              		.loc 1 425 0 discriminator 2
 684 0044 0134     		adds	r4, r4, #1
 685              	.LVL46:
 686 0046 E4B2     		uxtb	r4, r4
 687              	.LVL47:
 688              	.L20:
 425:Src/main.c    **** 
 689              		.loc 1 425 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/cc4zYLd7.s 			page 22


 690 0048 032C     		cmp	r4, #3
 691 004a 01D8     		bhi	.L45
 427:Src/main.c    **** 
 692              		.loc 1 427 0 is_stmt 1
 693 004c 0023     		movs	r3, #0
 694 004e DDE7     		b	.L23
 695              	.L45:
 435:Src/main.c    **** 		//POT_data[0] = 0x00;
 436:Src/main.c    **** 
 437:Src/main.c    **** 	}
 438:Src/main.c    **** 
 439:Src/main.c    **** if (pot_pos[1] == 0){
 696              		.loc 1 439 0
 697 0050 9DF80540 		ldrb	r4, [sp, #5]	@ zero_extendqisi2
 698              	.LVL48:
 699 0054 5CBB     		cbnz	r4, .L24
 440:Src/main.c    **** 	POT_Data[1] = 1;
 700              		.loc 1 440 0
 701 0056 494B     		ldr	r3, .L55+8
 702 0058 0122     		movs	r2, #1
 703 005a 5A70     		strb	r2, [r3, #1]
 441:Src/main.c    ****   POT_Data[0] = 244;
 704              		.loc 1 441 0
 705 005c F422     		movs	r2, #244
 706 005e 1A70     		strb	r2, [r3]
 707              	.L25:
 442:Src/main.c    ****   }
 443:Src/main.c    **** 
 444:Src/main.c    **** else if (pot_pos[1] == 1){
 445:Src/main.c    ****   	POT_Data[1] = 3;
 446:Src/main.c    ****     POT_Data[0] = 232;
 447:Src/main.c    ****   }
 448:Src/main.c    **** 
 449:Src/main.c    **** else if (pot_pos[1] == 2){
 450:Src/main.c    ****     	POT_Data[1] = 4;
 451:Src/main.c    ****       POT_Data[0] = 176;
 452:Src/main.c    ****   }
 453:Src/main.c    **** 
 454:Src/main.c    **** else if (pot_pos[1] == 3){
 455:Src/main.c    ****     	POT_Data[1] = 5;
 456:Src/main.c    ****       POT_Data[0] = 70;
 457:Src/main.c    ****   }
 458:Src/main.c    **** 
 459:Src/main.c    **** else if (pot_pos[1] == 4){
 460:Src/main.c    ****       	POT_Data[1] = 5;
 461:Src/main.c    ****         POT_Data[0] = 220;
 462:Src/main.c    ****   }
 463:Src/main.c    **** 
 464:Src/main.c    **** else if (pot_pos[1] == 5){
 465:Src/main.c    ****         	POT_Data[1] = 6;
 466:Src/main.c    ****           POT_Data[0] = 114;
 467:Src/main.c    ****   }
 468:Src/main.c    **** 
 469:Src/main.c    **** else if (pot_pos[1] == 6){
 470:Src/main.c    ****     	POT_Data[1] = 7;
 471:Src/main.c    ****       POT_Data[0] = 8;
 472:Src/main.c    ****   }
ARM GAS  /tmp/cc4zYLd7.s 			page 23


 473:Src/main.c    **** 
 474:Src/main.c    **** else if (pot_pos[1] == 7){
 475:Src/main.c    ****     	POT_Data[1] = 7;
 476:Src/main.c    ****       POT_Data[0] = 158;
 477:Src/main.c    ****   }
 478:Src/main.c    **** 
 479:Src/main.c    **** else if (pot_pos[1] == 8){
 480:Src/main.c    ****     	POT_Data[1] = 8;
 481:Src/main.c    ****       POT_Data[0] = 52;
 482:Src/main.c    ****   }
 483:Src/main.c    **** 
 484:Src/main.c    **** else if (pot_pos[1] == 9){
 485:Src/main.c    ****     	POT_Data[1] = 8;
 486:Src/main.c    ****       POT_Data[0] = 202;
 487:Src/main.c    ****   }
 488:Src/main.c    **** 
 489:Src/main.c    **** 	if (pot_pos[0] != 0) // if CURRENT_POT is in any position other than first, turn on CUR_LED
 708              		.loc 1 489 0
 709 0060 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 710 0064 002B     		cmp	r3, #0
 711 0066 6AD0     		beq	.L34
 490:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_SET);
 712              		.loc 1 490 0
 713 0068 0122     		movs	r2, #1
 714 006a 4FF48071 		mov	r1, #256
 715 006e 4448     		ldr	r0, .L55+12
 716              	.LVL49:
 717 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 718              	.LVL50:
 719              	.L35:
 491:Src/main.c    ****   else
 492:Src/main.c    ****   	HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_RESET);
 493:Src/main.c    **** 
 494:Src/main.c    **** 	if (pot_pos[1] != 0) // if CUSTOM_POT is in any position other than first, turn on CUST_LED
 720              		.loc 1 494 0
 721 0074 002C     		cmp	r4, #0
 722 0076 69D0     		beq	.L36
 495:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_SET);
 723              		.loc 1 495 0
 724 0078 0122     		movs	r2, #1
 725 007a 0821     		movs	r1, #8
 726 007c 4148     		ldr	r0, .L55+16
 727 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 728              	.LVL51:
 729              	.L37:
 496:Src/main.c    **** 	else
 497:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_RESET);
 498:Src/main.c    **** 
 499:Src/main.c    **** 	if (pot_pos[2] != 0) // if TC_POT is in any position other than first, turn on TC_LED
 730              		.loc 1 499 0
 731 0082 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 732 0086 002B     		cmp	r3, #0
 733 0088 66D0     		beq	.L38
 500:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_SET);
 734              		.loc 1 500 0
 735 008a 0122     		movs	r2, #1
 736 008c 4FF40071 		mov	r1, #512
ARM GAS  /tmp/cc4zYLd7.s 			page 24


 737 0090 3C48     		ldr	r0, .L55+16
 738 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 739              	.LVL52:
 740              	.L39:
 501:Src/main.c    **** 	else
 502:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_RESET);
 503:Src/main.c    **** 
 504:Src/main.c    **** 	if (pot_pos[3] != 0) // if DRS_POT is in any position other than first, turn on DRS_LED
 741              		.loc 1 504 0
 742 0096 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 743 009a 002B     		cmp	r3, #0
 744 009c 63D1     		bne	.L46
 505:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_SET);
 506:Src/main.c    **** 	else
 507:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_RESET);
 745              		.loc 1 507 0
 746 009e 0022     		movs	r2, #0
 747 00a0 4FF48071 		mov	r1, #256
 748 00a4 3748     		ldr	r0, .L55+16
 749 00a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 750              	.LVL53:
 751              	.L19:
 508:Src/main.c    **** 
 509:Src/main.c    **** }
 752              		.loc 1 509 0
 753 00aa 03B0     		add	sp, sp, #12
 754              	.LCFI13:
 755              		.cfi_remember_state
 756              		.cfi_def_cfa_offset 12
 757              		@ sp needed
 758 00ac 30BD     		pop	{r4, r5, pc}
 759              	.LVL54:
 760              	.L24:
 761              	.LCFI14:
 762              		.cfi_restore_state
 444:Src/main.c    ****   	POT_Data[1] = 3;
 763              		.loc 1 444 0
 764 00ae 012C     		cmp	r4, #1
 765 00b0 15D0     		beq	.L47
 449:Src/main.c    ****     	POT_Data[1] = 4;
 766              		.loc 1 449 0
 767 00b2 022C     		cmp	r4, #2
 768 00b4 19D0     		beq	.L48
 454:Src/main.c    ****     	POT_Data[1] = 5;
 769              		.loc 1 454 0
 770 00b6 032C     		cmp	r4, #3
 771 00b8 1DD0     		beq	.L49
 459:Src/main.c    ****       	POT_Data[1] = 5;
 772              		.loc 1 459 0
 773 00ba 042C     		cmp	r4, #4
 774 00bc 21D0     		beq	.L50
 464:Src/main.c    ****         	POT_Data[1] = 6;
 775              		.loc 1 464 0
 776 00be 052C     		cmp	r4, #5
 777 00c0 25D0     		beq	.L51
 469:Src/main.c    ****     	POT_Data[1] = 7;
 778              		.loc 1 469 0
ARM GAS  /tmp/cc4zYLd7.s 			page 25


 779 00c2 062C     		cmp	r4, #6
 780 00c4 29D0     		beq	.L52
 474:Src/main.c    ****     	POT_Data[1] = 7;
 781              		.loc 1 474 0
 782 00c6 072C     		cmp	r4, #7
 783 00c8 2DD0     		beq	.L53
 479:Src/main.c    ****     	POT_Data[1] = 8;
 784              		.loc 1 479 0
 785 00ca 082C     		cmp	r4, #8
 786 00cc 31D0     		beq	.L54
 484:Src/main.c    ****     	POT_Data[1] = 8;
 787              		.loc 1 484 0
 788 00ce 092C     		cmp	r4, #9
 789 00d0 C6D1     		bne	.L25
 485:Src/main.c    ****       POT_Data[0] = 202;
 790              		.loc 1 485 0
 791 00d2 2A4B     		ldr	r3, .L55+8
 792 00d4 0822     		movs	r2, #8
 793 00d6 5A70     		strb	r2, [r3, #1]
 486:Src/main.c    ****   }
 794              		.loc 1 486 0
 795 00d8 CA22     		movs	r2, #202
 796 00da 1A70     		strb	r2, [r3]
 797 00dc C0E7     		b	.L25
 798              	.L47:
 445:Src/main.c    ****     POT_Data[0] = 232;
 799              		.loc 1 445 0
 800 00de 274B     		ldr	r3, .L55+8
 801 00e0 0322     		movs	r2, #3
 802 00e2 5A70     		strb	r2, [r3, #1]
 446:Src/main.c    ****   }
 803              		.loc 1 446 0
 804 00e4 E822     		movs	r2, #232
 805 00e6 1A70     		strb	r2, [r3]
 806 00e8 BAE7     		b	.L25
 807              	.L48:
 450:Src/main.c    ****       POT_Data[0] = 176;
 808              		.loc 1 450 0
 809 00ea 244B     		ldr	r3, .L55+8
 810 00ec 0422     		movs	r2, #4
 811 00ee 5A70     		strb	r2, [r3, #1]
 451:Src/main.c    ****   }
 812              		.loc 1 451 0
 813 00f0 B022     		movs	r2, #176
 814 00f2 1A70     		strb	r2, [r3]
 815 00f4 B4E7     		b	.L25
 816              	.L49:
 455:Src/main.c    ****       POT_Data[0] = 70;
 817              		.loc 1 455 0
 818 00f6 214B     		ldr	r3, .L55+8
 819 00f8 0522     		movs	r2, #5
 820 00fa 5A70     		strb	r2, [r3, #1]
 456:Src/main.c    ****   }
 821              		.loc 1 456 0
 822 00fc 4622     		movs	r2, #70
 823 00fe 1A70     		strb	r2, [r3]
 824 0100 AEE7     		b	.L25
ARM GAS  /tmp/cc4zYLd7.s 			page 26


 825              	.L50:
 460:Src/main.c    ****         POT_Data[0] = 220;
 826              		.loc 1 460 0
 827 0102 1E4B     		ldr	r3, .L55+8
 828 0104 0522     		movs	r2, #5
 829 0106 5A70     		strb	r2, [r3, #1]
 461:Src/main.c    ****   }
 830              		.loc 1 461 0
 831 0108 DC22     		movs	r2, #220
 832 010a 1A70     		strb	r2, [r3]
 833 010c A8E7     		b	.L25
 834              	.L51:
 465:Src/main.c    ****           POT_Data[0] = 114;
 835              		.loc 1 465 0
 836 010e 1B4B     		ldr	r3, .L55+8
 837 0110 0622     		movs	r2, #6
 838 0112 5A70     		strb	r2, [r3, #1]
 466:Src/main.c    ****   }
 839              		.loc 1 466 0
 840 0114 7222     		movs	r2, #114
 841 0116 1A70     		strb	r2, [r3]
 842 0118 A2E7     		b	.L25
 843              	.L52:
 470:Src/main.c    ****       POT_Data[0] = 8;
 844              		.loc 1 470 0
 845 011a 184B     		ldr	r3, .L55+8
 846 011c 0722     		movs	r2, #7
 847 011e 5A70     		strb	r2, [r3, #1]
 471:Src/main.c    ****   }
 848              		.loc 1 471 0
 849 0120 0822     		movs	r2, #8
 850 0122 1A70     		strb	r2, [r3]
 851 0124 9CE7     		b	.L25
 852              	.L53:
 475:Src/main.c    ****       POT_Data[0] = 158;
 853              		.loc 1 475 0
 854 0126 154B     		ldr	r3, .L55+8
 855 0128 0722     		movs	r2, #7
 856 012a 5A70     		strb	r2, [r3, #1]
 476:Src/main.c    ****   }
 857              		.loc 1 476 0
 858 012c 9E22     		movs	r2, #158
 859 012e 1A70     		strb	r2, [r3]
 860 0130 96E7     		b	.L25
 861              	.L54:
 480:Src/main.c    ****       POT_Data[0] = 52;
 862              		.loc 1 480 0
 863 0132 124B     		ldr	r3, .L55+8
 864 0134 0822     		movs	r2, #8
 865 0136 5A70     		strb	r2, [r3, #1]
 481:Src/main.c    ****   }
 866              		.loc 1 481 0
 867 0138 3422     		movs	r2, #52
 868 013a 1A70     		strb	r2, [r3]
 869 013c 90E7     		b	.L25
 870              	.L34:
 492:Src/main.c    **** 
ARM GAS  /tmp/cc4zYLd7.s 			page 27


 871              		.loc 1 492 0
 872 013e 0022     		movs	r2, #0
 873 0140 4FF48071 		mov	r1, #256
 874 0144 0E48     		ldr	r0, .L55+12
 875              	.LVL55:
 876 0146 FFF7FEFF 		bl	HAL_GPIO_WritePin
 877              	.LVL56:
 878 014a 93E7     		b	.L35
 879              	.L36:
 497:Src/main.c    **** 
 880              		.loc 1 497 0
 881 014c 0022     		movs	r2, #0
 882 014e 0821     		movs	r1, #8
 883 0150 0C48     		ldr	r0, .L55+16
 884 0152 FFF7FEFF 		bl	HAL_GPIO_WritePin
 885              	.LVL57:
 886 0156 94E7     		b	.L37
 887              	.L38:
 502:Src/main.c    **** 
 888              		.loc 1 502 0
 889 0158 0022     		movs	r2, #0
 890 015a 4FF40071 		mov	r1, #512
 891 015e 0948     		ldr	r0, .L55+16
 892 0160 FFF7FEFF 		bl	HAL_GPIO_WritePin
 893              	.LVL58:
 894 0164 97E7     		b	.L39
 895              	.L46:
 505:Src/main.c    **** 	else
 896              		.loc 1 505 0
 897 0166 0122     		movs	r2, #1
 898 0168 4FF48071 		mov	r1, #256
 899 016c 0548     		ldr	r0, .L55+16
 900 016e FFF7FEFF 		bl	HAL_GPIO_WritePin
 901              	.LVL59:
 902 0172 9AE7     		b	.L19
 903              	.L56:
 904              		.align	2
 905              	.L55:
 906 0174 00000000 		.word	.LANCHOR1
 907 0178 00000000 		.word	POT_data
 908 017c 00000000 		.word	POT_Data
 909 0180 000C0140 		.word	1073810432
 910 0184 00080140 		.word	1073809408
 911              		.cfi_endproc
 912              	.LFE72:
 914              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 915              		.align	1
 916              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu softvfp
 922              	HAL_CAN_RxFifo0MsgPendingCallback:
 923              	.LFB73:
 510:Src/main.c    **** 
 511:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
 512:Src/main.c    **** {
ARM GAS  /tmp/cc4zYLd7.s 			page 28


 924              		.loc 1 512 0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              	.LVL60:
 929 0000 08B5     		push	{r3, lr}
 930              	.LCFI15:
 931              		.cfi_def_cfa_offset 8
 932              		.cfi_offset 3, -8
 933              		.cfi_offset 14, -4
 513:Src/main.c    ****   if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 934              		.loc 1 513 0
 935 0002 054B     		ldr	r3, .L60
 936 0004 054A     		ldr	r2, .L60+4
 937 0006 0021     		movs	r1, #0
 938 0008 0548     		ldr	r0, .L60+8
 939              	.LVL61:
 940 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 941              	.LVL62:
 942 000e 10B9     		cbnz	r0, .L57
 514:Src/main.c    **** 	  CAN_flag = 0xFF;
 943              		.loc 1 514 0
 944 0010 044B     		ldr	r3, .L60+12
 945 0012 FF22     		movs	r2, #255
 946 0014 1A70     		strb	r2, [r3]
 947              	.L57:
 515:Src/main.c    **** }
 948              		.loc 1 515 0
 949 0016 08BD     		pop	{r3, pc}
 950              	.L61:
 951              		.align	2
 952              	.L60:
 953 0018 00000000 		.word	RxData
 954 001c 00000000 		.word	RxHeader
 955 0020 00000000 		.word	hcan
 956 0024 00000000 		.word	CAN_flag
 957              		.cfi_endproc
 958              	.LFE73:
 960              		.section	.text.CAN_interpret,"ax",%progbits
 961              		.align	1
 962              		.global	CAN_interpret
 963              		.syntax unified
 964              		.thumb
 965              		.thumb_func
 966              		.fpu softvfp
 968              	CAN_interpret:
 969              	.LFB74:
 516:Src/main.c    **** 
 517:Src/main.c    **** void CAN_interpret(void) {
 970              		.loc 1 517 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 974 0000 70B5     		push	{r4, r5, r6, lr}
 975              	.LCFI16:
 976              		.cfi_def_cfa_offset 16
 977              		.cfi_offset 4, -16
ARM GAS  /tmp/cc4zYLd7.s 			page 29


 978              		.cfi_offset 5, -12
 979              		.cfi_offset 6, -8
 980              		.cfi_offset 14, -4
 518:Src/main.c    **** 
 519:Src/main.c    **** 	uint16_t received_ID;
 520:Src/main.c    **** 	received_ID = RxHeader.StdId;
 981              		.loc 1 520 0
 982 0002 4A4B     		ldr	r3, .L86
 983 0004 1C88     		ldrh	r4, [r3]
 984              	.LVL63:
 521:Src/main.c    **** 
 522:Src/main.c    **** 	if (received_ID == FAULTS) {
 985              		.loc 1 522 0
 986 0006 D02C     		cmp	r4, #208
 987 0008 07D0     		beq	.L75
 988              	.L63:
 523:Src/main.c    **** 
 524:Src/main.c    **** 		uint8_t BMS_fault;
 525:Src/main.c    **** 		uint8_t IMD_fault;
 526:Src/main.c    **** 		uint8_t BSPD_fault;
 527:Src/main.c    **** 		bool any_fault;
 528:Src/main.c    **** 
 529:Src/main.c    **** 		BMS_fault = RxData[0];
 530:Src/main.c    **** 		IMD_fault = RxData[1];
 531:Src/main.c    **** 		BSPD_fault = RxData[2];
 532:Src/main.c    **** 
 533:Src/main.c    **** 		if (BMS_fault == 0xFF) {
 534:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 535:Src/main.c    **** 			any_fault = true;
 536:Src/main.c    **** 		}
 537:Src/main.c    **** 		else if (BMS_fault == 0x00)
 538:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 539:Src/main.c    **** 
 540:Src/main.c    **** 		if (IMD_fault == 0xFF) {
 541:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 542:Src/main.c    **** 			any_fault = true;
 543:Src/main.c    **** 		}
 544:Src/main.c    **** 		else if (IMD_fault == 0x00)
 545:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 546:Src/main.c    **** 
 547:Src/main.c    **** 		if (BSPD_fault == 0xFF) {
 548:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 549:Src/main.c    **** 			any_fault = true;
 550:Src/main.c    **** 		}
 551:Src/main.c    **** 		else if (BSPD_fault == 0x00)
 552:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 553:Src/main.c    **** 
 554:Src/main.c    **** 		if (any_fault == true) {
 555:Src/main.c    **** 			// if there is any fault
 556:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 557:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 558:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 559:Src/main.c    **** 			any_fault = false;
 560:Src/main.c    **** 		}
 561:Src/main.c    **** 
 562:Src/main.c    **** 	}
 563:Src/main.c    **** 
ARM GAS  /tmp/cc4zYLd7.s 			page 30


 564:Src/main.c    **** 	if (received_ID == PRECHARGE) {
 989              		.loc 1 564 0
 990 000a D12C     		cmp	r4, #209
 991 000c 46D0     		beq	.L76
 992              	.L70:
 565:Src/main.c    **** 
 566:Src/main.c    **** 		uint8_t Precharge_state;
 567:Src/main.c    **** 		Precharge_state = RxData[0];
 568:Src/main.c    **** 
 569:Src/main.c    **** 		if (Precharge_state == 0xFF) {
 570:Src/main.c    **** 			// if precharge is complete
 571:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED green
 572:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 573:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 574:Src/main.c    **** 		}
 575:Src/main.c    **** 
 576:Src/main.c    **** 		if (Precharge_state == 0x00) {
 577:Src/main.c    **** 			// if precharge is not complete
 578:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 579:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 580:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 581:Src/main.c    **** 
 582:Src/main.c    **** 		}
 583:Src/main.c    **** 
 584:Src/main.c    **** 	}
 585:Src/main.c    **** 
 586:Src/main.c    **** 
 587:Src/main.c    **** if (received_ID == MOTOR_POS) {
 993              		.loc 1 587 0
 994 000e A52C     		cmp	r4, #165
 995 0010 6CD0     		beq	.L77
 996              	.LVL64:
 997              	.L72:
 588:Src/main.c    ****   uint16_t Rpm;
 589:Src/main.c    ****   Rpm = RxData[2] + 256*RxData[3];
 590:Src/main.c    **** 
 591:Src/main.c    ****   if (Rpm < 50){
 592:Src/main.c    ****     POT_Data1[1] = 0;
 593:Src/main.c    ****     POT_Data1[0] = 0;
 594:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 595:Src/main.c    ****   }
 596:Src/main.c    **** 
 597:Src/main.c    ****   if (Rpm >= 50){
 598:Src/main.c    ****     POT_Data1[1] = 3;
 599:Src/main.c    ****     POT_Data1[0] = 232;
 600:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 601:Src/main.c    ****   }
 602:Src/main.c    **** 
 603:Src/main.c    **** }
 604:Src/main.c    **** 
 605:Src/main.c    **** 
 606:Src/main.c    **** 	CAN_flag = 0x00;
 998              		.loc 1 606 0
 999 0012 474B     		ldr	r3, .L86+4
 1000 0014 0022     		movs	r2, #0
 1001 0016 1A70     		strb	r2, [r3]
 607:Src/main.c    **** 
ARM GAS  /tmp/cc4zYLd7.s 			page 31


 608:Src/main.c    **** }
 1002              		.loc 1 608 0
 1003 0018 70BD     		pop	{r4, r5, r6, pc}
 1004              	.LVL65:
 1005              	.L75:
 1006              	.LBB4:
 529:Src/main.c    **** 		IMD_fault = RxData[1];
 1007              		.loc 1 529 0
 1008 001a 464B     		ldr	r3, .L86+8
 1009 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1010              	.LVL66:
 530:Src/main.c    **** 		BSPD_fault = RxData[2];
 1011              		.loc 1 530 0
 1012 001e 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 1013              	.LVL67:
 531:Src/main.c    **** 
 1014              		.loc 1 531 0
 1015 0020 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 1016              	.LVL68:
 533:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 1017              		.loc 1 533 0
 1018 0022 FF2A     		cmp	r2, #255
 1019 0024 17D0     		beq	.L78
 537:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 1020              		.loc 1 537 0
 1021 0026 E2B1     		cbz	r2, .L79
 1022              	.LVL69:
 1023              	.L65:
 540:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 1024              		.loc 1 540 0
 1025 0028 FF2E     		cmp	r6, #255
 1026 002a 1FD0     		beq	.L80
 544:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 1027              		.loc 1 544 0
 1028 002c 26B3     		cbz	r6, .L81
 1029              	.L67:
 547:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 1030              		.loc 1 547 0
 1031 002e FF2D     		cmp	r5, #255
 1032 0030 28D0     		beq	.L82
 551:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 1033              		.loc 1 551 0
 1034 0032 6DB3     		cbz	r5, .L83
 1035              	.L69:
 556:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 1036              		.loc 1 556 0
 1037 0034 404D     		ldr	r5, .L86+12
 1038              	.LVL70:
 1039 0036 0022     		movs	r2, #0
 1040 0038 2021     		movs	r1, #32
 1041 003a 2846     		mov	r0, r5
 1042 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1043              	.LVL71:
 557:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1044              		.loc 1 557 0
 1045 0040 0122     		movs	r2, #1
 1046 0042 4021     		movs	r1, #64
ARM GAS  /tmp/cc4zYLd7.s 			page 32


 1047 0044 2846     		mov	r0, r5
 1048 0046 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1049              	.LVL72:
 558:Src/main.c    **** 			any_fault = false;
 1050              		.loc 1 558 0
 1051 004a 0022     		movs	r2, #0
 1052 004c 8021     		movs	r1, #128
 1053 004e 2846     		mov	r0, r5
 1054 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1055              	.LVL73:
 1056 0054 D9E7     		b	.L63
 1057              	.LVL74:
 1058              	.L78:
 534:Src/main.c    **** 			any_fault = true;
 1059              		.loc 1 534 0
 1060 0056 0122     		movs	r2, #1
 1061              	.LVL75:
 1062 0058 1021     		movs	r1, #16
 1063 005a 3848     		ldr	r0, .L86+16
 1064 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1065              	.LVL76:
 1066 0060 E2E7     		b	.L65
 1067              	.LVL77:
 1068              	.L79:
 538:Src/main.c    **** 
 1069              		.loc 1 538 0
 1070 0062 1021     		movs	r1, #16
 1071 0064 3548     		ldr	r0, .L86+16
 1072 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1073              	.LVL78:
 1074 006a DDE7     		b	.L65
 1075              	.LVL79:
 1076              	.L80:
 541:Src/main.c    **** 			any_fault = true;
 1077              		.loc 1 541 0
 1078 006c 0122     		movs	r2, #1
 1079 006e 2021     		movs	r1, #32
 1080 0070 3248     		ldr	r0, .L86+16
 1081 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1082              	.LVL80:
 1083 0076 DAE7     		b	.L67
 1084              	.L81:
 545:Src/main.c    **** 
 1085              		.loc 1 545 0
 1086 0078 0022     		movs	r2, #0
 1087 007a 2021     		movs	r1, #32
 1088 007c 2F48     		ldr	r0, .L86+16
 1089 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1090              	.LVL81:
 1091 0082 D4E7     		b	.L67
 1092              	.L82:
 548:Src/main.c    **** 			any_fault = true;
 1093              		.loc 1 548 0
 1094 0084 0122     		movs	r2, #1
 1095 0086 4021     		movs	r1, #64
 1096 0088 2C48     		ldr	r0, .L86+16
 1097 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/cc4zYLd7.s 			page 33


 1098              	.LVL82:
 1099 008e D1E7     		b	.L69
 1100              	.L83:
 552:Src/main.c    **** 
 1101              		.loc 1 552 0
 1102 0090 0022     		movs	r2, #0
 1103 0092 4021     		movs	r1, #64
 1104 0094 2948     		ldr	r0, .L86+16
 1105 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1106              	.LVL83:
 1107 009a CBE7     		b	.L69
 1108              	.LVL84:
 1109              	.L76:
 1110              	.LBE4:
 1111              	.LBB5:
 567:Src/main.c    **** 
 1112              		.loc 1 567 0
 1113 009c 254B     		ldr	r3, .L86+8
 1114 009e 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 1115              	.LVL85:
 569:Src/main.c    **** 			// if precharge is complete
 1116              		.loc 1 569 0
 1117 00a0 FF2D     		cmp	r5, #255
 1118 00a2 12D0     		beq	.L84
 1119              	.L71:
 576:Src/main.c    **** 			// if precharge is not complete
 1120              		.loc 1 576 0
 1121 00a4 002D     		cmp	r5, #0
 1122 00a6 B2D1     		bne	.L70
 578:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1123              		.loc 1 578 0
 1124 00a8 234D     		ldr	r5, .L86+12
 1125              	.LVL86:
 1126 00aa 0022     		movs	r2, #0
 1127 00ac 2021     		movs	r1, #32
 1128 00ae 2846     		mov	r0, r5
 1129 00b0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1130              	.LVL87:
 579:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 1131              		.loc 1 579 0
 1132 00b4 0022     		movs	r2, #0
 1133 00b6 4021     		movs	r1, #64
 1134 00b8 2846     		mov	r0, r5
 1135 00ba FFF7FEFF 		bl	HAL_GPIO_WritePin
 1136              	.LVL88:
 580:Src/main.c    **** 
 1137              		.loc 1 580 0
 1138 00be 0122     		movs	r2, #1
 1139 00c0 8021     		movs	r1, #128
 1140 00c2 2846     		mov	r0, r5
 1141 00c4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1142              	.LVL89:
 1143 00c8 A1E7     		b	.L70
 1144              	.LVL90:
 1145              	.L84:
 571:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1146              		.loc 1 571 0
ARM GAS  /tmp/cc4zYLd7.s 			page 34


 1147 00ca 1B4E     		ldr	r6, .L86+12
 1148 00cc 0122     		movs	r2, #1
 1149 00ce 2021     		movs	r1, #32
 1150 00d0 3046     		mov	r0, r6
 1151 00d2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1152              	.LVL91:
 572:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1153              		.loc 1 572 0
 1154 00d6 0022     		movs	r2, #0
 1155 00d8 4021     		movs	r1, #64
 1156 00da 3046     		mov	r0, r6
 1157 00dc FFF7FEFF 		bl	HAL_GPIO_WritePin
 1158              	.LVL92:
 573:Src/main.c    **** 		}
 1159              		.loc 1 573 0
 1160 00e0 0022     		movs	r2, #0
 1161 00e2 8021     		movs	r1, #128
 1162 00e4 3046     		mov	r0, r6
 1163 00e6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1164              	.LVL93:
 1165 00ea DBE7     		b	.L71
 1166              	.LVL94:
 1167              	.L77:
 1168              	.LBE5:
 1169              	.LBB6:
 589:Src/main.c    **** 
 1170              		.loc 1 589 0
 1171 00ec 114B     		ldr	r3, .L86+8
 1172 00ee 9C78     		ldrb	r4, [r3, #2]	@ zero_extendqisi2
 1173              	.LVL95:
 1174 00f0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1175 00f2 04EB0324 		add	r4, r4, r3, lsl #8
 1176 00f6 A4B2     		uxth	r4, r4
 1177              	.LVL96:
 591:Src/main.c    ****     POT_Data1[1] = 0;
 1178              		.loc 1 591 0
 1179 00f8 312C     		cmp	r4, #49
 1180 00fa 0CD9     		bls	.L85
 1181              	.L73:
 597:Src/main.c    ****     POT_Data1[1] = 3;
 1182              		.loc 1 597 0
 1183 00fc 312C     		cmp	r4, #49
 1184 00fe 88D9     		bls	.L72
 598:Src/main.c    ****     POT_Data1[0] = 232;
 1185              		.loc 1 598 0
 1186 0100 0F4A     		ldr	r2, .L86+20
 1187 0102 0323     		movs	r3, #3
 1188 0104 5370     		strb	r3, [r2, #1]
 599:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 1189              		.loc 1 599 0
 1190 0106 E823     		movs	r3, #232
 1191 0108 1370     		strb	r3, [r2]
 600:Src/main.c    ****   }
 1192              		.loc 1 600 0
 1193 010a 0E4B     		ldr	r3, .L86+24
 1194 010c 0E49     		ldr	r1, .L86+28
 1195 010e 0F48     		ldr	r0, .L86+32
ARM GAS  /tmp/cc4zYLd7.s 			page 35


 1196 0110 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1197              	.LVL97:
 1198 0114 7DE7     		b	.L72
 1199              	.L85:
 592:Src/main.c    ****     POT_Data1[0] = 0;
 1200              		.loc 1 592 0
 1201 0116 0A4A     		ldr	r2, .L86+20
 1202 0118 0023     		movs	r3, #0
 1203 011a 5370     		strb	r3, [r2, #1]
 593:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 1204              		.loc 1 593 0
 1205 011c 1370     		strb	r3, [r2]
 594:Src/main.c    ****   }
 1206              		.loc 1 594 0
 1207 011e 094B     		ldr	r3, .L86+24
 1208 0120 0949     		ldr	r1, .L86+28
 1209 0122 0A48     		ldr	r0, .L86+32
 1210 0124 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1211              	.LVL98:
 1212 0128 E8E7     		b	.L73
 1213              	.L87:
 1214 012a 00BF     		.align	2
 1215              	.L86:
 1216 012c 00000000 		.word	RxHeader
 1217 0130 00000000 		.word	CAN_flag
 1218 0134 00000000 		.word	RxData
 1219 0138 000C0140 		.word	1073810432
 1220 013c 00080140 		.word	1073809408
 1221 0140 00000000 		.word	POT_Data1
 1222 0144 00000000 		.word	TxMailbox
 1223 0148 00000000 		.word	POT_Txheader1
 1224 014c 00000000 		.word	hcan
 1225              	.LBE6:
 1226              		.cfi_endproc
 1227              	.LFE74:
 1229              		.section	.text.main,"ax",%progbits
 1230              		.align	1
 1231              		.global	main
 1232              		.syntax unified
 1233              		.thumb
 1234              		.thumb_func
 1235              		.fpu softvfp
 1237              	main:
 1238              	.LFB66:
  95:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1239              		.loc 1 95 0
 1240              		.cfi_startproc
 1241              		@ Volatile: function does not return.
 1242              		@ args = 0, pretend = 0, frame = 8
 1243              		@ frame_needed = 0, uses_anonymous_args = 0
 1244 0000 00B5     		push	{lr}
 1245              	.LCFI17:
 1246              		.cfi_def_cfa_offset 4
 1247              		.cfi_offset 14, -4
 1248 0002 83B0     		sub	sp, sp, #12
 1249              	.LCFI18:
 1250              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cc4zYLd7.s 			page 36


 103:Src/main.c    **** 
 1251              		.loc 1 103 0
 1252 0004 FFF7FEFF 		bl	HAL_Init
 1253              	.LVL99:
 110:Src/main.c    **** 
 1254              		.loc 1 110 0
 1255 0008 FFF7FEFF 		bl	SystemClock_Config
 1256              	.LVL100:
 117:Src/main.c    ****   MX_ADC1_Init();
 1257              		.loc 1 117 0
 1258 000c FFF7FEFF 		bl	MX_GPIO_Init
 1259              	.LVL101:
 118:Src/main.c    ****   MX_CAN_Init();
 1260              		.loc 1 118 0
 1261 0010 FFF7FEFF 		bl	MX_ADC1_Init
 1262              	.LVL102:
 119:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1263              		.loc 1 119 0
 1264 0014 FFF7FEFF 		bl	MX_CAN_Init
 1265              	.LVL103:
 1266 0018 17E0     		b	.L90
 1267              	.L89:
 1268              	.LBB7:
 138:Src/main.c    **** 	POT_interpret(pot_position);
 1269              		.loc 1 138 0
 1270 001a 6846     		mov	r0, sp
 1271 001c FFF7FEFF 		bl	POT_read
 1272              	.LVL104:
 139:Src/main.c    **** 
 1273              		.loc 1 139 0
 1274 0020 6846     		mov	r0, sp
 1275 0022 FFF7FEFF 		bl	POT_interpret
 1276              	.LVL105:
 142:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &POT_Txheader, POT_Data, &TxMailbox);
 1277              		.loc 1 142 0
 1278 0026 0D4D     		ldr	r5, .L92
 1279 0028 0D4C     		ldr	r4, .L92+4
 1280 002a 2B46     		mov	r3, r5
 1281 002c 0D4A     		ldr	r2, .L92+8
 1282 002e 0E49     		ldr	r1, .L92+12
 1283 0030 2046     		mov	r0, r4
 1284 0032 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1285              	.LVL106:
 143:Src/main.c    **** 
 1286              		.loc 1 143 0
 1287 0036 2B46     		mov	r3, r5
 1288 0038 0C4A     		ldr	r2, .L92+16
 1289 003a 0D49     		ldr	r1, .L92+20
 1290 003c 2046     		mov	r0, r4
 1291 003e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1292              	.LVL107:
 145:Src/main.c    **** 
 1293              		.loc 1 145 0
 1294 0042 4FF47A70 		mov	r0, #1000
 1295 0046 FFF7FEFF 		bl	HAL_Delay
 1296              	.LVL108:
 1297              	.L90:
ARM GAS  /tmp/cc4zYLd7.s 			page 37


 132:Src/main.c    **** 		CAN_interpret();
 1298              		.loc 1 132 0
 1299 004a 0A4B     		ldr	r3, .L92+24
 1300 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1301 004e DBB2     		uxtb	r3, r3
 1302 0050 FF2B     		cmp	r3, #255
 1303 0052 E2D1     		bne	.L89
 133:Src/main.c    **** 
 1304              		.loc 1 133 0
 1305 0054 FFF7FEFF 		bl	CAN_interpret
 1306              	.LVL109:
 1307 0058 DFE7     		b	.L89
 1308              	.L93:
 1309 005a 00BF     		.align	2
 1310              	.L92:
 1311 005c 00000000 		.word	TxMailbox
 1312 0060 00000000 		.word	hcan
 1313 0064 00000000 		.word	POT_data
 1314 0068 00000000 		.word	POT_TxHeader
 1315 006c 00000000 		.word	POT_Data
 1316 0070 00000000 		.word	POT_Txheader
 1317 0074 00000000 		.word	CAN_flag
 1318              	.LBE7:
 1319              		.cfi_endproc
 1320              	.LFE66:
 1322              		.section	.text.Error_Handler,"ax",%progbits
 1323              		.align	1
 1324              		.global	Error_Handler
 1325              		.syntax unified
 1326              		.thumb
 1327              		.thumb_func
 1328              		.fpu softvfp
 1330              	Error_Handler:
 1331              	.LFB75:
 609:Src/main.c    **** /* USER CODE END 4 */
 610:Src/main.c    **** 
 611:Src/main.c    **** /**
 612:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 613:Src/main.c    ****   * @retval None
 614:Src/main.c    ****   */
 615:Src/main.c    **** void Error_Handler(void)
 616:Src/main.c    **** {
 1332              		.loc 1 616 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 0
 1335              		@ frame_needed = 0, uses_anonymous_args = 0
 1336              		@ link register save eliminated.
 617:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 618:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 619:Src/main.c    **** 
 620:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 621:Src/main.c    **** }
 1337              		.loc 1 621 0
 1338 0000 7047     		bx	lr
 1339              		.cfi_endproc
 1340              	.LFE75:
 1342              		.global	pot_threshold
ARM GAS  /tmp/cc4zYLd7.s 			page 38


 1343              		.comm	CAN_flag,1,1
 1344              		.comm	TxMailbox,4,4
 1345              		.comm	POT_Data1,8,4
 1346              		.comm	POT_Data,8,4
 1347              		.comm	POT_data,8,4
 1348              		.comm	POT_Txheader1,24,4
 1349              		.comm	POT_Txheader,24,4
 1350              		.comm	POT_TxHeader,24,4
 1351              		.comm	RxData,8,4
 1352              		.comm	RxHeader,28,4
 1353              		.comm	hcan,40,4
 1354              		.global	sConfig
 1355              		.comm	hadc1,48,4
 1356              		.section	.bss.sConfig,"aw",%nobits
 1357              		.align	2
 1358              		.set	.LANCHOR0,. + 0
 1361              	sConfig:
 1362 0000 00000000 		.space	12
 1362      00000000 
 1362      00000000 
 1363              		.section	.data.pot_threshold,"aw",%progbits
 1364              		.align	2
 1365              		.set	.LANCHOR1,. + 0
 1368              	pot_threshold:
 1369 0000 0000     		.short	0
 1370 0002 6702     		.short	615
 1371 0004 0104     		.short	1025
 1372 0006 9B05     		.short	1435
 1373 0008 3507     		.short	1845
 1374 000a CF08     		.short	2255
 1375 000c 690A     		.short	2665
 1376 000e 030C     		.short	3075
 1377 0010 9D0D     		.short	3485
 1378 0012 370F     		.short	3895
 1379 0014 FF0F     		.short	4095
 1380              		.text
 1381              	.Letext0:
 1382              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1383              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1384              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1385              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1386              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1387              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1388              		.file 8 "/usr/include/newlib/sys/lock.h"
 1389              		.file 9 "/usr/include/newlib/sys/_types.h"
 1390              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1391              		.file 11 "/usr/include/newlib/sys/reent.h"
 1392              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1393              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1394              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1395              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1396              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1397              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1398              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1399              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1400              		.file 20 "<built-in>"
ARM GAS  /tmp/cc4zYLd7.s 			page 39


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc4zYLd7.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc4zYLd7.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc4zYLd7.s:121    .text.MX_GPIO_Init:0000000000000088 $d
     /tmp/cc4zYLd7.s:128    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc4zYLd7.s:134    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc4zYLd7.s:221    .text.MX_ADC1_Init:0000000000000064 $d
                            *COM*:0000000000000030 hadc1
     /tmp/cc4zYLd7.s:228    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/cc4zYLd7.s:234    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/cc4zYLd7.s:363    .text.MX_CAN_Init:000000000000008c $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 POT_TxHeader
                            *COM*:0000000000000018 POT_Txheader
                            *COM*:0000000000000018 POT_Txheader1
     /tmp/cc4zYLd7.s:372    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc4zYLd7.s:379    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc4zYLd7.s:459    .text.POT_read:0000000000000000 $t
     /tmp/cc4zYLd7.s:466    .text.POT_read:0000000000000000 POT_read
     /tmp/cc4zYLd7.s:613    .text.POT_read:00000000000000d4 $d
     /tmp/cc4zYLd7.s:619    .text.POT_interpret:0000000000000000 $t
     /tmp/cc4zYLd7.s:626    .text.POT_interpret:0000000000000000 POT_interpret
     /tmp/cc4zYLd7.s:906    .text.POT_interpret:0000000000000174 $d
                            *COM*:0000000000000008 POT_data
                            *COM*:0000000000000008 POT_Data
     /tmp/cc4zYLd7.s:915    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/cc4zYLd7.s:922    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/cc4zYLd7.s:953    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000018 $d
                            *COM*:0000000000000008 RxData
                            *COM*:000000000000001c RxHeader
                            *COM*:0000000000000001 CAN_flag
     /tmp/cc4zYLd7.s:961    .text.CAN_interpret:0000000000000000 $t
     /tmp/cc4zYLd7.s:968    .text.CAN_interpret:0000000000000000 CAN_interpret
     /tmp/cc4zYLd7.s:1216   .text.CAN_interpret:000000000000012c $d
                            *COM*:0000000000000008 POT_Data1
                            *COM*:0000000000000004 TxMailbox
     /tmp/cc4zYLd7.s:1230   .text.main:0000000000000000 $t
     /tmp/cc4zYLd7.s:1237   .text.main:0000000000000000 main
     /tmp/cc4zYLd7.s:1311   .text.main:000000000000005c $d
     /tmp/cc4zYLd7.s:1323   .text.Error_Handler:0000000000000000 $t
     /tmp/cc4zYLd7.s:1330   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc4zYLd7.s:1368   .data.pot_threshold:0000000000000000 pot_threshold
     /tmp/cc4zYLd7.s:1361   .bss.sConfig:0000000000000000 sConfig
     /tmp/cc4zYLd7.s:1357   .bss.sConfig:0000000000000000 $d
     /tmp/cc4zYLd7.s:1364   .data.pot_threshold:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
memset
ARM GAS  /tmp/cc4zYLd7.s 			page 40


HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_CAN_GetRxMessage
HAL_CAN_AddTxMessage
HAL_Init
HAL_Delay

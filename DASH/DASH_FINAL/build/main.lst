ARM GAS  /tmp/cci6zRuO.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB70:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "stdbool.h"
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/cci6zRuO.s 			page 2


  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** #define DASH_CAN_ID			0x00F
  37:Src/main.c    **** 
  38:Src/main.c    **** #define FAULTS				0x0D0
  39:Src/main.c    **** #define PRECHARGE			0x0D1
  40:Src/main.c    **** #define ENABLE_SIG		0x0D2
  41:Src/main.c    **** /* USER CODE END PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  44:Src/main.c    **** /* USER CODE BEGIN PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* USER CODE END PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  49:Src/main.c    **** ADC_HandleTypeDef hadc1;
  50:Src/main.c    **** ADC_ChannelConfTypeDef sConfig = {0};
  51:Src/main.c    **** CAN_HandleTypeDef hcan;
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN PV */
  54:Src/main.c    **** 
  55:Src/main.c    **** CAN_RxHeaderTypeDef   	RxHeader;
  56:Src/main.c    **** uint8_t               	RxData[8];
  57:Src/main.c    **** 
  58:Src/main.c    **** CAN_TxHeaderTypeDef   	POT_TxHeader;
  59:Src/main.c    **** uint8_t               	POT_data[8];
  60:Src/main.c    **** uint32_t              	TxMailbox;
  61:Src/main.c    **** 
  62:Src/main.c    **** volatile char					CAN_flag;
  63:Src/main.c    **** 
  64:Src/main.c    **** uint16_t				pot_threshold[11] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE END PV */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  69:Src/main.c    **** void SystemClock_Config(void);
  70:Src/main.c    **** static void MX_GPIO_Init(void);
  71:Src/main.c    **** static void MX_ADC1_Init(void);
  72:Src/main.c    **** static void MX_CAN_Init(void);
  73:Src/main.c    **** /* USER CODE BEGIN PFP */
  74:Src/main.c    **** void POT_read(uint16_t pot_values[4]);
  75:Src/main.c    **** void CAN_interpret(void);
  76:Src/main.c    **** void  POT_interpret(uint16_t pot_values[4]);
  77:Src/main.c    **** /* USER CODE END PFP */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  80:Src/main.c    **** /* USER CODE BEGIN 0 */
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE END 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** /**
  85:Src/main.c    ****   * @brief  The application entry point.
  86:Src/main.c    ****   * @retval int
  87:Src/main.c    ****   */
  88:Src/main.c    **** int main(void)
  89:Src/main.c    **** {
  90:Src/main.c    ****   /* USER CODE BEGIN 1 */
  91:Src/main.c    **** 
ARM GAS  /tmp/cci6zRuO.s 			page 3


  92:Src/main.c    ****   /* USER CODE END 1 */
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  97:Src/main.c    ****   HAL_Init();
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* USER CODE BEGIN Init */
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE END Init */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* Configure the system clock */
 104:Src/main.c    ****   SystemClock_Config();
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE END SysInit */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* Initialize all configured peripherals */
 111:Src/main.c    ****   MX_GPIO_Init();
 112:Src/main.c    ****   MX_ADC1_Init();
 113:Src/main.c    ****   MX_CAN_Init();
 114:Src/main.c    ****   /* USER CODE BEGIN 2 */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* USER CODE END 2 */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* Infinite loop */
 119:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 120:Src/main.c    ****   while (1)
 121:Src/main.c    ****   {
 122:Src/main.c    ****     /* USER CODE END WHILE */
 123:Src/main.c    **** 
 124:Src/main.c    ****     /* USER CODE BEGIN 3 */
 125:Src/main.c    **** 
 126:Src/main.c    **** 	if (CAN_flag == 0xFF)
 127:Src/main.c    **** 		CAN_interpret();
 128:Src/main.c    **** 
 129:Src/main.c    **** 	//send POT positions CAN message
 130:Src/main.c    **** 
 131:Src/main.c    **** 	uint16_t pot_position[4];
 132:Src/main.c    **** 	POT_read(pot_position);
 133:Src/main.c    **** 	POT_interpret(pot_position);
 134:Src/main.c    **** 
 135:Src/main.c    **** 
 136:Src/main.c    **** 	HAL_CAN_AddTxMessage(&hcan, &POT_TxHeader, POT_data, &TxMailbox);
 137:Src/main.c    **** 
 138:Src/main.c    **** 
 139:Src/main.c    **** 	HAL_Delay(1000);
 140:Src/main.c    **** 
 141:Src/main.c    **** 
 142:Src/main.c    ****   }
 143:Src/main.c    ****   /* USER CODE END 3 */
 144:Src/main.c    **** }
 145:Src/main.c    **** 
 146:Src/main.c    **** /**
 147:Src/main.c    ****   * @brief System Clock Configuration
 148:Src/main.c    ****   * @retval None
ARM GAS  /tmp/cci6zRuO.s 			page 4


 149:Src/main.c    ****   */
 150:Src/main.c    **** void SystemClock_Config(void)
 151:Src/main.c    **** {
 152:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 153:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 154:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 155:Src/main.c    **** 
 156:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 157:Src/main.c    ****   */
 158:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 159:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 160:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 161:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 162:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 163:Src/main.c    ****   {
 164:Src/main.c    ****     Error_Handler();
 165:Src/main.c    ****   }
 166:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 167:Src/main.c    ****   */
 168:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 169:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 170:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 171:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 172:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 173:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 174:Src/main.c    **** 
 175:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 176:Src/main.c    ****   {
 177:Src/main.c    ****     Error_Handler();
 178:Src/main.c    ****   }
 179:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 180:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 181:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 182:Src/main.c    ****   {
 183:Src/main.c    ****     Error_Handler();
 184:Src/main.c    ****   }
 185:Src/main.c    **** }
 186:Src/main.c    **** 
 187:Src/main.c    **** /**
 188:Src/main.c    ****   * @brief ADC1 Initialization Function
 189:Src/main.c    ****   * @param None
 190:Src/main.c    ****   * @retval None
 191:Src/main.c    ****   */
 192:Src/main.c    **** static void MX_ADC1_Init(void)
 193:Src/main.c    **** {
 194:Src/main.c    **** 
 195:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 196:Src/main.c    **** 
 197:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 198:Src/main.c    **** 
 199:Src/main.c    ****   //ADC_ChannelConfTypeDef sConfig = {0};
 200:Src/main.c    **** 
 201:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 202:Src/main.c    **** 
 203:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 204:Src/main.c    ****   /** Common config
 205:Src/main.c    ****   */
ARM GAS  /tmp/cci6zRuO.s 			page 5


 206:Src/main.c    ****   hadc1.Instance = ADC1;
 207:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 208:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 209:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 210:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 211:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 212:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 213:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 214:Src/main.c    ****   {
 215:Src/main.c    ****     Error_Handler();
 216:Src/main.c    ****   }
 217:Src/main.c    ****   /** Configure Regular Channel
 218:Src/main.c    ****   */
 219:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 220:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 221:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 222:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 223:Src/main.c    ****   {
 224:Src/main.c    ****     Error_Handler();
 225:Src/main.c    ****   }
 226:Src/main.c    ****   /** Configure Regular Channel
 227:Src/main.c    ****   */
 228:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 229:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 230:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 231:Src/main.c    ****   {
 232:Src/main.c    ****     Error_Handler();
 233:Src/main.c    ****   }
 234:Src/main.c    ****   /** Configure Regular Channel
 235:Src/main.c    ****   */
 236:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_7;
 237:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 238:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 239:Src/main.c    ****   {
 240:Src/main.c    ****     Error_Handler();
 241:Src/main.c    ****   }
 242:Src/main.c    ****   /** Configure Regular Channel
 243:Src/main.c    ****   */
 244:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 245:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 246:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 247:Src/main.c    ****   {
 248:Src/main.c    ****     Error_Handler();
 249:Src/main.c    ****   }
 250:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 251:Src/main.c    **** 
 252:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 253:Src/main.c    **** 
 254:Src/main.c    **** }
 255:Src/main.c    **** 
 256:Src/main.c    **** /**
 257:Src/main.c    ****   * @brief CAN Initialization Function
 258:Src/main.c    ****   * @param None
 259:Src/main.c    ****   * @retval None
 260:Src/main.c    ****   */
 261:Src/main.c    **** static void MX_CAN_Init(void)
 262:Src/main.c    **** {
ARM GAS  /tmp/cci6zRuO.s 			page 6


 263:Src/main.c    **** 
 264:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 265:Src/main.c    **** 	CAN_FilterTypeDef     sFilterConfig;
 266:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 267:Src/main.c    **** 
 268:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 271:Src/main.c    ****   hcan.Instance = CAN1;
 272:Src/main.c    ****   hcan.Init.Prescaler = 2;
 273:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 274:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 275:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 276:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 277:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 278:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 279:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 280:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 281:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 282:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 283:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 284:Src/main.c    ****   {
 285:Src/main.c    ****     Error_Handler();
 286:Src/main.c    ****   }
 287:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 */
 288:Src/main.c    **** 	POT_TxHeader.StdId = DASH_CAN_ID; 						// CAN standard ID
 289:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 290:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 291:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 292:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 293:Src/main.c    **** 
 294:Src/main.c    **** 	sFilterConfig.FilterBank = 0;							// filter number (0-13)
 295:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 296:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 297:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 298:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 299:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 300:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 301:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 302:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 303:Src/main.c    **** 
 304:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 305:Src/main.c    **** 
 306:Src/main.c    **** 	HAL_CAN_Start(&hcan);
 307:Src/main.c    **** 
 308:Src/main.c    **** 	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 309:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 310:Src/main.c    **** 
 311:Src/main.c    **** }
 312:Src/main.c    **** 
 313:Src/main.c    **** /**
 314:Src/main.c    ****   * @brief GPIO Initialization Function
 315:Src/main.c    ****   * @param None
 316:Src/main.c    ****   * @retval None
 317:Src/main.c    ****   */
 318:Src/main.c    **** static void MX_GPIO_Init(void)
 319:Src/main.c    **** {
ARM GAS  /tmp/cci6zRuO.s 			page 7


  25              		.loc 1 319 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 86B0     		sub	sp, sp, #24
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 320:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 320 0
  42 0006 0024     		movs	r4, #0
  43 0008 0294     		str	r4, [sp, #8]
  44 000a 0394     		str	r4, [sp, #12]
  45 000c 0494     		str	r4, [sp, #16]
  46 000e 0594     		str	r4, [sp, #20]
  47              	.LBB2:
 321:Src/main.c    **** 
 322:Src/main.c    ****   /* GPIO Ports Clock Enable */
 323:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  48              		.loc 1 323 0
  49 0010 1D4B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F00402 		orr	r2, r2, #4
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F00402 		and	r2, r2, #4
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE2:
  58              	.LBB3:
 324:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  59              		.loc 1 324 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F00802 		orr	r2, r2, #8
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9B69     		ldr	r3, [r3, #24]
  64 002e 03F00803 		and	r3, r3, #8
  65 0032 0193     		str	r3, [sp, #4]
  66 0034 019B     		ldr	r3, [sp, #4]
  67              	.LBE3:
 325:Src/main.c    **** 
 326:Src/main.c    ****   /*Configure GPIO pin Output Level */
 327:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  68              		.loc 1 327 0
  69 0036 DFF85880 		ldr	r8, .L3+8
  70 003a 2246     		mov	r2, r4
  71 003c 4FF45E71 		mov	r1, #888
  72 0040 4046     		mov	r0, r8
  73 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/cci6zRuO.s 			page 8


  74              	.LVL0:
 328:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin, GPIO_PIN_RESET);
 329:Src/main.c    **** 
 330:Src/main.c    ****   /*Configure GPIO pin Output Level */
 331:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin, GPIO_PIN_RESET);
  75              		.loc 1 331 0
  76 0046 114D     		ldr	r5, .L3+4
  77 0048 2246     		mov	r2, r4
  78 004a 4FF4F071 		mov	r1, #480
  79 004e 2846     		mov	r0, r5
  80 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  81              	.LVL1:
 332:Src/main.c    **** 
 333:Src/main.c    ****   /*Configure GPIO pins : CUR_LED_Pin BMS_LED_ON_Pin IMD_LED_ON_Pin BSPD_LED_ON_Pin
 334:Src/main.c    ****                            DRS_LED_Pin TC_LED_Pin */
 335:Src/main.c    ****   GPIO_InitStruct.Pin = CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  82              		.loc 1 335 0
  83 0054 4FF45E73 		mov	r3, #888
  84 0058 0293     		str	r3, [sp, #8]
 336:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin;
 337:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  85              		.loc 1 337 0
  86 005a 0127     		movs	r7, #1
  87 005c 0397     		str	r7, [sp, #12]
 338:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  88              		.loc 1 338 0
  89 005e 0494     		str	r4, [sp, #16]
 339:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  90              		.loc 1 339 0
  91 0060 0226     		movs	r6, #2
  92 0062 0596     		str	r6, [sp, #20]
 340:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  93              		.loc 1 340 0
  94 0064 02A9     		add	r1, sp, #8
  95 0066 4046     		mov	r0, r8
  96 0068 FFF7FEFF 		bl	HAL_GPIO_Init
  97              	.LVL2:
 341:Src/main.c    **** 
 342:Src/main.c    ****   /*Configure GPIO pins : RGB_GREEN_Pin RGB_RED_Pin RGB_BLUE_Pin CUST_LED_Pin */
 343:Src/main.c    ****   GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin;
  98              		.loc 1 343 0
  99 006c 4FF4F073 		mov	r3, #480
 100 0070 0293     		str	r3, [sp, #8]
 344:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 101              		.loc 1 344 0
 102 0072 0397     		str	r7, [sp, #12]
 345:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 103              		.loc 1 345 0
 104 0074 0494     		str	r4, [sp, #16]
 346:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 105              		.loc 1 346 0
 106 0076 0596     		str	r6, [sp, #20]
 347:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 107              		.loc 1 347 0
 108 0078 02A9     		add	r1, sp, #8
 109 007a 2846     		mov	r0, r5
 110 007c FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/cci6zRuO.s 			page 9


 111              	.LVL3:
 348:Src/main.c    **** 
 349:Src/main.c    **** }
 112              		.loc 1 349 0
 113 0080 06B0     		add	sp, sp, #24
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 24
 116              		@ sp needed
 117 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 118              	.L4:
 119 0086 00BF     		.align	2
 120              	.L3:
 121 0088 00100240 		.word	1073876992
 122 008c 000C0140 		.word	1073810432
 123 0090 00080140 		.word	1073809408
 124              		.cfi_endproc
 125              	.LFE70:
 127              		.section	.text.MX_ADC1_Init,"ax",%progbits
 128              		.align	1
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu softvfp
 134              	MX_ADC1_Init:
 135              	.LFB68:
 193:Src/main.c    **** 
 136              		.loc 1 193 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 24
 143              		.cfi_offset 3, -24
 144              		.cfi_offset 4, -20
 145              		.cfi_offset 5, -16
 146              		.cfi_offset 6, -12
 147              		.cfi_offset 7, -8
 148              		.cfi_offset 14, -4
 206:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 149              		.loc 1 206 0
 150 0002 184D     		ldr	r5, .L7
 151 0004 184B     		ldr	r3, .L7+4
 152 0006 2B60     		str	r3, [r5]
 207:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 153              		.loc 1 207 0
 154 0008 0026     		movs	r6, #0
 155 000a AE60     		str	r6, [r5, #8]
 208:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 156              		.loc 1 208 0
 157 000c EE60     		str	r6, [r5, #12]
 209:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 158              		.loc 1 209 0
 159 000e 6E61     		str	r6, [r5, #20]
 210:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 160              		.loc 1 210 0
 161 0010 4FF46023 		mov	r3, #917504
ARM GAS  /tmp/cci6zRuO.s 			page 10


 162 0014 EB61     		str	r3, [r5, #28]
 211:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 163              		.loc 1 211 0
 164 0016 6E60     		str	r6, [r5, #4]
 212:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 165              		.loc 1 212 0
 166 0018 0427     		movs	r7, #4
 167 001a 2F61     		str	r7, [r5, #16]
 213:Src/main.c    ****   {
 168              		.loc 1 213 0
 169 001c 2846     		mov	r0, r5
 170 001e FFF7FEFF 		bl	HAL_ADC_Init
 171              	.LVL4:
 219:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 172              		.loc 1 219 0
 173 0022 124C     		ldr	r4, .L7+8
 174 0024 2660     		str	r6, [r4]
 220:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 175              		.loc 1 220 0
 176 0026 0126     		movs	r6, #1
 177 0028 6660     		str	r6, [r4, #4]
 221:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 178              		.loc 1 221 0
 179 002a A660     		str	r6, [r4, #8]
 222:Src/main.c    ****   {
 180              		.loc 1 222 0
 181 002c 2146     		mov	r1, r4
 182 002e 2846     		mov	r0, r5
 183 0030 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 184              	.LVL5:
 228:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 185              		.loc 1 228 0
 186 0034 2660     		str	r6, [r4]
 229:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 187              		.loc 1 229 0
 188 0036 0223     		movs	r3, #2
 189 0038 6360     		str	r3, [r4, #4]
 230:Src/main.c    ****   {
 190              		.loc 1 230 0
 191 003a 2146     		mov	r1, r4
 192 003c 2846     		mov	r0, r5
 193 003e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 194              	.LVL6:
 236:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 195              		.loc 1 236 0
 196 0042 0723     		movs	r3, #7
 197 0044 2360     		str	r3, [r4]
 237:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 198              		.loc 1 237 0
 199 0046 0323     		movs	r3, #3
 200 0048 6360     		str	r3, [r4, #4]
 238:Src/main.c    ****   {
 201              		.loc 1 238 0
 202 004a 2146     		mov	r1, r4
 203 004c 2846     		mov	r0, r5
 204 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 205              	.LVL7:
ARM GAS  /tmp/cci6zRuO.s 			page 11


 244:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 206              		.loc 1 244 0
 207 0052 0923     		movs	r3, #9
 208 0054 2360     		str	r3, [r4]
 245:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 209              		.loc 1 245 0
 210 0056 6760     		str	r7, [r4, #4]
 246:Src/main.c    ****   {
 211              		.loc 1 246 0
 212 0058 2146     		mov	r1, r4
 213 005a 2846     		mov	r0, r5
 214 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 215              	.LVL8:
 254:Src/main.c    **** 
 216              		.loc 1 254 0
 217 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 218              	.L8:
 219 0062 00BF     		.align	2
 220              	.L7:
 221 0064 00000000 		.word	hadc1
 222 0068 00240140 		.word	1073816576
 223 006c 00000000 		.word	.LANCHOR0
 224              		.cfi_endproc
 225              	.LFE68:
 227              		.section	.text.MX_CAN_Init,"ax",%progbits
 228              		.align	1
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu softvfp
 234              	MX_CAN_Init:
 235              	.LFB69:
 262:Src/main.c    **** 
 236              		.loc 1 262 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 40
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240 0000 70B5     		push	{r4, r5, r6, lr}
 241              	.LCFI4:
 242              		.cfi_def_cfa_offset 16
 243              		.cfi_offset 4, -16
 244              		.cfi_offset 5, -12
 245              		.cfi_offset 6, -8
 246              		.cfi_offset 14, -4
 247 0002 8AB0     		sub	sp, sp, #40
 248              	.LCFI5:
 249              		.cfi_def_cfa_offset 56
 271:Src/main.c    ****   hcan.Init.Prescaler = 2;
 250              		.loc 1 271 0
 251 0004 1A4D     		ldr	r5, .L11
 252 0006 1B4B     		ldr	r3, .L11+4
 253 0008 2B60     		str	r3, [r5]
 272:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 254              		.loc 1 272 0
 255 000a 0226     		movs	r6, #2
 256 000c 6E60     		str	r6, [r5, #4]
 273:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
ARM GAS  /tmp/cci6zRuO.s 			page 12


 257              		.loc 1 273 0
 258 000e 0024     		movs	r4, #0
 259 0010 AC60     		str	r4, [r5, #8]
 274:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 260              		.loc 1 274 0
 261 0012 EC60     		str	r4, [r5, #12]
 275:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 262              		.loc 1 275 0
 263 0014 4FF40033 		mov	r3, #131072
 264 0018 2B61     		str	r3, [r5, #16]
 276:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 265              		.loc 1 276 0
 266 001a 4FF44013 		mov	r3, #3145728
 267 001e 6B61     		str	r3, [r5, #20]
 277:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 268              		.loc 1 277 0
 269 0020 2C76     		strb	r4, [r5, #24]
 278:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 270              		.loc 1 278 0
 271 0022 6C76     		strb	r4, [r5, #25]
 279:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 272              		.loc 1 279 0
 273 0024 AC76     		strb	r4, [r5, #26]
 280:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 274              		.loc 1 280 0
 275 0026 EC76     		strb	r4, [r5, #27]
 281:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 276              		.loc 1 281 0
 277 0028 2C77     		strb	r4, [r5, #28]
 282:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 278              		.loc 1 282 0
 279 002a 6C77     		strb	r4, [r5, #29]
 283:Src/main.c    ****   {
 280              		.loc 1 283 0
 281 002c 2846     		mov	r0, r5
 282 002e FFF7FEFF 		bl	HAL_CAN_Init
 283              	.LVL9:
 288:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 284              		.loc 1 288 0
 285 0032 114B     		ldr	r3, .L11+8
 286 0034 0F22     		movs	r2, #15
 287 0036 1A60     		str	r2, [r3]
 289:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 288              		.loc 1 289 0
 289 0038 DC60     		str	r4, [r3, #12]
 290:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 290              		.loc 1 290 0
 291 003a 9C60     		str	r4, [r3, #8]
 291:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 292              		.loc 1 291 0
 293 003c 0422     		movs	r2, #4
 294 003e 1A61     		str	r2, [r3, #16]
 292:Src/main.c    **** 
 295              		.loc 1 292 0
 296 0040 1C75     		strb	r4, [r3, #20]
 294:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 297              		.loc 1 294 0
ARM GAS  /tmp/cci6zRuO.s 			page 13


 298 0042 0594     		str	r4, [sp, #20]
 295:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 299              		.loc 1 295 0
 300 0044 0694     		str	r4, [sp, #24]
 296:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 301              		.loc 1 296 0
 302 0046 0123     		movs	r3, #1
 303 0048 0793     		str	r3, [sp, #28]
 297:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 304              		.loc 1 297 0
 305 004a 0094     		str	r4, [sp]
 298:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 306              		.loc 1 298 0
 307 004c 0194     		str	r4, [sp, #4]
 299:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 308              		.loc 1 299 0
 309 004e 0294     		str	r4, [sp, #8]
 300:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 310              		.loc 1 300 0
 311 0050 0394     		str	r4, [sp, #12]
 301:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 312              		.loc 1 301 0
 313 0052 0494     		str	r4, [sp, #16]
 302:Src/main.c    **** 
 314              		.loc 1 302 0
 315 0054 0893     		str	r3, [sp, #32]
 304:Src/main.c    **** 
 316              		.loc 1 304 0
 317 0056 6946     		mov	r1, sp
 318 0058 2846     		mov	r0, r5
 319 005a FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 320              	.LVL10:
 306:Src/main.c    **** 
 321              		.loc 1 306 0
 322 005e 2846     		mov	r0, r5
 323 0060 FFF7FEFF 		bl	HAL_CAN_Start
 324              	.LVL11:
 308:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 325              		.loc 1 308 0
 326 0064 3146     		mov	r1, r6
 327 0066 2846     		mov	r0, r5
 328 0068 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 329              	.LVL12:
 311:Src/main.c    **** 
 330              		.loc 1 311 0
 331 006c 0AB0     		add	sp, sp, #40
 332              	.LCFI6:
 333              		.cfi_def_cfa_offset 16
 334              		@ sp needed
 335 006e 70BD     		pop	{r4, r5, r6, pc}
 336              	.L12:
 337              		.align	2
 338              	.L11:
 339 0070 00000000 		.word	hcan
 340 0074 00640040 		.word	1073767424
 341 0078 00000000 		.word	POT_TxHeader
 342              		.cfi_endproc
ARM GAS  /tmp/cci6zRuO.s 			page 14


 343              	.LFE69:
 345              		.section	.text.SystemClock_Config,"ax",%progbits
 346              		.align	1
 347              		.global	SystemClock_Config
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 351              		.fpu softvfp
 353              	SystemClock_Config:
 354              	.LFB67:
 151:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 355              		.loc 1 151 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 80
 358              		@ frame_needed = 0, uses_anonymous_args = 0
 359 0000 30B5     		push	{r4, r5, lr}
 360              	.LCFI7:
 361              		.cfi_def_cfa_offset 12
 362              		.cfi_offset 4, -12
 363              		.cfi_offset 5, -8
 364              		.cfi_offset 14, -4
 365 0002 95B0     		sub	sp, sp, #84
 366              	.LCFI8:
 367              		.cfi_def_cfa_offset 96
 152:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 368              		.loc 1 152 0
 369 0004 2422     		movs	r2, #36
 370 0006 0021     		movs	r1, #0
 371 0008 0BA8     		add	r0, sp, #44
 372 000a FFF7FEFF 		bl	memset
 373              	.LVL13:
 153:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 374              		.loc 1 153 0
 375 000e 0024     		movs	r4, #0
 376 0010 0594     		str	r4, [sp, #20]
 377 0012 0694     		str	r4, [sp, #24]
 378 0014 0794     		str	r4, [sp, #28]
 379 0016 0894     		str	r4, [sp, #32]
 380 0018 0994     		str	r4, [sp, #36]
 154:Src/main.c    **** 
 381              		.loc 1 154 0
 382 001a 0194     		str	r4, [sp, #4]
 383 001c 0294     		str	r4, [sp, #8]
 384 001e 0394     		str	r4, [sp, #12]
 385 0020 0494     		str	r4, [sp, #16]
 158:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 386              		.loc 1 158 0
 387 0022 0225     		movs	r5, #2
 388 0024 0A95     		str	r5, [sp, #40]
 159:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 389              		.loc 1 159 0
 390 0026 0123     		movs	r3, #1
 391 0028 0E93     		str	r3, [sp, #56]
 160:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 392              		.loc 1 160 0
 393 002a 1023     		movs	r3, #16
 394 002c 0F93     		str	r3, [sp, #60]
ARM GAS  /tmp/cci6zRuO.s 			page 15


 162:Src/main.c    ****   {
 395              		.loc 1 162 0
 396 002e 0AA8     		add	r0, sp, #40
 397 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 398              	.LVL14:
 168:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 399              		.loc 1 168 0
 400 0034 0F23     		movs	r3, #15
 401 0036 0593     		str	r3, [sp, #20]
 170:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 402              		.loc 1 170 0
 403 0038 0694     		str	r4, [sp, #24]
 171:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 404              		.loc 1 171 0
 405 003a 0794     		str	r4, [sp, #28]
 172:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 406              		.loc 1 172 0
 407 003c 0894     		str	r4, [sp, #32]
 173:Src/main.c    **** 
 408              		.loc 1 173 0
 409 003e 0994     		str	r4, [sp, #36]
 175:Src/main.c    ****   {
 410              		.loc 1 175 0
 411 0040 2146     		mov	r1, r4
 412 0042 05A8     		add	r0, sp, #20
 413 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 414              	.LVL15:
 179:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 415              		.loc 1 179 0
 416 0048 0195     		str	r5, [sp, #4]
 180:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 417              		.loc 1 180 0
 418 004a 0394     		str	r4, [sp, #12]
 181:Src/main.c    ****   {
 419              		.loc 1 181 0
 420 004c 01A8     		add	r0, sp, #4
 421 004e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 422              	.LVL16:
 185:Src/main.c    **** 
 423              		.loc 1 185 0
 424 0052 15B0     		add	sp, sp, #84
 425              	.LCFI9:
 426              		.cfi_def_cfa_offset 12
 427              		@ sp needed
 428 0054 30BD     		pop	{r4, r5, pc}
 429              		.cfi_endproc
 430              	.LFE67:
 432              		.section	.text.POT_read,"ax",%progbits
 433              		.align	1
 434              		.global	POT_read
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 438              		.fpu softvfp
 440              	POT_read:
 441              	.LFB71:
 350:Src/main.c    **** 
ARM GAS  /tmp/cci6zRuO.s 			page 16


 351:Src/main.c    **** 
 352:Src/main.c    **** 
 353:Src/main.c    **** /* USER CODE BEGIN 4 */
 354:Src/main.c    **** void POT_read(uint16_t pot_values[4]) {
 442              		.loc 1 354 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446              	.LVL17:
 447 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 448              	.LCFI10:
 449              		.cfi_def_cfa_offset 24
 450              		.cfi_offset 4, -24
 451              		.cfi_offset 5, -20
 452              		.cfi_offset 6, -16
 453              		.cfi_offset 7, -12
 454              		.cfi_offset 8, -8
 455              		.cfi_offset 14, -4
 456 0004 0746     		mov	r7, r0
 355:Src/main.c    **** 	//0 1 7 9
 356:Src/main.c    **** 
 357:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_0;
 457              		.loc 1 357 0
 458 0006 334D     		ldr	r5, .L17
 459 0008 0023     		movs	r3, #0
 460 000a 2B60     		str	r3, [r5]
 358:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 461              		.loc 1 358 0
 462 000c 0126     		movs	r6, #1
 463 000e 6E60     		str	r6, [r5, #4]
 359:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 464              		.loc 1 359 0
 465 0010 4FF00608 		mov	r8, #6
 466 0014 C5F80880 		str	r8, [r5, #8]
 360:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 467              		.loc 1 360 0
 468 0018 2F4C     		ldr	r4, .L17+4
 469 001a 2946     		mov	r1, r5
 470 001c 2046     		mov	r0, r4
 471              	.LVL18:
 472 001e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 473              	.LVL19:
 361:Src/main.c    **** 
 362:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 474              		.loc 1 362 0
 475 0022 2046     		mov	r0, r4
 476 0024 FFF7FEFF 		bl	HAL_ADC_Start
 477              	.LVL20:
 363:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);		//change timeout to a HAL define
 478              		.loc 1 363 0
 479 0028 4FF47A71 		mov	r1, #1000
 480 002c 2046     		mov	r0, r4
 481 002e FFF7FEFF 		bl	HAL_ADC_PollForConversion
 482              	.LVL21:
 364:Src/main.c    **** 	pot_values[0] = HAL_ADC_GetValue(&hadc1);
 483              		.loc 1 364 0
 484 0032 2046     		mov	r0, r4
ARM GAS  /tmp/cci6zRuO.s 			page 17


 485 0034 FFF7FEFF 		bl	HAL_ADC_GetValue
 486              	.LVL22:
 487 0038 3880     		strh	r0, [r7]	@ movhi
 365:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 488              		.loc 1 365 0
 489 003a 2046     		mov	r0, r4
 490 003c FFF7FEFF 		bl	HAL_ADC_Stop
 491              	.LVL23:
 366:Src/main.c    **** 
 367:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_1;
 492              		.loc 1 367 0
 493 0040 2E60     		str	r6, [r5]
 368:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 494              		.loc 1 368 0
 495 0042 6E60     		str	r6, [r5, #4]
 369:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 496              		.loc 1 369 0
 497 0044 C5F80880 		str	r8, [r5, #8]
 370:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 498              		.loc 1 370 0
 499 0048 2946     		mov	r1, r5
 500 004a 2046     		mov	r0, r4
 501 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 502              	.LVL24:
 371:Src/main.c    **** 
 372:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 503              		.loc 1 372 0
 504 0050 2046     		mov	r0, r4
 505 0052 FFF7FEFF 		bl	HAL_ADC_Start
 506              	.LVL25:
 373:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 507              		.loc 1 373 0
 508 0056 4FF47A71 		mov	r1, #1000
 509 005a 2046     		mov	r0, r4
 510 005c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 511              	.LVL26:
 374:Src/main.c    **** 	pot_values[1] = HAL_ADC_GetValue(&hadc1);
 512              		.loc 1 374 0
 513 0060 2046     		mov	r0, r4
 514 0062 FFF7FEFF 		bl	HAL_ADC_GetValue
 515              	.LVL27:
 516 0066 7880     		strh	r0, [r7, #2]	@ movhi
 375:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 517              		.loc 1 375 0
 518 0068 2046     		mov	r0, r4
 519 006a FFF7FEFF 		bl	HAL_ADC_Stop
 520              	.LVL28:
 376:Src/main.c    **** 
 377:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_7;
 521              		.loc 1 377 0
 522 006e 0723     		movs	r3, #7
 523 0070 2B60     		str	r3, [r5]
 378:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 524              		.loc 1 378 0
 525 0072 6E60     		str	r6, [r5, #4]
 379:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 526              		.loc 1 379 0
ARM GAS  /tmp/cci6zRuO.s 			page 18


 527 0074 C5F80880 		str	r8, [r5, #8]
 380:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 528              		.loc 1 380 0
 529 0078 2946     		mov	r1, r5
 530 007a 2046     		mov	r0, r4
 531 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 532              	.LVL29:
 381:Src/main.c    **** 
 382:Src/main.c    **** 
 383:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 533              		.loc 1 383 0
 534 0080 2046     		mov	r0, r4
 535 0082 FFF7FEFF 		bl	HAL_ADC_Start
 536              	.LVL30:
 384:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 537              		.loc 1 384 0
 538 0086 4FF47A71 		mov	r1, #1000
 539 008a 2046     		mov	r0, r4
 540 008c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 541              	.LVL31:
 385:Src/main.c    **** 	pot_values[2] = HAL_ADC_GetValue(&hadc1);
 542              		.loc 1 385 0
 543 0090 2046     		mov	r0, r4
 544 0092 FFF7FEFF 		bl	HAL_ADC_GetValue
 545              	.LVL32:
 546 0096 B880     		strh	r0, [r7, #4]	@ movhi
 386:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 547              		.loc 1 386 0
 548 0098 2046     		mov	r0, r4
 549 009a FFF7FEFF 		bl	HAL_ADC_Stop
 550              	.LVL33:
 387:Src/main.c    **** 
 388:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_9;
 551              		.loc 1 388 0
 552 009e 0923     		movs	r3, #9
 553 00a0 2B60     		str	r3, [r5]
 389:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 554              		.loc 1 389 0
 555 00a2 6E60     		str	r6, [r5, #4]
 390:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 556              		.loc 1 390 0
 557 00a4 C5F80880 		str	r8, [r5, #8]
 391:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 558              		.loc 1 391 0
 559 00a8 2946     		mov	r1, r5
 560 00aa 2046     		mov	r0, r4
 561 00ac FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 562              	.LVL34:
 392:Src/main.c    **** 
 393:Src/main.c    **** 
 394:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 563              		.loc 1 394 0
 564 00b0 2046     		mov	r0, r4
 565 00b2 FFF7FEFF 		bl	HAL_ADC_Start
 566              	.LVL35:
 395:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 567              		.loc 1 395 0
ARM GAS  /tmp/cci6zRuO.s 			page 19


 568 00b6 4FF47A71 		mov	r1, #1000
 569 00ba 2046     		mov	r0, r4
 570 00bc FFF7FEFF 		bl	HAL_ADC_PollForConversion
 571              	.LVL36:
 396:Src/main.c    **** 	pot_values[3] = HAL_ADC_GetValue(&hadc1);
 572              		.loc 1 396 0
 573 00c0 2046     		mov	r0, r4
 574 00c2 FFF7FEFF 		bl	HAL_ADC_GetValue
 575              	.LVL37:
 576 00c6 F880     		strh	r0, [r7, #6]	@ movhi
 397:Src/main.c    **** 
 398:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 577              		.loc 1 398 0
 578 00c8 2046     		mov	r0, r4
 579 00ca FFF7FEFF 		bl	HAL_ADC_Stop
 580              	.LVL38:
 399:Src/main.c    **** 
 400:Src/main.c    **** }
 581              		.loc 1 400 0
 582 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 583              	.LVL39:
 584              	.L18:
 585 00d2 00BF     		.align	2
 586              	.L17:
 587 00d4 00000000 		.word	.LANCHOR0
 588 00d8 00000000 		.word	hadc1
 589              		.cfi_endproc
 590              	.LFE71:
 592              		.section	.text.POT_interpret,"ax",%progbits
 593              		.align	1
 594              		.global	POT_interpret
 595              		.syntax unified
 596              		.thumb
 597              		.thumb_func
 598              		.fpu softvfp
 600              	POT_interpret:
 601              	.LFB72:
 401:Src/main.c    **** 
 402:Src/main.c    **** void POT_interpret(uint16_t pot_values[4]) {
 602              		.loc 1 402 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 8
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606              	.LVL40:
 607 0000 30B5     		push	{r4, r5, lr}
 608              	.LCFI11:
 609              		.cfi_def_cfa_offset 12
 610              		.cfi_offset 4, -12
 611              		.cfi_offset 5, -8
 612              		.cfi_offset 14, -4
 613 0002 83B0     		sub	sp, sp, #12
 614              	.LCFI12:
 615              		.cfi_def_cfa_offset 24
 616              	.LVL41:
 403:Src/main.c    **** 
 404:Src/main.c    **** 	uint8_t pot_pos[4];
 405:Src/main.c    **** 	uint8_t i, j;
ARM GAS  /tmp/cci6zRuO.s 			page 20


 406:Src/main.c    **** 
 407:Src/main.c    **** 	for (i = 0; i < 4; i++) {
 617              		.loc 1 407 0
 618 0004 0024     		movs	r4, #0
 619 0006 1FE0     		b	.L20
 620              	.LVL42:
 621              	.L21:
 408:Src/main.c    **** 
 409:Src/main.c    **** 		for (j = 0; j < 10; j++) {
 622              		.loc 1 409 0 discriminator 2
 623 0008 0133     		adds	r3, r3, #1
 624              	.LVL43:
 625 000a DBB2     		uxtb	r3, r3
 626              	.LVL44:
 627              	.L23:
 628              		.loc 1 409 0 is_stmt 0 discriminator 1
 629 000c 092B     		cmp	r3, #9
 630 000e 13D8     		bhi	.L34
 410:Src/main.c    **** 
 411:Src/main.c    **** 			//uint16_t pot_threshold[12] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
 412:Src/main.c    **** 			if ((pot_values[i] > pot_threshold[j]) && (pot_values[i] <= pot_threshold[j + 1]))
 631              		.loc 1 412 0 is_stmt 1
 632 0010 30F81420 		ldrh	r2, [r0, r4, lsl #1]
 633 0014 2E49     		ldr	r1, .L37
 634 0016 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 635 001a 8A42     		cmp	r2, r1
 636 001c F4D9     		bls	.L21
 637              		.loc 1 412 0 is_stmt 0 discriminator 1
 638 001e 591C     		adds	r1, r3, #1
 639 0020 2B4D     		ldr	r5, .L37
 640 0022 35F81110 		ldrh	r1, [r5, r1, lsl #1]
 641 0026 8A42     		cmp	r2, r1
 642 0028 EED8     		bhi	.L21
 413:Src/main.c    **** 				pot_pos[i] = 10 - (j + 1); // pot_pos[i] = 0 is ~3.3V, pot_pos[i] = 1 is ~3V, etc.
 643              		.loc 1 413 0 is_stmt 1
 644 002a C3F10902 		rsb	r2, r3, #9
 645 002e 02A9     		add	r1, sp, #8
 646 0030 2144     		add	r1, r1, r4
 647 0032 01F8042C 		strb	r2, [r1, #-4]
 648 0036 E7E7     		b	.L21
 649              	.L34:
 414:Src/main.c    **** 			}
 415:Src/main.c    **** 
 416:Src/main.c    **** 		POT_data[i] = pot_pos[i];
 650              		.loc 1 416 0 discriminator 2
 651 0038 02AB     		add	r3, sp, #8
 652              	.LVL45:
 653 003a 2344     		add	r3, r3, r4
 654 003c 13F8042C 		ldrb	r2, [r3, #-4]	@ zero_extendqisi2
 655 0040 244B     		ldr	r3, .L37+4
 656 0042 1A55     		strb	r2, [r3, r4]
 407:Src/main.c    **** 
 657              		.loc 1 407 0 discriminator 2
 658 0044 0134     		adds	r4, r4, #1
 659              	.LVL46:
 660 0046 E4B2     		uxtb	r4, r4
 661              	.LVL47:
ARM GAS  /tmp/cci6zRuO.s 			page 21


 662              	.L20:
 407:Src/main.c    **** 
 663              		.loc 1 407 0 is_stmt 0 discriminator 1
 664 0048 032C     		cmp	r4, #3
 665 004a 01D8     		bhi	.L35
 409:Src/main.c    **** 
 666              		.loc 1 409 0 is_stmt 1
 667 004c 0023     		movs	r3, #0
 668 004e DDE7     		b	.L23
 669              	.L35:
 417:Src/main.c    **** 		//POT_data[0] = 0x00;
 418:Src/main.c    **** 
 419:Src/main.c    **** 	}
 420:Src/main.c    **** 
 421:Src/main.c    **** 
 422:Src/main.c    **** 	if (pot_pos[0] != 0) // if CURRENT_POT is in any position other than first, turn on CUR_LED
 670              		.loc 1 422 0
 671 0050 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 672 0054 0BB3     		cbz	r3, .L24
 423:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_SET);
 673              		.loc 1 423 0
 674 0056 0122     		movs	r2, #1
 675 0058 4FF48071 		mov	r1, #256
 676 005c 1E48     		ldr	r0, .L37+8
 677              	.LVL48:
 678 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 679              	.LVL49:
 680              	.L25:
 424:Src/main.c    ****   else
 425:Src/main.c    ****   	HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_RESET);
 426:Src/main.c    **** 
 427:Src/main.c    **** 	if (pot_pos[1] != 0) // if CUSTOM_POT is in any position other than first, turn on CUST_LED
 681              		.loc 1 427 0
 682 0062 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 683 0066 FBB1     		cbz	r3, .L26
 428:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_SET);
 684              		.loc 1 428 0
 685 0068 0122     		movs	r2, #1
 686 006a 0821     		movs	r1, #8
 687 006c 1B48     		ldr	r0, .L37+12
 688 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 689              	.LVL50:
 690              	.L27:
 429:Src/main.c    **** 	else
 430:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_RESET);
 431:Src/main.c    **** 
 432:Src/main.c    **** 	if (pot_pos[2] != 0) // if TC_POT is in any position other than first, turn on TC_LED
 691              		.loc 1 432 0
 692 0072 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 693 0076 EBB1     		cbz	r3, .L28
 433:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_SET);
 694              		.loc 1 433 0
 695 0078 0122     		movs	r2, #1
 696 007a 4FF40071 		mov	r1, #512
 697 007e 1748     		ldr	r0, .L37+12
 698 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 699              	.LVL51:
ARM GAS  /tmp/cci6zRuO.s 			page 22


 700              	.L29:
 434:Src/main.c    **** 	else
 435:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_RESET);
 436:Src/main.c    **** 
 437:Src/main.c    **** 	if (pot_pos[3] != 0) // if DRS_POT is in any position other than first, turn on DRS_LED
 701              		.loc 1 437 0
 702 0084 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 703 0088 DBB9     		cbnz	r3, .L36
 438:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_SET);
 439:Src/main.c    **** 	else
 440:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_RESET);
 704              		.loc 1 440 0
 705 008a 0022     		movs	r2, #0
 706 008c 4FF48071 		mov	r1, #256
 707 0090 1248     		ldr	r0, .L37+12
 708 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 709              	.LVL52:
 710              	.L19:
 441:Src/main.c    **** 
 442:Src/main.c    **** }
 711              		.loc 1 442 0
 712 0096 03B0     		add	sp, sp, #12
 713              	.LCFI13:
 714              		.cfi_remember_state
 715              		.cfi_def_cfa_offset 12
 716              		@ sp needed
 717 0098 30BD     		pop	{r4, r5, pc}
 718              	.LVL53:
 719              	.L24:
 720              	.LCFI14:
 721              		.cfi_restore_state
 425:Src/main.c    **** 
 722              		.loc 1 425 0
 723 009a 0022     		movs	r2, #0
 724 009c 4FF48071 		mov	r1, #256
 725 00a0 0D48     		ldr	r0, .L37+8
 726              	.LVL54:
 727 00a2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 728              	.LVL55:
 729 00a6 DCE7     		b	.L25
 730              	.L26:
 430:Src/main.c    **** 
 731              		.loc 1 430 0
 732 00a8 0022     		movs	r2, #0
 733 00aa 0821     		movs	r1, #8
 734 00ac 0B48     		ldr	r0, .L37+12
 735 00ae FFF7FEFF 		bl	HAL_GPIO_WritePin
 736              	.LVL56:
 737 00b2 DEE7     		b	.L27
 738              	.L28:
 435:Src/main.c    **** 
 739              		.loc 1 435 0
 740 00b4 0022     		movs	r2, #0
 741 00b6 4FF40071 		mov	r1, #512
 742 00ba 0848     		ldr	r0, .L37+12
 743 00bc FFF7FEFF 		bl	HAL_GPIO_WritePin
 744              	.LVL57:
ARM GAS  /tmp/cci6zRuO.s 			page 23


 745 00c0 E0E7     		b	.L29
 746              	.L36:
 438:Src/main.c    **** 	else
 747              		.loc 1 438 0
 748 00c2 0122     		movs	r2, #1
 749 00c4 4FF48071 		mov	r1, #256
 750 00c8 0448     		ldr	r0, .L37+12
 751 00ca FFF7FEFF 		bl	HAL_GPIO_WritePin
 752              	.LVL58:
 753 00ce E2E7     		b	.L19
 754              	.L38:
 755              		.align	2
 756              	.L37:
 757 00d0 00000000 		.word	.LANCHOR1
 758 00d4 00000000 		.word	POT_data
 759 00d8 000C0140 		.word	1073810432
 760 00dc 00080140 		.word	1073809408
 761              		.cfi_endproc
 762              	.LFE72:
 764              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 765              		.align	1
 766              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 767              		.syntax unified
 768              		.thumb
 769              		.thumb_func
 770              		.fpu softvfp
 772              	HAL_CAN_RxFifo0MsgPendingCallback:
 773              	.LFB73:
 443:Src/main.c    **** 
 444:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
 445:Src/main.c    **** {
 774              		.loc 1 445 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 778              	.LVL59:
 779 0000 08B5     		push	{r3, lr}
 780              	.LCFI15:
 781              		.cfi_def_cfa_offset 8
 782              		.cfi_offset 3, -8
 783              		.cfi_offset 14, -4
 446:Src/main.c    ****   if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 784              		.loc 1 446 0
 785 0002 054B     		ldr	r3, .L42
 786 0004 054A     		ldr	r2, .L42+4
 787 0006 0021     		movs	r1, #0
 788 0008 0548     		ldr	r0, .L42+8
 789              	.LVL60:
 790 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 791              	.LVL61:
 792 000e 10B9     		cbnz	r0, .L39
 447:Src/main.c    **** 	  CAN_flag = 0xFF;
 793              		.loc 1 447 0
 794 0010 044B     		ldr	r3, .L42+12
 795 0012 FF22     		movs	r2, #255
 796 0014 1A70     		strb	r2, [r3]
 797              	.L39:
ARM GAS  /tmp/cci6zRuO.s 			page 24


 448:Src/main.c    **** }
 798              		.loc 1 448 0
 799 0016 08BD     		pop	{r3, pc}
 800              	.L43:
 801              		.align	2
 802              	.L42:
 803 0018 00000000 		.word	RxData
 804 001c 00000000 		.word	RxHeader
 805 0020 00000000 		.word	hcan
 806 0024 00000000 		.word	CAN_flag
 807              		.cfi_endproc
 808              	.LFE73:
 810              		.section	.text.CAN_interpret,"ax",%progbits
 811              		.align	1
 812              		.global	CAN_interpret
 813              		.syntax unified
 814              		.thumb
 815              		.thumb_func
 816              		.fpu softvfp
 818              	CAN_interpret:
 819              	.LFB74:
 449:Src/main.c    **** 
 450:Src/main.c    **** void CAN_interpret(void) {
 820              		.loc 1 450 0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824 0000 70B5     		push	{r4, r5, r6, lr}
 825              	.LCFI16:
 826              		.cfi_def_cfa_offset 16
 827              		.cfi_offset 4, -16
 828              		.cfi_offset 5, -12
 829              		.cfi_offset 6, -8
 830              		.cfi_offset 14, -4
 451:Src/main.c    **** 
 452:Src/main.c    **** 	uint16_t received_ID;
 453:Src/main.c    **** 	received_ID = RxHeader.StdId;
 831              		.loc 1 453 0
 832 0002 394B     		ldr	r3, .L64
 833 0004 1C88     		ldrh	r4, [r3]
 834              	.LVL62:
 454:Src/main.c    **** 
 455:Src/main.c    **** 	if (received_ID == FAULTS) {
 835              		.loc 1 455 0
 836 0006 D02C     		cmp	r4, #208
 837 0008 05D0     		beq	.L55
 838              	.L45:
 456:Src/main.c    **** 
 457:Src/main.c    **** 		uint8_t BMS_fault;
 458:Src/main.c    **** 		uint8_t IMD_fault;
 459:Src/main.c    **** 		uint8_t BSPD_fault;
 460:Src/main.c    **** 		bool any_fault;
 461:Src/main.c    **** 
 462:Src/main.c    **** 		BMS_fault = RxData[0];
 463:Src/main.c    **** 		IMD_fault = RxData[1];
 464:Src/main.c    **** 		BSPD_fault = RxData[2];
 465:Src/main.c    **** 
ARM GAS  /tmp/cci6zRuO.s 			page 25


 466:Src/main.c    **** 		if (BMS_fault == 0xFF) {
 467:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 468:Src/main.c    **** 			any_fault = true;
 469:Src/main.c    **** 		}
 470:Src/main.c    **** 		else if (BMS_fault == 0x00)
 471:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 472:Src/main.c    **** 
 473:Src/main.c    **** 		if (IMD_fault == 0xFF) {
 474:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 475:Src/main.c    **** 			any_fault = true;
 476:Src/main.c    **** 		}
 477:Src/main.c    **** 		else if (IMD_fault == 0x00)
 478:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 479:Src/main.c    **** 
 480:Src/main.c    **** 		if (BSPD_fault == 0xFF) {
 481:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 482:Src/main.c    **** 			any_fault = true;
 483:Src/main.c    **** 		}
 484:Src/main.c    **** 		else if (BSPD_fault == 0x00)
 485:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 486:Src/main.c    **** 
 487:Src/main.c    **** 		if (any_fault == true) {
 488:Src/main.c    **** 			// if there is any fault
 489:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 490:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 491:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 492:Src/main.c    **** 			any_fault = false;
 493:Src/main.c    **** 		}
 494:Src/main.c    **** 
 495:Src/main.c    **** 	}
 496:Src/main.c    **** 
 497:Src/main.c    **** 	if (received_ID == PRECHARGE) {
 839              		.loc 1 497 0
 840 000a D12C     		cmp	r4, #209
 841 000c 44D0     		beq	.L56
 842              	.LVL63:
 843              	.L52:
 498:Src/main.c    **** 
 499:Src/main.c    **** 		uint8_t Precharge_state;
 500:Src/main.c    **** 		Precharge_state = RxData[0];
 501:Src/main.c    **** 
 502:Src/main.c    **** 		if (Precharge_state == 0xFF) {
 503:Src/main.c    **** 			// if precharge is complete
 504:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED green
 505:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 506:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 507:Src/main.c    **** 		}
 508:Src/main.c    **** 
 509:Src/main.c    **** 		if (Precharge_state == 0x00) {
 510:Src/main.c    **** 			// if precharge is not complete
 511:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 512:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 513:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 514:Src/main.c    **** 
 515:Src/main.c    **** 		}
 516:Src/main.c    **** 
 517:Src/main.c    **** 	}
ARM GAS  /tmp/cci6zRuO.s 			page 26


 518:Src/main.c    **** 
 519:Src/main.c    **** 	CAN_flag = 0x00;
 844              		.loc 1 519 0
 845 000e 374B     		ldr	r3, .L64+4
 846 0010 0022     		movs	r2, #0
 847 0012 1A70     		strb	r2, [r3]
 520:Src/main.c    **** 
 521:Src/main.c    **** }
 848              		.loc 1 521 0
 849 0014 70BD     		pop	{r4, r5, r6, pc}
 850              	.LVL64:
 851              	.L55:
 852              	.LBB4:
 462:Src/main.c    **** 		IMD_fault = RxData[1];
 853              		.loc 1 462 0
 854 0016 364B     		ldr	r3, .L64+8
 855 0018 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 856              	.LVL65:
 463:Src/main.c    **** 		BSPD_fault = RxData[2];
 857              		.loc 1 463 0
 858 001a 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 859              	.LVL66:
 464:Src/main.c    **** 
 860              		.loc 1 464 0
 861 001c 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 862              	.LVL67:
 466:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 863              		.loc 1 466 0
 864 001e FF2A     		cmp	r2, #255
 865 0020 17D0     		beq	.L57
 470:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 866              		.loc 1 470 0
 867 0022 E2B1     		cbz	r2, .L58
 868              	.LVL68:
 869              	.L47:
 473:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 870              		.loc 1 473 0
 871 0024 FF2E     		cmp	r6, #255
 872 0026 1FD0     		beq	.L59
 477:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 873              		.loc 1 477 0
 874 0028 26B3     		cbz	r6, .L60
 875              	.L49:
 480:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 876              		.loc 1 480 0
 877 002a FF2D     		cmp	r5, #255
 878 002c 28D0     		beq	.L61
 484:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 879              		.loc 1 484 0
 880 002e 6DB3     		cbz	r5, .L62
 881              	.L51:
 489:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 882              		.loc 1 489 0
 883 0030 304D     		ldr	r5, .L64+12
 884              	.LVL69:
 885 0032 0022     		movs	r2, #0
 886 0034 2021     		movs	r1, #32
ARM GAS  /tmp/cci6zRuO.s 			page 27


 887 0036 2846     		mov	r0, r5
 888 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
 889              	.LVL70:
 490:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 890              		.loc 1 490 0
 891 003c 0122     		movs	r2, #1
 892 003e 4021     		movs	r1, #64
 893 0040 2846     		mov	r0, r5
 894 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 895              	.LVL71:
 491:Src/main.c    **** 			any_fault = false;
 896              		.loc 1 491 0
 897 0046 0022     		movs	r2, #0
 898 0048 8021     		movs	r1, #128
 899 004a 2846     		mov	r0, r5
 900 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 901              	.LVL72:
 902 0050 DBE7     		b	.L45
 903              	.LVL73:
 904              	.L57:
 467:Src/main.c    **** 			any_fault = true;
 905              		.loc 1 467 0
 906 0052 0122     		movs	r2, #1
 907              	.LVL74:
 908 0054 1021     		movs	r1, #16
 909 0056 2848     		ldr	r0, .L64+16
 910 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 911              	.LVL75:
 912 005c E2E7     		b	.L47
 913              	.LVL76:
 914              	.L58:
 471:Src/main.c    **** 
 915              		.loc 1 471 0
 916 005e 1021     		movs	r1, #16
 917 0060 2548     		ldr	r0, .L64+16
 918 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 919              	.LVL77:
 920 0066 DDE7     		b	.L47
 921              	.LVL78:
 922              	.L59:
 474:Src/main.c    **** 			any_fault = true;
 923              		.loc 1 474 0
 924 0068 0122     		movs	r2, #1
 925 006a 2021     		movs	r1, #32
 926 006c 2248     		ldr	r0, .L64+16
 927 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 928              	.LVL79:
 929 0072 DAE7     		b	.L49
 930              	.L60:
 478:Src/main.c    **** 
 931              		.loc 1 478 0
 932 0074 0022     		movs	r2, #0
 933 0076 2021     		movs	r1, #32
 934 0078 1F48     		ldr	r0, .L64+16
 935 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 936              	.LVL80:
 937 007e D4E7     		b	.L49
ARM GAS  /tmp/cci6zRuO.s 			page 28


 938              	.L61:
 481:Src/main.c    **** 			any_fault = true;
 939              		.loc 1 481 0
 940 0080 0122     		movs	r2, #1
 941 0082 4021     		movs	r1, #64
 942 0084 1C48     		ldr	r0, .L64+16
 943 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 944              	.LVL81:
 945 008a D1E7     		b	.L51
 946              	.L62:
 485:Src/main.c    **** 
 947              		.loc 1 485 0
 948 008c 0022     		movs	r2, #0
 949 008e 4021     		movs	r1, #64
 950 0090 1948     		ldr	r0, .L64+16
 951 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 952              	.LVL82:
 953 0096 CBE7     		b	.L51
 954              	.LVL83:
 955              	.L56:
 956              	.LBE4:
 957              	.LBB5:
 500:Src/main.c    **** 
 958              		.loc 1 500 0
 959 0098 154B     		ldr	r3, .L64+8
 960 009a 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 961              	.LVL84:
 502:Src/main.c    **** 			// if precharge is complete
 962              		.loc 1 502 0
 963 009c FF2C     		cmp	r4, #255
 964 009e 12D0     		beq	.L63
 965              	.L53:
 509:Src/main.c    **** 			// if precharge is not complete
 966              		.loc 1 509 0
 967 00a0 002C     		cmp	r4, #0
 968 00a2 B4D1     		bne	.L52
 511:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 969              		.loc 1 511 0
 970 00a4 134C     		ldr	r4, .L64+12
 971              	.LVL85:
 972 00a6 0022     		movs	r2, #0
 973 00a8 2021     		movs	r1, #32
 974 00aa 2046     		mov	r0, r4
 975 00ac FFF7FEFF 		bl	HAL_GPIO_WritePin
 976              	.LVL86:
 512:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 977              		.loc 1 512 0
 978 00b0 0022     		movs	r2, #0
 979 00b2 4021     		movs	r1, #64
 980 00b4 2046     		mov	r0, r4
 981 00b6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 982              	.LVL87:
 513:Src/main.c    **** 
 983              		.loc 1 513 0
 984 00ba 0122     		movs	r2, #1
 985 00bc 8021     		movs	r1, #128
 986 00be 2046     		mov	r0, r4
ARM GAS  /tmp/cci6zRuO.s 			page 29


 987 00c0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 988              	.LVL88:
 989 00c4 A3E7     		b	.L52
 990              	.LVL89:
 991              	.L63:
 504:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 992              		.loc 1 504 0
 993 00c6 0B4D     		ldr	r5, .L64+12
 994 00c8 0122     		movs	r2, #1
 995 00ca 2021     		movs	r1, #32
 996 00cc 2846     		mov	r0, r5
 997 00ce FFF7FEFF 		bl	HAL_GPIO_WritePin
 998              	.LVL90:
 505:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 999              		.loc 1 505 0
 1000 00d2 0022     		movs	r2, #0
 1001 00d4 4021     		movs	r1, #64
 1002 00d6 2846     		mov	r0, r5
 1003 00d8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1004              	.LVL91:
 506:Src/main.c    **** 		}
 1005              		.loc 1 506 0
 1006 00dc 0022     		movs	r2, #0
 1007 00de 8021     		movs	r1, #128
 1008 00e0 2846     		mov	r0, r5
 1009 00e2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1010              	.LVL92:
 1011 00e6 DBE7     		b	.L53
 1012              	.L65:
 1013              		.align	2
 1014              	.L64:
 1015 00e8 00000000 		.word	RxHeader
 1016 00ec 00000000 		.word	CAN_flag
 1017 00f0 00000000 		.word	RxData
 1018 00f4 000C0140 		.word	1073810432
 1019 00f8 00080140 		.word	1073809408
 1020              	.LBE5:
 1021              		.cfi_endproc
 1022              	.LFE74:
 1024              		.section	.text.main,"ax",%progbits
 1025              		.align	1
 1026              		.global	main
 1027              		.syntax unified
 1028              		.thumb
 1029              		.thumb_func
 1030              		.fpu softvfp
 1032              	main:
 1033              	.LFB66:
  89:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1034              		.loc 1 89 0
 1035              		.cfi_startproc
 1036              		@ Volatile: function does not return.
 1037              		@ args = 0, pretend = 0, frame = 8
 1038              		@ frame_needed = 0, uses_anonymous_args = 0
 1039 0000 00B5     		push	{lr}
 1040              	.LCFI17:
 1041              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cci6zRuO.s 			page 30


 1042              		.cfi_offset 14, -4
 1043 0002 83B0     		sub	sp, sp, #12
 1044              	.LCFI18:
 1045              		.cfi_def_cfa_offset 16
  97:Src/main.c    **** 
 1046              		.loc 1 97 0
 1047 0004 FFF7FEFF 		bl	HAL_Init
 1048              	.LVL93:
 104:Src/main.c    **** 
 1049              		.loc 1 104 0
 1050 0008 FFF7FEFF 		bl	SystemClock_Config
 1051              	.LVL94:
 111:Src/main.c    ****   MX_ADC1_Init();
 1052              		.loc 1 111 0
 1053 000c FFF7FEFF 		bl	MX_GPIO_Init
 1054              	.LVL95:
 112:Src/main.c    ****   MX_CAN_Init();
 1055              		.loc 1 112 0
 1056 0010 FFF7FEFF 		bl	MX_ADC1_Init
 1057              	.LVL96:
 113:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1058              		.loc 1 113 0
 1059 0014 FFF7FEFF 		bl	MX_CAN_Init
 1060              	.LVL97:
 1061 0018 0FE0     		b	.L68
 1062              	.L67:
 1063              	.LBB6:
 132:Src/main.c    **** 	POT_interpret(pot_position);
 1064              		.loc 1 132 0
 1065 001a 6846     		mov	r0, sp
 1066 001c FFF7FEFF 		bl	POT_read
 1067              	.LVL98:
 133:Src/main.c    **** 
 1068              		.loc 1 133 0
 1069 0020 6846     		mov	r0, sp
 1070 0022 FFF7FEFF 		bl	POT_interpret
 1071              	.LVL99:
 136:Src/main.c    **** 
 1072              		.loc 1 136 0
 1073 0026 094B     		ldr	r3, .L70
 1074 0028 094A     		ldr	r2, .L70+4
 1075 002a 0A49     		ldr	r1, .L70+8
 1076 002c 0A48     		ldr	r0, .L70+12
 1077 002e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1078              	.LVL100:
 139:Src/main.c    **** 
 1079              		.loc 1 139 0
 1080 0032 4FF47A70 		mov	r0, #1000
 1081 0036 FFF7FEFF 		bl	HAL_Delay
 1082              	.LVL101:
 1083              	.L68:
 126:Src/main.c    **** 		CAN_interpret();
 1084              		.loc 1 126 0
 1085 003a 084B     		ldr	r3, .L70+16
 1086 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1087 003e DBB2     		uxtb	r3, r3
 1088 0040 FF2B     		cmp	r3, #255
ARM GAS  /tmp/cci6zRuO.s 			page 31


 1089 0042 EAD1     		bne	.L67
 127:Src/main.c    **** 
 1090              		.loc 1 127 0
 1091 0044 FFF7FEFF 		bl	CAN_interpret
 1092              	.LVL102:
 1093 0048 E7E7     		b	.L67
 1094              	.L71:
 1095 004a 00BF     		.align	2
 1096              	.L70:
 1097 004c 00000000 		.word	TxMailbox
 1098 0050 00000000 		.word	POT_data
 1099 0054 00000000 		.word	POT_TxHeader
 1100 0058 00000000 		.word	hcan
 1101 005c 00000000 		.word	CAN_flag
 1102              	.LBE6:
 1103              		.cfi_endproc
 1104              	.LFE66:
 1106              		.section	.text.Error_Handler,"ax",%progbits
 1107              		.align	1
 1108              		.global	Error_Handler
 1109              		.syntax unified
 1110              		.thumb
 1111              		.thumb_func
 1112              		.fpu softvfp
 1114              	Error_Handler:
 1115              	.LFB75:
 522:Src/main.c    **** /* USER CODE END 4 */
 523:Src/main.c    **** 
 524:Src/main.c    **** /**
 525:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 526:Src/main.c    ****   * @retval None
 527:Src/main.c    ****   */
 528:Src/main.c    **** void Error_Handler(void)
 529:Src/main.c    **** {
 1116              		.loc 1 529 0
 1117              		.cfi_startproc
 1118              		@ args = 0, pretend = 0, frame = 0
 1119              		@ frame_needed = 0, uses_anonymous_args = 0
 1120              		@ link register save eliminated.
 530:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 531:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 532:Src/main.c    **** 
 533:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 534:Src/main.c    **** }
 1121              		.loc 1 534 0
 1122 0000 7047     		bx	lr
 1123              		.cfi_endproc
 1124              	.LFE75:
 1126              		.global	pot_threshold
 1127              		.comm	CAN_flag,1,1
 1128              		.comm	TxMailbox,4,4
 1129              		.comm	POT_data,8,4
 1130              		.comm	POT_TxHeader,24,4
 1131              		.comm	RxData,8,4
 1132              		.comm	RxHeader,28,4
 1133              		.comm	hcan,40,4
 1134              		.global	sConfig
ARM GAS  /tmp/cci6zRuO.s 			page 32


 1135              		.comm	hadc1,48,4
 1136              		.section	.bss.sConfig,"aw",%nobits
 1137              		.align	2
 1138              		.set	.LANCHOR0,. + 0
 1141              	sConfig:
 1142 0000 00000000 		.space	12
 1142      00000000 
 1142      00000000 
 1143              		.section	.data.pot_threshold,"aw",%progbits
 1144              		.align	2
 1145              		.set	.LANCHOR1,. + 0
 1148              	pot_threshold:
 1149 0000 0000     		.short	0
 1150 0002 6702     		.short	615
 1151 0004 0104     		.short	1025
 1152 0006 9B05     		.short	1435
 1153 0008 3507     		.short	1845
 1154 000a CF08     		.short	2255
 1155 000c 690A     		.short	2665
 1156 000e 030C     		.short	3075
 1157 0010 9D0D     		.short	3485
 1158 0012 370F     		.short	3895
 1159 0014 FF0F     		.short	4095
 1160              		.text
 1161              	.Letext0:
 1162              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1163              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1164              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1165              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1166              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1167              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1168              		.file 8 "/usr/include/newlib/sys/lock.h"
 1169              		.file 9 "/usr/include/newlib/sys/_types.h"
 1170              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1171              		.file 11 "/usr/include/newlib/sys/reent.h"
 1172              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1173              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1174              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1175              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1176              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1177              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1178              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1179              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1180              		.file 20 "<built-in>"
ARM GAS  /tmp/cci6zRuO.s 			page 33


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cci6zRuO.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cci6zRuO.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cci6zRuO.s:121    .text.MX_GPIO_Init:0000000000000088 $d
     /tmp/cci6zRuO.s:128    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cci6zRuO.s:134    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cci6zRuO.s:221    .text.MX_ADC1_Init:0000000000000064 $d
                            *COM*:0000000000000030 hadc1
     /tmp/cci6zRuO.s:228    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/cci6zRuO.s:234    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/cci6zRuO.s:339    .text.MX_CAN_Init:0000000000000070 $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 POT_TxHeader
     /tmp/cci6zRuO.s:346    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cci6zRuO.s:353    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cci6zRuO.s:433    .text.POT_read:0000000000000000 $t
     /tmp/cci6zRuO.s:440    .text.POT_read:0000000000000000 POT_read
     /tmp/cci6zRuO.s:587    .text.POT_read:00000000000000d4 $d
     /tmp/cci6zRuO.s:593    .text.POT_interpret:0000000000000000 $t
     /tmp/cci6zRuO.s:600    .text.POT_interpret:0000000000000000 POT_interpret
     /tmp/cci6zRuO.s:757    .text.POT_interpret:00000000000000d0 $d
                            *COM*:0000000000000008 POT_data
     /tmp/cci6zRuO.s:765    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/cci6zRuO.s:772    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/cci6zRuO.s:803    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000018 $d
                            *COM*:0000000000000008 RxData
                            *COM*:000000000000001c RxHeader
                            *COM*:0000000000000001 CAN_flag
     /tmp/cci6zRuO.s:811    .text.CAN_interpret:0000000000000000 $t
     /tmp/cci6zRuO.s:818    .text.CAN_interpret:0000000000000000 CAN_interpret
     /tmp/cci6zRuO.s:1015   .text.CAN_interpret:00000000000000e8 $d
     /tmp/cci6zRuO.s:1025   .text.main:0000000000000000 $t
     /tmp/cci6zRuO.s:1032   .text.main:0000000000000000 main
     /tmp/cci6zRuO.s:1097   .text.main:000000000000004c $d
                            *COM*:0000000000000004 TxMailbox
     /tmp/cci6zRuO.s:1107   .text.Error_Handler:0000000000000000 $t
     /tmp/cci6zRuO.s:1114   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cci6zRuO.s:1148   .data.pot_threshold:0000000000000000 pot_threshold
     /tmp/cci6zRuO.s:1141   .bss.sConfig:0000000000000000 sConfig
     /tmp/cci6zRuO.s:1137   .bss.sConfig:0000000000000000 $d
     /tmp/cci6zRuO.s:1144   .data.pot_threshold:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_ADC_Start
ARM GAS  /tmp/cci6zRuO.s 			page 34


HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_CAN_GetRxMessage
HAL_Init
HAL_CAN_AddTxMessage
HAL_Delay

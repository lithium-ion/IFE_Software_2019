ARM GAS  /tmp/ccoE54Gu.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB68:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "stdbool.h"
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccoE54Gu.s 			page 2


  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** #define DASH_CAN_ID			0x00F
  37:Src/main.c    **** #define RINEHARTCUR_CAN_ID			0x064
  38:Src/main.c    **** #define RINEHARTTOR_CAN_ID			0x082
  39:Src/main.c    **** #define FAULTS				0x0D0
  40:Src/main.c    **** #define STATES			0x0D1
  41:Src/main.c    **** #define ENABLE_SIG		0x0D2
  42:Src/main.c    **** #define MOTOR_POS		0x0A5
  43:Src/main.c    **** /* USER CODE END PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  51:Src/main.c    **** ADC_HandleTypeDef hadc1;
  52:Src/main.c    **** ADC_ChannelConfTypeDef sConfig = {0};
  53:Src/main.c    **** CAN_HandleTypeDef hcan;
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN PV */
  56:Src/main.c    **** 
  57:Src/main.c    **** CAN_RxHeaderTypeDef     RxHeader;
  58:Src/main.c    **** uint8_t                 RxData[8];
  59:Src/main.c    **** 
  60:Src/main.c    **** CAN_TxHeaderTypeDef     POT_TxHeader;
  61:Src/main.c    **** CAN_TxHeaderTypeDef     POT_Txheader;
  62:Src/main.c    **** CAN_TxHeaderTypeDef     POT_Txheader1;
  63:Src/main.c    **** uint8_t                 POT_data[8];
  64:Src/main.c    **** uint8_t                 POT_Data[8];
  65:Src/main.c    **** uint8_t                 POT_Data1[8];
  66:Src/main.c    **** uint32_t                TxMailbox;
  67:Src/main.c    **** 
  68:Src/main.c    **** volatile char					CAN_flag;
  69:Src/main.c    **** 
  70:Src/main.c    **** uint16_t				pot_threshold[11] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** static void MX_GPIO_Init(void);
  77:Src/main.c    **** static void MX_ADC1_Init(void);
  78:Src/main.c    **** static void MX_CAN_Init(void);
  79:Src/main.c    **** /* USER CODE BEGIN PFP */
  80:Src/main.c    **** void POT_read(uint16_t pot_values[4]);
  81:Src/main.c    **** void CAN_interpret(void);
  82:Src/main.c    **** void  POT_interpret(uint16_t pot_values[4]);
  83:Src/main.c    **** /* USER CODE END PFP */
  84:Src/main.c    **** 
  85:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  86:Src/main.c    **** /* USER CODE BEGIN 0 */
  87:Src/main.c    **** 
  88:Src/main.c    **** /* USER CODE END 0 */
  89:Src/main.c    **** 
  90:Src/main.c    **** /**
  91:Src/main.c    ****   * @brief  The application entry point.
ARM GAS  /tmp/ccoE54Gu.s 			page 3


  92:Src/main.c    ****   * @retval int
  93:Src/main.c    ****   */
  94:Src/main.c    **** int main(void)
  95:Src/main.c    **** {
  96:Src/main.c    ****   /* USER CODE BEGIN 1 */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE END 1 */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 103:Src/main.c    ****   HAL_Init();
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE BEGIN Init */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE END Init */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Configure the system clock */
 110:Src/main.c    ****   SystemClock_Config();
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE END SysInit */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Initialize all configured peripherals */
 117:Src/main.c    ****   MX_GPIO_Init();
 118:Src/main.c    ****   MX_ADC1_Init();
 119:Src/main.c    ****   MX_CAN_Init();
 120:Src/main.c    ****   /* USER CODE BEGIN 2 */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE END 2 */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* Infinite loop */
 125:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 126:Src/main.c    ****   while (1)
 127:Src/main.c    ****   {
 128:Src/main.c    ****     /* USER CODE END WHILE */
 129:Src/main.c    **** 
 130:Src/main.c    ****     /* USER CODE BEGIN 3 */
 131:Src/main.c    **** 
 132:Src/main.c    **** 	if (CAN_flag == 0xFF)
 133:Src/main.c    **** 		CAN_interpret();
 134:Src/main.c    **** 
 135:Src/main.c    **** 	//send POT positions CAN message
 136:Src/main.c    **** 
 137:Src/main.c    **** 	uint16_t pot_position[4];
 138:Src/main.c    **** 	POT_read(pot_position);
 139:Src/main.c    **** 	POT_interpret(pot_position);
 140:Src/main.c    **** 
 141:Src/main.c    **** 
 142:Src/main.c    **** 	HAL_CAN_AddTxMessage(&hcan, &POT_TxHeader, POT_data, &TxMailbox);
 143:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &POT_Txheader, POT_Data, &TxMailbox);
 144:Src/main.c    **** 
 145:Src/main.c    **** 	HAL_Delay(1000);
 146:Src/main.c    **** 
 147:Src/main.c    **** 
 148:Src/main.c    ****   }
ARM GAS  /tmp/ccoE54Gu.s 			page 4


 149:Src/main.c    ****   /* USER CODE END 3 */
 150:Src/main.c    **** }
 151:Src/main.c    **** 
 152:Src/main.c    **** /**
 153:Src/main.c    ****   * @brief System Clock Configuration
 154:Src/main.c    ****   * @retval None
 155:Src/main.c    ****   */
 156:Src/main.c    **** void SystemClock_Config(void)
 157:Src/main.c    **** {
 158:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 159:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 160:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 161:Src/main.c    **** 
 162:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 163:Src/main.c    ****   */
 164:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 165:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 166:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 167:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 168:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 169:Src/main.c    ****   {
 170:Src/main.c    ****     Error_Handler();
 171:Src/main.c    ****   }
 172:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 173:Src/main.c    ****   */
 174:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 175:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 176:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 177:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 178:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 179:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 180:Src/main.c    **** 
 181:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 182:Src/main.c    ****   {
 183:Src/main.c    ****     Error_Handler();
 184:Src/main.c    ****   }
 185:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 186:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 187:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 188:Src/main.c    ****   {
 189:Src/main.c    ****     Error_Handler();
 190:Src/main.c    ****   }
 191:Src/main.c    **** }
 192:Src/main.c    **** 
 193:Src/main.c    **** /**
 194:Src/main.c    ****   * @brief ADC1 Initialization Function
 195:Src/main.c    ****   * @param None
 196:Src/main.c    ****   * @retval None
 197:Src/main.c    ****   */
 198:Src/main.c    **** static void MX_ADC1_Init(void)
 199:Src/main.c    **** {
 200:Src/main.c    **** 
 201:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 202:Src/main.c    **** 
 203:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 204:Src/main.c    **** 
 205:Src/main.c    ****   //ADC_ChannelConfTypeDef sConfig = {0};
ARM GAS  /tmp/ccoE54Gu.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 208:Src/main.c    **** 
 209:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 210:Src/main.c    ****   /** Common config
 211:Src/main.c    ****   */
 212:Src/main.c    ****   hadc1.Instance = ADC1;
 213:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 214:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 215:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 216:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 217:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 218:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 219:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 220:Src/main.c    ****   {
 221:Src/main.c    ****     Error_Handler();
 222:Src/main.c    ****   }
 223:Src/main.c    ****   /** Configure Regular Channel
 224:Src/main.c    ****   */
 225:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 226:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 227:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 228:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 229:Src/main.c    ****   {
 230:Src/main.c    ****     Error_Handler();
 231:Src/main.c    ****   }
 232:Src/main.c    ****   /** Configure Regular Channel
 233:Src/main.c    ****   */
 234:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 235:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 236:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 237:Src/main.c    ****   {
 238:Src/main.c    ****     Error_Handler();
 239:Src/main.c    ****   }
 240:Src/main.c    ****   /** Configure Regular Channel
 241:Src/main.c    ****   */
 242:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_7;
 243:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 244:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 245:Src/main.c    ****   {
 246:Src/main.c    ****     Error_Handler();
 247:Src/main.c    ****   }
 248:Src/main.c    ****   /** Configure Regular Channel
 249:Src/main.c    ****   */
 250:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 251:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 252:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 253:Src/main.c    ****   {
 254:Src/main.c    ****     Error_Handler();
 255:Src/main.c    ****   }
 256:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 257:Src/main.c    **** 
 258:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 259:Src/main.c    **** 
 260:Src/main.c    **** }
 261:Src/main.c    **** 
 262:Src/main.c    **** /**
ARM GAS  /tmp/ccoE54Gu.s 			page 6


 263:Src/main.c    ****   * @brief CAN Initialization Function
 264:Src/main.c    ****   * @param None
 265:Src/main.c    ****   * @retval None
 266:Src/main.c    ****   */
 267:Src/main.c    **** static void MX_CAN_Init(void)
 268:Src/main.c    **** {
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 271:Src/main.c    **** 	CAN_FilterTypeDef     sFilterConfig;
 272:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 273:Src/main.c    **** 
 274:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 275:Src/main.c    **** 
 276:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 277:Src/main.c    **** hcan.Instance = CAN1;
 278:Src/main.c    ****   hcan.Init.Prescaler = 2; //500kbit/s
 279:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 280:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 281:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 282:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 283:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 284:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 285:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 286:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 287:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 288:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 289:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 290:Src/main.c    ****   {
 291:Src/main.c    ****     Error_Handler();
 292:Src/main.c    ****   }
 293:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 */
 294:Src/main.c    **** 	POT_TxHeader.StdId = DASH_CAN_ID; 						// CAN standard ID
 295:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 296:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 297:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 298:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 299:Src/main.c    **** 
 300:Src/main.c    ****   POT_Txheader.StdId = RINEHARTCUR_CAN_ID; 						// CAN standard ID
 301:Src/main.c    **** 	POT_Txheader.RTR = CAN_RTR_DATA; 						// CAN frame type
 302:Src/main.c    **** 	POT_Txheader.IDE = CAN_ID_STD; 							// CAN ID type
 303:Src/main.c    **** 	POT_Txheader.DLC = 2; 									// CAN frame length in bytes
 304:Src/main.c    **** 	POT_Txheader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 305:Src/main.c    **** 
 306:Src/main.c    ****   POT_Txheader1.StdId = RINEHARTTOR_CAN_ID; 						// CAN standard ID
 307:Src/main.c    ****   POT_Txheader1.RTR = CAN_RTR_DATA; 						// CAN frame type
 308:Src/main.c    ****   POT_Txheader1.IDE = CAN_ID_STD; 							// CAN ID type
 309:Src/main.c    ****   POT_Txheader1.DLC = 2; 									// CAN frame length in bytes
 310:Src/main.c    ****   POT_Txheader1.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 311:Src/main.c    **** 
 312:Src/main.c    **** 	sFilterConfig.FilterBank = 0;							// filter number (0-13)
 313:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 314:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 315:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 316:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 317:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 318:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 319:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
ARM GAS  /tmp/ccoE54Gu.s 			page 7


 320:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 321:Src/main.c    **** 
 322:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 323:Src/main.c    **** 
 324:Src/main.c    **** 	HAL_CAN_Start(&hcan);
 325:Src/main.c    **** 
 326:Src/main.c    **** 	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 327:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 328:Src/main.c    **** 
 329:Src/main.c    **** }
 330:Src/main.c    **** 
 331:Src/main.c    **** /**
 332:Src/main.c    ****   * @brief GPIO Initialization Function
 333:Src/main.c    ****   * @param None
 334:Src/main.c    ****   * @retval None
 335:Src/main.c    ****   */
 336:Src/main.c    **** static void MX_GPIO_Init(void)
 337:Src/main.c    **** {
  25              		.loc 1 337 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 86B0     		sub	sp, sp, #24
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 338:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 338 0
  42 0006 0024     		movs	r4, #0
  43 0008 0294     		str	r4, [sp, #8]
  44 000a 0394     		str	r4, [sp, #12]
  45 000c 0494     		str	r4, [sp, #16]
  46 000e 0594     		str	r4, [sp, #20]
  47              	.LBB2:
 339:Src/main.c    **** 
 340:Src/main.c    ****   /* GPIO Ports Clock Enable */
 341:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  48              		.loc 1 341 0
  49 0010 1D4B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F00402 		orr	r2, r2, #4
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F00402 		and	r2, r2, #4
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE2:
  58              	.LBB3:
 342:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  /tmp/ccoE54Gu.s 			page 8


  59              		.loc 1 342 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F00802 		orr	r2, r2, #8
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9B69     		ldr	r3, [r3, #24]
  64 002e 03F00803 		and	r3, r3, #8
  65 0032 0193     		str	r3, [sp, #4]
  66 0034 019B     		ldr	r3, [sp, #4]
  67              	.LBE3:
 343:Src/main.c    **** 
 344:Src/main.c    ****   /*Configure GPIO pin Output Level */
 345:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  68              		.loc 1 345 0
  69 0036 DFF85880 		ldr	r8, .L3+8
  70 003a 2246     		mov	r2, r4
  71 003c 4FF45E71 		mov	r1, #888
  72 0040 4046     		mov	r0, r8
  73 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  74              	.LVL0:
 346:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin, GPIO_PIN_RESET);
 347:Src/main.c    **** 
 348:Src/main.c    ****   /*Configure GPIO pin Output Level */
 349:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin, GPIO_PIN_RESET);
  75              		.loc 1 349 0
  76 0046 114D     		ldr	r5, .L3+4
  77 0048 2246     		mov	r2, r4
  78 004a 4FF4F071 		mov	r1, #480
  79 004e 2846     		mov	r0, r5
  80 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  81              	.LVL1:
 350:Src/main.c    **** 
 351:Src/main.c    ****   /*Configure GPIO pins : CUR_LED_Pin BMS_LED_ON_Pin IMD_LED_ON_Pin BSPD_LED_ON_Pin
 352:Src/main.c    ****                            DRS_LED_Pin TC_LED_Pin */
 353:Src/main.c    ****   GPIO_InitStruct.Pin = CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin
  82              		.loc 1 353 0
  83 0054 4FF45E73 		mov	r3, #888
  84 0058 0293     		str	r3, [sp, #8]
 354:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin;
 355:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  85              		.loc 1 355 0
  86 005a 0127     		movs	r7, #1
  87 005c 0397     		str	r7, [sp, #12]
 356:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  88              		.loc 1 356 0
  89 005e 0494     		str	r4, [sp, #16]
 357:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  90              		.loc 1 357 0
  91 0060 0226     		movs	r6, #2
  92 0062 0596     		str	r6, [sp, #20]
 358:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  93              		.loc 1 358 0
  94 0064 02A9     		add	r1, sp, #8
  95 0066 4046     		mov	r0, r8
  96 0068 FFF7FEFF 		bl	HAL_GPIO_Init
  97              	.LVL2:
 359:Src/main.c    **** 
 360:Src/main.c    ****   /*Configure GPIO pins : RGB_GREEN_Pin RGB_RED_Pin RGB_BLUE_Pin CUST_LED_Pin */
ARM GAS  /tmp/ccoE54Gu.s 			page 9


 361:Src/main.c    ****   GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin;
  98              		.loc 1 361 0
  99 006c 4FF4F073 		mov	r3, #480
 100 0070 0293     		str	r3, [sp, #8]
 362:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 101              		.loc 1 362 0
 102 0072 0397     		str	r7, [sp, #12]
 363:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 103              		.loc 1 363 0
 104 0074 0494     		str	r4, [sp, #16]
 364:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 105              		.loc 1 364 0
 106 0076 0596     		str	r6, [sp, #20]
 365:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 107              		.loc 1 365 0
 108 0078 02A9     		add	r1, sp, #8
 109 007a 2846     		mov	r0, r5
 110 007c FFF7FEFF 		bl	HAL_GPIO_Init
 111              	.LVL3:
 366:Src/main.c    **** 
 367:Src/main.c    **** }
 112              		.loc 1 367 0
 113 0080 06B0     		add	sp, sp, #24
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 24
 116              		@ sp needed
 117 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 118              	.L4:
 119 0086 00BF     		.align	2
 120              	.L3:
 121 0088 00100240 		.word	1073876992
 122 008c 000C0140 		.word	1073810432
 123 0090 00080140 		.word	1073809408
 124              		.cfi_endproc
 125              	.LFE68:
 127              		.section	.text.MX_ADC1_Init,"ax",%progbits
 128              		.align	1
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu softvfp
 134              	MX_ADC1_Init:
 135              	.LFB66:
 199:Src/main.c    **** 
 136              		.loc 1 199 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 24
 143              		.cfi_offset 3, -24
 144              		.cfi_offset 4, -20
 145              		.cfi_offset 5, -16
 146              		.cfi_offset 6, -12
 147              		.cfi_offset 7, -8
 148              		.cfi_offset 14, -4
ARM GAS  /tmp/ccoE54Gu.s 			page 10


 212:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 149              		.loc 1 212 0
 150 0002 184D     		ldr	r5, .L7
 151 0004 184B     		ldr	r3, .L7+4
 152 0006 2B60     		str	r3, [r5]
 213:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 153              		.loc 1 213 0
 154 0008 0026     		movs	r6, #0
 155 000a AE60     		str	r6, [r5, #8]
 214:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 156              		.loc 1 214 0
 157 000c EE60     		str	r6, [r5, #12]
 215:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 158              		.loc 1 215 0
 159 000e 6E61     		str	r6, [r5, #20]
 216:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 160              		.loc 1 216 0
 161 0010 4FF46023 		mov	r3, #917504
 162 0014 EB61     		str	r3, [r5, #28]
 217:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 163              		.loc 1 217 0
 164 0016 6E60     		str	r6, [r5, #4]
 218:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 165              		.loc 1 218 0
 166 0018 0427     		movs	r7, #4
 167 001a 2F61     		str	r7, [r5, #16]
 219:Src/main.c    ****   {
 168              		.loc 1 219 0
 169 001c 2846     		mov	r0, r5
 170 001e FFF7FEFF 		bl	HAL_ADC_Init
 171              	.LVL4:
 225:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 172              		.loc 1 225 0
 173 0022 124C     		ldr	r4, .L7+8
 174 0024 2660     		str	r6, [r4]
 226:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 175              		.loc 1 226 0
 176 0026 0126     		movs	r6, #1
 177 0028 6660     		str	r6, [r4, #4]
 227:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 178              		.loc 1 227 0
 179 002a A660     		str	r6, [r4, #8]
 228:Src/main.c    ****   {
 180              		.loc 1 228 0
 181 002c 2146     		mov	r1, r4
 182 002e 2846     		mov	r0, r5
 183 0030 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 184              	.LVL5:
 234:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 185              		.loc 1 234 0
 186 0034 2660     		str	r6, [r4]
 235:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 187              		.loc 1 235 0
 188 0036 0223     		movs	r3, #2
 189 0038 6360     		str	r3, [r4, #4]
 236:Src/main.c    ****   {
 190              		.loc 1 236 0
ARM GAS  /tmp/ccoE54Gu.s 			page 11


 191 003a 2146     		mov	r1, r4
 192 003c 2846     		mov	r0, r5
 193 003e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 194              	.LVL6:
 242:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 195              		.loc 1 242 0
 196 0042 0723     		movs	r3, #7
 197 0044 2360     		str	r3, [r4]
 243:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 198              		.loc 1 243 0
 199 0046 0323     		movs	r3, #3
 200 0048 6360     		str	r3, [r4, #4]
 244:Src/main.c    ****   {
 201              		.loc 1 244 0
 202 004a 2146     		mov	r1, r4
 203 004c 2846     		mov	r0, r5
 204 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 205              	.LVL7:
 250:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 206              		.loc 1 250 0
 207 0052 0923     		movs	r3, #9
 208 0054 2360     		str	r3, [r4]
 251:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 209              		.loc 1 251 0
 210 0056 6760     		str	r7, [r4, #4]
 252:Src/main.c    ****   {
 211              		.loc 1 252 0
 212 0058 2146     		mov	r1, r4
 213 005a 2846     		mov	r0, r5
 214 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 215              	.LVL8:
 216 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 217              	.L8:
 218 0062 00BF     		.align	2
 219              	.L7:
 220 0064 00000000 		.word	hadc1
 221 0068 00240140 		.word	1073816576
 222 006c 00000000 		.word	.LANCHOR0
 223              		.cfi_endproc
 224              	.LFE66:
 226              		.section	.text.MX_CAN_Init,"ax",%progbits
 227              		.align	1
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 231              		.fpu softvfp
 233              	MX_CAN_Init:
 234              	.LFB67:
 268:Src/main.c    **** 
 235              		.loc 1 268 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 40
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239 0000 70B5     		push	{r4, r5, r6, lr}
 240              	.LCFI4:
 241              		.cfi_def_cfa_offset 16
 242              		.cfi_offset 4, -16
ARM GAS  /tmp/ccoE54Gu.s 			page 12


 243              		.cfi_offset 5, -12
 244              		.cfi_offset 6, -8
 245              		.cfi_offset 14, -4
 246 0002 8AB0     		sub	sp, sp, #40
 247              	.LCFI5:
 248              		.cfi_def_cfa_offset 56
 277:Src/main.c    ****   hcan.Init.Prescaler = 2; //500kbit/s
 249              		.loc 1 277 0
 250 0004 224D     		ldr	r5, .L11
 251 0006 234B     		ldr	r3, .L11+4
 252 0008 2B60     		str	r3, [r5]
 278:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 253              		.loc 1 278 0
 254 000a 0226     		movs	r6, #2
 255 000c 6E60     		str	r6, [r5, #4]
 279:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 256              		.loc 1 279 0
 257 000e 0024     		movs	r4, #0
 258 0010 AC60     		str	r4, [r5, #8]
 280:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 259              		.loc 1 280 0
 260 0012 4FF08073 		mov	r3, #16777216
 261 0016 EB60     		str	r3, [r5, #12]
 281:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 262              		.loc 1 281 0
 263 0018 4FF44023 		mov	r3, #786432
 264 001c 2B61     		str	r3, [r5, #16]
 282:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 265              		.loc 1 282 0
 266 001e 4FF48013 		mov	r3, #1048576
 267 0022 6B61     		str	r3, [r5, #20]
 283:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 268              		.loc 1 283 0
 269 0024 2C76     		strb	r4, [r5, #24]
 284:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 270              		.loc 1 284 0
 271 0026 6C76     		strb	r4, [r5, #25]
 285:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 272              		.loc 1 285 0
 273 0028 AC76     		strb	r4, [r5, #26]
 286:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 274              		.loc 1 286 0
 275 002a EC76     		strb	r4, [r5, #27]
 287:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 276              		.loc 1 287 0
 277 002c 2C77     		strb	r4, [r5, #28]
 288:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 278              		.loc 1 288 0
 279 002e 6C77     		strb	r4, [r5, #29]
 289:Src/main.c    ****   {
 280              		.loc 1 289 0
 281 0030 2846     		mov	r0, r5
 282 0032 FFF7FEFF 		bl	HAL_CAN_Init
 283              	.LVL9:
 294:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 284              		.loc 1 294 0
 285 0036 184B     		ldr	r3, .L11+8
ARM GAS  /tmp/ccoE54Gu.s 			page 13


 286 0038 0F22     		movs	r2, #15
 287 003a 1A60     		str	r2, [r3]
 295:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 288              		.loc 1 295 0
 289 003c DC60     		str	r4, [r3, #12]
 296:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 290              		.loc 1 296 0
 291 003e 9C60     		str	r4, [r3, #8]
 297:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 292              		.loc 1 297 0
 293 0040 0422     		movs	r2, #4
 294 0042 1A61     		str	r2, [r3, #16]
 298:Src/main.c    **** 
 295              		.loc 1 298 0
 296 0044 1C75     		strb	r4, [r3, #20]
 300:Src/main.c    **** 	POT_Txheader.RTR = CAN_RTR_DATA; 						// CAN frame type
 297              		.loc 1 300 0
 298 0046 154B     		ldr	r3, .L11+12
 299 0048 6422     		movs	r2, #100
 300 004a 1A60     		str	r2, [r3]
 301:Src/main.c    **** 	POT_Txheader.IDE = CAN_ID_STD; 							// CAN ID type
 301              		.loc 1 301 0
 302 004c DC60     		str	r4, [r3, #12]
 302:Src/main.c    **** 	POT_Txheader.DLC = 2; 									// CAN frame length in bytes
 303              		.loc 1 302 0
 304 004e 9C60     		str	r4, [r3, #8]
 303:Src/main.c    **** 	POT_Txheader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 305              		.loc 1 303 0
 306 0050 1E61     		str	r6, [r3, #16]
 304:Src/main.c    **** 
 307              		.loc 1 304 0
 308 0052 1C75     		strb	r4, [r3, #20]
 306:Src/main.c    ****   POT_Txheader1.RTR = CAN_RTR_DATA; 						// CAN frame type
 309              		.loc 1 306 0
 310 0054 124B     		ldr	r3, .L11+16
 311 0056 8222     		movs	r2, #130
 312 0058 1A60     		str	r2, [r3]
 307:Src/main.c    ****   POT_Txheader1.IDE = CAN_ID_STD; 							// CAN ID type
 313              		.loc 1 307 0
 314 005a DC60     		str	r4, [r3, #12]
 308:Src/main.c    ****   POT_Txheader1.DLC = 2; 									// CAN frame length in bytes
 315              		.loc 1 308 0
 316 005c 9C60     		str	r4, [r3, #8]
 309:Src/main.c    ****   POT_Txheader1.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 317              		.loc 1 309 0
 318 005e 1E61     		str	r6, [r3, #16]
 310:Src/main.c    **** 
 319              		.loc 1 310 0
 320 0060 1C75     		strb	r4, [r3, #20]
 312:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode
 321              		.loc 1 312 0
 322 0062 0594     		str	r4, [sp, #20]
 313:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 323              		.loc 1 313 0
 324 0064 0694     		str	r4, [sp, #24]
 314:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 325              		.loc 1 314 0
ARM GAS  /tmp/ccoE54Gu.s 			page 14


 326 0066 0123     		movs	r3, #1
 327 0068 0793     		str	r3, [sp, #28]
 315:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 328              		.loc 1 315 0
 329 006a 0094     		str	r4, [sp]
 316:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 330              		.loc 1 316 0
 331 006c 0194     		str	r4, [sp, #4]
 317:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 332              		.loc 1 317 0
 333 006e 0294     		str	r4, [sp, #8]
 318:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 334              		.loc 1 318 0
 335 0070 0394     		str	r4, [sp, #12]
 319:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 336              		.loc 1 319 0
 337 0072 0494     		str	r4, [sp, #16]
 320:Src/main.c    **** 
 338              		.loc 1 320 0
 339 0074 0893     		str	r3, [sp, #32]
 322:Src/main.c    **** 
 340              		.loc 1 322 0
 341 0076 6946     		mov	r1, sp
 342 0078 2846     		mov	r0, r5
 343 007a FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 344              	.LVL10:
 324:Src/main.c    **** 
 345              		.loc 1 324 0
 346 007e 2846     		mov	r0, r5
 347 0080 FFF7FEFF 		bl	HAL_CAN_Start
 348              	.LVL11:
 326:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 349              		.loc 1 326 0
 350 0084 3146     		mov	r1, r6
 351 0086 2846     		mov	r0, r5
 352 0088 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 353              	.LVL12:
 329:Src/main.c    **** 
 354              		.loc 1 329 0
 355 008c 0AB0     		add	sp, sp, #40
 356              	.LCFI6:
 357              		.cfi_def_cfa_offset 16
 358              		@ sp needed
 359 008e 70BD     		pop	{r4, r5, r6, pc}
 360              	.L12:
 361              		.align	2
 362              	.L11:
 363 0090 00000000 		.word	hcan
 364 0094 00640040 		.word	1073767424
 365 0098 00000000 		.word	POT_TxHeader
 366 009c 00000000 		.word	POT_Txheader
 367 00a0 00000000 		.word	POT_Txheader1
 368              		.cfi_endproc
 369              	.LFE67:
 371              		.section	.text.SystemClock_Config,"ax",%progbits
 372              		.align	1
 373              		.global	SystemClock_Config
ARM GAS  /tmp/ccoE54Gu.s 			page 15


 374              		.syntax unified
 375              		.thumb
 376              		.thumb_func
 377              		.fpu softvfp
 379              	SystemClock_Config:
 380              	.LFB65:
 157:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 381              		.loc 1 157 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 80
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385 0000 30B5     		push	{r4, r5, lr}
 386              	.LCFI7:
 387              		.cfi_def_cfa_offset 12
 388              		.cfi_offset 4, -12
 389              		.cfi_offset 5, -8
 390              		.cfi_offset 14, -4
 391 0002 95B0     		sub	sp, sp, #84
 392              	.LCFI8:
 393              		.cfi_def_cfa_offset 96
 158:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 394              		.loc 1 158 0
 395 0004 2822     		movs	r2, #40
 396 0006 0021     		movs	r1, #0
 397 0008 0DEB0200 		add	r0, sp, r2
 398 000c FFF7FEFF 		bl	memset
 399              	.LVL13:
 159:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 400              		.loc 1 159 0
 401 0010 0024     		movs	r4, #0
 402 0012 0594     		str	r4, [sp, #20]
 403 0014 0694     		str	r4, [sp, #24]
 404 0016 0794     		str	r4, [sp, #28]
 405 0018 0894     		str	r4, [sp, #32]
 406 001a 0994     		str	r4, [sp, #36]
 160:Src/main.c    **** 
 407              		.loc 1 160 0
 408 001c 0194     		str	r4, [sp, #4]
 409 001e 0294     		str	r4, [sp, #8]
 410 0020 0394     		str	r4, [sp, #12]
 411 0022 0494     		str	r4, [sp, #16]
 164:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 412              		.loc 1 164 0
 413 0024 0225     		movs	r5, #2
 414 0026 0A95     		str	r5, [sp, #40]
 165:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 415              		.loc 1 165 0
 416 0028 0123     		movs	r3, #1
 417 002a 0E93     		str	r3, [sp, #56]
 166:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 418              		.loc 1 166 0
 419 002c 1023     		movs	r3, #16
 420 002e 0F93     		str	r3, [sp, #60]
 168:Src/main.c    ****   {
 421              		.loc 1 168 0
 422 0030 0AA8     		add	r0, sp, #40
 423 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /tmp/ccoE54Gu.s 			page 16


 424              	.LVL14:
 174:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 425              		.loc 1 174 0
 426 0036 0F23     		movs	r3, #15
 427 0038 0593     		str	r3, [sp, #20]
 176:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 428              		.loc 1 176 0
 429 003a 0694     		str	r4, [sp, #24]
 177:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 430              		.loc 1 177 0
 431 003c 0794     		str	r4, [sp, #28]
 178:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 432              		.loc 1 178 0
 433 003e 0894     		str	r4, [sp, #32]
 179:Src/main.c    **** 
 434              		.loc 1 179 0
 435 0040 0994     		str	r4, [sp, #36]
 181:Src/main.c    ****   {
 436              		.loc 1 181 0
 437 0042 2146     		mov	r1, r4
 438 0044 05A8     		add	r0, sp, #20
 439 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 440              	.LVL15:
 185:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 441              		.loc 1 185 0
 442 004a 0195     		str	r5, [sp, #4]
 186:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 443              		.loc 1 186 0
 444 004c 0394     		str	r4, [sp, #12]
 187:Src/main.c    ****   {
 445              		.loc 1 187 0
 446 004e 01A8     		add	r0, sp, #4
 447 0050 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 448              	.LVL16:
 191:Src/main.c    **** 
 449              		.loc 1 191 0
 450 0054 15B0     		add	sp, sp, #84
 451              	.LCFI9:
 452              		.cfi_def_cfa_offset 12
 453              		@ sp needed
 454 0056 30BD     		pop	{r4, r5, pc}
 455              		.cfi_endproc
 456              	.LFE65:
 458              		.section	.text.POT_read,"ax",%progbits
 459              		.align	1
 460              		.global	POT_read
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 464              		.fpu softvfp
 466              	POT_read:
 467              	.LFB69:
 368:Src/main.c    **** 
 369:Src/main.c    **** 
 370:Src/main.c    **** 
 371:Src/main.c    **** /* USER CODE BEGIN 4 */
 372:Src/main.c    **** void POT_read(uint16_t pot_values[4]) {
ARM GAS  /tmp/ccoE54Gu.s 			page 17


 468              		.loc 1 372 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              	.LVL17:
 473 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 474              	.LCFI10:
 475              		.cfi_def_cfa_offset 24
 476              		.cfi_offset 4, -24
 477              		.cfi_offset 5, -20
 478              		.cfi_offset 6, -16
 479              		.cfi_offset 7, -12
 480              		.cfi_offset 8, -8
 481              		.cfi_offset 14, -4
 482 0004 0746     		mov	r7, r0
 373:Src/main.c    **** 	//0 1 7 9
 374:Src/main.c    **** 
 375:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_0;
 483              		.loc 1 375 0
 484 0006 334D     		ldr	r5, .L17
 485 0008 0023     		movs	r3, #0
 486 000a 2B60     		str	r3, [r5]
 376:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 487              		.loc 1 376 0
 488 000c 0126     		movs	r6, #1
 489 000e 6E60     		str	r6, [r5, #4]
 377:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 490              		.loc 1 377 0
 491 0010 4FF00608 		mov	r8, #6
 492 0014 C5F80880 		str	r8, [r5, #8]
 378:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 493              		.loc 1 378 0
 494 0018 2F4C     		ldr	r4, .L17+4
 495 001a 2946     		mov	r1, r5
 496 001c 2046     		mov	r0, r4
 497              	.LVL18:
 498 001e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 499              	.LVL19:
 379:Src/main.c    **** 
 380:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 500              		.loc 1 380 0
 501 0022 2046     		mov	r0, r4
 502 0024 FFF7FEFF 		bl	HAL_ADC_Start
 503              	.LVL20:
 381:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);		//change timeout to a HAL define
 504              		.loc 1 381 0
 505 0028 4FF47A71 		mov	r1, #1000
 506 002c 2046     		mov	r0, r4
 507 002e FFF7FEFF 		bl	HAL_ADC_PollForConversion
 508              	.LVL21:
 382:Src/main.c    **** 	pot_values[0] = HAL_ADC_GetValue(&hadc1);
 509              		.loc 1 382 0
 510 0032 2046     		mov	r0, r4
 511 0034 FFF7FEFF 		bl	HAL_ADC_GetValue
 512              	.LVL22:
 513 0038 3880     		strh	r0, [r7]	@ movhi
 383:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
ARM GAS  /tmp/ccoE54Gu.s 			page 18


 514              		.loc 1 383 0
 515 003a 2046     		mov	r0, r4
 516 003c FFF7FEFF 		bl	HAL_ADC_Stop
 517              	.LVL23:
 384:Src/main.c    **** 
 385:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_1;
 518              		.loc 1 385 0
 519 0040 2E60     		str	r6, [r5]
 386:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 520              		.loc 1 386 0
 521 0042 6E60     		str	r6, [r5, #4]
 387:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 522              		.loc 1 387 0
 523 0044 C5F80880 		str	r8, [r5, #8]
 388:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 524              		.loc 1 388 0
 525 0048 2946     		mov	r1, r5
 526 004a 2046     		mov	r0, r4
 527 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 528              	.LVL24:
 389:Src/main.c    **** 
 390:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 529              		.loc 1 390 0
 530 0050 2046     		mov	r0, r4
 531 0052 FFF7FEFF 		bl	HAL_ADC_Start
 532              	.LVL25:
 391:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 533              		.loc 1 391 0
 534 0056 4FF47A71 		mov	r1, #1000
 535 005a 2046     		mov	r0, r4
 536 005c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 537              	.LVL26:
 392:Src/main.c    **** 	pot_values[1] = HAL_ADC_GetValue(&hadc1);
 538              		.loc 1 392 0
 539 0060 2046     		mov	r0, r4
 540 0062 FFF7FEFF 		bl	HAL_ADC_GetValue
 541              	.LVL27:
 542 0066 7880     		strh	r0, [r7, #2]	@ movhi
 393:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 543              		.loc 1 393 0
 544 0068 2046     		mov	r0, r4
 545 006a FFF7FEFF 		bl	HAL_ADC_Stop
 546              	.LVL28:
 394:Src/main.c    **** 
 395:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_7;
 547              		.loc 1 395 0
 548 006e 0723     		movs	r3, #7
 549 0070 2B60     		str	r3, [r5]
 396:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 550              		.loc 1 396 0
 551 0072 6E60     		str	r6, [r5, #4]
 397:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 552              		.loc 1 397 0
 553 0074 C5F80880 		str	r8, [r5, #8]
 398:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 554              		.loc 1 398 0
 555 0078 2946     		mov	r1, r5
ARM GAS  /tmp/ccoE54Gu.s 			page 19


 556 007a 2046     		mov	r0, r4
 557 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 558              	.LVL29:
 399:Src/main.c    **** 
 400:Src/main.c    **** 
 401:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 559              		.loc 1 401 0
 560 0080 2046     		mov	r0, r4
 561 0082 FFF7FEFF 		bl	HAL_ADC_Start
 562              	.LVL30:
 402:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 563              		.loc 1 402 0
 564 0086 4FF47A71 		mov	r1, #1000
 565 008a 2046     		mov	r0, r4
 566 008c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 567              	.LVL31:
 403:Src/main.c    **** 	pot_values[2] = HAL_ADC_GetValue(&hadc1);
 568              		.loc 1 403 0
 569 0090 2046     		mov	r0, r4
 570 0092 FFF7FEFF 		bl	HAL_ADC_GetValue
 571              	.LVL32:
 572 0096 B880     		strh	r0, [r7, #4]	@ movhi
 404:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 573              		.loc 1 404 0
 574 0098 2046     		mov	r0, r4
 575 009a FFF7FEFF 		bl	HAL_ADC_Stop
 576              	.LVL33:
 405:Src/main.c    **** 
 406:Src/main.c    **** 	sConfig.Channel = ADC_CHANNEL_9;
 577              		.loc 1 406 0
 578 009e 0923     		movs	r3, #9
 579 00a0 2B60     		str	r3, [r5]
 407:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 580              		.loc 1 407 0
 581 00a2 6E60     		str	r6, [r5, #4]
 408:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 582              		.loc 1 408 0
 583 00a4 C5F80880 		str	r8, [r5, #8]
 409:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 584              		.loc 1 409 0
 585 00a8 2946     		mov	r1, r5
 586 00aa 2046     		mov	r0, r4
 587 00ac FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 588              	.LVL34:
 410:Src/main.c    **** 
 411:Src/main.c    **** 
 412:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 589              		.loc 1 412 0
 590 00b0 2046     		mov	r0, r4
 591 00b2 FFF7FEFF 		bl	HAL_ADC_Start
 592              	.LVL35:
 413:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 593              		.loc 1 413 0
 594 00b6 4FF47A71 		mov	r1, #1000
 595 00ba 2046     		mov	r0, r4
 596 00bc FFF7FEFF 		bl	HAL_ADC_PollForConversion
 597              	.LVL36:
ARM GAS  /tmp/ccoE54Gu.s 			page 20


 414:Src/main.c    **** 	pot_values[3] = HAL_ADC_GetValue(&hadc1);
 598              		.loc 1 414 0
 599 00c0 2046     		mov	r0, r4
 600 00c2 FFF7FEFF 		bl	HAL_ADC_GetValue
 601              	.LVL37:
 602 00c6 F880     		strh	r0, [r7, #6]	@ movhi
 415:Src/main.c    **** 
 416:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 603              		.loc 1 416 0
 604 00c8 2046     		mov	r0, r4
 605 00ca FFF7FEFF 		bl	HAL_ADC_Stop
 606              	.LVL38:
 607 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 608              	.LVL39:
 609              	.L18:
 610 00d2 00BF     		.align	2
 611              	.L17:
 612 00d4 00000000 		.word	.LANCHOR0
 613 00d8 00000000 		.word	hadc1
 614              		.cfi_endproc
 615              	.LFE69:
 617              		.section	.text.POT_interpret,"ax",%progbits
 618              		.align	1
 619              		.global	POT_interpret
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu softvfp
 625              	POT_interpret:
 626              	.LFB70:
 417:Src/main.c    **** 
 418:Src/main.c    **** }
 419:Src/main.c    **** 
 420:Src/main.c    **** void POT_interpret(uint16_t pot_values[4]) {
 627              		.loc 1 420 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 8
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              	.LVL40:
 632 0000 30B5     		push	{r4, r5, lr}
 633              	.LCFI11:
 634              		.cfi_def_cfa_offset 12
 635              		.cfi_offset 4, -12
 636              		.cfi_offset 5, -8
 637              		.cfi_offset 14, -4
 638 0002 83B0     		sub	sp, sp, #12
 639              	.LCFI12:
 640              		.cfi_def_cfa_offset 24
 641              	.LVL41:
 421:Src/main.c    **** 
 422:Src/main.c    **** 	uint8_t pot_pos[4];
 423:Src/main.c    **** 	uint8_t i, j;
 424:Src/main.c    **** 
 425:Src/main.c    **** 	for (i = 0; i < 4; i++) {
 642              		.loc 1 425 0
 643 0004 0024     		movs	r4, #0
 644 0006 1FE0     		b	.L20
ARM GAS  /tmp/ccoE54Gu.s 			page 21


 645              	.LVL42:
 646              	.L21:
 426:Src/main.c    **** 
 427:Src/main.c    **** 		for (j = 0; j < 10; j++) {
 647              		.loc 1 427 0 discriminator 2
 648 0008 0133     		adds	r3, r3, #1
 649              	.LVL43:
 650 000a DBB2     		uxtb	r3, r3
 651              	.LVL44:
 652              	.L23:
 653              		.loc 1 427 0 is_stmt 0 discriminator 1
 654 000c 092B     		cmp	r3, #9
 655 000e 13D8     		bhi	.L44
 428:Src/main.c    **** 
 429:Src/main.c    **** 			//uint16_t pot_threshold[12] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
 430:Src/main.c    **** 			if ((pot_values[i] > pot_threshold[j]) && (pot_values[i] <= pot_threshold[j + 1]))
 656              		.loc 1 430 0 is_stmt 1
 657 0010 30F81420 		ldrh	r2, [r0, r4, lsl #1]
 658 0014 5749     		ldr	r1, .L55
 659 0016 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 660 001a 8A42     		cmp	r2, r1
 661 001c F4D9     		bls	.L21
 662              		.loc 1 430 0 is_stmt 0 discriminator 1
 663 001e 591C     		adds	r1, r3, #1
 664 0020 544D     		ldr	r5, .L55
 665 0022 35F81110 		ldrh	r1, [r5, r1, lsl #1]
 666 0026 8A42     		cmp	r2, r1
 667 0028 EED8     		bhi	.L21
 431:Src/main.c    **** 				pot_pos[i] = 10 - (j + 1); // pot_pos[i] = 0 is ~3.3V, pot_pos[i] = 1 is ~3V, etc.
 668              		.loc 1 431 0 is_stmt 1
 669 002a C3F10902 		rsb	r2, r3, #9
 670 002e 02A9     		add	r1, sp, #8
 671 0030 2144     		add	r1, r1, r4
 672 0032 01F8042C 		strb	r2, [r1, #-4]
 673 0036 E7E7     		b	.L21
 674              	.L44:
 432:Src/main.c    **** 			}
 433:Src/main.c    **** 
 434:Src/main.c    **** 		POT_data[i] = pot_pos[i];
 675              		.loc 1 434 0 discriminator 2
 676 0038 02AB     		add	r3, sp, #8
 677              	.LVL45:
 678 003a 2344     		add	r3, r3, r4
 679 003c 13F8042C 		ldrb	r2, [r3, #-4]	@ zero_extendqisi2
 680 0040 4D4B     		ldr	r3, .L55+4
 681 0042 1A55     		strb	r2, [r3, r4]
 425:Src/main.c    **** 
 682              		.loc 1 425 0 discriminator 2
 683 0044 0134     		adds	r4, r4, #1
 684              	.LVL46:
 685 0046 E4B2     		uxtb	r4, r4
 686              	.LVL47:
 687              	.L20:
 425:Src/main.c    **** 
 688              		.loc 1 425 0 is_stmt 0 discriminator 1
 689 0048 032C     		cmp	r4, #3
 690 004a 01D8     		bhi	.L45
ARM GAS  /tmp/ccoE54Gu.s 			page 22


 691 004c 0023     		movs	r3, #0
 692 004e DDE7     		b	.L23
 693              	.L45:
 435:Src/main.c    **** 		//POT_data[0] = 0x00;
 436:Src/main.c    **** 
 437:Src/main.c    **** 	}
 438:Src/main.c    **** 
 439:Src/main.c    **** if (pot_pos[1] == 0){
 694              		.loc 1 439 0 is_stmt 1
 695 0050 9DF80540 		ldrb	r4, [sp, #5]	@ zero_extendqisi2
 696              	.LVL48:
 697 0054 5CBB     		cbnz	r4, .L24
 440:Src/main.c    **** 	POT_Data[1] = 1;
 698              		.loc 1 440 0
 699 0056 494B     		ldr	r3, .L55+8
 700 0058 0122     		movs	r2, #1
 701 005a 5A70     		strb	r2, [r3, #1]
 441:Src/main.c    ****   POT_Data[0] = 244;
 702              		.loc 1 441 0
 703 005c F422     		movs	r2, #244
 704 005e 1A70     		strb	r2, [r3]
 705              	.L25:
 442:Src/main.c    ****   }
 443:Src/main.c    **** 
 444:Src/main.c    **** else if (pot_pos[1] == 1){
 445:Src/main.c    ****   	POT_Data[1] = 3;
 446:Src/main.c    ****     POT_Data[0] = 232;
 447:Src/main.c    ****   }
 448:Src/main.c    **** 
 449:Src/main.c    **** else if (pot_pos[1] == 2){
 450:Src/main.c    ****     	POT_Data[1] = 4;
 451:Src/main.c    ****       POT_Data[0] = 176;
 452:Src/main.c    ****   }
 453:Src/main.c    **** 
 454:Src/main.c    **** else if (pot_pos[1] == 3){
 455:Src/main.c    ****     	POT_Data[1] = 5;
 456:Src/main.c    ****       POT_Data[0] = 70;
 457:Src/main.c    ****   }
 458:Src/main.c    **** 
 459:Src/main.c    **** else if (pot_pos[1] == 4){
 460:Src/main.c    ****       	POT_Data[1] = 5;
 461:Src/main.c    ****         POT_Data[0] = 220;
 462:Src/main.c    ****   }
 463:Src/main.c    **** 
 464:Src/main.c    **** else if (pot_pos[1] == 5){
 465:Src/main.c    ****         	POT_Data[1] = 6;
 466:Src/main.c    ****           POT_Data[0] = 114;
 467:Src/main.c    ****   }
 468:Src/main.c    **** 
 469:Src/main.c    **** else if (pot_pos[1] == 6){
 470:Src/main.c    ****     	POT_Data[1] = 7;
 471:Src/main.c    ****       POT_Data[0] = 8;
 472:Src/main.c    ****   }
 473:Src/main.c    **** 
 474:Src/main.c    **** else if (pot_pos[1] == 7){
 475:Src/main.c    ****     	POT_Data[1] = 7;
 476:Src/main.c    ****       POT_Data[0] = 158;
ARM GAS  /tmp/ccoE54Gu.s 			page 23


 477:Src/main.c    ****   }
 478:Src/main.c    **** 
 479:Src/main.c    **** else if (pot_pos[1] == 8){
 480:Src/main.c    ****     	POT_Data[1] = 8;
 481:Src/main.c    ****       POT_Data[0] = 52;
 482:Src/main.c    ****   }
 483:Src/main.c    **** 
 484:Src/main.c    **** else if (pot_pos[1] == 9){
 485:Src/main.c    ****     	POT_Data[1] = 8;
 486:Src/main.c    ****       POT_Data[0] = 202;
 487:Src/main.c    ****   }
 488:Src/main.c    **** 
 489:Src/main.c    **** 	if (pot_pos[0] != 0) // if CURRENT_POT is in any position other than first, turn on CUR_LED
 706              		.loc 1 489 0
 707 0060 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 708 0064 002B     		cmp	r3, #0
 709 0066 6AD0     		beq	.L34
 490:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_SET);
 710              		.loc 1 490 0
 711 0068 0122     		movs	r2, #1
 712 006a 4FF48071 		mov	r1, #256
 713 006e 4448     		ldr	r0, .L55+12
 714              	.LVL49:
 715 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 716              	.LVL50:
 717              	.L35:
 491:Src/main.c    ****   else
 492:Src/main.c    ****   	HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_RESET);
 493:Src/main.c    **** 
 494:Src/main.c    **** 	if (pot_pos[1] != 0) // if CUSTOM_POT is in any position other than first, turn on CUST_LED
 718              		.loc 1 494 0
 719 0074 002C     		cmp	r4, #0
 720 0076 69D0     		beq	.L36
 495:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_SET);
 721              		.loc 1 495 0
 722 0078 0122     		movs	r2, #1
 723 007a 0821     		movs	r1, #8
 724 007c 4148     		ldr	r0, .L55+16
 725 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 726              	.LVL51:
 727              	.L37:
 496:Src/main.c    **** 	else
 497:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_RESET);
 498:Src/main.c    **** 
 499:Src/main.c    **** 	if (pot_pos[2] != 0) // if TC_POT is in any position other than first, turn on TC_LED
 728              		.loc 1 499 0
 729 0082 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 730 0086 002B     		cmp	r3, #0
 731 0088 66D0     		beq	.L38
 500:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_SET);
 732              		.loc 1 500 0
 733 008a 0122     		movs	r2, #1
 734 008c 4FF40071 		mov	r1, #512
 735 0090 3C48     		ldr	r0, .L55+16
 736 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 737              	.LVL52:
 738              	.L39:
ARM GAS  /tmp/ccoE54Gu.s 			page 24


 501:Src/main.c    **** 	else
 502:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_RESET);
 503:Src/main.c    **** 
 504:Src/main.c    **** 	if (pot_pos[3] != 0) // if DRS_POT is in any position other than first, turn on DRS_LED
 739              		.loc 1 504 0
 740 0096 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 741 009a 002B     		cmp	r3, #0
 742 009c 63D1     		bne	.L46
 505:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_SET);
 506:Src/main.c    **** 	else
 507:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_RESET);
 743              		.loc 1 507 0
 744 009e 0022     		movs	r2, #0
 745 00a0 4FF48071 		mov	r1, #256
 746 00a4 3748     		ldr	r0, .L55+16
 747 00a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 748              	.LVL53:
 749              	.L19:
 508:Src/main.c    **** 
 509:Src/main.c    **** }
 750              		.loc 1 509 0
 751 00aa 03B0     		add	sp, sp, #12
 752              	.LCFI13:
 753              		.cfi_remember_state
 754              		.cfi_def_cfa_offset 12
 755              		@ sp needed
 756 00ac 30BD     		pop	{r4, r5, pc}
 757              	.LVL54:
 758              	.L24:
 759              	.LCFI14:
 760              		.cfi_restore_state
 444:Src/main.c    ****   	POT_Data[1] = 3;
 761              		.loc 1 444 0
 762 00ae 012C     		cmp	r4, #1
 763 00b0 15D0     		beq	.L47
 449:Src/main.c    ****     	POT_Data[1] = 4;
 764              		.loc 1 449 0
 765 00b2 022C     		cmp	r4, #2
 766 00b4 19D0     		beq	.L48
 454:Src/main.c    ****     	POT_Data[1] = 5;
 767              		.loc 1 454 0
 768 00b6 032C     		cmp	r4, #3
 769 00b8 1DD0     		beq	.L49
 459:Src/main.c    ****       	POT_Data[1] = 5;
 770              		.loc 1 459 0
 771 00ba 042C     		cmp	r4, #4
 772 00bc 21D0     		beq	.L50
 464:Src/main.c    ****         	POT_Data[1] = 6;
 773              		.loc 1 464 0
 774 00be 052C     		cmp	r4, #5
 775 00c0 25D0     		beq	.L51
 469:Src/main.c    ****     	POT_Data[1] = 7;
 776              		.loc 1 469 0
 777 00c2 062C     		cmp	r4, #6
 778 00c4 29D0     		beq	.L52
 474:Src/main.c    ****     	POT_Data[1] = 7;
 779              		.loc 1 474 0
ARM GAS  /tmp/ccoE54Gu.s 			page 25


 780 00c6 072C     		cmp	r4, #7
 781 00c8 2DD0     		beq	.L53
 479:Src/main.c    ****     	POT_Data[1] = 8;
 782              		.loc 1 479 0
 783 00ca 082C     		cmp	r4, #8
 784 00cc 31D0     		beq	.L54
 484:Src/main.c    ****     	POT_Data[1] = 8;
 785              		.loc 1 484 0
 786 00ce 092C     		cmp	r4, #9
 787 00d0 C6D1     		bne	.L25
 485:Src/main.c    ****       POT_Data[0] = 202;
 788              		.loc 1 485 0
 789 00d2 2A4B     		ldr	r3, .L55+8
 790 00d4 0822     		movs	r2, #8
 791 00d6 5A70     		strb	r2, [r3, #1]
 486:Src/main.c    ****   }
 792              		.loc 1 486 0
 793 00d8 CA22     		movs	r2, #202
 794 00da 1A70     		strb	r2, [r3]
 795 00dc C0E7     		b	.L25
 796              	.L47:
 445:Src/main.c    ****     POT_Data[0] = 232;
 797              		.loc 1 445 0
 798 00de 274B     		ldr	r3, .L55+8
 799 00e0 0322     		movs	r2, #3
 800 00e2 5A70     		strb	r2, [r3, #1]
 446:Src/main.c    ****   }
 801              		.loc 1 446 0
 802 00e4 E822     		movs	r2, #232
 803 00e6 1A70     		strb	r2, [r3]
 804 00e8 BAE7     		b	.L25
 805              	.L48:
 450:Src/main.c    ****       POT_Data[0] = 176;
 806              		.loc 1 450 0
 807 00ea 244B     		ldr	r3, .L55+8
 808 00ec 0422     		movs	r2, #4
 809 00ee 5A70     		strb	r2, [r3, #1]
 451:Src/main.c    ****   }
 810              		.loc 1 451 0
 811 00f0 B022     		movs	r2, #176
 812 00f2 1A70     		strb	r2, [r3]
 813 00f4 B4E7     		b	.L25
 814              	.L49:
 455:Src/main.c    ****       POT_Data[0] = 70;
 815              		.loc 1 455 0
 816 00f6 214B     		ldr	r3, .L55+8
 817 00f8 0522     		movs	r2, #5
 818 00fa 5A70     		strb	r2, [r3, #1]
 456:Src/main.c    ****   }
 819              		.loc 1 456 0
 820 00fc 4622     		movs	r2, #70
 821 00fe 1A70     		strb	r2, [r3]
 822 0100 AEE7     		b	.L25
 823              	.L50:
 460:Src/main.c    ****         POT_Data[0] = 220;
 824              		.loc 1 460 0
 825 0102 1E4B     		ldr	r3, .L55+8
ARM GAS  /tmp/ccoE54Gu.s 			page 26


 826 0104 0522     		movs	r2, #5
 827 0106 5A70     		strb	r2, [r3, #1]
 461:Src/main.c    ****   }
 828              		.loc 1 461 0
 829 0108 DC22     		movs	r2, #220
 830 010a 1A70     		strb	r2, [r3]
 831 010c A8E7     		b	.L25
 832              	.L51:
 465:Src/main.c    ****           POT_Data[0] = 114;
 833              		.loc 1 465 0
 834 010e 1B4B     		ldr	r3, .L55+8
 835 0110 0622     		movs	r2, #6
 836 0112 5A70     		strb	r2, [r3, #1]
 466:Src/main.c    ****   }
 837              		.loc 1 466 0
 838 0114 7222     		movs	r2, #114
 839 0116 1A70     		strb	r2, [r3]
 840 0118 A2E7     		b	.L25
 841              	.L52:
 470:Src/main.c    ****       POT_Data[0] = 8;
 842              		.loc 1 470 0
 843 011a 184B     		ldr	r3, .L55+8
 844 011c 0722     		movs	r2, #7
 845 011e 5A70     		strb	r2, [r3, #1]
 471:Src/main.c    ****   }
 846              		.loc 1 471 0
 847 0120 0822     		movs	r2, #8
 848 0122 1A70     		strb	r2, [r3]
 849 0124 9CE7     		b	.L25
 850              	.L53:
 475:Src/main.c    ****       POT_Data[0] = 158;
 851              		.loc 1 475 0
 852 0126 154B     		ldr	r3, .L55+8
 853 0128 0722     		movs	r2, #7
 854 012a 5A70     		strb	r2, [r3, #1]
 476:Src/main.c    ****   }
 855              		.loc 1 476 0
 856 012c 9E22     		movs	r2, #158
 857 012e 1A70     		strb	r2, [r3]
 858 0130 96E7     		b	.L25
 859              	.L54:
 480:Src/main.c    ****       POT_Data[0] = 52;
 860              		.loc 1 480 0
 861 0132 124B     		ldr	r3, .L55+8
 862 0134 0822     		movs	r2, #8
 863 0136 5A70     		strb	r2, [r3, #1]
 481:Src/main.c    ****   }
 864              		.loc 1 481 0
 865 0138 3422     		movs	r2, #52
 866 013a 1A70     		strb	r2, [r3]
 867 013c 90E7     		b	.L25
 868              	.L34:
 492:Src/main.c    **** 
 869              		.loc 1 492 0
 870 013e 0022     		movs	r2, #0
 871 0140 4FF48071 		mov	r1, #256
 872 0144 0E48     		ldr	r0, .L55+12
ARM GAS  /tmp/ccoE54Gu.s 			page 27


 873              	.LVL55:
 874 0146 FFF7FEFF 		bl	HAL_GPIO_WritePin
 875              	.LVL56:
 876 014a 93E7     		b	.L35
 877              	.L36:
 497:Src/main.c    **** 
 878              		.loc 1 497 0
 879 014c 0022     		movs	r2, #0
 880 014e 0821     		movs	r1, #8
 881 0150 0C48     		ldr	r0, .L55+16
 882 0152 FFF7FEFF 		bl	HAL_GPIO_WritePin
 883              	.LVL57:
 884 0156 94E7     		b	.L37
 885              	.L38:
 502:Src/main.c    **** 
 886              		.loc 1 502 0
 887 0158 0022     		movs	r2, #0
 888 015a 4FF40071 		mov	r1, #512
 889 015e 0948     		ldr	r0, .L55+16
 890 0160 FFF7FEFF 		bl	HAL_GPIO_WritePin
 891              	.LVL58:
 892 0164 97E7     		b	.L39
 893              	.L46:
 505:Src/main.c    **** 	else
 894              		.loc 1 505 0
 895 0166 0122     		movs	r2, #1
 896 0168 4FF48071 		mov	r1, #256
 897 016c 0548     		ldr	r0, .L55+16
 898 016e FFF7FEFF 		bl	HAL_GPIO_WritePin
 899              	.LVL59:
 900 0172 9AE7     		b	.L19
 901              	.L56:
 902              		.align	2
 903              	.L55:
 904 0174 00000000 		.word	.LANCHOR1
 905 0178 00000000 		.word	POT_data
 906 017c 00000000 		.word	POT_Data
 907 0180 000C0140 		.word	1073810432
 908 0184 00080140 		.word	1073809408
 909              		.cfi_endproc
 910              	.LFE70:
 912              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 913              		.align	1
 914              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 915              		.syntax unified
 916              		.thumb
 917              		.thumb_func
 918              		.fpu softvfp
 920              	HAL_CAN_RxFifo0MsgPendingCallback:
 921              	.LFB71:
 510:Src/main.c    **** 
 511:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
 512:Src/main.c    **** {
 922              		.loc 1 512 0
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 0
 925              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccoE54Gu.s 			page 28


 926              	.LVL60:
 927 0000 08B5     		push	{r3, lr}
 928              	.LCFI15:
 929              		.cfi_def_cfa_offset 8
 930              		.cfi_offset 3, -8
 931              		.cfi_offset 14, -4
 513:Src/main.c    ****   if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 932              		.loc 1 513 0
 933 0002 054B     		ldr	r3, .L60
 934 0004 054A     		ldr	r2, .L60+4
 935 0006 0021     		movs	r1, #0
 936 0008 0548     		ldr	r0, .L60+8
 937              	.LVL61:
 938 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 939              	.LVL62:
 940 000e 10B9     		cbnz	r0, .L57
 514:Src/main.c    **** 	  CAN_flag = 0xFF;
 941              		.loc 1 514 0
 942 0010 FF22     		movs	r2, #255
 943 0012 044B     		ldr	r3, .L60+12
 944 0014 1A70     		strb	r2, [r3]
 945              	.L57:
 946 0016 08BD     		pop	{r3, pc}
 947              	.L61:
 948              		.align	2
 949              	.L60:
 950 0018 00000000 		.word	RxData
 951 001c 00000000 		.word	RxHeader
 952 0020 00000000 		.word	hcan
 953 0024 00000000 		.word	CAN_flag
 954              		.cfi_endproc
 955              	.LFE71:
 957              		.section	.text.CAN_interpret,"ax",%progbits
 958              		.align	1
 959              		.global	CAN_interpret
 960              		.syntax unified
 961              		.thumb
 962              		.thumb_func
 963              		.fpu softvfp
 965              	CAN_interpret:
 966              	.LFB72:
 515:Src/main.c    **** }
 516:Src/main.c    **** 
 517:Src/main.c    **** void CAN_interpret(void) {
 967              		.loc 1 517 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971 0000 70B5     		push	{r4, r5, r6, lr}
 972              	.LCFI16:
 973              		.cfi_def_cfa_offset 16
 974              		.cfi_offset 4, -16
 975              		.cfi_offset 5, -12
 976              		.cfi_offset 6, -8
 977              		.cfi_offset 14, -4
 518:Src/main.c    **** 
 519:Src/main.c    **** 	uint16_t received_ID;
ARM GAS  /tmp/ccoE54Gu.s 			page 29


 520:Src/main.c    **** 	received_ID = RxHeader.StdId;
 978              		.loc 1 520 0
 979 0002 954B     		ldr	r3, .L108
 980 0004 1C88     		ldrh	r4, [r3]
 981              	.LVL63:
 521:Src/main.c    **** 
 522:Src/main.c    **** 	if (received_ID == FAULTS) {
 982              		.loc 1 522 0
 983 0006 D02C     		cmp	r4, #208
 984 0008 08D0     		beq	.L86
 985              	.L63:
 523:Src/main.c    **** 
 524:Src/main.c    **** 		uint8_t BMS_fault;
 525:Src/main.c    **** 		uint8_t IMD_fault;
 526:Src/main.c    **** 		uint8_t BSPD_fault;
 527:Src/main.c    **** 		bool any_fault;
 528:Src/main.c    **** 
 529:Src/main.c    **** 		BMS_fault = RxData[0];
 530:Src/main.c    **** 		IMD_fault = RxData[1];
 531:Src/main.c    **** 		BSPD_fault = RxData[2];
 532:Src/main.c    **** 
 533:Src/main.c    **** 		if (BMS_fault == 0xFF) {
 534:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 535:Src/main.c    **** 			any_fault = true;
 536:Src/main.c    **** 		}
 537:Src/main.c    **** 		else if (BMS_fault == 0x00)
 538:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 539:Src/main.c    **** 
 540:Src/main.c    **** 		if (IMD_fault == 0xFF) {
 541:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 542:Src/main.c    **** 			any_fault = true;
 543:Src/main.c    **** 		}
 544:Src/main.c    **** 		else if (IMD_fault == 0x00)
 545:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 546:Src/main.c    **** 
 547:Src/main.c    **** 		if (BSPD_fault == 0xFF) {
 548:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 549:Src/main.c    **** 			any_fault = true;
 550:Src/main.c    **** 		}
 551:Src/main.c    **** 		else if (BSPD_fault == 0x00)
 552:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 553:Src/main.c    **** 
 554:Src/main.c    **** 		if (any_fault == true) {
 555:Src/main.c    **** 			// if there is any fault
 556:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 557:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 558:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 559:Src/main.c    **** 			any_fault = false;
 560:Src/main.c    **** 		}
 561:Src/main.c    **** 
 562:Src/main.c    **** 	}
 563:Src/main.c    **** 
 564:Src/main.c    **** 	if (received_ID == STATES) {
 986              		.loc 1 564 0
 987 000a D12C     		cmp	r4, #209
 988 000c 47D0     		beq	.L87
 989              	.L70:
ARM GAS  /tmp/ccoE54Gu.s 			page 30


 565:Src/main.c    **** 
 566:Src/main.c    **** 		uint8_t Precharge_state;
 567:Src/main.c    **** 		Precharge_state = RxData[0];
 568:Src/main.c    **** 
 569:Src/main.c    **** 		if (Precharge_state == 0x01) {
 570:Src/main.c    **** 			// if precharge is complete
 571:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED green
 572:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 573:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 574:Src/main.c    **** 		}
 575:Src/main.c    **** 
 576:Src/main.c    **** 		if (Precharge_state == 0x02) {
 577:Src/main.c    **** 			// if precharge is not complete
 578:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 579:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 580:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 581:Src/main.c    **** 
 582:Src/main.c    **** 		}
 583:Src/main.c    **** 
 584:Src/main.c    ****   if (Precharge_state == 0x04) {
 585:Src/main.c    ****       // if precharge is not complete
 586:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED blue
 587:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 588:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 589:Src/main.c    **** 
 590:Src/main.c    ****     }
 591:Src/main.c    ****     if (Precharge_state == 0x08) {
 592:Src/main.c    ****       // if precharge is not complete
 593:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED blue
 594:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 595:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 596:Src/main.c    **** 
 597:Src/main.c    ****     }
 598:Src/main.c    ****     if (Precharge_state == 0x10) {
 599:Src/main.c    ****       // if precharge is not complete
 600:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED blue
 601:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 602:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 603:Src/main.c    **** 
 604:Src/main.c    ****     }
 605:Src/main.c    ****     if (Precharge_state == 0x20) {
 606:Src/main.c    ****       // if precharge is not complete
 607:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 608:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOB, RGB_RED_Pin);
 609:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOB, RGB_BLUE_Pin);
 610:Src/main.c    **** 
 611:Src/main.c    ****     }
 612:Src/main.c    ****     uint8_t BMS_fault;
 613:Src/main.c    ****     uint8_t IMD_fault;
 614:Src/main.c    ****     uint8_t BSPD_fault;
 615:Src/main.c    ****     bool any_fault;
 616:Src/main.c    **** 
 617:Src/main.c    ****     BMS_fault = RxData[1];
 618:Src/main.c    ****     IMD_fault = RxData[2];
 619:Src/main.c    ****     BSPD_fault = RxData[3];
 620:Src/main.c    **** 
 621:Src/main.c    ****     if (BMS_fault == 0xFF) {
ARM GAS  /tmp/ccoE54Gu.s 			page 31


 622:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 623:Src/main.c    ****       any_fault = true;
 624:Src/main.c    ****     }
 625:Src/main.c    ****     else if (BMS_fault == 0x00)
 626:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 627:Src/main.c    **** 
 628:Src/main.c    ****     if (IMD_fault == 0xFF) {
 629:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 630:Src/main.c    ****       any_fault = true;
 631:Src/main.c    ****     }
 632:Src/main.c    ****     else if (IMD_fault == 0x00)
 633:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 634:Src/main.c    **** 
 635:Src/main.c    ****     if (BSPD_fault == 0xFF) {
 636:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 637:Src/main.c    ****       any_fault = true;
 638:Src/main.c    ****     }
 639:Src/main.c    ****     else if (BSPD_fault == 0x00)
 640:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 641:Src/main.c    **** 
 642:Src/main.c    ****     if (any_fault == true) {
 643:Src/main.c    ****       // if there is any fault
 644:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 645:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 646:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 647:Src/main.c    ****       any_fault = false;
 648:Src/main.c    ****     }
 649:Src/main.c    **** 
 650:Src/main.c    **** 	}
 651:Src/main.c    **** 
 652:Src/main.c    **** 
 653:Src/main.c    **** if (received_ID == MOTOR_POS) {
 990              		.loc 1 653 0
 991 000e A52C     		cmp	r4, #165
 992 0010 00F00181 		beq	.L88
 993              	.LVL64:
 994              	.L83:
 654:Src/main.c    ****   uint16_t Rpm;
 655:Src/main.c    ****   Rpm = RxData[2] + 256*RxData[3];
 656:Src/main.c    **** 
 657:Src/main.c    ****   if (Rpm < 50){
 658:Src/main.c    ****     POT_Data1[1] = 0;
 659:Src/main.c    ****     POT_Data1[0] = 0;
 660:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 661:Src/main.c    ****   }
 662:Src/main.c    **** 
 663:Src/main.c    ****   if (Rpm >= 50){
 664:Src/main.c    ****     POT_Data1[1] = 3;
 665:Src/main.c    ****     POT_Data1[0] = 232;
 666:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 667:Src/main.c    ****   }
 668:Src/main.c    **** 
 669:Src/main.c    **** }
 670:Src/main.c    **** 
 671:Src/main.c    **** 
 672:Src/main.c    **** 	CAN_flag = 0x00;
 995              		.loc 1 672 0
ARM GAS  /tmp/ccoE54Gu.s 			page 32


 996 0014 0022     		movs	r2, #0
 997 0016 914B     		ldr	r3, .L108+4
 998 0018 1A70     		strb	r2, [r3]
 999 001a 70BD     		pop	{r4, r5, r6, pc}
 1000              	.LVL65:
 1001              	.L86:
 1002              	.LBB4:
 529:Src/main.c    **** 		IMD_fault = RxData[1];
 1003              		.loc 1 529 0
 1004 001c 904B     		ldr	r3, .L108+8
 1005 001e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1006              	.LVL66:
 530:Src/main.c    **** 		BSPD_fault = RxData[2];
 1007              		.loc 1 530 0
 1008 0020 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 1009              	.LVL67:
 531:Src/main.c    **** 
 1010              		.loc 1 531 0
 1011 0022 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 1012              	.LVL68:
 533:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 1013              		.loc 1 533 0
 1014 0024 FF2A     		cmp	r2, #255
 1015 0026 17D0     		beq	.L89
 537:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 1016              		.loc 1 537 0
 1017 0028 E2B1     		cbz	r2, .L90
 1018              	.LVL69:
 1019              	.L65:
 540:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 1020              		.loc 1 540 0
 1021 002a FF2E     		cmp	r6, #255
 1022 002c 1FD0     		beq	.L91
 544:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 1023              		.loc 1 544 0
 1024 002e 26B3     		cbz	r6, .L92
 1025              	.L67:
 547:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 1026              		.loc 1 547 0
 1027 0030 FF2D     		cmp	r5, #255
 1028 0032 28D0     		beq	.L93
 551:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 1029              		.loc 1 551 0
 1030 0034 6DB3     		cbz	r5, .L94
 1031              	.L69:
 556:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 1032              		.loc 1 556 0
 1033 0036 8B4D     		ldr	r5, .L108+12
 1034              	.LVL70:
 1035 0038 0022     		movs	r2, #0
 1036 003a 2021     		movs	r1, #32
 1037 003c 2846     		mov	r0, r5
 1038 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1039              	.LVL71:
 557:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1040              		.loc 1 557 0
 1041 0042 0122     		movs	r2, #1
ARM GAS  /tmp/ccoE54Gu.s 			page 33


 1042 0044 4021     		movs	r1, #64
 1043 0046 2846     		mov	r0, r5
 1044 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1045              	.LVL72:
 558:Src/main.c    **** 			any_fault = false;
 1046              		.loc 1 558 0
 1047 004c 0022     		movs	r2, #0
 1048 004e 8021     		movs	r1, #128
 1049 0050 2846     		mov	r0, r5
 1050 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1051              	.LVL73:
 1052 0056 D8E7     		b	.L63
 1053              	.LVL74:
 1054              	.L89:
 534:Src/main.c    **** 			any_fault = true;
 1055              		.loc 1 534 0
 1056 0058 0122     		movs	r2, #1
 1057              	.LVL75:
 1058 005a 1021     		movs	r1, #16
 1059 005c 8248     		ldr	r0, .L108+16
 1060 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1061              	.LVL76:
 1062 0062 E2E7     		b	.L65
 1063              	.LVL77:
 1064              	.L90:
 538:Src/main.c    **** 
 1065              		.loc 1 538 0
 1066 0064 1021     		movs	r1, #16
 1067 0066 8048     		ldr	r0, .L108+16
 1068 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1069              	.LVL78:
 1070 006c DDE7     		b	.L65
 1071              	.LVL79:
 1072              	.L91:
 541:Src/main.c    **** 			any_fault = true;
 1073              		.loc 1 541 0
 1074 006e 0122     		movs	r2, #1
 1075 0070 2021     		movs	r1, #32
 1076 0072 7D48     		ldr	r0, .L108+16
 1077 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1078              	.LVL80:
 1079 0078 DAE7     		b	.L67
 1080              	.L92:
 545:Src/main.c    **** 
 1081              		.loc 1 545 0
 1082 007a 0022     		movs	r2, #0
 1083 007c 2021     		movs	r1, #32
 1084 007e 7A48     		ldr	r0, .L108+16
 1085 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1086              	.LVL81:
 1087 0084 D4E7     		b	.L67
 1088              	.L93:
 548:Src/main.c    **** 			any_fault = true;
 1089              		.loc 1 548 0
 1090 0086 0122     		movs	r2, #1
 1091 0088 4021     		movs	r1, #64
 1092 008a 7748     		ldr	r0, .L108+16
ARM GAS  /tmp/ccoE54Gu.s 			page 34


 1093 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1094              	.LVL82:
 1095 0090 D1E7     		b	.L69
 1096              	.L94:
 552:Src/main.c    **** 
 1097              		.loc 1 552 0
 1098 0092 0022     		movs	r2, #0
 1099 0094 4021     		movs	r1, #64
 1100 0096 7448     		ldr	r0, .L108+16
 1101 0098 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1102              	.LVL83:
 1103 009c CBE7     		b	.L69
 1104              	.LVL84:
 1105              	.L87:
 1106              	.LBE4:
 1107              	.LBB5:
 567:Src/main.c    **** 
 1108              		.loc 1 567 0
 1109 009e 704B     		ldr	r3, .L108+8
 1110 00a0 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 1111              	.LVL85:
 569:Src/main.c    **** 			// if precharge is complete
 1112              		.loc 1 569 0
 1113 00a2 012D     		cmp	r5, #1
 1114 00a4 30D0     		beq	.L95
 1115              	.L71:
 576:Src/main.c    **** 			// if precharge is not complete
 1116              		.loc 1 576 0
 1117 00a6 022D     		cmp	r5, #2
 1118 00a8 3FD0     		beq	.L96
 1119              	.L72:
 584:Src/main.c    ****       // if precharge is not complete
 1120              		.loc 1 584 0
 1121 00aa 042D     		cmp	r5, #4
 1122 00ac 4ED0     		beq	.L97
 1123              	.L73:
 591:Src/main.c    ****       // if precharge is not complete
 1124              		.loc 1 591 0
 1125 00ae 082D     		cmp	r5, #8
 1126 00b0 5DD0     		beq	.L98
 1127              	.L74:
 598:Src/main.c    ****       // if precharge is not complete
 1128              		.loc 1 598 0
 1129 00b2 102D     		cmp	r5, #16
 1130 00b4 6CD0     		beq	.L99
 1131              	.L75:
 605:Src/main.c    ****       // if precharge is not complete
 1132              		.loc 1 605 0
 1133 00b6 202D     		cmp	r5, #32
 1134 00b8 7BD0     		beq	.L100
 1135              	.LVL86:
 1136              	.L76:
 617:Src/main.c    ****     IMD_fault = RxData[2];
 1137              		.loc 1 617 0
 1138 00ba 694B     		ldr	r3, .L108+8
 1139 00bc 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 1140              	.LVL87:
ARM GAS  /tmp/ccoE54Gu.s 			page 35


 618:Src/main.c    ****     BSPD_fault = RxData[3];
 1141              		.loc 1 618 0
 1142 00be 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 1143              	.LVL88:
 619:Src/main.c    **** 
 1144              		.loc 1 619 0
 1145 00c0 DD78     		ldrb	r5, [r3, #3]	@ zero_extendqisi2
 1146              	.LVL89:
 621:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 1147              		.loc 1 621 0
 1148 00c2 FF2A     		cmp	r2, #255
 1149 00c4 00F08480 		beq	.L101
 625:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);
 1150              		.loc 1 625 0
 1151 00c8 002A     		cmp	r2, #0
 1152 00ca 00F08780 		beq	.L102
 1153              	.LVL90:
 1154              	.L78:
 628:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 1155              		.loc 1 628 0
 1156 00ce FF2E     		cmp	r6, #255
 1157 00d0 00F08980 		beq	.L103
 632:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 1158              		.loc 1 632 0
 1159 00d4 002E     		cmp	r6, #0
 1160 00d6 00F08C80 		beq	.L104
 1161              	.L80:
 635:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 1162              		.loc 1 635 0
 1163 00da FF2D     		cmp	r5, #255
 1164 00dc 00F08F80 		beq	.L105
 639:Src/main.c    ****       HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 1165              		.loc 1 639 0
 1166 00e0 002D     		cmp	r5, #0
 1167 00e2 00F09280 		beq	.L106
 1168              	.L82:
 644:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 1169              		.loc 1 644 0
 1170 00e6 5F4D     		ldr	r5, .L108+12
 1171              	.LVL91:
 1172 00e8 0022     		movs	r2, #0
 1173 00ea 2021     		movs	r1, #32
 1174 00ec 2846     		mov	r0, r5
 1175 00ee FFF7FEFF 		bl	HAL_GPIO_WritePin
 1176              	.LVL92:
 645:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1177              		.loc 1 645 0
 1178 00f2 0122     		movs	r2, #1
 1179 00f4 4021     		movs	r1, #64
 1180 00f6 2846     		mov	r0, r5
 1181 00f8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1182              	.LVL93:
 646:Src/main.c    ****       any_fault = false;
 1183              		.loc 1 646 0
 1184 00fc 0022     		movs	r2, #0
 1185 00fe 8021     		movs	r1, #128
 1186 0100 2846     		mov	r0, r5
ARM GAS  /tmp/ccoE54Gu.s 			page 36


 1187 0102 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1188              	.LVL94:
 1189 0106 82E7     		b	.L70
 1190              	.LVL95:
 1191              	.L95:
 571:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1192              		.loc 1 571 0
 1193 0108 564E     		ldr	r6, .L108+12
 1194 010a 0022     		movs	r2, #0
 1195 010c 2021     		movs	r1, #32
 1196 010e 3046     		mov	r0, r6
 1197 0110 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1198              	.LVL96:
 572:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1199              		.loc 1 572 0
 1200 0114 0022     		movs	r2, #0
 1201 0116 4021     		movs	r1, #64
 1202 0118 3046     		mov	r0, r6
 1203 011a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1204              	.LVL97:
 573:Src/main.c    **** 		}
 1205              		.loc 1 573 0
 1206 011e 0022     		movs	r2, #0
 1207 0120 8021     		movs	r1, #128
 1208 0122 3046     		mov	r0, r6
 1209 0124 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1210              	.LVL98:
 1211 0128 BDE7     		b	.L71
 1212              	.L96:
 578:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1213              		.loc 1 578 0
 1214 012a 4E4E     		ldr	r6, .L108+12
 1215 012c 0022     		movs	r2, #0
 1216 012e 2021     		movs	r1, #32
 1217 0130 3046     		mov	r0, r6
 1218 0132 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1219              	.LVL99:
 579:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 1220              		.loc 1 579 0
 1221 0136 0022     		movs	r2, #0
 1222 0138 4021     		movs	r1, #64
 1223 013a 3046     		mov	r0, r6
 1224 013c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1225              	.LVL100:
 580:Src/main.c    **** 
 1226              		.loc 1 580 0
 1227 0140 0122     		movs	r2, #1
 1228 0142 8021     		movs	r1, #128
 1229 0144 3046     		mov	r0, r6
 1230 0146 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1231              	.LVL101:
 1232 014a AEE7     		b	.L72
 1233              	.L97:
 586:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1234              		.loc 1 586 0
 1235 014c 454E     		ldr	r6, .L108+12
 1236 014e 0122     		movs	r2, #1
ARM GAS  /tmp/ccoE54Gu.s 			page 37


 1237 0150 2021     		movs	r1, #32
 1238 0152 3046     		mov	r0, r6
 1239 0154 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1240              	.LVL102:
 587:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 1241              		.loc 1 587 0
 1242 0158 0022     		movs	r2, #0
 1243 015a 4021     		movs	r1, #64
 1244 015c 3046     		mov	r0, r6
 1245 015e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1246              	.LVL103:
 588:Src/main.c    **** 
 1247              		.loc 1 588 0
 1248 0162 0122     		movs	r2, #1
 1249 0164 8021     		movs	r1, #128
 1250 0166 3046     		mov	r0, r6
 1251 0168 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1252              	.LVL104:
 1253 016c 9FE7     		b	.L73
 1254              	.L98:
 593:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1255              		.loc 1 593 0
 1256 016e 3D4E     		ldr	r6, .L108+12
 1257 0170 0122     		movs	r2, #1
 1258 0172 2021     		movs	r1, #32
 1259 0174 3046     		mov	r0, r6
 1260 0176 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1261              	.LVL105:
 594:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1262              		.loc 1 594 0
 1263 017a 0022     		movs	r2, #0
 1264 017c 4021     		movs	r1, #64
 1265 017e 3046     		mov	r0, r6
 1266 0180 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1267              	.LVL106:
 595:Src/main.c    **** 
 1268              		.loc 1 595 0
 1269 0184 0022     		movs	r2, #0
 1270 0186 8021     		movs	r1, #128
 1271 0188 3046     		mov	r0, r6
 1272 018a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1273              	.LVL107:
 1274 018e 90E7     		b	.L74
 1275              	.L99:
 600:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1276              		.loc 1 600 0
 1277 0190 344E     		ldr	r6, .L108+12
 1278 0192 0122     		movs	r2, #1
 1279 0194 2021     		movs	r1, #32
 1280 0196 3046     		mov	r0, r6
 1281 0198 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1282              	.LVL108:
 601:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1283              		.loc 1 601 0
 1284 019c 0022     		movs	r2, #0
 1285 019e 4021     		movs	r1, #64
 1286 01a0 3046     		mov	r0, r6
ARM GAS  /tmp/ccoE54Gu.s 			page 38


 1287 01a2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1288              	.LVL109:
 602:Src/main.c    **** 
 1289              		.loc 1 602 0
 1290 01a6 0022     		movs	r2, #0
 1291 01a8 8021     		movs	r1, #128
 1292 01aa 3046     		mov	r0, r6
 1293 01ac FFF7FEFF 		bl	HAL_GPIO_WritePin
 1294              	.LVL110:
 1295 01b0 81E7     		b	.L75
 1296              	.L100:
 607:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOB, RGB_RED_Pin);
 1297              		.loc 1 607 0
 1298 01b2 2C4D     		ldr	r5, .L108+12
 1299              	.LVL111:
 1300 01b4 0022     		movs	r2, #0
 1301 01b6 2021     		movs	r1, #32
 1302 01b8 2846     		mov	r0, r5
 1303 01ba FFF7FEFF 		bl	HAL_GPIO_WritePin
 1304              	.LVL112:
 608:Src/main.c    ****       HAL_GPIO_TogglePin(GPIOB, RGB_BLUE_Pin);
 1305              		.loc 1 608 0
 1306 01be 4021     		movs	r1, #64
 1307 01c0 2846     		mov	r0, r5
 1308 01c2 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1309              	.LVL113:
 609:Src/main.c    **** 
 1310              		.loc 1 609 0
 1311 01c6 8021     		movs	r1, #128
 1312 01c8 2846     		mov	r0, r5
 1313 01ca FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1314              	.LVL114:
 1315 01ce 74E7     		b	.L76
 1316              	.LVL115:
 1317              	.L101:
 622:Src/main.c    ****       any_fault = true;
 1318              		.loc 1 622 0
 1319 01d0 0122     		movs	r2, #1
 1320              	.LVL116:
 1321 01d2 1021     		movs	r1, #16
 1322 01d4 2448     		ldr	r0, .L108+16
 1323 01d6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1324              	.LVL117:
 1325 01da 78E7     		b	.L78
 1326              	.LVL118:
 1327              	.L102:
 626:Src/main.c    **** 
 1328              		.loc 1 626 0
 1329 01dc 1021     		movs	r1, #16
 1330 01de 2248     		ldr	r0, .L108+16
 1331 01e0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1332              	.LVL119:
 1333 01e4 73E7     		b	.L78
 1334              	.LVL120:
 1335              	.L103:
 629:Src/main.c    ****       any_fault = true;
 1336              		.loc 1 629 0
ARM GAS  /tmp/ccoE54Gu.s 			page 39


 1337 01e6 0122     		movs	r2, #1
 1338 01e8 2021     		movs	r1, #32
 1339 01ea 1F48     		ldr	r0, .L108+16
 1340 01ec FFF7FEFF 		bl	HAL_GPIO_WritePin
 1341              	.LVL121:
 1342 01f0 73E7     		b	.L80
 1343              	.L104:
 633:Src/main.c    **** 
 1344              		.loc 1 633 0
 1345 01f2 0022     		movs	r2, #0
 1346 01f4 2021     		movs	r1, #32
 1347 01f6 1C48     		ldr	r0, .L108+16
 1348 01f8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1349              	.LVL122:
 1350 01fc 6DE7     		b	.L80
 1351              	.L105:
 636:Src/main.c    ****       any_fault = true;
 1352              		.loc 1 636 0
 1353 01fe 0122     		movs	r2, #1
 1354 0200 4021     		movs	r1, #64
 1355 0202 1948     		ldr	r0, .L108+16
 1356 0204 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1357              	.LVL123:
 1358 0208 6DE7     		b	.L82
 1359              	.L106:
 640:Src/main.c    **** 
 1360              		.loc 1 640 0
 1361 020a 0022     		movs	r2, #0
 1362 020c 4021     		movs	r1, #64
 1363 020e 1648     		ldr	r0, .L108+16
 1364 0210 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1365              	.LVL124:
 1366 0214 67E7     		b	.L82
 1367              	.LVL125:
 1368              	.L88:
 1369              	.LBE5:
 1370              	.LBB6:
 655:Src/main.c    **** 
 1371              		.loc 1 655 0
 1372 0216 124B     		ldr	r3, .L108+8
 1373 0218 9C78     		ldrb	r4, [r3, #2]	@ zero_extendqisi2
 1374              	.LVL126:
 1375 021a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1376 021c 04EB0324 		add	r4, r4, r3, lsl #8
 1377 0220 A4B2     		uxth	r4, r4
 1378              	.LVL127:
 657:Src/main.c    ****     POT_Data1[1] = 0;
 1379              		.loc 1 657 0
 1380 0222 312C     		cmp	r4, #49
 1381 0224 0DD9     		bls	.L107
 1382              	.L84:
 663:Src/main.c    ****     POT_Data1[1] = 3;
 1383              		.loc 1 663 0
 1384 0226 312C     		cmp	r4, #49
 1385 0228 7FF6F4AE 		bls	.L83
 664:Src/main.c    ****     POT_Data1[0] = 232;
 1386              		.loc 1 664 0
ARM GAS  /tmp/ccoE54Gu.s 			page 40


 1387 022c 0F4A     		ldr	r2, .L108+20
 1388 022e 0323     		movs	r3, #3
 1389 0230 5370     		strb	r3, [r2, #1]
 665:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 1390              		.loc 1 665 0
 1391 0232 E823     		movs	r3, #232
 1392 0234 1370     		strb	r3, [r2]
 666:Src/main.c    ****   }
 1393              		.loc 1 666 0
 1394 0236 0E4B     		ldr	r3, .L108+24
 1395 0238 0E49     		ldr	r1, .L108+28
 1396 023a 0F48     		ldr	r0, .L108+32
 1397 023c FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1398              	.LVL128:
 1399 0240 E8E6     		b	.L83
 1400              	.L107:
 658:Src/main.c    ****     POT_Data1[0] = 0;
 1401              		.loc 1 658 0
 1402 0242 0A4A     		ldr	r2, .L108+20
 1403 0244 0023     		movs	r3, #0
 1404 0246 5370     		strb	r3, [r2, #1]
 659:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &POT_Txheader1, POT_Data1, &TxMailbox);
 1405              		.loc 1 659 0
 1406 0248 1370     		strb	r3, [r2]
 660:Src/main.c    ****   }
 1407              		.loc 1 660 0
 1408 024a 094B     		ldr	r3, .L108+24
 1409 024c 0949     		ldr	r1, .L108+28
 1410 024e 0A48     		ldr	r0, .L108+32
 1411 0250 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1412              	.LVL129:
 1413 0254 E7E7     		b	.L84
 1414              	.L109:
 1415 0256 00BF     		.align	2
 1416              	.L108:
 1417 0258 00000000 		.word	RxHeader
 1418 025c 00000000 		.word	CAN_flag
 1419 0260 00000000 		.word	RxData
 1420 0264 000C0140 		.word	1073810432
 1421 0268 00080140 		.word	1073809408
 1422 026c 00000000 		.word	POT_Data1
 1423 0270 00000000 		.word	TxMailbox
 1424 0274 00000000 		.word	POT_Txheader1
 1425 0278 00000000 		.word	hcan
 1426              	.LBE6:
 1427              		.cfi_endproc
 1428              	.LFE72:
 1430              		.section	.text.main,"ax",%progbits
 1431              		.align	1
 1432              		.global	main
 1433              		.syntax unified
 1434              		.thumb
 1435              		.thumb_func
 1436              		.fpu softvfp
 1438              	main:
 1439              	.LFB64:
  95:Src/main.c    ****   /* USER CODE BEGIN 1 */
ARM GAS  /tmp/ccoE54Gu.s 			page 41


 1440              		.loc 1 95 0
 1441              		.cfi_startproc
 1442              		@ Volatile: function does not return.
 1443              		@ args = 0, pretend = 0, frame = 8
 1444              		@ frame_needed = 0, uses_anonymous_args = 0
 1445 0000 00B5     		push	{lr}
 1446              	.LCFI17:
 1447              		.cfi_def_cfa_offset 4
 1448              		.cfi_offset 14, -4
 1449 0002 83B0     		sub	sp, sp, #12
 1450              	.LCFI18:
 1451              		.cfi_def_cfa_offset 16
 103:Src/main.c    **** 
 1452              		.loc 1 103 0
 1453 0004 FFF7FEFF 		bl	HAL_Init
 1454              	.LVL130:
 110:Src/main.c    **** 
 1455              		.loc 1 110 0
 1456 0008 FFF7FEFF 		bl	SystemClock_Config
 1457              	.LVL131:
 117:Src/main.c    ****   MX_ADC1_Init();
 1458              		.loc 1 117 0
 1459 000c FFF7FEFF 		bl	MX_GPIO_Init
 1460              	.LVL132:
 118:Src/main.c    ****   MX_CAN_Init();
 1461              		.loc 1 118 0
 1462 0010 FFF7FEFF 		bl	MX_ADC1_Init
 1463              	.LVL133:
 119:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1464              		.loc 1 119 0
 1465 0014 FFF7FEFF 		bl	MX_CAN_Init
 1466              	.LVL134:
 1467 0018 17E0     		b	.L112
 1468              	.L111:
 1469              	.LBB7:
 138:Src/main.c    **** 	POT_interpret(pot_position);
 1470              		.loc 1 138 0
 1471 001a 6846     		mov	r0, sp
 1472 001c FFF7FEFF 		bl	POT_read
 1473              	.LVL135:
 139:Src/main.c    **** 
 1474              		.loc 1 139 0
 1475 0020 6846     		mov	r0, sp
 1476 0022 FFF7FEFF 		bl	POT_interpret
 1477              	.LVL136:
 142:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &POT_Txheader, POT_Data, &TxMailbox);
 1478              		.loc 1 142 0
 1479 0026 0D4D     		ldr	r5, .L114
 1480 0028 0D4C     		ldr	r4, .L114+4
 1481 002a 2B46     		mov	r3, r5
 1482 002c 0D4A     		ldr	r2, .L114+8
 1483 002e 0E49     		ldr	r1, .L114+12
 1484 0030 2046     		mov	r0, r4
 1485 0032 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1486              	.LVL137:
 143:Src/main.c    **** 
 1487              		.loc 1 143 0
ARM GAS  /tmp/ccoE54Gu.s 			page 42


 1488 0036 2B46     		mov	r3, r5
 1489 0038 0C4A     		ldr	r2, .L114+16
 1490 003a 0D49     		ldr	r1, .L114+20
 1491 003c 2046     		mov	r0, r4
 1492 003e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1493              	.LVL138:
 145:Src/main.c    **** 
 1494              		.loc 1 145 0
 1495 0042 4FF47A70 		mov	r0, #1000
 1496 0046 FFF7FEFF 		bl	HAL_Delay
 1497              	.LVL139:
 1498              	.L112:
 132:Src/main.c    **** 		CAN_interpret();
 1499              		.loc 1 132 0
 1500 004a 0A4B     		ldr	r3, .L114+24
 1501 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1502 004e DBB2     		uxtb	r3, r3
 1503 0050 FF2B     		cmp	r3, #255
 1504 0052 E2D1     		bne	.L111
 133:Src/main.c    **** 
 1505              		.loc 1 133 0
 1506 0054 FFF7FEFF 		bl	CAN_interpret
 1507              	.LVL140:
 1508 0058 DFE7     		b	.L111
 1509              	.L115:
 1510 005a 00BF     		.align	2
 1511              	.L114:
 1512 005c 00000000 		.word	TxMailbox
 1513 0060 00000000 		.word	hcan
 1514 0064 00000000 		.word	POT_data
 1515 0068 00000000 		.word	POT_TxHeader
 1516 006c 00000000 		.word	POT_Data
 1517 0070 00000000 		.word	POT_Txheader
 1518 0074 00000000 		.word	CAN_flag
 1519              	.LBE7:
 1520              		.cfi_endproc
 1521              	.LFE64:
 1523              		.section	.text.Error_Handler,"ax",%progbits
 1524              		.align	1
 1525              		.global	Error_Handler
 1526              		.syntax unified
 1527              		.thumb
 1528              		.thumb_func
 1529              		.fpu softvfp
 1531              	Error_Handler:
 1532              	.LFB73:
 673:Src/main.c    **** 
 674:Src/main.c    **** }
 675:Src/main.c    **** /* USER CODE END 4 */
 676:Src/main.c    **** 
 677:Src/main.c    **** /**
 678:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 679:Src/main.c    ****   * @retval None
 680:Src/main.c    ****   */
 681:Src/main.c    **** void Error_Handler(void)
 682:Src/main.c    **** {
 1533              		.loc 1 682 0
ARM GAS  /tmp/ccoE54Gu.s 			page 43


 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 0
 1536              		@ frame_needed = 0, uses_anonymous_args = 0
 1537              		@ link register save eliminated.
 1538 0000 7047     		bx	lr
 1539              		.cfi_endproc
 1540              	.LFE73:
 1542              		.global	pot_threshold
 1543              		.comm	CAN_flag,1,1
 1544              		.comm	TxMailbox,4,4
 1545              		.comm	POT_Data1,8,4
 1546              		.comm	POT_Data,8,4
 1547              		.comm	POT_data,8,4
 1548              		.comm	POT_Txheader1,24,4
 1549              		.comm	POT_Txheader,24,4
 1550              		.comm	POT_TxHeader,24,4
 1551              		.comm	RxData,8,4
 1552              		.comm	RxHeader,28,4
 1553              		.comm	hcan,40,4
 1554              		.global	sConfig
 1555              		.comm	hadc1,48,4
 1556              		.section	.bss.sConfig,"aw",%nobits
 1557              		.align	2
 1558              		.set	.LANCHOR0,. + 0
 1561              	sConfig:
 1562 0000 00000000 		.space	12
 1562      00000000 
 1562      00000000 
 1563              		.section	.data.pot_threshold,"aw",%progbits
 1564              		.align	2
 1565              		.set	.LANCHOR1,. + 0
 1568              	pot_threshold:
 1569 0000 0000     		.short	0
 1570 0002 6702     		.short	615
 1571 0004 0104     		.short	1025
 1572 0006 9B05     		.short	1435
 1573 0008 3507     		.short	1845
 1574 000a CF08     		.short	2255
 1575 000c 690A     		.short	2665
 1576 000e 030C     		.short	3075
 1577 0010 9D0D     		.short	3485
 1578 0012 370F     		.short	3895
 1579 0014 FF0F     		.short	4095
 1580              		.text
 1581              	.Letext0:
 1582              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1583              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1584              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1585              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1586              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1587              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1588              		.file 8 "/usr/include/newlib/sys/lock.h"
 1589              		.file 9 "/usr/include/newlib/sys/_types.h"
 1590              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1591              		.file 11 "/usr/include/newlib/sys/reent.h"
 1592              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1593              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
ARM GAS  /tmp/ccoE54Gu.s 			page 44


 1594              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1595              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1596              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1597              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1598              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1599              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccoE54Gu.s 			page 45


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccoE54Gu.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccoE54Gu.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccoE54Gu.s:121    .text.MX_GPIO_Init:0000000000000088 $d
     /tmp/ccoE54Gu.s:128    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccoE54Gu.s:134    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccoE54Gu.s:220    .text.MX_ADC1_Init:0000000000000064 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccoE54Gu.s:227    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccoE54Gu.s:233    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccoE54Gu.s:363    .text.MX_CAN_Init:0000000000000090 $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 POT_TxHeader
                            *COM*:0000000000000018 POT_Txheader
                            *COM*:0000000000000018 POT_Txheader1
     /tmp/ccoE54Gu.s:372    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccoE54Gu.s:379    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccoE54Gu.s:459    .text.POT_read:0000000000000000 $t
     /tmp/ccoE54Gu.s:466    .text.POT_read:0000000000000000 POT_read
     /tmp/ccoE54Gu.s:612    .text.POT_read:00000000000000d4 $d
     /tmp/ccoE54Gu.s:618    .text.POT_interpret:0000000000000000 $t
     /tmp/ccoE54Gu.s:625    .text.POT_interpret:0000000000000000 POT_interpret
     /tmp/ccoE54Gu.s:904    .text.POT_interpret:0000000000000174 $d
                            *COM*:0000000000000008 POT_data
                            *COM*:0000000000000008 POT_Data
     /tmp/ccoE54Gu.s:913    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccoE54Gu.s:920    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccoE54Gu.s:950    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000018 $d
                            *COM*:0000000000000008 RxData
                            *COM*:000000000000001c RxHeader
                            *COM*:0000000000000001 CAN_flag
     /tmp/ccoE54Gu.s:958    .text.CAN_interpret:0000000000000000 $t
     /tmp/ccoE54Gu.s:965    .text.CAN_interpret:0000000000000000 CAN_interpret
     /tmp/ccoE54Gu.s:1417   .text.CAN_interpret:0000000000000258 $d
                            *COM*:0000000000000008 POT_Data1
                            *COM*:0000000000000004 TxMailbox
     /tmp/ccoE54Gu.s:1431   .text.main:0000000000000000 $t
     /tmp/ccoE54Gu.s:1438   .text.main:0000000000000000 main
     /tmp/ccoE54Gu.s:1512   .text.main:000000000000005c $d
     /tmp/ccoE54Gu.s:1524   .text.Error_Handler:0000000000000000 $t
     /tmp/ccoE54Gu.s:1531   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccoE54Gu.s:1568   .data.pot_threshold:0000000000000000 pot_threshold
     /tmp/ccoE54Gu.s:1561   .bss.sConfig:0000000000000000 sConfig
     /tmp/ccoE54Gu.s:1557   .bss.sConfig:0000000000000000 $d
     /tmp/ccoE54Gu.s:1564   .data.pot_threshold:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
ARM GAS  /tmp/ccoE54Gu.s 			page 46


memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_CAN_GetRxMessage
HAL_GPIO_TogglePin
HAL_CAN_AddTxMessage
HAL_Init
HAL_Delay

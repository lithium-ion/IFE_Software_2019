ARM GAS  /tmp/ccylgTLq.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB70:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "stdbool.h"
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
ARM GAS  /tmp/ccylgTLq.s 			page 2


  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** #define DASH_CAN_ID			0x00F
  37:Src/main.c    **** 
  38:Src/main.c    **** #define FAULTS				0x0D0
  39:Src/main.c    **** #define PRECHARGE			0x0D1
  40:Src/main.c    **** #define ENABLE_SIG		0x0D2
  41:Src/main.c    **** /* USER CODE END PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  44:Src/main.c    **** /* USER CODE BEGIN PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* USER CODE END PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  49:Src/main.c    **** ADC_HandleTypeDef hadc1;
  50:Src/main.c    **** 
  51:Src/main.c    **** CAN_HandleTypeDef hcan;
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN PV */
  54:Src/main.c    **** 
  55:Src/main.c    **** CAN_RxHeaderTypeDef   	RxHeader;
  56:Src/main.c    **** uint8_t               	RxData[8];
  57:Src/main.c    **** 
  58:Src/main.c    **** CAN_TxHeaderTypeDef   	POT_TxHeader;
  59:Src/main.c    **** uint8_t               	POT_data[8];
  60:Src/main.c    **** uint32_t              	TxMailbox;
  61:Src/main.c    **** 
  62:Src/main.c    **** volatile char					CAN_flag;
  63:Src/main.c    **** 
  64:Src/main.c    **** uint16_t				pot_threshold[11] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE END PV */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  69:Src/main.c    **** void SystemClock_Config(void);
  70:Src/main.c    **** static void MX_GPIO_Init(void);
  71:Src/main.c    **** static void MX_ADC1_Init(void);
  72:Src/main.c    **** static void MX_CAN_Init(void);
  73:Src/main.c    **** /* USER CODE BEGIN PFP */
  74:Src/main.c    **** void POT_read(uint16_t pot_values[4]);
  75:Src/main.c    **** void CAN_interpret(void);
  76:Src/main.c    **** void  POT_interpret(uint16_t pot_values[4]);
  77:Src/main.c    **** /* USER CODE END PFP */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  80:Src/main.c    **** /* USER CODE BEGIN 0 */
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE END 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** /**
  85:Src/main.c    ****   * @brief  The application entry point.
  86:Src/main.c    ****   * @retval int
  87:Src/main.c    ****   */
  88:Src/main.c    **** int main(void)
  89:Src/main.c    **** {
  90:Src/main.c    ****   /* USER CODE BEGIN 1 */
ARM GAS  /tmp/ccylgTLq.s 			page 3


  91:Src/main.c    **** 
  92:Src/main.c    ****   /* USER CODE END 1 */
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  97:Src/main.c    ****   HAL_Init();
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* USER CODE BEGIN Init */
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE END Init */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* Configure the system clock */
 104:Src/main.c    ****   SystemClock_Config();
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE END SysInit */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* Initialize all configured peripherals */
 111:Src/main.c    ****   MX_GPIO_Init();
 112:Src/main.c    ****   MX_ADC1_Init();
 113:Src/main.c    ****   MX_CAN_Init();
 114:Src/main.c    ****   /* USER CODE BEGIN 2 */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* USER CODE END 2 */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* Infinite loop */
 119:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 120:Src/main.c    ****   while (1)
 121:Src/main.c    ****   {
 122:Src/main.c    ****     /* USER CODE END WHILE */
 123:Src/main.c    **** 
 124:Src/main.c    ****     /* USER CODE BEGIN 3 */
 125:Src/main.c    **** 	
 126:Src/main.c    **** 	if (CAN_flag == 0xFF)
 127:Src/main.c    **** 		CAN_interpret();
 128:Src/main.c    **** 
 129:Src/main.c    **** 	//send POT positions CAN message
 130:Src/main.c    **** 	
 131:Src/main.c    **** 	uint16_t pot_position[4];
 132:Src/main.c    ****   POT_read(pot_position);
 133:Src/main.c    **** 	POT_interpret(pot_position);
 134:Src/main.c    **** 
 135:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &POT_TxHeader, POT_data, &TxMailbox);
 136:Src/main.c    **** 
 137:Src/main.c    **** 	
 138:Src/main.c    **** 	//HAL_Delay();
 139:Src/main.c    **** 
 140:Src/main.c    **** 	
 141:Src/main.c    ****   }
 142:Src/main.c    ****   /* USER CODE END 3 */
 143:Src/main.c    **** }
 144:Src/main.c    **** 
 145:Src/main.c    **** /**
 146:Src/main.c    ****   * @brief System Clock Configuration
 147:Src/main.c    ****   * @retval None
ARM GAS  /tmp/ccylgTLq.s 			page 4


 148:Src/main.c    ****   */
 149:Src/main.c    **** void SystemClock_Config(void)
 150:Src/main.c    **** {
 151:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 152:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 153:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 154:Src/main.c    **** 
 155:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 156:Src/main.c    ****   */
 157:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 158:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 159:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 160:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 161:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 162:Src/main.c    ****   {
 163:Src/main.c    ****     Error_Handler();
 164:Src/main.c    ****   }
 165:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 166:Src/main.c    ****   */
 167:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 168:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 169:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 170:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 171:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 172:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 173:Src/main.c    **** 
 174:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 175:Src/main.c    ****   {
 176:Src/main.c    ****     Error_Handler();
 177:Src/main.c    ****   }
 178:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 179:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 180:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 181:Src/main.c    ****   {
 182:Src/main.c    ****     Error_Handler();
 183:Src/main.c    ****   }
 184:Src/main.c    **** }
 185:Src/main.c    **** 
 186:Src/main.c    **** /**
 187:Src/main.c    ****   * @brief ADC1 Initialization Function
 188:Src/main.c    ****   * @param None
 189:Src/main.c    ****   * @retval None
 190:Src/main.c    ****   */
 191:Src/main.c    **** static void MX_ADC1_Init(void)
 192:Src/main.c    **** {
 193:Src/main.c    **** 
 194:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 195:Src/main.c    **** 
 196:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 197:Src/main.c    **** 
 198:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 199:Src/main.c    **** 
 200:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 201:Src/main.c    **** 
 202:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 203:Src/main.c    ****   /** Common config 
 204:Src/main.c    ****   */
ARM GAS  /tmp/ccylgTLq.s 			page 5


 205:Src/main.c    ****   hadc1.Instance = ADC1;
 206:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 207:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 208:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 209:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 210:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 211:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 212:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 213:Src/main.c    ****   {
 214:Src/main.c    ****     Error_Handler();
 215:Src/main.c    ****   }
 216:Src/main.c    ****   /** Configure Regular Channel 
 217:Src/main.c    ****   */
 218:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 219:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 220:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 221:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 222:Src/main.c    ****   {
 223:Src/main.c    ****     Error_Handler();
 224:Src/main.c    ****   }
 225:Src/main.c    ****   /** Configure Regular Channel 
 226:Src/main.c    ****   */
 227:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 228:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 229:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 230:Src/main.c    ****   {
 231:Src/main.c    ****     Error_Handler();
 232:Src/main.c    ****   }
 233:Src/main.c    ****   /** Configure Regular Channel 
 234:Src/main.c    ****   */
 235:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_7;
 236:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 237:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 238:Src/main.c    ****   {
 239:Src/main.c    ****     Error_Handler();
 240:Src/main.c    ****   }
 241:Src/main.c    ****   /** Configure Regular Channel 
 242:Src/main.c    ****   */
 243:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 244:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 245:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 246:Src/main.c    ****   {
 247:Src/main.c    ****     Error_Handler();
 248:Src/main.c    ****   }
 249:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 250:Src/main.c    **** 
 251:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 252:Src/main.c    **** 
 253:Src/main.c    **** }
 254:Src/main.c    **** 
 255:Src/main.c    **** /**
 256:Src/main.c    ****   * @brief CAN Initialization Function
 257:Src/main.c    ****   * @param None
 258:Src/main.c    ****   * @retval None
 259:Src/main.c    ****   */
 260:Src/main.c    **** static void MX_CAN_Init(void)
 261:Src/main.c    **** {
ARM GAS  /tmp/ccylgTLq.s 			page 6


 262:Src/main.c    **** 
 263:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 264:Src/main.c    **** 	CAN_FilterTypeDef     sFilterConfig;
 265:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 266:Src/main.c    **** 
 267:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 268:Src/main.c    **** 
 269:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 270:Src/main.c    ****   hcan.Instance = CAN1;
 271:Src/main.c    ****   hcan.Init.Prescaler = 2;
 272:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 273:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 274:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 275:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 276:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 277:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 278:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 279:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 280:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 281:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 282:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 283:Src/main.c    ****   {
 284:Src/main.c    ****     Error_Handler();
 285:Src/main.c    ****   }
 286:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 */
 287:Src/main.c    **** 	POT_TxHeader.StdId = DASH_CAN_ID; 						// CAN standard ID
 288:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 289:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 290:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 291:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 292:Src/main.c    ****   
 293:Src/main.c    **** 	sFilterConfig.FilterBank = 0;							// filter number (0-13)
 294:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode		
 295:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;		
 296:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 297:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 298:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 299:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 300:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 301:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 302:Src/main.c    **** 	
 303:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 304:Src/main.c    **** 	
 305:Src/main.c    **** 	HAL_CAN_Start(&hcan);
 306:Src/main.c    **** 	
 307:Src/main.c    **** 	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); 
 308:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 309:Src/main.c    **** 
 310:Src/main.c    **** }
 311:Src/main.c    **** 
 312:Src/main.c    **** /**
 313:Src/main.c    ****   * @brief GPIO Initialization Function
 314:Src/main.c    ****   * @param None
 315:Src/main.c    ****   * @retval None
 316:Src/main.c    ****   */
 317:Src/main.c    **** static void MX_GPIO_Init(void)
 318:Src/main.c    **** {
ARM GAS  /tmp/ccylgTLq.s 			page 7


  26              		.loc 1 318 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 24
  33              		.cfi_offset 4, -24
  34              		.cfi_offset 5, -20
  35              		.cfi_offset 6, -16
  36              		.cfi_offset 7, -12
  37              		.cfi_offset 8, -8
  38              		.cfi_offset 14, -4
  39 0004 86B0     		sub	sp, sp, #24
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 48
 319:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 319 3 view .LVU1
  43              		.loc 1 319 20 is_stmt 0 view .LVU2
  44 0006 0024     		movs	r4, #0
  45 0008 0294     		str	r4, [sp, #8]
  46 000a 0394     		str	r4, [sp, #12]
  47 000c 0494     		str	r4, [sp, #16]
  48 000e 0594     		str	r4, [sp, #20]
 320:Src/main.c    **** 
 321:Src/main.c    ****   /* GPIO Ports Clock Enable */
 322:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  49              		.loc 1 322 3 is_stmt 1 view .LVU3
  50              	.LBB2:
  51              		.loc 1 322 3 view .LVU4
  52              		.loc 1 322 3 view .LVU5
  53 0010 1D4B     		ldr	r3, .L3
  54 0012 9A69     		ldr	r2, [r3, #24]
  55 0014 42F00402 		orr	r2, r2, #4
  56 0018 9A61     		str	r2, [r3, #24]
  57              		.loc 1 322 3 view .LVU6
  58 001a 9A69     		ldr	r2, [r3, #24]
  59 001c 02F00402 		and	r2, r2, #4
  60 0020 0092     		str	r2, [sp]
  61              		.loc 1 322 3 view .LVU7
  62 0022 009A     		ldr	r2, [sp]
  63              	.LBE2:
 323:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  64              		.loc 1 323 3 view .LVU8
  65              	.LBB3:
  66              		.loc 1 323 3 view .LVU9
  67              		.loc 1 323 3 view .LVU10
  68 0024 9A69     		ldr	r2, [r3, #24]
  69 0026 42F00802 		orr	r2, r2, #8
  70 002a 9A61     		str	r2, [r3, #24]
  71              		.loc 1 323 3 view .LVU11
  72 002c 9B69     		ldr	r3, [r3, #24]
  73 002e 03F00803 		and	r3, r3, #8
  74 0032 0193     		str	r3, [sp, #4]
  75              		.loc 1 323 3 view .LVU12
  76 0034 019B     		ldr	r3, [sp, #4]
  77              	.LBE3:
ARM GAS  /tmp/ccylgTLq.s 			page 8


 324:Src/main.c    **** 
 325:Src/main.c    ****   /*Configure GPIO pin Output Level */
 326:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin 
  78              		.loc 1 326 3 view .LVU13
  79 0036 DFF85880 		ldr	r8, .L3+8
  80 003a 2246     		mov	r2, r4
  81 003c 4FF45E71 		mov	r1, #888
  82 0040 4046     		mov	r0, r8
  83 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  84              	.LVL0:
 327:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin, GPIO_PIN_RESET);
 328:Src/main.c    **** 
 329:Src/main.c    ****   /*Configure GPIO pin Output Level */
 330:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin, GPIO_PIN_RESET);
  85              		.loc 1 330 3 view .LVU14
  86 0046 114D     		ldr	r5, .L3+4
  87 0048 2246     		mov	r2, r4
  88 004a 4FF4F071 		mov	r1, #480
  89 004e 2846     		mov	r0, r5
  90 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  91              	.LVL1:
 331:Src/main.c    **** 
 332:Src/main.c    ****   /*Configure GPIO pins : CUR_LED_Pin BMS_LED_ON_Pin IMD_LED_ON_Pin BSPD_LED_ON_Pin 
 333:Src/main.c    ****                            DRS_LED_Pin TC_LED_Pin */
 334:Src/main.c    ****   GPIO_InitStruct.Pin = CUR_LED_Pin|BMS_LED_ON_Pin|IMD_LED_ON_Pin|BSPD_LED_ON_Pin 
  92              		.loc 1 334 3 view .LVU15
  93              		.loc 1 334 23 is_stmt 0 view .LVU16
  94 0054 4FF45E73 		mov	r3, #888
  95 0058 0293     		str	r3, [sp, #8]
 335:Src/main.c    ****                           |DRS_LED_Pin|TC_LED_Pin;
 336:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  96              		.loc 1 336 3 is_stmt 1 view .LVU17
  97              		.loc 1 336 24 is_stmt 0 view .LVU18
  98 005a 0127     		movs	r7, #1
  99 005c 0397     		str	r7, [sp, #12]
 337:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 100              		.loc 1 337 3 is_stmt 1 view .LVU19
 101              		.loc 1 337 24 is_stmt 0 view .LVU20
 102 005e 0494     		str	r4, [sp, #16]
 338:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 103              		.loc 1 338 3 is_stmt 1 view .LVU21
 104              		.loc 1 338 25 is_stmt 0 view .LVU22
 105 0060 0226     		movs	r6, #2
 106 0062 0596     		str	r6, [sp, #20]
 339:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 107              		.loc 1 339 3 is_stmt 1 view .LVU23
 108 0064 02A9     		add	r1, sp, #8
 109 0066 4046     		mov	r0, r8
 110 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 111              	.LVL2:
 340:Src/main.c    **** 
 341:Src/main.c    ****   /*Configure GPIO pins : RGB_GREEN_Pin RGB_RED_Pin RGB_BLUE_Pin CUST_LED_Pin */
 342:Src/main.c    ****   GPIO_InitStruct.Pin = RGB_GREEN_Pin|RGB_RED_Pin|RGB_BLUE_Pin|CUST_LED_Pin;
 112              		.loc 1 342 3 view .LVU24
 113              		.loc 1 342 23 is_stmt 0 view .LVU25
 114 006c 4FF4F073 		mov	r3, #480
 115 0070 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccylgTLq.s 			page 9


 343:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 116              		.loc 1 343 3 is_stmt 1 view .LVU26
 117              		.loc 1 343 24 is_stmt 0 view .LVU27
 118 0072 0397     		str	r7, [sp, #12]
 344:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 119              		.loc 1 344 3 is_stmt 1 view .LVU28
 120              		.loc 1 344 24 is_stmt 0 view .LVU29
 121 0074 0494     		str	r4, [sp, #16]
 345:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 122              		.loc 1 345 3 is_stmt 1 view .LVU30
 123              		.loc 1 345 25 is_stmt 0 view .LVU31
 124 0076 0596     		str	r6, [sp, #20]
 346:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 125              		.loc 1 346 3 is_stmt 1 view .LVU32
 126 0078 02A9     		add	r1, sp, #8
 127 007a 2846     		mov	r0, r5
 128 007c FFF7FEFF 		bl	HAL_GPIO_Init
 129              	.LVL3:
 347:Src/main.c    **** 
 348:Src/main.c    **** }
 130              		.loc 1 348 1 is_stmt 0 view .LVU33
 131 0080 06B0     		add	sp, sp, #24
 132              	.LCFI2:
 133              		.cfi_def_cfa_offset 24
 134              		@ sp needed
 135 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 136              	.L4:
 137 0086 00BF     		.align	2
 138              	.L3:
 139 0088 00100240 		.word	1073876992
 140 008c 000C0140 		.word	1073810432
 141 0090 00080140 		.word	1073809408
 142              		.cfi_endproc
 143              	.LFE70:
 145              		.section	.text.MX_ADC1_Init,"ax",%progbits
 146              		.align	1
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu softvfp
 152              	MX_ADC1_Init:
 153              	.LFB68:
 192:Src/main.c    **** 
 154              		.loc 1 192 1 is_stmt 1 view -0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 16
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 159              	.LCFI3:
 160              		.cfi_def_cfa_offset 20
 161              		.cfi_offset 4, -20
 162              		.cfi_offset 5, -16
 163              		.cfi_offset 6, -12
 164              		.cfi_offset 7, -8
 165              		.cfi_offset 14, -4
 166 0002 85B0     		sub	sp, sp, #20
 167              	.LCFI4:
ARM GAS  /tmp/ccylgTLq.s 			page 10


 168              		.cfi_def_cfa_offset 40
 198:Src/main.c    **** 
 169              		.loc 1 198 3 view .LVU35
 198:Src/main.c    **** 
 170              		.loc 1 198 26 is_stmt 0 view .LVU36
 171 0004 0025     		movs	r5, #0
 172 0006 0195     		str	r5, [sp, #4]
 173 0008 0295     		str	r5, [sp, #8]
 174 000a 0395     		str	r5, [sp, #12]
 205:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 175              		.loc 1 205 3 is_stmt 1 view .LVU37
 205:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 176              		.loc 1 205 18 is_stmt 0 view .LVU38
 177 000c 1A4C     		ldr	r4, .L7
 178 000e 1B4B     		ldr	r3, .L7+4
 179 0010 2360     		str	r3, [r4]
 206:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 180              		.loc 1 206 3 is_stmt 1 view .LVU39
 206:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 181              		.loc 1 206 27 is_stmt 0 view .LVU40
 182 0012 4FF48073 		mov	r3, #256
 183 0016 A360     		str	r3, [r4, #8]
 207:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 184              		.loc 1 207 3 is_stmt 1 view .LVU41
 207:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 185              		.loc 1 207 33 is_stmt 0 view .LVU42
 186 0018 0126     		movs	r6, #1
 187 001a E660     		str	r6, [r4, #12]
 208:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 188              		.loc 1 208 3 is_stmt 1 view .LVU43
 208:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 189              		.loc 1 208 36 is_stmt 0 view .LVU44
 190 001c 6561     		str	r5, [r4, #20]
 209:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 191              		.loc 1 209 3 is_stmt 1 view .LVU45
 209:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 192              		.loc 1 209 31 is_stmt 0 view .LVU46
 193 001e 4FF46023 		mov	r3, #917504
 194 0022 E361     		str	r3, [r4, #28]
 210:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 195              		.loc 1 210 3 is_stmt 1 view .LVU47
 210:Src/main.c    ****   hadc1.Init.NbrOfConversion = 4;
 196              		.loc 1 210 24 is_stmt 0 view .LVU48
 197 0024 6560     		str	r5, [r4, #4]
 211:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 198              		.loc 1 211 3 is_stmt 1 view .LVU49
 211:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 199              		.loc 1 211 30 is_stmt 0 view .LVU50
 200 0026 0427     		movs	r7, #4
 201 0028 2761     		str	r7, [r4, #16]
 212:Src/main.c    ****   {
 202              		.loc 1 212 3 is_stmt 1 view .LVU51
 212:Src/main.c    ****   {
 203              		.loc 1 212 7 is_stmt 0 view .LVU52
 204 002a 2046     		mov	r0, r4
 205 002c FFF7FEFF 		bl	HAL_ADC_Init
 206              	.LVL4:
ARM GAS  /tmp/ccylgTLq.s 			page 11


 218:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 207              		.loc 1 218 3 is_stmt 1 view .LVU53
 218:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 208              		.loc 1 218 19 is_stmt 0 view .LVU54
 209 0030 0195     		str	r5, [sp, #4]
 219:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 210              		.loc 1 219 3 is_stmt 1 view .LVU55
 219:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 211              		.loc 1 219 16 is_stmt 0 view .LVU56
 212 0032 0296     		str	r6, [sp, #8]
 220:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 213              		.loc 1 220 3 is_stmt 1 view .LVU57
 220:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 214              		.loc 1 220 24 is_stmt 0 view .LVU58
 215 0034 0396     		str	r6, [sp, #12]
 221:Src/main.c    ****   {
 216              		.loc 1 221 3 is_stmt 1 view .LVU59
 221:Src/main.c    ****   {
 217              		.loc 1 221 7 is_stmt 0 view .LVU60
 218 0036 0DEB0701 		add	r1, sp, r7
 219 003a 2046     		mov	r0, r4
 220 003c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 221              	.LVL5:
 227:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 222              		.loc 1 227 3 is_stmt 1 view .LVU61
 227:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 223              		.loc 1 227 19 is_stmt 0 view .LVU62
 224 0040 0196     		str	r6, [sp, #4]
 228:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 225              		.loc 1 228 3 is_stmt 1 view .LVU63
 228:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 226              		.loc 1 228 16 is_stmt 0 view .LVU64
 227 0042 0223     		movs	r3, #2
 228 0044 0293     		str	r3, [sp, #8]
 229:Src/main.c    ****   {
 229              		.loc 1 229 3 is_stmt 1 view .LVU65
 229:Src/main.c    ****   {
 230              		.loc 1 229 7 is_stmt 0 view .LVU66
 231 0046 0DEB0701 		add	r1, sp, r7
 232 004a 2046     		mov	r0, r4
 233 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 234              	.LVL6:
 235:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 235              		.loc 1 235 3 is_stmt 1 view .LVU67
 235:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 236              		.loc 1 235 19 is_stmt 0 view .LVU68
 237 0050 0723     		movs	r3, #7
 238 0052 0193     		str	r3, [sp, #4]
 236:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 239              		.loc 1 236 3 is_stmt 1 view .LVU69
 236:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 240              		.loc 1 236 16 is_stmt 0 view .LVU70
 241 0054 0323     		movs	r3, #3
 242 0056 0293     		str	r3, [sp, #8]
 237:Src/main.c    ****   {
 243              		.loc 1 237 3 is_stmt 1 view .LVU71
 237:Src/main.c    ****   {
ARM GAS  /tmp/ccylgTLq.s 			page 12


 244              		.loc 1 237 7 is_stmt 0 view .LVU72
 245 0058 0DEB0701 		add	r1, sp, r7
 246 005c 2046     		mov	r0, r4
 247 005e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 248              	.LVL7:
 243:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 249              		.loc 1 243 3 is_stmt 1 view .LVU73
 243:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 250              		.loc 1 243 19 is_stmt 0 view .LVU74
 251 0062 0923     		movs	r3, #9
 252 0064 0193     		str	r3, [sp, #4]
 244:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 253              		.loc 1 244 3 is_stmt 1 view .LVU75
 244:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 254              		.loc 1 244 16 is_stmt 0 view .LVU76
 255 0066 0297     		str	r7, [sp, #8]
 245:Src/main.c    ****   {
 256              		.loc 1 245 3 is_stmt 1 view .LVU77
 245:Src/main.c    ****   {
 257              		.loc 1 245 7 is_stmt 0 view .LVU78
 258 0068 0DEB0701 		add	r1, sp, r7
 259 006c 2046     		mov	r0, r4
 260 006e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 261              	.LVL8:
 253:Src/main.c    **** 
 262              		.loc 1 253 1 view .LVU79
 263 0072 05B0     		add	sp, sp, #20
 264              	.LCFI5:
 265              		.cfi_def_cfa_offset 20
 266              		@ sp needed
 267 0074 F0BD     		pop	{r4, r5, r6, r7, pc}
 268              	.L8:
 269 0076 00BF     		.align	2
 270              	.L7:
 271 0078 00000000 		.word	hadc1
 272 007c 00240140 		.word	1073816576
 273              		.cfi_endproc
 274              	.LFE68:
 276              		.section	.text.MX_CAN_Init,"ax",%progbits
 277              		.align	1
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 281              		.fpu softvfp
 283              	MX_CAN_Init:
 284              	.LFB69:
 261:Src/main.c    **** 
 285              		.loc 1 261 1 is_stmt 1 view -0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 40
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289 0000 70B5     		push	{r4, r5, r6, lr}
 290              	.LCFI6:
 291              		.cfi_def_cfa_offset 16
 292              		.cfi_offset 4, -16
 293              		.cfi_offset 5, -12
 294              		.cfi_offset 6, -8
ARM GAS  /tmp/ccylgTLq.s 			page 13


 295              		.cfi_offset 14, -4
 296 0002 8AB0     		sub	sp, sp, #40
 297              	.LCFI7:
 298              		.cfi_def_cfa_offset 56
 264:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 299              		.loc 1 264 2 view .LVU81
 270:Src/main.c    ****   hcan.Init.Prescaler = 2;
 300              		.loc 1 270 3 view .LVU82
 270:Src/main.c    ****   hcan.Init.Prescaler = 2;
 301              		.loc 1 270 17 is_stmt 0 view .LVU83
 302 0004 1A4D     		ldr	r5, .L11
 303 0006 1B4B     		ldr	r3, .L11+4
 304 0008 2B60     		str	r3, [r5]
 271:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 305              		.loc 1 271 3 is_stmt 1 view .LVU84
 271:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 306              		.loc 1 271 23 is_stmt 0 view .LVU85
 307 000a 0226     		movs	r6, #2
 308 000c 6E60     		str	r6, [r5, #4]
 272:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 309              		.loc 1 272 3 is_stmt 1 view .LVU86
 272:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 310              		.loc 1 272 18 is_stmt 0 view .LVU87
 311 000e 0024     		movs	r4, #0
 312 0010 AC60     		str	r4, [r5, #8]
 273:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 313              		.loc 1 273 3 is_stmt 1 view .LVU88
 273:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 314              		.loc 1 273 27 is_stmt 0 view .LVU89
 315 0012 EC60     		str	r4, [r5, #12]
 274:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 316              		.loc 1 274 3 is_stmt 1 view .LVU90
 274:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 317              		.loc 1 274 22 is_stmt 0 view .LVU91
 318 0014 4FF40033 		mov	r3, #131072
 319 0018 2B61     		str	r3, [r5, #16]
 275:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 320              		.loc 1 275 3 is_stmt 1 view .LVU92
 275:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 321              		.loc 1 275 22 is_stmt 0 view .LVU93
 322 001a 4FF44013 		mov	r3, #3145728
 323 001e 6B61     		str	r3, [r5, #20]
 276:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 324              		.loc 1 276 3 is_stmt 1 view .LVU94
 276:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 325              		.loc 1 276 31 is_stmt 0 view .LVU95
 326 0020 2C76     		strb	r4, [r5, #24]
 277:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 327              		.loc 1 277 3 is_stmt 1 view .LVU96
 277:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 328              		.loc 1 277 24 is_stmt 0 view .LVU97
 329 0022 6C76     		strb	r4, [r5, #25]
 278:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 330              		.loc 1 278 3 is_stmt 1 view .LVU98
 278:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 331              		.loc 1 278 24 is_stmt 0 view .LVU99
 332 0024 AC76     		strb	r4, [r5, #26]
ARM GAS  /tmp/ccylgTLq.s 			page 14


 279:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 333              		.loc 1 279 3 is_stmt 1 view .LVU100
 279:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 334              		.loc 1 279 32 is_stmt 0 view .LVU101
 335 0026 EC76     		strb	r4, [r5, #27]
 280:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 336              		.loc 1 280 3 is_stmt 1 view .LVU102
 280:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 337              		.loc 1 280 31 is_stmt 0 view .LVU103
 338 0028 2C77     		strb	r4, [r5, #28]
 281:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 339              		.loc 1 281 3 is_stmt 1 view .LVU104
 281:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 340              		.loc 1 281 34 is_stmt 0 view .LVU105
 341 002a 6C77     		strb	r4, [r5, #29]
 282:Src/main.c    ****   {
 342              		.loc 1 282 3 is_stmt 1 view .LVU106
 282:Src/main.c    ****   {
 343              		.loc 1 282 7 is_stmt 0 view .LVU107
 344 002c 2846     		mov	r0, r5
 345 002e FFF7FEFF 		bl	HAL_CAN_Init
 346              	.LVL9:
 287:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 347              		.loc 1 287 2 is_stmt 1 view .LVU108
 287:Src/main.c    **** 	POT_TxHeader.RTR = CAN_RTR_DATA; 						// CAN frame type
 348              		.loc 1 287 21 is_stmt 0 view .LVU109
 349 0032 114B     		ldr	r3, .L11+8
 350 0034 0F22     		movs	r2, #15
 351 0036 1A60     		str	r2, [r3]
 288:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 352              		.loc 1 288 2 is_stmt 1 view .LVU110
 288:Src/main.c    **** 	POT_TxHeader.IDE = CAN_ID_STD; 							// CAN ID type
 353              		.loc 1 288 19 is_stmt 0 view .LVU111
 354 0038 DC60     		str	r4, [r3, #12]
 289:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 355              		.loc 1 289 2 is_stmt 1 view .LVU112
 289:Src/main.c    **** 	POT_TxHeader.DLC = 4; 									// CAN frame length in bytes
 356              		.loc 1 289 19 is_stmt 0 view .LVU113
 357 003a 9C60     		str	r4, [r3, #8]
 290:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 358              		.loc 1 290 2 is_stmt 1 view .LVU114
 290:Src/main.c    **** 	POT_TxHeader.TransmitGlobalTime = DISABLE;				// CAN timestamp in TxData[6] and TxData[7]
 359              		.loc 1 290 19 is_stmt 0 view .LVU115
 360 003c 0422     		movs	r2, #4
 361 003e 1A61     		str	r2, [r3, #16]
 291:Src/main.c    ****   
 362              		.loc 1 291 2 is_stmt 1 view .LVU116
 291:Src/main.c    ****   
 363              		.loc 1 291 34 is_stmt 0 view .LVU117
 364 0040 1C75     		strb	r4, [r3, #20]
 293:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode		
 365              		.loc 1 293 2 is_stmt 1 view .LVU118
 293:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode		
 366              		.loc 1 293 27 is_stmt 0 view .LVU119
 367 0042 0594     		str	r4, [sp, #20]
 294:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;		
 368              		.loc 1 294 2 is_stmt 1 view .LVU120
ARM GAS  /tmp/ccylgTLq.s 			page 15


 294:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;		
 369              		.loc 1 294 27 is_stmt 0 view .LVU121
 370 0044 0694     		str	r4, [sp, #24]
 295:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 371              		.loc 1 295 2 is_stmt 1 view .LVU122
 295:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 372              		.loc 1 295 28 is_stmt 0 view .LVU123
 373 0046 0123     		movs	r3, #1
 374 0048 0793     		str	r3, [sp, #28]
 296:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 375              		.loc 1 296 2 is_stmt 1 view .LVU124
 296:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 376              		.loc 1 296 29 is_stmt 0 view .LVU125
 377 004a 0094     		str	r4, [sp]
 297:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 378              		.loc 1 297 2 is_stmt 1 view .LVU126
 297:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 379              		.loc 1 297 28 is_stmt 0 view .LVU127
 380 004c 0194     		str	r4, [sp, #4]
 298:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 381              		.loc 1 298 2 is_stmt 1 view .LVU128
 298:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 382              		.loc 1 298 33 is_stmt 0 view .LVU129
 383 004e 0294     		str	r4, [sp, #8]
 299:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 384              		.loc 1 299 2 is_stmt 1 view .LVU130
 299:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 385              		.loc 1 299 32 is_stmt 0 view .LVU131
 386 0050 0394     		str	r4, [sp, #12]
 300:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 387              		.loc 1 300 2 is_stmt 1 view .LVU132
 300:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 388              		.loc 1 300 37 is_stmt 0 view .LVU133
 389 0052 0494     		str	r4, [sp, #16]
 301:Src/main.c    **** 	
 390              		.loc 1 301 2 is_stmt 1 view .LVU134
 301:Src/main.c    **** 	
 391              		.loc 1 301 33 is_stmt 0 view .LVU135
 392 0054 0893     		str	r3, [sp, #32]
 303:Src/main.c    **** 	
 393              		.loc 1 303 2 is_stmt 1 view .LVU136
 394 0056 6946     		mov	r1, sp
 395 0058 2846     		mov	r0, r5
 396 005a FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 397              	.LVL10:
 305:Src/main.c    **** 	
 398              		.loc 1 305 2 view .LVU137
 399 005e 2846     		mov	r0, r5
 400 0060 FFF7FEFF 		bl	HAL_CAN_Start
 401              	.LVL11:
 307:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 402              		.loc 1 307 2 view .LVU138
 403 0064 3146     		mov	r1, r6
 404 0066 2846     		mov	r0, r5
 405 0068 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 406              	.LVL12:
 310:Src/main.c    **** 
ARM GAS  /tmp/ccylgTLq.s 			page 16


 407              		.loc 1 310 1 is_stmt 0 view .LVU139
 408 006c 0AB0     		add	sp, sp, #40
 409              	.LCFI8:
 410              		.cfi_def_cfa_offset 16
 411              		@ sp needed
 412 006e 70BD     		pop	{r4, r5, r6, pc}
 413              	.L12:
 414              		.align	2
 415              	.L11:
 416 0070 00000000 		.word	hcan
 417 0074 00640040 		.word	1073767424
 418 0078 00000000 		.word	POT_TxHeader
 419              		.cfi_endproc
 420              	.LFE69:
 422              		.section	.text.SystemClock_Config,"ax",%progbits
 423              		.align	1
 424              		.global	SystemClock_Config
 425              		.syntax unified
 426              		.thumb
 427              		.thumb_func
 428              		.fpu softvfp
 430              	SystemClock_Config:
 431              	.LFB67:
 150:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 432              		.loc 1 150 1 is_stmt 1 view -0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 80
 435              		@ frame_needed = 0, uses_anonymous_args = 0
 436 0000 30B5     		push	{r4, r5, lr}
 437              	.LCFI9:
 438              		.cfi_def_cfa_offset 12
 439              		.cfi_offset 4, -12
 440              		.cfi_offset 5, -8
 441              		.cfi_offset 14, -4
 442 0002 95B0     		sub	sp, sp, #84
 443              	.LCFI10:
 444              		.cfi_def_cfa_offset 96
 151:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 445              		.loc 1 151 3 view .LVU141
 151:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 446              		.loc 1 151 22 is_stmt 0 view .LVU142
 447 0004 2422     		movs	r2, #36
 448 0006 0021     		movs	r1, #0
 449 0008 0BA8     		add	r0, sp, #44
 450 000a FFF7FEFF 		bl	memset
 451              	.LVL13:
 152:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 452              		.loc 1 152 3 is_stmt 1 view .LVU143
 152:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 453              		.loc 1 152 22 is_stmt 0 view .LVU144
 454 000e 0024     		movs	r4, #0
 455 0010 0594     		str	r4, [sp, #20]
 456 0012 0694     		str	r4, [sp, #24]
 457 0014 0794     		str	r4, [sp, #28]
 458 0016 0894     		str	r4, [sp, #32]
 459 0018 0994     		str	r4, [sp, #36]
 153:Src/main.c    **** 
ARM GAS  /tmp/ccylgTLq.s 			page 17


 460              		.loc 1 153 3 is_stmt 1 view .LVU145
 153:Src/main.c    **** 
 461              		.loc 1 153 28 is_stmt 0 view .LVU146
 462 001a 0194     		str	r4, [sp, #4]
 463 001c 0294     		str	r4, [sp, #8]
 464 001e 0394     		str	r4, [sp, #12]
 465 0020 0494     		str	r4, [sp, #16]
 157:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 466              		.loc 1 157 3 is_stmt 1 view .LVU147
 157:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 467              		.loc 1 157 36 is_stmt 0 view .LVU148
 468 0022 0225     		movs	r5, #2
 469 0024 0A95     		str	r5, [sp, #40]
 158:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 470              		.loc 1 158 3 is_stmt 1 view .LVU149
 158:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 471              		.loc 1 158 30 is_stmt 0 view .LVU150
 472 0026 0123     		movs	r3, #1
 473 0028 0E93     		str	r3, [sp, #56]
 159:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 474              		.loc 1 159 3 is_stmt 1 view .LVU151
 159:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 475              		.loc 1 159 41 is_stmt 0 view .LVU152
 476 002a 1023     		movs	r3, #16
 477 002c 0F93     		str	r3, [sp, #60]
 160:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 478              		.loc 1 160 3 is_stmt 1 view .LVU153
 161:Src/main.c    ****   {
 479              		.loc 1 161 3 view .LVU154
 161:Src/main.c    ****   {
 480              		.loc 1 161 7 is_stmt 0 view .LVU155
 481 002e 0AA8     		add	r0, sp, #40
 482 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 483              	.LVL14:
 167:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 484              		.loc 1 167 3 is_stmt 1 view .LVU156
 167:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 485              		.loc 1 167 31 is_stmt 0 view .LVU157
 486 0034 0F23     		movs	r3, #15
 487 0036 0593     		str	r3, [sp, #20]
 169:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 488              		.loc 1 169 3 is_stmt 1 view .LVU158
 169:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 489              		.loc 1 169 34 is_stmt 0 view .LVU159
 490 0038 0694     		str	r4, [sp, #24]
 170:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 491              		.loc 1 170 3 is_stmt 1 view .LVU160
 170:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 492              		.loc 1 170 35 is_stmt 0 view .LVU161
 493 003a 0794     		str	r4, [sp, #28]
 171:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 494              		.loc 1 171 3 is_stmt 1 view .LVU162
 171:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 495              		.loc 1 171 36 is_stmt 0 view .LVU163
 496 003c 0894     		str	r4, [sp, #32]
 172:Src/main.c    **** 
 497              		.loc 1 172 3 is_stmt 1 view .LVU164
ARM GAS  /tmp/ccylgTLq.s 			page 18


 172:Src/main.c    **** 
 498              		.loc 1 172 36 is_stmt 0 view .LVU165
 499 003e 0994     		str	r4, [sp, #36]
 174:Src/main.c    ****   {
 500              		.loc 1 174 3 is_stmt 1 view .LVU166
 174:Src/main.c    ****   {
 501              		.loc 1 174 7 is_stmt 0 view .LVU167
 502 0040 2146     		mov	r1, r4
 503 0042 05A8     		add	r0, sp, #20
 504 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 505              	.LVL15:
 178:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 506              		.loc 1 178 3 is_stmt 1 view .LVU168
 178:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 507              		.loc 1 178 38 is_stmt 0 view .LVU169
 508 0048 0195     		str	r5, [sp, #4]
 179:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 509              		.loc 1 179 3 is_stmt 1 view .LVU170
 179:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 510              		.loc 1 179 35 is_stmt 0 view .LVU171
 511 004a 0394     		str	r4, [sp, #12]
 180:Src/main.c    ****   {
 512              		.loc 1 180 3 is_stmt 1 view .LVU172
 180:Src/main.c    ****   {
 513              		.loc 1 180 7 is_stmt 0 view .LVU173
 514 004c 01A8     		add	r0, sp, #4
 515 004e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 516              	.LVL16:
 184:Src/main.c    **** 
 517              		.loc 1 184 1 view .LVU174
 518 0052 15B0     		add	sp, sp, #84
 519              	.LCFI11:
 520              		.cfi_def_cfa_offset 12
 521              		@ sp needed
 522 0054 30BD     		pop	{r4, r5, pc}
 523              		.cfi_endproc
 524              	.LFE67:
 526              		.section	.text.POT_read,"ax",%progbits
 527              		.align	1
 528              		.global	POT_read
 529              		.syntax unified
 530              		.thumb
 531              		.thumb_func
 532              		.fpu softvfp
 534              	POT_read:
 535              	.LVL17:
 536              	.LFB71:
 349:Src/main.c    **** 
 350:Src/main.c    **** /* USER CODE BEGIN 4 */
 351:Src/main.c    **** void POT_read(uint16_t pot_values[4]) {
 537              		.loc 1 351 39 is_stmt 1 view -0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              		.loc 1 351 39 is_stmt 0 view .LVU176
 542 0000 38B5     		push	{r3, r4, r5, lr}
 543              	.LCFI12:
ARM GAS  /tmp/ccylgTLq.s 			page 19


 544              		.cfi_def_cfa_offset 16
 545              		.cfi_offset 3, -16
 546              		.cfi_offset 4, -12
 547              		.cfi_offset 5, -8
 548              		.cfi_offset 14, -4
 549 0002 0546     		mov	r5, r0
 352:Src/main.c    **** 	
 353:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 550              		.loc 1 353 2 is_stmt 1 view .LVU177
 551 0004 154C     		ldr	r4, .L17
 552 0006 2046     		mov	r0, r4
 553              	.LVL18:
 554              		.loc 1 353 2 is_stmt 0 view .LVU178
 555 0008 FFF7FEFF 		bl	HAL_ADC_Start
 556              	.LVL19:
 354:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);		//change timeout to a HAL define
 557              		.loc 1 354 2 is_stmt 1 view .LVU179
 558 000c 4FF47A71 		mov	r1, #1000
 559 0010 2046     		mov	r0, r4
 560 0012 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 561              	.LVL20:
 355:Src/main.c    **** 	pot_values[0] = HAL_ADC_GetValue(&hadc1);
 562              		.loc 1 355 2 view .LVU180
 563              		.loc 1 355 18 is_stmt 0 view .LVU181
 564 0016 2046     		mov	r0, r4
 565 0018 FFF7FEFF 		bl	HAL_ADC_GetValue
 566              	.LVL21:
 567              		.loc 1 355 16 view .LVU182
 568 001c 2880     		strh	r0, [r5]	@ movhi
 356:Src/main.c    **** 	
 357:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 569              		.loc 1 357 2 is_stmt 1 view .LVU183
 570 001e 4FF47A71 		mov	r1, #1000
 571 0022 2046     		mov	r0, r4
 572 0024 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 573              	.LVL22:
 358:Src/main.c    **** 	pot_values[1] = HAL_ADC_GetValue(&hadc1);
 574              		.loc 1 358 2 view .LVU184
 575              		.loc 1 358 18 is_stmt 0 view .LVU185
 576 0028 2046     		mov	r0, r4
 577 002a FFF7FEFF 		bl	HAL_ADC_GetValue
 578              	.LVL23:
 579              		.loc 1 358 16 view .LVU186
 580 002e 6880     		strh	r0, [r5, #2]	@ movhi
 359:Src/main.c    **** 	
 360:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 581              		.loc 1 360 2 is_stmt 1 view .LVU187
 582 0030 4FF47A71 		mov	r1, #1000
 583 0034 2046     		mov	r0, r4
 584 0036 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 585              	.LVL24:
 361:Src/main.c    **** 	pot_values[2] = HAL_ADC_GetValue(&hadc1);
 586              		.loc 1 361 2 view .LVU188
 587              		.loc 1 361 18 is_stmt 0 view .LVU189
 588 003a 2046     		mov	r0, r4
 589 003c FFF7FEFF 		bl	HAL_ADC_GetValue
 590              	.LVL25:
ARM GAS  /tmp/ccylgTLq.s 			page 20


 591              		.loc 1 361 16 view .LVU190
 592 0040 A880     		strh	r0, [r5, #4]	@ movhi
 362:Src/main.c    **** 	
 363:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 593              		.loc 1 363 2 is_stmt 1 view .LVU191
 594 0042 4FF47A71 		mov	r1, #1000
 595 0046 2046     		mov	r0, r4
 596 0048 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 597              	.LVL26:
 364:Src/main.c    **** 	pot_values[3] = HAL_ADC_GetValue(&hadc1);
 598              		.loc 1 364 2 view .LVU192
 599              		.loc 1 364 18 is_stmt 0 view .LVU193
 600 004c 2046     		mov	r0, r4
 601 004e FFF7FEFF 		bl	HAL_ADC_GetValue
 602              	.LVL27:
 603              		.loc 1 364 16 view .LVU194
 604 0052 E880     		strh	r0, [r5, #6]	@ movhi
 365:Src/main.c    **** 	
 366:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 605              		.loc 1 366 2 is_stmt 1 view .LVU195
 606 0054 2046     		mov	r0, r4
 607 0056 FFF7FEFF 		bl	HAL_ADC_Stop
 608              	.LVL28:
 367:Src/main.c    **** 	
 368:Src/main.c    **** }
 609              		.loc 1 368 1 is_stmt 0 view .LVU196
 610 005a 38BD     		pop	{r3, r4, r5, pc}
 611              	.LVL29:
 612              	.L18:
 613              		.loc 1 368 1 view .LVU197
 614              		.align	2
 615              	.L17:
 616 005c 00000000 		.word	hadc1
 617              		.cfi_endproc
 618              	.LFE71:
 620              		.section	.text.POT_interpret,"ax",%progbits
 621              		.align	1
 622              		.global	POT_interpret
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu softvfp
 628              	POT_interpret:
 629              	.LVL30:
 630              	.LFB72:
 369:Src/main.c    **** 
 370:Src/main.c    **** void POT_interpret(uint16_t pot_values[4]) {
 631              		.loc 1 370 44 is_stmt 1 view -0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 8
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              		.loc 1 370 44 is_stmt 0 view .LVU199
 636 0000 30B5     		push	{r4, r5, lr}
 637              	.LCFI13:
 638              		.cfi_def_cfa_offset 12
 639              		.cfi_offset 4, -12
 640              		.cfi_offset 5, -8
ARM GAS  /tmp/ccylgTLq.s 			page 21


 641              		.cfi_offset 14, -4
 642 0002 83B0     		sub	sp, sp, #12
 643              	.LCFI14:
 644              		.cfi_def_cfa_offset 24
 371:Src/main.c    **** 	
 372:Src/main.c    **** 	uint8_t pot_pos[4];
 645              		.loc 1 372 2 is_stmt 1 view .LVU200
 373:Src/main.c    **** 	
 374:Src/main.c    **** 	for (uint8_t i = 0; i < 4; i++) {
 646              		.loc 1 374 2 view .LVU201
 647              	.LBB4:
 648              		.loc 1 374 7 view .LVU202
 649              	.LVL31:
 650              		.loc 1 374 15 is_stmt 0 view .LVU203
 651 0004 0024     		movs	r4, #0
 652              		.loc 1 374 2 view .LVU204
 653 0006 1FE0     		b	.L20
 654              	.LVL32:
 655              	.L21:
 656              	.LBB5:
 375:Src/main.c    **** 		
 376:Src/main.c    **** 		for (uint8_t j = 0; j < 10; j++) {
 657              		.loc 1 376 32 discriminator 2 view .LVU205
 658 0008 0133     		adds	r3, r3, #1
 659              	.LVL33:
 660              		.loc 1 376 32 discriminator 2 view .LVU206
 661 000a DBB2     		uxtb	r3, r3
 662              	.LVL34:
 663              	.L23:
 664              		.loc 1 376 3 discriminator 1 view .LVU207
 665 000c 092B     		cmp	r3, #9
 666 000e 13D8     		bhi	.L34
 377:Src/main.c    **** 			
 378:Src/main.c    **** 			//uint16_t pot_threshold[12] = {0, 615, 1025, 1435, 1845, 2255, 2665, 3075, 3485, 3895, 4095};
 379:Src/main.c    **** 			if ((pot_values[i] > pot_threshold[j]) && (pot_values[i] <= pot_threshold[j + 1]))
 667              		.loc 1 379 4 is_stmt 1 view .LVU208
 668              		.loc 1 379 19 is_stmt 0 view .LVU209
 669 0010 30F81420 		ldrh	r2, [r0, r4, lsl #1]
 670              		.loc 1 379 38 view .LVU210
 671 0014 2E49     		ldr	r1, .L36
 672 0016 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 673              		.loc 1 379 7 view .LVU211
 674 001a 8A42     		cmp	r2, r1
 675 001c F4D9     		bls	.L21
 676              		.loc 1 379 80 discriminator 1 view .LVU212
 677 001e 591C     		adds	r1, r3, #1
 678              		.loc 1 379 77 discriminator 1 view .LVU213
 679 0020 2B4D     		ldr	r5, .L36
 680 0022 35F81110 		ldrh	r1, [r5, r1, lsl #1]
 681              		.loc 1 379 43 discriminator 1 view .LVU214
 682 0026 8A42     		cmp	r2, r1
 683 0028 EED8     		bhi	.L21
 380:Src/main.c    **** 				pot_pos[i] = 10 - (j + 1); // pot_pos[i] = 0 is ~3.3V, pot_pos[i] = 1 is ~3V, etc.
 684              		.loc 1 380 5 is_stmt 1 view .LVU215
 685              		.loc 1 380 21 is_stmt 0 view .LVU216
 686 002a C3F10902 		rsb	r2, r3, #9
 687              		.loc 1 380 16 view .LVU217
ARM GAS  /tmp/ccylgTLq.s 			page 22


 688 002e 02A9     		add	r1, sp, #8
 689 0030 2144     		add	r1, r1, r4
 690 0032 01F8042C 		strb	r2, [r1, #-4]
 691 0036 E7E7     		b	.L21
 692              	.L34:
 693              		.loc 1 380 16 view .LVU218
 694              	.LBE5:
 381:Src/main.c    **** 			}
 382:Src/main.c    **** 
 383:Src/main.c    **** 		POT_data[i] = pot_pos[i];
 695              		.loc 1 383 3 is_stmt 1 discriminator 2 view .LVU219
 696              		.loc 1 383 24 is_stmt 0 discriminator 2 view .LVU220
 697 0038 02AB     		add	r3, sp, #8
 698              	.LVL35:
 699              		.loc 1 383 24 discriminator 2 view .LVU221
 700 003a 2344     		add	r3, r3, r4
 701 003c 13F8042C 		ldrb	r2, [r3, #-4]	@ zero_extendqisi2
 702              		.loc 1 383 15 discriminator 2 view .LVU222
 703 0040 244B     		ldr	r3, .L36+4
 704 0042 1A55     		strb	r2, [r3, r4]
 374:Src/main.c    **** 		
 705              		.loc 1 374 30 discriminator 2 view .LVU223
 706 0044 0134     		adds	r4, r4, #1
 707              	.LVL36:
 374:Src/main.c    **** 		
 708              		.loc 1 374 30 discriminator 2 view .LVU224
 709 0046 E4B2     		uxtb	r4, r4
 710              	.LVL37:
 711              	.L20:
 374:Src/main.c    **** 		
 712              		.loc 1 374 2 discriminator 1 view .LVU225
 713 0048 032C     		cmp	r4, #3
 714 004a 01D8     		bhi	.L35
 715              	.LBB6:
 376:Src/main.c    **** 			
 716              		.loc 1 376 16 view .LVU226
 717 004c 0023     		movs	r3, #0
 718 004e DDE7     		b	.L23
 719              	.L35:
 720              	.LBE6:
 721              	.LBE4:
 384:Src/main.c    **** 			
 385:Src/main.c    **** 	}
 386:Src/main.c    **** 	
 387:Src/main.c    **** 	if (pot_pos[0] != 0) // if CURRENT_POT is in any position other than first, turn on CUR_LED
 722              		.loc 1 387 2 is_stmt 1 view .LVU227
 723              		.loc 1 387 13 is_stmt 0 view .LVU228
 724 0050 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 725              		.loc 1 387 5 view .LVU229
 726 0054 0BB3     		cbz	r3, .L24
 388:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_SET);
 727              		.loc 1 388 3 is_stmt 1 view .LVU230
 728 0056 0122     		movs	r2, #1
 729 0058 0821     		movs	r1, #8
 730 005a 1F48     		ldr	r0, .L36+8
 731              	.LVL38:
 732              		.loc 1 388 3 is_stmt 0 view .LVU231
ARM GAS  /tmp/ccylgTLq.s 			page 23


 733 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 734              	.LVL39:
 735              	.L25:
 389:Src/main.c    **** 	else
 390:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, CUR_LED_Pin, GPIO_PIN_RESET);
 391:Src/main.c    **** 	
 392:Src/main.c    **** 	if (pot_pos[1] != 0) // if CUSTOM_POT is in any position other than first, turn on CUST_LED
 736              		.loc 1 392 2 is_stmt 1 view .LVU232
 737              		.loc 1 392 13 is_stmt 0 view .LVU233
 738 0060 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 739              		.loc 1 392 5 view .LVU234
 740 0064 FBB1     		cbz	r3, .L26
 393:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_SET);
 741              		.loc 1 393 3 is_stmt 1 view .LVU235
 742 0066 0122     		movs	r2, #1
 743 0068 4FF48071 		mov	r1, #256
 744 006c 1B48     		ldr	r0, .L36+12
 745 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 746              	.LVL40:
 747              	.L27:
 394:Src/main.c    **** 	else
 395:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB, CUST_LED_Pin, GPIO_PIN_RESET);
 396:Src/main.c    **** 	
 397:Src/main.c    **** 	if (pot_pos[2] != 0) // if TC_POT is in any position other than first, turn on TC_LED
 748              		.loc 1 397 2 view .LVU236
 749              		.loc 1 397 13 is_stmt 0 view .LVU237
 750 0072 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 751              		.loc 1 397 5 view .LVU238
 752 0076 EBB1     		cbz	r3, .L28
 398:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_SET);
 753              		.loc 1 398 3 is_stmt 1 view .LVU239
 754 0078 0122     		movs	r2, #1
 755 007a 4FF40071 		mov	r1, #512
 756 007e 1648     		ldr	r0, .L36+8
 757 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 758              	.LVL41:
 759              	.L29:
 399:Src/main.c    **** 	else
 400:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, TC_LED_Pin, GPIO_PIN_RESET);
 401:Src/main.c    **** 	
 402:Src/main.c    **** 	if (pot_pos[3] != 0) // if DRS_POT is in any position other than first, turn on DRS_LED
 760              		.loc 1 402 2 view .LVU240
 761              		.loc 1 402 13 is_stmt 0 view .LVU241
 762 0084 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 763              		.loc 1 402 5 view .LVU242
 764 0088 DBB1     		cbz	r3, .L30
 403:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_SET);
 765              		.loc 1 403 3 is_stmt 1 view .LVU243
 766 008a 0122     		movs	r2, #1
 767 008c 4FF48071 		mov	r1, #256
 768 0090 1148     		ldr	r0, .L36+8
 769 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 770              	.LVL42:
 771              	.L19:
 404:Src/main.c    **** 	else
 405:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOA, DRS_LED_Pin, GPIO_PIN_RESET);
 406:Src/main.c    **** 	
ARM GAS  /tmp/ccylgTLq.s 			page 24


 407:Src/main.c    **** }
 772              		.loc 1 407 1 is_stmt 0 view .LVU244
 773 0096 03B0     		add	sp, sp, #12
 774              	.LCFI15:
 775              		.cfi_remember_state
 776              		.cfi_def_cfa_offset 12
 777              		@ sp needed
 778 0098 30BD     		pop	{r4, r5, pc}
 779              	.LVL43:
 780              	.L24:
 781              	.LCFI16:
 782              		.cfi_restore_state
 390:Src/main.c    **** 	
 783              		.loc 1 390 3 is_stmt 1 view .LVU245
 784 009a 0022     		movs	r2, #0
 785 009c 0821     		movs	r1, #8
 786 009e 0E48     		ldr	r0, .L36+8
 787              	.LVL44:
 390:Src/main.c    **** 	
 788              		.loc 1 390 3 is_stmt 0 view .LVU246
 789 00a0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 790              	.LVL45:
 791 00a4 DCE7     		b	.L25
 792              	.L26:
 395:Src/main.c    **** 	
 793              		.loc 1 395 3 is_stmt 1 view .LVU247
 794 00a6 0022     		movs	r2, #0
 795 00a8 4FF48071 		mov	r1, #256
 796 00ac 0B48     		ldr	r0, .L36+12
 797 00ae FFF7FEFF 		bl	HAL_GPIO_WritePin
 798              	.LVL46:
 799 00b2 DEE7     		b	.L27
 800              	.L28:
 400:Src/main.c    **** 	
 801              		.loc 1 400 3 view .LVU248
 802 00b4 0022     		movs	r2, #0
 803 00b6 4FF40071 		mov	r1, #512
 804 00ba 0748     		ldr	r0, .L36+8
 805 00bc FFF7FEFF 		bl	HAL_GPIO_WritePin
 806              	.LVL47:
 807 00c0 E0E7     		b	.L29
 808              	.L30:
 405:Src/main.c    **** 	
 809              		.loc 1 405 3 view .LVU249
 810 00c2 0022     		movs	r2, #0
 811 00c4 4FF48071 		mov	r1, #256
 812 00c8 0348     		ldr	r0, .L36+8
 813 00ca FFF7FEFF 		bl	HAL_GPIO_WritePin
 814              	.LVL48:
 815              		.loc 1 407 1 is_stmt 0 view .LVU250
 816 00ce E2E7     		b	.L19
 817              	.L37:
 818              		.align	2
 819              	.L36:
 820 00d0 00000000 		.word	.LANCHOR0
 821 00d4 00000000 		.word	POT_data
 822 00d8 00080140 		.word	1073809408
ARM GAS  /tmp/ccylgTLq.s 			page 25


 823 00dc 000C0140 		.word	1073810432
 824              		.cfi_endproc
 825              	.LFE72:
 827              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 828              		.align	1
 829              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 830              		.syntax unified
 831              		.thumb
 832              		.thumb_func
 833              		.fpu softvfp
 835              	HAL_CAN_RxFifo0MsgPendingCallback:
 836              	.LVL49:
 837              	.LFB73:
 408:Src/main.c    **** 
 409:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
 410:Src/main.c    **** {
 838              		.loc 1 410 1 is_stmt 1 view -0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 0
 841              		@ frame_needed = 0, uses_anonymous_args = 0
 842              		.loc 1 410 1 is_stmt 0 view .LVU252
 843 0000 08B5     		push	{r3, lr}
 844              	.LCFI17:
 845              		.cfi_def_cfa_offset 8
 846              		.cfi_offset 3, -8
 847              		.cfi_offset 14, -4
 411:Src/main.c    ****   if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 848              		.loc 1 411 3 is_stmt 1 view .LVU253
 849              		.loc 1 411 7 is_stmt 0 view .LVU254
 850 0002 054B     		ldr	r3, .L41
 851 0004 054A     		ldr	r2, .L41+4
 852 0006 0021     		movs	r1, #0
 853 0008 0548     		ldr	r0, .L41+8
 854              	.LVL50:
 855              		.loc 1 411 7 view .LVU255
 856 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 857              	.LVL51:
 858              		.loc 1 411 6 view .LVU256
 859 000e 10B9     		cbnz	r0, .L38
 412:Src/main.c    **** 	  CAN_flag = 0xFF;
 860              		.loc 1 412 4 is_stmt 1 view .LVU257
 861              		.loc 1 412 13 is_stmt 0 view .LVU258
 862 0010 044B     		ldr	r3, .L41+12
 863 0012 FF22     		movs	r2, #255
 864 0014 1A70     		strb	r2, [r3]
 865              	.L38:
 413:Src/main.c    **** }
 866              		.loc 1 413 1 view .LVU259
 867 0016 08BD     		pop	{r3, pc}
 868              	.L42:
 869              		.align	2
 870              	.L41:
 871 0018 00000000 		.word	RxData
 872 001c 00000000 		.word	RxHeader
 873 0020 00000000 		.word	hcan
 874 0024 00000000 		.word	CAN_flag
 875              		.cfi_endproc
ARM GAS  /tmp/ccylgTLq.s 			page 26


 876              	.LFE73:
 878              		.section	.text.CAN_interpret,"ax",%progbits
 879              		.align	1
 880              		.global	CAN_interpret
 881              		.syntax unified
 882              		.thumb
 883              		.thumb_func
 884              		.fpu softvfp
 886              	CAN_interpret:
 887              	.LFB74:
 414:Src/main.c    **** 
 415:Src/main.c    **** void CAN_interpret(void) {
 888              		.loc 1 415 26 is_stmt 1 view -0
 889              		.cfi_startproc
 890              		@ args = 0, pretend = 0, frame = 0
 891              		@ frame_needed = 0, uses_anonymous_args = 0
 892 0000 70B5     		push	{r4, r5, r6, lr}
 893              	.LCFI18:
 894              		.cfi_def_cfa_offset 16
 895              		.cfi_offset 4, -16
 896              		.cfi_offset 5, -12
 897              		.cfi_offset 6, -8
 898              		.cfi_offset 14, -4
 416:Src/main.c    **** 	
 417:Src/main.c    **** 	uint16_t received_ID;
 899              		.loc 1 417 2 view .LVU261
 418:Src/main.c    **** 	received_ID = RxHeader.StdId;
 900              		.loc 1 418 2 view .LVU262
 901              		.loc 1 418 14 is_stmt 0 view .LVU263
 902 0002 394B     		ldr	r3, .L63
 903 0004 1C88     		ldrh	r4, [r3]
 904              	.LVL52:
 419:Src/main.c    **** 	
 420:Src/main.c    **** 	if (received_ID == FAULTS) {
 905              		.loc 1 420 2 is_stmt 1 view .LVU264
 906              		.loc 1 420 5 is_stmt 0 view .LVU265
 907 0006 D02C     		cmp	r4, #208
 908 0008 05D0     		beq	.L54
 909              	.L44:
 421:Src/main.c    **** 		
 422:Src/main.c    **** 		uint8_t BMS_fault;
 423:Src/main.c    **** 		uint8_t IMD_fault;
 424:Src/main.c    **** 		uint8_t BSPD_fault;
 425:Src/main.c    **** 		bool any_fault;
 426:Src/main.c    **** 
 427:Src/main.c    **** 		BMS_fault = RxData[0];
 428:Src/main.c    **** 		IMD_fault = RxData[1];
 429:Src/main.c    **** 		BSPD_fault = RxData[2];
 430:Src/main.c    **** 
 431:Src/main.c    **** 		if (BMS_fault == 0xFF) {
 432:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 433:Src/main.c    **** 			any_fault = true;
 434:Src/main.c    **** 		}
 435:Src/main.c    **** 		else if (BMS_fault == 0x00)
 436:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);	
 437:Src/main.c    **** 			
 438:Src/main.c    **** 		if (IMD_fault == 0xFF) {
ARM GAS  /tmp/ccylgTLq.s 			page 27


 439:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 440:Src/main.c    **** 			any_fault = true;
 441:Src/main.c    **** 		}
 442:Src/main.c    **** 		else if (IMD_fault == 0x00)
 443:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 444:Src/main.c    **** 			
 445:Src/main.c    **** 		if (BSPD_fault == 0xFF) {
 446:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 447:Src/main.c    **** 			any_fault = true;
 448:Src/main.c    **** 		}
 449:Src/main.c    **** 		else if (BSPD_fault == 0x00)
 450:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 451:Src/main.c    **** 			
 452:Src/main.c    **** 		if (any_fault == true) {
 453:Src/main.c    **** 			// if there is any fault
 454:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED red
 455:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 456:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 457:Src/main.c    **** 			any_fault = false;
 458:Src/main.c    **** 		}
 459:Src/main.c    **** 
 460:Src/main.c    **** 	}
 461:Src/main.c    **** 
 462:Src/main.c    **** 	if (received_ID == PRECHARGE) {
 910              		.loc 1 462 2 is_stmt 1 view .LVU266
 911              		.loc 1 462 5 is_stmt 0 view .LVU267
 912 000a D12C     		cmp	r4, #209
 913 000c 44D0     		beq	.L55
 914              	.LVL53:
 915              	.L51:
 463:Src/main.c    **** 		
 464:Src/main.c    **** 		uint8_t Precharge_state;
 465:Src/main.c    **** 		Precharge_state = RxData[0];
 466:Src/main.c    **** 		
 467:Src/main.c    **** 		if (Precharge_state == 0xFF) {
 468:Src/main.c    **** 			// if precharge is complete 
 469:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_SET); // set RGB LED green
 470:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 471:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 472:Src/main.c    **** 		}
 473:Src/main.c    **** 		
 474:Src/main.c    **** 		if (Precharge_state == 0x00) {
 475:Src/main.c    **** 			// if precharge is not complete 
 476:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_GREEN_Pin, GPIO_PIN_RESET); // set RGB LED blue
 477:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 478:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 479:Src/main.c    **** 			
 480:Src/main.c    **** 		}
 481:Src/main.c    **** 		
 482:Src/main.c    **** 	}
 483:Src/main.c    **** 	
 484:Src/main.c    **** 	CAN_flag = 0x00;
 916              		.loc 1 484 2 is_stmt 1 view .LVU268
 917              		.loc 1 484 11 is_stmt 0 view .LVU269
 918 000e 374B     		ldr	r3, .L63+4
 919 0010 0022     		movs	r2, #0
 920 0012 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccylgTLq.s 			page 28


 485:Src/main.c    **** 	
 486:Src/main.c    **** }
 921              		.loc 1 486 1 view .LVU270
 922 0014 70BD     		pop	{r4, r5, r6, pc}
 923              	.LVL54:
 924              	.L54:
 925              	.LBB7:
 422:Src/main.c    **** 		uint8_t IMD_fault;
 926              		.loc 1 422 3 is_stmt 1 view .LVU271
 423:Src/main.c    **** 		uint8_t BSPD_fault;
 927              		.loc 1 423 3 view .LVU272
 424:Src/main.c    **** 		bool any_fault;
 928              		.loc 1 424 3 view .LVU273
 425:Src/main.c    **** 
 929              		.loc 1 425 3 view .LVU274
 427:Src/main.c    **** 		IMD_fault = RxData[1];
 930              		.loc 1 427 3 view .LVU275
 427:Src/main.c    **** 		IMD_fault = RxData[1];
 931              		.loc 1 427 13 is_stmt 0 view .LVU276
 932 0016 364B     		ldr	r3, .L63+8
 933 0018 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 934              	.LVL55:
 428:Src/main.c    **** 		BSPD_fault = RxData[2];
 935              		.loc 1 428 3 is_stmt 1 view .LVU277
 428:Src/main.c    **** 		BSPD_fault = RxData[2];
 936              		.loc 1 428 13 is_stmt 0 view .LVU278
 937 001a 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 938              	.LVL56:
 429:Src/main.c    **** 
 939              		.loc 1 429 3 is_stmt 1 view .LVU279
 429:Src/main.c    **** 
 940              		.loc 1 429 14 is_stmt 0 view .LVU280
 941 001c 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 942              	.LVL57:
 431:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 943              		.loc 1 431 3 is_stmt 1 view .LVU281
 431:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_SET);
 944              		.loc 1 431 6 is_stmt 0 view .LVU282
 945 001e FF2A     		cmp	r2, #255
 946 0020 17D0     		beq	.L56
 435:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);	
 947              		.loc 1 435 8 is_stmt 1 view .LVU283
 435:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BMS_LED_ON_Pin, GPIO_PIN_RESET);	
 948              		.loc 1 435 11 is_stmt 0 view .LVU284
 949 0022 E2B1     		cbz	r2, .L57
 950              	.LVL58:
 951              	.L46:
 438:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 952              		.loc 1 438 3 is_stmt 1 view .LVU285
 438:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_SET);
 953              		.loc 1 438 6 is_stmt 0 view .LVU286
 954 0024 FF2E     		cmp	r6, #255
 955 0026 1FD0     		beq	.L58
 442:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 956              		.loc 1 442 8 is_stmt 1 view .LVU287
 442:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, IMD_LED_ON_Pin, GPIO_PIN_RESET);
 957              		.loc 1 442 11 is_stmt 0 view .LVU288
ARM GAS  /tmp/ccylgTLq.s 			page 29


 958 0028 26B3     		cbz	r6, .L59
 959              	.L48:
 445:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 960              		.loc 1 445 3 is_stmt 1 view .LVU289
 445:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_SET);
 961              		.loc 1 445 6 is_stmt 0 view .LVU290
 962 002a FF2D     		cmp	r5, #255
 963 002c 28D0     		beq	.L60
 449:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 964              		.loc 1 449 8 is_stmt 1 view .LVU291
 449:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOA, BSPD_LED_ON_Pin, GPIO_PIN_RESET);
 965              		.loc 1 449 11 is_stmt 0 view .LVU292
 966 002e 6DB3     		cbz	r5, .L61
 967              	.L50:
 452:Src/main.c    **** 			// if there is any fault
 968              		.loc 1 452 3 is_stmt 1 view .LVU293
 454:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 969              		.loc 1 454 4 view .LVU294
 970 0030 304D     		ldr	r5, .L63+12
 971              	.LVL59:
 454:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_SET);
 972              		.loc 1 454 4 is_stmt 0 view .LVU295
 973 0032 0022     		movs	r2, #0
 974 0034 2021     		movs	r1, #32
 975 0036 2846     		mov	r0, r5
 976 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
 977              	.LVL60:
 455:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 978              		.loc 1 455 4 is_stmt 1 view .LVU296
 979 003c 0122     		movs	r2, #1
 980 003e 4021     		movs	r1, #64
 981 0040 2846     		mov	r0, r5
 982 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 983              	.LVL61:
 456:Src/main.c    **** 			any_fault = false;
 984              		.loc 1 456 4 view .LVU297
 985 0046 0022     		movs	r2, #0
 986 0048 8021     		movs	r1, #128
 987 004a 2846     		mov	r0, r5
 988 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 989              	.LVL62:
 457:Src/main.c    **** 		}
 990              		.loc 1 457 4 view .LVU298
 457:Src/main.c    **** 		}
 991              		.loc 1 457 4 is_stmt 0 view .LVU299
 992 0050 DBE7     		b	.L44
 993              	.LVL63:
 994              	.L56:
 432:Src/main.c    **** 			any_fault = true;
 995              		.loc 1 432 4 is_stmt 1 view .LVU300
 996 0052 0122     		movs	r2, #1
 997              	.LVL64:
 432:Src/main.c    **** 			any_fault = true;
 998              		.loc 1 432 4 is_stmt 0 view .LVU301
 999 0054 1021     		movs	r1, #16
 1000 0056 2848     		ldr	r0, .L63+16
 1001 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccylgTLq.s 			page 30


 1002              	.LVL65:
 433:Src/main.c    **** 		}
 1003              		.loc 1 433 4 is_stmt 1 view .LVU302
 433:Src/main.c    **** 		}
 1004              		.loc 1 433 4 is_stmt 0 view .LVU303
 1005 005c E2E7     		b	.L46
 1006              	.LVL66:
 1007              	.L57:
 436:Src/main.c    **** 			
 1008              		.loc 1 436 4 is_stmt 1 view .LVU304
 1009 005e 1021     		movs	r1, #16
 1010 0060 2548     		ldr	r0, .L63+16
 1011 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1012              	.LVL67:
 436:Src/main.c    **** 			
 1013              		.loc 1 436 4 is_stmt 0 view .LVU305
 1014 0066 DDE7     		b	.L46
 1015              	.LVL68:
 1016              	.L58:
 439:Src/main.c    **** 			any_fault = true;
 1017              		.loc 1 439 4 is_stmt 1 view .LVU306
 1018 0068 0122     		movs	r2, #1
 1019 006a 2021     		movs	r1, #32
 1020 006c 2248     		ldr	r0, .L63+16
 1021 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1022              	.LVL69:
 440:Src/main.c    **** 		}
 1023              		.loc 1 440 4 view .LVU307
 440:Src/main.c    **** 		}
 1024              		.loc 1 440 4 is_stmt 0 view .LVU308
 1025 0072 DAE7     		b	.L48
 1026              	.L59:
 443:Src/main.c    **** 			
 1027              		.loc 1 443 4 is_stmt 1 view .LVU309
 1028 0074 0022     		movs	r2, #0
 1029 0076 2021     		movs	r1, #32
 1030 0078 1F48     		ldr	r0, .L63+16
 1031 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1032              	.LVL70:
 1033 007e D4E7     		b	.L48
 1034              	.L60:
 446:Src/main.c    **** 			any_fault = true;
 1035              		.loc 1 446 4 view .LVU310
 1036 0080 0122     		movs	r2, #1
 1037 0082 4021     		movs	r1, #64
 1038 0084 1C48     		ldr	r0, .L63+16
 1039 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1040              	.LVL71:
 447:Src/main.c    **** 		}
 1041              		.loc 1 447 4 view .LVU311
 447:Src/main.c    **** 		}
 1042              		.loc 1 447 4 is_stmt 0 view .LVU312
 1043 008a D1E7     		b	.L50
 1044              	.L61:
 450:Src/main.c    **** 			
 1045              		.loc 1 450 4 is_stmt 1 view .LVU313
 1046 008c 0022     		movs	r2, #0
ARM GAS  /tmp/ccylgTLq.s 			page 31


 1047 008e 4021     		movs	r1, #64
 1048 0090 1948     		ldr	r0, .L63+16
 1049 0092 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1050              	.LVL72:
 1051 0096 CBE7     		b	.L50
 1052              	.LVL73:
 1053              	.L55:
 450:Src/main.c    **** 			
 1054              		.loc 1 450 4 is_stmt 0 view .LVU314
 1055              	.LBE7:
 1056              	.LBB8:
 464:Src/main.c    **** 		Precharge_state = RxData[0];
 1057              		.loc 1 464 3 is_stmt 1 view .LVU315
 465:Src/main.c    **** 		
 1058              		.loc 1 465 3 view .LVU316
 465:Src/main.c    **** 		
 1059              		.loc 1 465 19 is_stmt 0 view .LVU317
 1060 0098 154B     		ldr	r3, .L63+8
 1061 009a 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 1062              	.LVL74:
 467:Src/main.c    **** 			// if precharge is complete 
 1063              		.loc 1 467 3 is_stmt 1 view .LVU318
 467:Src/main.c    **** 			// if precharge is complete 
 1064              		.loc 1 467 6 is_stmt 0 view .LVU319
 1065 009c FF2C     		cmp	r4, #255
 1066 009e 12D0     		beq	.L62
 1067              	.L52:
 474:Src/main.c    **** 			// if precharge is not complete 
 1068              		.loc 1 474 3 is_stmt 1 view .LVU320
 474:Src/main.c    **** 			// if precharge is not complete 
 1069              		.loc 1 474 6 is_stmt 0 view .LVU321
 1070 00a0 002C     		cmp	r4, #0
 1071 00a2 B4D1     		bne	.L51
 476:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1072              		.loc 1 476 4 is_stmt 1 view .LVU322
 1073 00a4 134C     		ldr	r4, .L63+12
 1074              	.LVL75:
 476:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1075              		.loc 1 476 4 is_stmt 0 view .LVU323
 1076 00a6 0022     		movs	r2, #0
 1077 00a8 2021     		movs	r1, #32
 1078 00aa 2046     		mov	r0, r4
 1079 00ac FFF7FEFF 		bl	HAL_GPIO_WritePin
 1080              	.LVL76:
 477:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_SET);
 1081              		.loc 1 477 4 is_stmt 1 view .LVU324
 1082 00b0 0022     		movs	r2, #0
 1083 00b2 4021     		movs	r1, #64
 1084 00b4 2046     		mov	r0, r4
 1085 00b6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1086              	.LVL77:
 478:Src/main.c    **** 			
 1087              		.loc 1 478 4 view .LVU325
 1088 00ba 0122     		movs	r2, #1
 1089 00bc 8021     		movs	r1, #128
 1090 00be 2046     		mov	r0, r4
 1091 00c0 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccylgTLq.s 			page 32


 1092              	.LVL78:
 1093 00c4 A3E7     		b	.L51
 1094              	.LVL79:
 1095              	.L62:
 469:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_RED_Pin, GPIO_PIN_RESET);
 1096              		.loc 1 469 4 view .LVU326
 1097 00c6 0B4D     		ldr	r5, .L63+12
 1098 00c8 0122     		movs	r2, #1
 1099 00ca 2021     		movs	r1, #32
 1100 00cc 2846     		mov	r0, r5
 1101 00ce FFF7FEFF 		bl	HAL_GPIO_WritePin
 1102              	.LVL80:
 470:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, RGB_BLUE_Pin, GPIO_PIN_RESET);
 1103              		.loc 1 470 4 view .LVU327
 1104 00d2 0022     		movs	r2, #0
 1105 00d4 4021     		movs	r1, #64
 1106 00d6 2846     		mov	r0, r5
 1107 00d8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1108              	.LVL81:
 471:Src/main.c    **** 		}
 1109              		.loc 1 471 4 view .LVU328
 1110 00dc 0022     		movs	r2, #0
 1111 00de 8021     		movs	r1, #128
 1112 00e0 2846     		mov	r0, r5
 1113 00e2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1114              	.LVL82:
 1115 00e6 DBE7     		b	.L52
 1116              	.L64:
 1117              		.align	2
 1118              	.L63:
 1119 00e8 00000000 		.word	RxHeader
 1120 00ec 00000000 		.word	CAN_flag
 1121 00f0 00000000 		.word	RxData
 1122 00f4 000C0140 		.word	1073810432
 1123 00f8 00080140 		.word	1073809408
 1124              	.LBE8:
 1125              		.cfi_endproc
 1126              	.LFE74:
 1128              		.section	.text.main,"ax",%progbits
 1129              		.align	1
 1130              		.global	main
 1131              		.syntax unified
 1132              		.thumb
 1133              		.thumb_func
 1134              		.fpu softvfp
 1136              	main:
 1137              	.LFB66:
  89:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1138              		.loc 1 89 1 view -0
 1139              		.cfi_startproc
 1140              		@ Volatile: function does not return.
 1141              		@ args = 0, pretend = 0, frame = 8
 1142              		@ frame_needed = 0, uses_anonymous_args = 0
 1143 0000 00B5     		push	{lr}
 1144              	.LCFI19:
 1145              		.cfi_def_cfa_offset 4
 1146              		.cfi_offset 14, -4
ARM GAS  /tmp/ccylgTLq.s 			page 33


 1147 0002 83B0     		sub	sp, sp, #12
 1148              	.LCFI20:
 1149              		.cfi_def_cfa_offset 16
  97:Src/main.c    **** 
 1150              		.loc 1 97 3 view .LVU330
 1151 0004 FFF7FEFF 		bl	HAL_Init
 1152              	.LVL83:
 104:Src/main.c    **** 
 1153              		.loc 1 104 3 view .LVU331
 1154 0008 FFF7FEFF 		bl	SystemClock_Config
 1155              	.LVL84:
 111:Src/main.c    ****   MX_ADC1_Init();
 1156              		.loc 1 111 3 view .LVU332
 1157 000c FFF7FEFF 		bl	MX_GPIO_Init
 1158              	.LVL85:
 112:Src/main.c    ****   MX_CAN_Init();
 1159              		.loc 1 112 3 view .LVU333
 1160 0010 FFF7FEFF 		bl	MX_ADC1_Init
 1161              	.LVL86:
 113:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1162              		.loc 1 113 3 view .LVU334
 1163 0014 FFF7FEFF 		bl	MX_CAN_Init
 1164              	.LVL87:
 1165 0018 0BE0     		b	.L67
 1166              	.L66:
 1167              	.LBB9:
 131:Src/main.c    ****   POT_read(pot_position);
 1168              		.loc 1 131 2 view .LVU335
 132:Src/main.c    **** 	POT_interpret(pot_position);
 1169              		.loc 1 132 3 view .LVU336
 1170 001a 6846     		mov	r0, sp
 1171 001c FFF7FEFF 		bl	POT_read
 1172              	.LVL88:
 133:Src/main.c    **** 
 1173              		.loc 1 133 2 view .LVU337
 1174 0020 6846     		mov	r0, sp
 1175 0022 FFF7FEFF 		bl	POT_interpret
 1176              	.LVL89:
 135:Src/main.c    **** 
 1177              		.loc 1 135 3 view .LVU338
 1178 0026 074B     		ldr	r3, .L69
 1179 0028 074A     		ldr	r2, .L69+4
 1180 002a 0849     		ldr	r1, .L69+8
 1181 002c 0848     		ldr	r0, .L69+12
 1182 002e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1183              	.LVL90:
 1184              	.L67:
 1185              	.LBE9:
 120:Src/main.c    ****   {
 1186              		.loc 1 120 3 view .LVU339
 1187              	.LBB10:
 126:Src/main.c    **** 		CAN_interpret();
 1188              		.loc 1 126 2 view .LVU340
 126:Src/main.c    **** 		CAN_interpret();
 1189              		.loc 1 126 15 is_stmt 0 view .LVU341
 1190 0032 084B     		ldr	r3, .L69+16
 1191 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccylgTLq.s 			page 34


 1192 0036 DBB2     		uxtb	r3, r3
 126:Src/main.c    **** 		CAN_interpret();
 1193              		.loc 1 126 5 view .LVU342
 1194 0038 FF2B     		cmp	r3, #255
 1195 003a EED1     		bne	.L66
 127:Src/main.c    **** 
 1196              		.loc 1 127 3 is_stmt 1 view .LVU343
 1197 003c FFF7FEFF 		bl	CAN_interpret
 1198              	.LVL91:
 1199 0040 EBE7     		b	.L66
 1200              	.L70:
 1201 0042 00BF     		.align	2
 1202              	.L69:
 1203 0044 00000000 		.word	TxMailbox
 1204 0048 00000000 		.word	POT_data
 1205 004c 00000000 		.word	POT_TxHeader
 1206 0050 00000000 		.word	hcan
 1207 0054 00000000 		.word	CAN_flag
 1208              	.LBE10:
 1209              		.cfi_endproc
 1210              	.LFE66:
 1212              		.section	.text.Error_Handler,"ax",%progbits
 1213              		.align	1
 1214              		.global	Error_Handler
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1218              		.fpu softvfp
 1220              	Error_Handler:
 1221              	.LFB75:
 487:Src/main.c    **** /* USER CODE END 4 */
 488:Src/main.c    **** 
 489:Src/main.c    **** /**
 490:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 491:Src/main.c    ****   * @retval None
 492:Src/main.c    ****   */
 493:Src/main.c    **** void Error_Handler(void)
 494:Src/main.c    **** {
 1222              		.loc 1 494 1 view -0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 0
 1225              		@ frame_needed = 0, uses_anonymous_args = 0
 1226              		@ link register save eliminated.
 495:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 496:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 497:Src/main.c    **** 
 498:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 499:Src/main.c    **** }
 1227              		.loc 1 499 1 view .LVU345
 1228 0000 7047     		bx	lr
 1229              		.cfi_endproc
 1230              	.LFE75:
 1232              		.global	pot_threshold
 1233              		.comm	CAN_flag,1,1
 1234              		.comm	TxMailbox,4,4
 1235              		.comm	POT_data,8,4
 1236              		.comm	POT_TxHeader,24,4
ARM GAS  /tmp/ccylgTLq.s 			page 35


 1237              		.comm	RxData,8,4
 1238              		.comm	RxHeader,28,4
 1239              		.comm	hcan,40,4
 1240              		.comm	hadc1,48,4
 1241              		.section	.data.pot_threshold,"aw"
 1242              		.align	2
 1243              		.set	.LANCHOR0,. + 0
 1246              	pot_threshold:
 1247 0000 0000     		.short	0
 1248 0002 6702     		.short	615
 1249 0004 0104     		.short	1025
 1250 0006 9B05     		.short	1435
 1251 0008 3507     		.short	1845
 1252 000a CF08     		.short	2255
 1253 000c 690A     		.short	2665
 1254 000e 030C     		.short	3075
 1255 0010 9D0D     		.short	3485
 1256 0012 370F     		.short	3895
 1257 0014 FF0F     		.short	4095
 1258              		.text
 1259              	.Letext0:
 1260              		.file 2 "/mnt/c/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/machine/_default_types.h"
 1261              		.file 3 "/mnt/c/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1262              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1263              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1264              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1265              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1266              		.file 8 "/mnt/c/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/lock.h"
 1267              		.file 9 "/mnt/c/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_types.h"
 1268              		.file 10 "/mnt/c/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eabi/8.2.1/include/stddef.h"
 1269              		.file 11 "/mnt/c/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/reent.h"
 1270              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1271              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1272              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1273              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1274              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1275              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1276              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1277              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1278              		.file 20 "<built-in>"
ARM GAS  /tmp/ccylgTLq.s 			page 36


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccylgTLq.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccylgTLq.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccylgTLq.s:139    .text.MX_GPIO_Init:0000000000000088 $d
     /tmp/ccylgTLq.s:146    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccylgTLq.s:152    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccylgTLq.s:271    .text.MX_ADC1_Init:0000000000000078 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccylgTLq.s:277    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccylgTLq.s:283    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccylgTLq.s:416    .text.MX_CAN_Init:0000000000000070 $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 POT_TxHeader
     /tmp/ccylgTLq.s:423    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccylgTLq.s:430    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccylgTLq.s:527    .text.POT_read:0000000000000000 $t
     /tmp/ccylgTLq.s:534    .text.POT_read:0000000000000000 POT_read
     /tmp/ccylgTLq.s:616    .text.POT_read:000000000000005c $d
     /tmp/ccylgTLq.s:621    .text.POT_interpret:0000000000000000 $t
     /tmp/ccylgTLq.s:628    .text.POT_interpret:0000000000000000 POT_interpret
     /tmp/ccylgTLq.s:820    .text.POT_interpret:00000000000000d0 $d
                            *COM*:0000000000000008 POT_data
     /tmp/ccylgTLq.s:828    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccylgTLq.s:835    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccylgTLq.s:871    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000018 $d
                            *COM*:0000000000000008 RxData
                            *COM*:000000000000001c RxHeader
                            *COM*:0000000000000001 CAN_flag
     /tmp/ccylgTLq.s:879    .text.CAN_interpret:0000000000000000 $t
     /tmp/ccylgTLq.s:886    .text.CAN_interpret:0000000000000000 CAN_interpret
     /tmp/ccylgTLq.s:1119   .text.CAN_interpret:00000000000000e8 $d
     /tmp/ccylgTLq.s:1129   .text.main:0000000000000000 $t
     /tmp/ccylgTLq.s:1136   .text.main:0000000000000000 main
     /tmp/ccylgTLq.s:1203   .text.main:0000000000000044 $d
                            *COM*:0000000000000004 TxMailbox
     /tmp/ccylgTLq.s:1213   .text.Error_Handler:0000000000000000 $t
     /tmp/ccylgTLq.s:1220   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccylgTLq.s:1246   .data.pot_threshold:0000000000000000 pot_threshold
     /tmp/ccylgTLq.s:1242   .data.pot_threshold:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
ARM GAS  /tmp/ccylgTLq.s 			page 37


HAL_ADC_Stop
HAL_CAN_GetRxMessage
HAL_Init
HAL_CAN_AddTxMessage

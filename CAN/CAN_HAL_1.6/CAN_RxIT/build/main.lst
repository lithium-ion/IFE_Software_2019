ARM GAS  /tmp/ccmiZThv.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB71:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /*
   2:Src/main.c    **** *	Dec 8, 2018
   3:Src/main.c    **** *	IFE 2018-19
   4:Src/main.c    **** 	Matt Vlasaty
   5:Src/main.c    **** 
   6:Src/main.c    **** 	This program receives CAN messages and processes them through an interrupt.
   7:Src/main.c    **** 	The files were generated with STM32CubeMX using version 1.6.1 of the HAL library for the STM32F1xx
   8:Src/main.c    **** 	Change the location of gcc-arm-none-eabi in the makefile to build.
   9:Src/main.c    **** 
  10:Src/main.c    **** */
  11:Src/main.c    **** 	
  12:Src/main.c    **** 
  13:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  14:Src/main.c    **** #include "main.h"
  15:Src/main.c    **** 
  16:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  17:Src/main.c    **** /* USER CODE BEGIN Includes */
  18:Src/main.c    **** 
  19:Src/main.c    **** /* USER CODE END Includes */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  22:Src/main.c    **** /* USER CODE BEGIN PTD */
  23:Src/main.c    **** 
  24:Src/main.c    **** /* USER CODE END PTD */
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN PD */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* USER CODE END PD */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  32:Src/main.c    **** /* USER CODE BEGIN PM */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PM */
ARM GAS  /tmp/ccmiZThv.s 			page 2


  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  37:Src/main.c    **** CAN_HandleTypeDef hcan;
  38:Src/main.c    **** 
  39:Src/main.c    **** UART_HandleTypeDef huart1;
  40:Src/main.c    **** 
  41:Src/main.c    **** /* USER CODE BEGIN PV */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PV */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  46:Src/main.c    **** void SystemClock_Config(void);
  47:Src/main.c    **** static void MX_GPIO_Init(void);
  48:Src/main.c    **** static void MX_USART1_UART_Init(void);
  49:Src/main.c    **** static void MX_CAN_Init(void);
  50:Src/main.c    **** /* USER CODE BEGIN PFP */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PFP */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN 0 */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END 0 */
  58:Src/main.c    **** 
  59:Src/main.c    **** /**
  60:Src/main.c    ****   * @brief  The application entry point.
  61:Src/main.c    ****   * @retval int
  62:Src/main.c    ****   */
  63:Src/main.c    **** int main(void)
  64:Src/main.c    **** {
  65:Src/main.c    ****   /* USER CODE BEGIN 1 */
  66:Src/main.c    **** 
  67:Src/main.c    ****   /* USER CODE END 1 */
  68:Src/main.c    **** 
  69:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  70:Src/main.c    **** 
  71:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  72:Src/main.c    ****   HAL_Init();
  73:Src/main.c    **** 
  74:Src/main.c    ****   /* USER CODE BEGIN Init */
  75:Src/main.c    **** 
  76:Src/main.c    ****   /* USER CODE END Init */
  77:Src/main.c    **** 
  78:Src/main.c    ****   /* Configure the system clock */
  79:Src/main.c    ****   SystemClock_Config();
  80:Src/main.c    **** 
  81:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  82:Src/main.c    **** 
  83:Src/main.c    ****   /* USER CODE END SysInit */
  84:Src/main.c    **** 
  85:Src/main.c    ****   /* Initialize all configured peripherals */
  86:Src/main.c    ****   MX_GPIO_Init();
  87:Src/main.c    ****   MX_USART1_UART_Init();
  88:Src/main.c    ****   MX_CAN_Init();
  89:Src/main.c    **** 
  90:Src/main.c    **** 	/* Initialize the Rx interrupt */
  91:Src/main.c    **** 	HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
ARM GAS  /tmp/ccmiZThv.s 			page 3


  92:Src/main.c    **** 
  93:Src/main.c    ****   /* Infinite loop */
  94:Src/main.c    ****   /* USER CODE BEGIN WHILE */
  95:Src/main.c    ****   while (1)
  96:Src/main.c    ****   {
  97:Src/main.c    ****   }
  98:Src/main.c    ****   /* USER CODE END 3 */
  99:Src/main.c    **** }
 100:Src/main.c    **** 
 101:Src/main.c    **** /**
 102:Src/main.c    ****   * @brief System Clock Configuration
 103:Src/main.c    ****   * @retval None
 104:Src/main.c    ****   */
 105:Src/main.c    **** void SystemClock_Config(void)
 106:Src/main.c    **** {
 107:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 108:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 109:Src/main.c    **** 
 110:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 111:Src/main.c    ****   */
 112:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 113:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 114:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 115:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 116:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 117:Src/main.c    ****   {
 118:Src/main.c    ****     Error_Handler();
 119:Src/main.c    ****   }
 120:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 121:Src/main.c    ****   */
 122:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 123:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 124:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 125:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 126:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 127:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 128:Src/main.c    **** 
 129:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 130:Src/main.c    ****   {
 131:Src/main.c    ****     Error_Handler();
 132:Src/main.c    ****   }
 133:Src/main.c    **** }
 134:Src/main.c    **** 
 135:Src/main.c    **** /**
 136:Src/main.c    ****   * @brief CAN Initialization Function
 137:Src/main.c    ****   * @param None
 138:Src/main.c    ****   * @retval None
 139:Src/main.c    ****   */
 140:Src/main.c    **** static void MX_CAN_Init(void)
 141:Src/main.c    **** {
 142:Src/main.c    **** 
 143:Src/main.c    **** 	CAN_FilterConfTypeDef	sFilterConfig;
 144:Src/main.c    **** 	static CanTxMsgTypeDef TxMessage;
 145:Src/main.c    **** 	static CanRxMsgTypeDef RxMessage;
 146:Src/main.c    **** 
 147:Src/main.c    **** 	hcan.pTxMsg = &TxMessage;
 148:Src/main.c    **** 	hcan.pRxMsg = &RxMessage;
ARM GAS  /tmp/ccmiZThv.s 			page 4


 149:Src/main.c    **** 
 150:Src/main.c    ****   hcan.Instance = CAN1;
 151:Src/main.c    ****   hcan.Init.Prescaler = 2;
 152:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 153:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 154:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_3TQ;
 155:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_4TQ;
 156:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 157:Src/main.c    ****   hcan.Init.ABOM = ENABLE;
 158:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
 159:Src/main.c    ****   hcan.Init.NART = DISABLE;
 160:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 161:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 162:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 163:Src/main.c    ****   {
 164:Src/main.c    ****     Error_Handler();
 165:Src/main.c    ****   }
 166:Src/main.c    **** 
 167:Src/main.c    **** 	sFilterConfig.FilterNumber = 0;
 168:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 169:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 170:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;
 171:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 172:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;
 173:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 174:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_FIFO0;
 175:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 176:Src/main.c    **** 
 177:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 178:Src/main.c    **** 
 179:Src/main.c    **** }
 180:Src/main.c    **** 
 181:Src/main.c    **** void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef *CanHandle)
 182:Src/main.c    **** {
 183:Src/main.c    **** 	//unsigned char data[8];
 184:Src/main.c    **** 	//data[0] = hcan.pRxMsg->Data[0];
 185:Src/main.c    **** 	//HAL_UART_Transmit(&huart1, data, sizeof(data), 1000);
 186:Src/main.c    **** 
 187:Src/main.c    **** 	if (hcan.pRxMsg->StdId == 0x100)
 188:Src/main.c    **** 	{
 189:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 190:Src/main.c    **** 	}
 191:Src/main.c    **** 
 192:Src/main.c    **** 	/* Re-enable Rx interrupt */
 193:Src/main.c    **** 	HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 194:Src/main.c    **** 
 195:Src/main.c    **** }
 196:Src/main.c    **** 
 197:Src/main.c    **** /**
 198:Src/main.c    ****   * @brief USART1 Initialization Function
 199:Src/main.c    ****   * @param None
 200:Src/main.c    ****   * @retval None
 201:Src/main.c    ****   */
 202:Src/main.c    **** static void MX_USART1_UART_Init(void)
 203:Src/main.c    **** {
 204:Src/main.c    **** 	
 205:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
ARM GAS  /tmp/ccmiZThv.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 208:Src/main.c    **** 
 209:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 210:Src/main.c    **** 
 211:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 212:Src/main.c    ****   huart1.Instance = USART1;
 213:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 214:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 215:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 216:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 217:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX;
 218:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 219:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 220:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 221:Src/main.c    ****   {
 222:Src/main.c    ****     Error_Handler();
 223:Src/main.c    ****   }
 224:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 225:Src/main.c    **** 
 226:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 227:Src/main.c    **** 
 228:Src/main.c    **** }
 229:Src/main.c    **** 
 230:Src/main.c    **** /**
 231:Src/main.c    ****   * @brief GPIO Initialization Function
 232:Src/main.c    ****   * @param None
 233:Src/main.c    ****   * @retval None
 234:Src/main.c    ****   */
 235:Src/main.c    **** static void MX_GPIO_Init(void)
 236:Src/main.c    **** {
  25              		.loc 1 236 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 00B5     		push	{lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 14, -4
  33 0002 87B0     		sub	sp, sp, #28
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 32
 237:Src/main.c    **** 
 238:Src/main.c    ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
  36              		.loc 1 238 0
  37 0004 0023     		movs	r3, #0
  38 0006 0493     		str	r3, [sp, #16]
  39              	.LBB2:
 239:Src/main.c    **** 
 240:Src/main.c    ****   /* GPIO Ports Clock Enable */
 241:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  40              		.loc 1 241 0
  41 0008 03F18043 		add	r3, r3, #1073741824
  42 000c 03F50433 		add	r3, r3, #135168
  43 0010 9A69     		ldr	r2, [r3, #24]
  44 0012 42F00402 		orr	r2, r2, #4
  45 0016 9A61     		str	r2, [r3, #24]
ARM GAS  /tmp/ccmiZThv.s 			page 6


  46 0018 9A69     		ldr	r2, [r3, #24]
  47 001a 02F00402 		and	r2, r2, #4
  48 001e 0092     		str	r2, [sp]
  49 0020 009A     		ldr	r2, [sp]
  50              	.LBE2:
  51              	.LBB3:
 242:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  52              		.loc 1 242 0
  53 0022 9A69     		ldr	r2, [r3, #24]
  54 0024 42F01002 		orr	r2, r2, #16
  55 0028 9A61     		str	r2, [r3, #24]
  56 002a 9B69     		ldr	r3, [r3, #24]
  57 002c 03F01003 		and	r3, r3, #16
  58 0030 0193     		str	r3, [sp, #4]
  59 0032 019B     		ldr	r3, [sp, #4]
  60              	.LBE3:
 243:Src/main.c    **** 
 244:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
  61              		.loc 1 244 0
  62 0034 4FF40053 		mov	r3, #8192
  63 0038 0293     		str	r3, [sp, #8]
 245:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  64              		.loc 1 245 0
  65 003a 0123     		movs	r3, #1
  66 003c 0393     		str	r3, [sp, #12]
 246:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 247:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  67              		.loc 1 247 0
  68 003e 0223     		movs	r3, #2
  69 0040 0593     		str	r3, [sp, #20]
 248:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  70              		.loc 1 248 0
  71 0042 02A9     		add	r1, sp, #8
  72 0044 0248     		ldr	r0, .L3
  73 0046 FFF7FEFF 		bl	HAL_GPIO_Init
  74              	.LVL0:
 249:Src/main.c    **** 
 250:Src/main.c    **** 
 251:Src/main.c    **** }
  75              		.loc 1 251 0
  76 004a 07B0     		add	sp, sp, #28
  77              	.LCFI2:
  78              		.cfi_def_cfa_offset 4
  79              		@ sp needed
  80 004c 5DF804FB 		ldr	pc, [sp], #4
  81              	.L4:
  82              		.align	2
  83              	.L3:
  84 0050 00100140 		.word	1073811456
  85              		.cfi_endproc
  86              	.LFE71:
  88              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
  89              		.align	1
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu softvfp
ARM GAS  /tmp/ccmiZThv.s 			page 7


  95              	MX_USART1_UART_Init:
  96              	.LFB70:
 203:Src/main.c    **** 	
  97              		.loc 1 203 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101 0000 08B5     		push	{r3, lr}
 102              	.LCFI3:
 103              		.cfi_def_cfa_offset 8
 104              		.cfi_offset 3, -8
 105              		.cfi_offset 14, -4
 212:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 106              		.loc 1 212 0
 107 0002 0848     		ldr	r0, .L7
 108 0004 084B     		ldr	r3, .L7+4
 109 0006 0360     		str	r3, [r0]
 213:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 110              		.loc 1 213 0
 111 0008 4FF4E133 		mov	r3, #115200
 112 000c 4360     		str	r3, [r0, #4]
 214:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 113              		.loc 1 214 0
 114 000e 0023     		movs	r3, #0
 115 0010 8360     		str	r3, [r0, #8]
 215:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 116              		.loc 1 215 0
 117 0012 C360     		str	r3, [r0, #12]
 216:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX;
 118              		.loc 1 216 0
 119 0014 0361     		str	r3, [r0, #16]
 217:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 120              		.loc 1 217 0
 121 0016 0822     		movs	r2, #8
 122 0018 4261     		str	r2, [r0, #20]
 218:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 123              		.loc 1 218 0
 124 001a 8361     		str	r3, [r0, #24]
 219:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 125              		.loc 1 219 0
 126 001c C361     		str	r3, [r0, #28]
 220:Src/main.c    ****   {
 127              		.loc 1 220 0
 128 001e FFF7FEFF 		bl	HAL_UART_Init
 129              	.LVL1:
 228:Src/main.c    **** 
 130              		.loc 1 228 0
 131 0022 08BD     		pop	{r3, pc}
 132              	.L8:
 133              		.align	2
 134              	.L7:
 135 0024 00000000 		.word	huart1
 136 0028 00380140 		.word	1073821696
 137              		.cfi_endproc
 138              	.LFE70:
 140              		.section	.text.MX_CAN_Init,"ax",%progbits
 141              		.align	1
ARM GAS  /tmp/ccmiZThv.s 			page 8


 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu softvfp
 147              	MX_CAN_Init:
 148              	.LFB68:
 141:Src/main.c    **** 
 149              		.loc 1 141 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 40
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153 0000 70B5     		push	{r4, r5, r6, lr}
 154              	.LCFI4:
 155              		.cfi_def_cfa_offset 16
 156              		.cfi_offset 4, -16
 157              		.cfi_offset 5, -12
 158              		.cfi_offset 6, -8
 159              		.cfi_offset 14, -4
 160 0002 8AB0     		sub	sp, sp, #40
 161              	.LCFI5:
 162              		.cfi_def_cfa_offset 56
 147:Src/main.c    **** 	hcan.pRxMsg = &RxMessage;
 163              		.loc 1 147 0
 164 0004 154C     		ldr	r4, .L11
 165 0006 164B     		ldr	r3, .L11+4
 166 0008 2363     		str	r3, [r4, #48]
 148:Src/main.c    **** 
 167              		.loc 1 148 0
 168 000a 164B     		ldr	r3, .L11+8
 169 000c 6363     		str	r3, [r4, #52]
 150:Src/main.c    ****   hcan.Init.Prescaler = 2;
 170              		.loc 1 150 0
 171 000e 164B     		ldr	r3, .L11+12
 172 0010 2360     		str	r3, [r4]
 151:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 173              		.loc 1 151 0
 174 0012 0223     		movs	r3, #2
 175 0014 6360     		str	r3, [r4, #4]
 152:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 176              		.loc 1 152 0
 177 0016 0025     		movs	r5, #0
 178 0018 A560     		str	r5, [r4, #8]
 153:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_3TQ;
 179              		.loc 1 153 0
 180 001a E560     		str	r5, [r4, #12]
 154:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_4TQ;
 181              		.loc 1 154 0
 182 001c 4FF40033 		mov	r3, #131072
 183 0020 2361     		str	r3, [r4, #16]
 155:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 184              		.loc 1 155 0
 185 0022 4FF44013 		mov	r3, #3145728
 186 0026 6361     		str	r3, [r4, #20]
 156:Src/main.c    ****   hcan.Init.ABOM = ENABLE;
 187              		.loc 1 156 0
 188 0028 A561     		str	r5, [r4, #24]
 157:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
ARM GAS  /tmp/ccmiZThv.s 			page 9


 189              		.loc 1 157 0
 190 002a 0126     		movs	r6, #1
 191 002c E661     		str	r6, [r4, #28]
 158:Src/main.c    ****   hcan.Init.NART = DISABLE;
 192              		.loc 1 158 0
 193 002e 2562     		str	r5, [r4, #32]
 159:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 194              		.loc 1 159 0
 195 0030 6562     		str	r5, [r4, #36]
 160:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 196              		.loc 1 160 0
 197 0032 A562     		str	r5, [r4, #40]
 161:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 198              		.loc 1 161 0
 199 0034 E562     		str	r5, [r4, #44]
 162:Src/main.c    ****   {
 200              		.loc 1 162 0
 201 0036 2046     		mov	r0, r4
 202 0038 FFF7FEFF 		bl	HAL_CAN_Init
 203              	.LVL2:
 167:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 204              		.loc 1 167 0
 205 003c 0595     		str	r5, [sp, #20]
 168:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 206              		.loc 1 168 0
 207 003e 0695     		str	r5, [sp, #24]
 169:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;
 208              		.loc 1 169 0
 209 0040 0796     		str	r6, [sp, #28]
 170:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 210              		.loc 1 170 0
 211 0042 0095     		str	r5, [sp]
 171:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;
 212              		.loc 1 171 0
 213 0044 0195     		str	r5, [sp, #4]
 172:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 214              		.loc 1 172 0
 215 0046 0295     		str	r5, [sp, #8]
 173:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_FIFO0;
 216              		.loc 1 173 0
 217 0048 0395     		str	r5, [sp, #12]
 174:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 218              		.loc 1 174 0
 219 004a 0495     		str	r5, [sp, #16]
 175:Src/main.c    **** 
 220              		.loc 1 175 0
 221 004c 0896     		str	r6, [sp, #32]
 177:Src/main.c    **** 
 222              		.loc 1 177 0
 223 004e 6946     		mov	r1, sp
 224 0050 2046     		mov	r0, r4
 225 0052 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 226              	.LVL3:
 179:Src/main.c    **** 
 227              		.loc 1 179 0
 228 0056 0AB0     		add	sp, sp, #40
 229              	.LCFI6:
ARM GAS  /tmp/ccmiZThv.s 			page 10


 230              		.cfi_def_cfa_offset 16
 231              		@ sp needed
 232 0058 70BD     		pop	{r4, r5, r6, pc}
 233              	.L12:
 234 005a 00BF     		.align	2
 235              	.L11:
 236 005c 00000000 		.word	hcan
 237 0060 00000000 		.word	.LANCHOR0
 238 0064 00000000 		.word	.LANCHOR1
 239 0068 00640040 		.word	1073767424
 240              		.cfi_endproc
 241              	.LFE68:
 243              		.section	.text.SystemClock_Config,"ax",%progbits
 244              		.align	1
 245              		.global	SystemClock_Config
 246              		.syntax unified
 247              		.thumb
 248              		.thumb_func
 249              		.fpu softvfp
 251              	SystemClock_Config:
 252              	.LFB67:
 106:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 253              		.loc 1 106 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 64
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257 0000 10B5     		push	{r4, lr}
 258              	.LCFI7:
 259              		.cfi_def_cfa_offset 8
 260              		.cfi_offset 4, -8
 261              		.cfi_offset 14, -4
 262 0002 90B0     		sub	sp, sp, #64
 263              	.LCFI8:
 264              		.cfi_def_cfa_offset 72
 107:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 265              		.loc 1 107 0
 266 0004 2422     		movs	r2, #36
 267 0006 0021     		movs	r1, #0
 268 0008 07A8     		add	r0, sp, #28
 269 000a FFF7FEFF 		bl	memset
 270              	.LVL4:
 108:Src/main.c    **** 
 271              		.loc 1 108 0
 272 000e 0024     		movs	r4, #0
 273 0010 0194     		str	r4, [sp, #4]
 274 0012 0294     		str	r4, [sp, #8]
 275 0014 0394     		str	r4, [sp, #12]
 276 0016 0494     		str	r4, [sp, #16]
 277 0018 0594     		str	r4, [sp, #20]
 112:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 278              		.loc 1 112 0
 279 001a 0223     		movs	r3, #2
 280 001c 0693     		str	r3, [sp, #24]
 113:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 281              		.loc 1 113 0
 282 001e 0123     		movs	r3, #1
 283 0020 0A93     		str	r3, [sp, #40]
ARM GAS  /tmp/ccmiZThv.s 			page 11


 114:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 284              		.loc 1 114 0
 285 0022 1023     		movs	r3, #16
 286 0024 0B93     		str	r3, [sp, #44]
 116:Src/main.c    ****   {
 287              		.loc 1 116 0
 288 0026 06A8     		add	r0, sp, #24
 289 0028 FFF7FEFF 		bl	HAL_RCC_OscConfig
 290              	.LVL5:
 122:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 291              		.loc 1 122 0
 292 002c 0F23     		movs	r3, #15
 293 002e 0193     		str	r3, [sp, #4]
 124:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 294              		.loc 1 124 0
 295 0030 0294     		str	r4, [sp, #8]
 125:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 296              		.loc 1 125 0
 297 0032 0394     		str	r4, [sp, #12]
 126:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 298              		.loc 1 126 0
 299 0034 0494     		str	r4, [sp, #16]
 127:Src/main.c    **** 
 300              		.loc 1 127 0
 301 0036 0594     		str	r4, [sp, #20]
 129:Src/main.c    ****   {
 302              		.loc 1 129 0
 303 0038 2146     		mov	r1, r4
 304 003a 01A8     		add	r0, sp, #4
 305 003c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 306              	.LVL6:
 133:Src/main.c    **** 
 307              		.loc 1 133 0
 308 0040 10B0     		add	sp, sp, #64
 309              	.LCFI9:
 310              		.cfi_def_cfa_offset 8
 311              		@ sp needed
 312 0042 10BD     		pop	{r4, pc}
 313              		.cfi_endproc
 314              	.LFE67:
 316              		.section	.text.main,"ax",%progbits
 317              		.align	1
 318              		.global	main
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 322              		.fpu softvfp
 324              	main:
 325              	.LFB66:
  64:Src/main.c    ****   /* USER CODE BEGIN 1 */
 326              		.loc 1 64 0
 327              		.cfi_startproc
 328              		@ Volatile: function does not return.
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331 0000 08B5     		push	{r3, lr}
 332              	.LCFI10:
ARM GAS  /tmp/ccmiZThv.s 			page 12


 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 3, -8
 335              		.cfi_offset 14, -4
  72:Src/main.c    **** 
 336              		.loc 1 72 0
 337 0002 FFF7FEFF 		bl	HAL_Init
 338              	.LVL7:
  79:Src/main.c    **** 
 339              		.loc 1 79 0
 340 0006 FFF7FEFF 		bl	SystemClock_Config
 341              	.LVL8:
  86:Src/main.c    ****   MX_USART1_UART_Init();
 342              		.loc 1 86 0
 343 000a FFF7FEFF 		bl	MX_GPIO_Init
 344              	.LVL9:
  87:Src/main.c    ****   MX_CAN_Init();
 345              		.loc 1 87 0
 346 000e FFF7FEFF 		bl	MX_USART1_UART_Init
 347              	.LVL10:
  88:Src/main.c    **** 
 348              		.loc 1 88 0
 349 0012 FFF7FEFF 		bl	MX_CAN_Init
 350              	.LVL11:
  91:Src/main.c    **** 
 351              		.loc 1 91 0
 352 0016 0021     		movs	r1, #0
 353 0018 0148     		ldr	r0, .L18
 354 001a FFF7FEFF 		bl	HAL_CAN_Receive_IT
 355              	.LVL12:
 356              	.L16:
 357 001e FEE7     		b	.L16
 358              	.L19:
 359              		.align	2
 360              	.L18:
 361 0020 00000000 		.word	hcan
 362              		.cfi_endproc
 363              	.LFE66:
 365              		.section	.text.HAL_CAN_RxCpltCallback,"ax",%progbits
 366              		.align	1
 367              		.global	HAL_CAN_RxCpltCallback
 368              		.syntax unified
 369              		.thumb
 370              		.thumb_func
 371              		.fpu softvfp
 373              	HAL_CAN_RxCpltCallback:
 374              	.LFB69:
 182:Src/main.c    **** 	//unsigned char data[8];
 375              		.loc 1 182 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379              	.LVL13:
 380 0000 08B5     		push	{r3, lr}
 381              	.LCFI11:
 382              		.cfi_def_cfa_offset 8
 383              		.cfi_offset 3, -8
 384              		.cfi_offset 14, -4
ARM GAS  /tmp/ccmiZThv.s 			page 13


 187:Src/main.c    **** 	{
 385              		.loc 1 187 0
 386 0002 084B     		ldr	r3, .L24
 387 0004 5B6B     		ldr	r3, [r3, #52]
 388 0006 1B68     		ldr	r3, [r3]
 389 0008 B3F5807F 		cmp	r3, #256
 390 000c 04D0     		beq	.L23
 391              	.LVL14:
 392              	.L21:
 193:Src/main.c    **** 
 393              		.loc 1 193 0
 394 000e 0021     		movs	r1, #0
 395 0010 0448     		ldr	r0, .L24
 396 0012 FFF7FEFF 		bl	HAL_CAN_Receive_IT
 397              	.LVL15:
 195:Src/main.c    **** 
 398              		.loc 1 195 0
 399 0016 08BD     		pop	{r3, pc}
 400              	.LVL16:
 401              	.L23:
 189:Src/main.c    **** 	}
 402              		.loc 1 189 0
 403 0018 4FF40051 		mov	r1, #8192
 404 001c 0248     		ldr	r0, .L24+4
 405              	.LVL17:
 406 001e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 407              	.LVL18:
 408 0022 F4E7     		b	.L21
 409              	.L25:
 410              		.align	2
 411              	.L24:
 412 0024 00000000 		.word	hcan
 413 0028 00100140 		.word	1073811456
 414              		.cfi_endproc
 415              	.LFE69:
 417              		.section	.text.Error_Handler,"ax",%progbits
 418              		.align	1
 419              		.global	Error_Handler
 420              		.syntax unified
 421              		.thumb
 422              		.thumb_func
 423              		.fpu softvfp
 425              	Error_Handler:
 426              	.LFB72:
 252:Src/main.c    **** 
 253:Src/main.c    **** /* USER CODE BEGIN 4 */
 254:Src/main.c    **** 
 255:Src/main.c    **** /* USER CODE END 4 */
 256:Src/main.c    **** 
 257:Src/main.c    **** /**
 258:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 259:Src/main.c    ****   * @retval None
 260:Src/main.c    ****   */
 261:Src/main.c    **** void Error_Handler(void)
 262:Src/main.c    **** {
 427              		.loc 1 262 0
 428              		.cfi_startproc
ARM GAS  /tmp/ccmiZThv.s 			page 14


 429              		@ args = 0, pretend = 0, frame = 0
 430              		@ frame_needed = 0, uses_anonymous_args = 0
 431              		@ link register save eliminated.
 263:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 264:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 265:Src/main.c    **** 
 266:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 267:Src/main.c    **** }
 432              		.loc 1 267 0
 433 0000 7047     		bx	lr
 434              		.cfi_endproc
 435              	.LFE72:
 437              		.comm	huart1,64,4
 438              		.comm	hcan,68,4
 439              		.section	.bss.RxMessage.6610,"aw",%nobits
 440              		.align	2
 441              		.set	.LANCHOR1,. + 0
 444              	RxMessage.6610:
 445 0000 00000000 		.space	36
 445      00000000 
 445      00000000 
 445      00000000 
 445      00000000 
 446              		.section	.bss.TxMessage.6609,"aw",%nobits
 447              		.align	2
 448              		.set	.LANCHOR0,. + 0
 451              	TxMessage.6609:
 452 0000 00000000 		.space	28
 452      00000000 
 452      00000000 
 452      00000000 
 452      00000000 
 453              		.text
 454              	.Letext0:
 455              		.file 2 "/home/osboxes/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_defau
 456              		.file 3 "/home/osboxes/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 457              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 458              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 459              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 460              		.file 7 "/home/osboxes/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 461              		.file 8 "/home/osboxes/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 462              		.file 9 "/home/osboxes/opt/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/
 463              		.file 10 "/home/osboxes/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 464              		.file 11 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 465              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 466              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 467              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 468              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 469              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 470              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 471              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can_ex.h"
 472              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 473              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 474              		.file 21 "<built-in>"
ARM GAS  /tmp/ccmiZThv.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccmiZThv.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccmiZThv.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccmiZThv.s:84     .text.MX_GPIO_Init:0000000000000050 $d
     /tmp/ccmiZThv.s:89     .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccmiZThv.s:95     .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccmiZThv.s:135    .text.MX_USART1_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart1
     /tmp/ccmiZThv.s:141    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccmiZThv.s:147    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccmiZThv.s:236    .text.MX_CAN_Init:000000000000005c $d
                            *COM*:0000000000000044 hcan
     /tmp/ccmiZThv.s:244    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccmiZThv.s:251    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccmiZThv.s:317    .text.main:0000000000000000 $t
     /tmp/ccmiZThv.s:324    .text.main:0000000000000000 main
     /tmp/ccmiZThv.s:361    .text.main:0000000000000020 $d
     /tmp/ccmiZThv.s:366    .text.HAL_CAN_RxCpltCallback:0000000000000000 $t
     /tmp/ccmiZThv.s:373    .text.HAL_CAN_RxCpltCallback:0000000000000000 HAL_CAN_RxCpltCallback
     /tmp/ccmiZThv.s:412    .text.HAL_CAN_RxCpltCallback:0000000000000024 $d
     /tmp/ccmiZThv.s:418    .text.Error_Handler:0000000000000000 $t
     /tmp/ccmiZThv.s:425    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccmiZThv.s:440    .bss.RxMessage.6610:0000000000000000 $d
     /tmp/ccmiZThv.s:444    .bss.RxMessage.6610:0000000000000000 RxMessage.6610
     /tmp/ccmiZThv.s:447    .bss.TxMessage.6609:0000000000000000 $d
     /tmp/ccmiZThv.s:451    .bss.TxMessage.6609:0000000000000000 TxMessage.6609

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_UART_Init
HAL_CAN_Init
HAL_CAN_ConfigFilter
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_CAN_Receive_IT
HAL_GPIO_TogglePin

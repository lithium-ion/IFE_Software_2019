ARM GAS  /tmp/ccVQPWh7.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	MX_GPIO_Init:
  24              	.LFB68:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
ARM GAS  /tmp/ccVQPWh7.s 			page 2


  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** //#include "stm32f0xx_hal.h"
  47:Src/main.c    **** /* USER CODE END Includes */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  50:Src/main.c    **** /* USER CODE BEGIN PTD */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PTD */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN PD */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PD */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN PM */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PM */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** ADC_HandleTypeDef hadc1;
  66:Src/main.c    **** CAN_HandleTypeDef hcan;
  67:Src/main.c    **** /* USER CODE BEGIN PV */
  68:Src/main.c    **** uint16_t adc0,adc1,adc7,adc9;
  69:Src/main.c    **** uint16_t g_ADCValue;
  70:Src/main.c    **** ADC_ChannelConfTypeDef sConfig;
  71:Src/main.c    **** //UART_HandleTypeDef huart1;
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** static void MX_GPIO_Init(void);
  77:Src/main.c    **** static void MX_CAN_Init(void);
  78:Src/main.c    **** static void MX_ADC1_Init(void);
  79:Src/main.c    **** //static void MX_USART1_UART_Init(void);
  80:Src/main.c    **** /* USER CODE BEGIN PFP */
  81:Src/main.c    **** uint16_t readADC_Val(void);
  82:Src/main.c    **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*);
  83:Src/main.c    **** /* USER CODE END PFP */
  84:Src/main.c    **** 
  85:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  86:Src/main.c    **** /* USER CODE BEGIN 0 */
  87:Src/main.c    **** 
  88:Src/main.c    **** /* USER CODE END 0 */
  89:Src/main.c    **** 
  90:Src/main.c    **** /**
ARM GAS  /tmp/ccVQPWh7.s 			page 3


  91:Src/main.c    ****   * @brief  The application entry point.
  92:Src/main.c    ****   * @retval int
  93:Src/main.c    ****   */
  94:Src/main.c    **** int main(void)
  95:Src/main.c    **** {
  96:Src/main.c    ****   /* USER CODE BEGIN 1 */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE END 1 */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 103:Src/main.c    ****   HAL_Init();
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE BEGIN Init */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE END Init */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Configure the system clock */
 110:Src/main.c    ****   SystemClock_Config();
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE END SysInit */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Initialize all configured peripherals */
 117:Src/main.c    ****   MX_GPIO_Init();
 118:Src/main.c    ****   MX_ADC1_Init();
 119:Src/main.c    ****   /* USER CODE BEGIN 2 */
 120:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 121:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 122:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 123:Src/main.c    ****   //ConfigureADC();
 124:Src/main.c    ****   HAL_ADC_Start_IT(&hadc1);
 125:Src/main.c    ****   //HAL_ADC_Start_IT(&g_AdcHandle);
 126:Src/main.c    ****   /*
 127:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 128:Src/main.c    ****   adc0 = readADC_Val();
 129:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 130:Src/main.c    ****   adc1 = readADC_Val();
 131:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_7;
 132:Src/main.c    ****   adc7 = readADC_Val();
 133:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 134:Src/main.c    ****   adc9 = readADC_Val();
 135:Src/main.c    ****   */
 136:Src/main.c    **** 	//send
 137:Src/main.c    ****     MX_CAN_Init();
 138:Src/main.c    ****     hcan.pTxMsg->StdId = 0x321;
 139:Src/main.c    **** 	hcan.pTxMsg->ExtId = 0x01;
 140:Src/main.c    **** 	hcan.pTxMsg->RTR = CAN_RTR_DATA;
 141:Src/main.c    **** 	hcan.pTxMsg->IDE = CAN_ID_STD;
 142:Src/main.c    **** 	hcan.pTxMsg->DLC = 1;
 143:Src/main.c    **** 	hcan.pTxMsg->Data[0] = 0x55;
 144:Src/main.c    **** 	
 145:Src/main.c    **** 	//receive
 146:Src/main.c    **** 	//HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 147:Src/main.c    ****   /* USER CODE END 2 */
ARM GAS  /tmp/ccVQPWh7.s 			page 4


 148:Src/main.c    **** 
 149:Src/main.c    ****   /* Infinite loop */
 150:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 151:Src/main.c    ****   while (1)
 152:Src/main.c    ****   {/**/
 153:Src/main.c    ****     //sConfig.Channel = ADC_CHANNEL_0;
 154:Src/main.c    ****     //adc0 = readADC_Val();
 155:Src/main.c    **** 	//int adcVal = 2148 / 4096 * 3.3
 156:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 157:Src/main.c    **** 	
 158:Src/main.c    **** 	if (g_ADCValue > 0x0020)
 159:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 160:Src/main.c    **** 	else
 161:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 162:Src/main.c    **** 	/*
 163:Src/main.c    **** 	hcan.pTxMsg->Data[0] = g_ADCValue >> 8;
 164:Src/main.c    **** 	hcan.pTxMsg->Data[1] = g_ADCValue & 0xFF;
 165:Src/main.c    **** 	
 166:Src/main.c    **** 	if (HAL_CAN_Transmit(&hcan, 100) == HAL_TIMEOUT)
 167:Src/main.c    **** 	{
 168:Src/main.c    **** 		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 169:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 170:Src/main.c    **** 		//Error_Handler();
 171:Src/main.c    **** 	}	*/
 172:Src/main.c    **** 	//HAL_Delay(100);
 173:Src/main.c    **** 	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 174:Src/main.c    ****     /* USER CODE END WHILE */
 175:Src/main.c    **** 
 176:Src/main.c    ****     /* USER CODE BEGIN 3 */
 177:Src/main.c    **** 	HAL_Delay(100);
 178:Src/main.c    ****   }
 179:Src/main.c    ****   /* USER CODE END 3 */
 180:Src/main.c    **** }
 181:Src/main.c    **** 
 182:Src/main.c    **** /**
 183:Src/main.c    ****   * @brief System Clock Configuration
 184:Src/main.c    ****   * @retval None
 185:Src/main.c    ****   */
 186:Src/main.c    **** void SystemClock_Config(void)
 187:Src/main.c    **** {
 188:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 189:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 190:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 191:Src/main.c    **** 
 192:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 193:Src/main.c    ****   */
 194:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 195:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 196:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 198:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 199:Src/main.c    ****   {
 200:Src/main.c    ****     Error_Handler();
 201:Src/main.c    ****   }
 202:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 203:Src/main.c    ****   */
 204:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
ARM GAS  /tmp/ccVQPWh7.s 			page 5


 205:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 206:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 207:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 208:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 209:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 210:Src/main.c    **** 
 211:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 212:Src/main.c    ****   {
 213:Src/main.c    ****     Error_Handler();
 214:Src/main.c    ****   }
 215:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 216:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 217:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 218:Src/main.c    ****   {
 219:Src/main.c    ****     Error_Handler();
 220:Src/main.c    ****   }
 221:Src/main.c    **** }
 222:Src/main.c    **** 
 223:Src/main.c    **** 
 224:Src/main.c    **** 
 225:Src/main.c    **** /**
 226:Src/main.c    ****   * @brief ADC1 Initialization Function
 227:Src/main.c    ****   * @param None
 228:Src/main.c    ****   * @retval None
 229:Src/main.c    ****   */
 230:Src/main.c    **** static void MX_ADC1_Init(void)
 231:Src/main.c    **** {
 232:Src/main.c    **** 
 233:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 234:Src/main.c    **** 
 235:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 236:Src/main.c    **** 
 237:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 238:Src/main.c    **** 
 239:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 240:Src/main.c    **** 
 241:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 242:Src/main.c    ****   /**Common config 
 243:Src/main.c    ****   */
 244:Src/main.c    ****   hadc1.Instance = ADC1;
 245:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 246:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 247:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 248:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 249:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 250:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 251:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 252:Src/main.c    ****   {
 253:Src/main.c    ****     Error_Handler();
 254:Src/main.c    ****   }
 255:Src/main.c    ****   /**Configure Regular Channel 
 256:Src/main.c    ****   */
 257:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 258:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 259:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 260:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 261:Src/main.c    ****   {
ARM GAS  /tmp/ccVQPWh7.s 			page 6


 262:Src/main.c    ****     Error_Handler();
 263:Src/main.c    ****   }
 264:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 265:Src/main.c    **** 
 266:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 267:Src/main.c    **** 
 268:Src/main.c    **** }
 269:Src/main.c    **** 
 270:Src/main.c    **** /**
 271:Src/main.c    ****   * @brief CAN Initialization Function
 272:Src/main.c    ****   * @param None
 273:Src/main.c    ****   * @retval None
 274:Src/main.c    ****   */
 275:Src/main.c    **** static void MX_CAN_Init(void)
 276:Src/main.c    **** {
 277:Src/main.c    **** 
 278:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 279:Src/main.c    **** 
 280:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 281:Src/main.c    **** 
 282:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 283:Src/main.c    ****   	static CanTxMsgTypeDef TxMessage;
 284:Src/main.c    **** 	//static CanRxMsgTypeDef RxMessage;
 285:Src/main.c    **** 
 286:Src/main.c    **** 	hcan.pTxMsg = &TxMessage;
 287:Src/main.c    **** 	//hcan.pRxMsg = &RxMessage;
 288:Src/main.c    **** 	//CAN_FilterConfTypeDef	sFilterConfig;
 289:Src/main.c    **** /**/
 290:Src/main.c    ****   hcan.Instance = CAN1;
 291:Src/main.c    ****   hcan.Init.Prescaler = 2;
 292:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_LOOPBACK;
 293:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 294:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_3TQ;
 295:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_4TQ;
 296:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 297:Src/main.c    ****   hcan.Init.ABOM = ENABLE;
 298:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
 299:Src/main.c    ****   hcan.Init.NART = DISABLE;
 300:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 301:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 302:Src/main.c    **** 
 303:Src/main.c    ****   /* USER CODE END CAN_Init 1 
 304:Src/main.c    ****   hcan.Instance = CAN1;
 305:Src/main.c    ****   hcan.Init.Prescaler = 16;
 306:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 307:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 308:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 309:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 310:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 311:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 312:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 313:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 314:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 315:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;*/
 316:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 317:Src/main.c    ****   {
 318:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/ccVQPWh7.s 			page 7


 319:Src/main.c    ****   }
 320:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 
 321:Src/main.c    **** 	sFilterConfig.FilterNumber = 0;
 322:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 323:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 324:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;
 325:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 326:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;
 327:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 328:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_FIFO0;
 329:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 330:Src/main.c    **** 
 331:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);*/
 332:Src/main.c    **** 
 333:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 334:Src/main.c    **** 
 335:Src/main.c    **** }
 336:Src/main.c    **** void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef *CanHandle)
 337:Src/main.c    **** {
 338:Src/main.c    **** 	//unsigned char data[8];
 339:Src/main.c    **** 	//data[0] = hcan.pRxMsg->Data[0];
 340:Src/main.c    **** 	//HAL_UART_Transmit(&huart1, data, sizeof(data), 1000);
 341:Src/main.c    **** 
 342:Src/main.c    **** 	if (hcan.pRxMsg->StdId == 0x80)
 343:Src/main.c    **** 	{
 344:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 345:Src/main.c    **** 	}
 346:Src/main.c    **** 
 347:Src/main.c    **** 	/* Re-enable Rx interrupt */
 348:Src/main.c    **** 	HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 349:Src/main.c    **** 
 350:Src/main.c    **** }
 351:Src/main.c    **** 
 352:Src/main.c    **** /**
 353:Src/main.c    ****   * @brief GPIO Initialization Function
 354:Src/main.c    ****   * @param None
 355:Src/main.c    ****   * @retval None
 356:Src/main.c    ****   */
 357:Src/main.c    **** static void MX_GPIO_Init(void)
 358:Src/main.c    **** {
  26              		.loc 1 358 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 24
  33              		.cfi_offset 4, -24
  34              		.cfi_offset 5, -20
  35              		.cfi_offset 6, -16
  36              		.cfi_offset 7, -12
  37              		.cfi_offset 8, -8
  38              		.cfi_offset 14, -4
  39 0004 86B0     		sub	sp, sp, #24
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 48
 359:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
ARM GAS  /tmp/ccVQPWh7.s 			page 8


  42              		.loc 1 359 0
  43 0006 0024     		movs	r4, #0
  44 0008 0294     		str	r4, [sp, #8]
  45 000a 0394     		str	r4, [sp, #12]
  46 000c 0494     		str	r4, [sp, #16]
  47 000e 0594     		str	r4, [sp, #20]
  48              	.LBB2:
 360:Src/main.c    **** 
 361:Src/main.c    ****   /* GPIO Ports Clock Enable */
 362:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  49              		.loc 1 362 0
  50 0010 1D4B     		ldr	r3, .L3
  51 0012 9A69     		ldr	r2, [r3, #24]
  52 0014 42F00402 		orr	r2, r2, #4
  53 0018 9A61     		str	r2, [r3, #24]
  54 001a 9A69     		ldr	r2, [r3, #24]
  55 001c 02F00402 		and	r2, r2, #4
  56 0020 0092     		str	r2, [sp]
  57 0022 009A     		ldr	r2, [sp]
  58              	.LBE2:
  59              	.LBB3:
 363:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  60              		.loc 1 363 0
  61 0024 9A69     		ldr	r2, [r3, #24]
  62 0026 42F00802 		orr	r2, r2, #8
  63 002a 9A61     		str	r2, [r3, #24]
  64 002c 9B69     		ldr	r3, [r3, #24]
  65 002e 03F00803 		and	r3, r3, #8
  66 0032 0193     		str	r3, [sp, #4]
  67 0034 019B     		ldr	r3, [sp, #4]
  68              	.LBE3:
 364:Src/main.c    **** 
 365:Src/main.c    ****   /*Configure GPIO pin Output Level */
 366:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
  69              		.loc 1 366 0
  70 0036 DFF85880 		ldr	r8, .L3+8
  71 003a 4046     		mov	r0, r8
  72 003c 4FF45C71 		mov	r1, #880
  73 0040 2246     		mov	r2, r4
  74 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  75              	.LVL0:
 367:Src/main.c    ****                           |GPIO_PIN_9, GPIO_PIN_RESET);
 368:Src/main.c    **** 
 369:Src/main.c    ****   /*Configure GPIO pin Output Level */
 370:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
  76              		.loc 1 370 0
  77 0046 114D     		ldr	r5, .L3+4
  78 0048 2846     		mov	r0, r5
  79 004a 40F60141 		movw	r1, #3073
  80 004e 2246     		mov	r2, r4
  81 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  82              	.LVL1:
 371:Src/main.c    **** 
 372:Src/main.c    ****   /*Configure GPIO pins : PA4 PA5 PA6 PA8 
 373:Src/main.c    ****                            PA9 */
 374:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
  83              		.loc 1 374 0
ARM GAS  /tmp/ccVQPWh7.s 			page 9


  84 0054 4FF45C73 		mov	r3, #880
  85 0058 0293     		str	r3, [sp, #8]
 375:Src/main.c    ****                           |GPIO_PIN_9;
 376:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  86              		.loc 1 376 0
  87 005a 0127     		movs	r7, #1
  88 005c 0397     		str	r7, [sp, #12]
 377:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  89              		.loc 1 377 0
  90 005e 0494     		str	r4, [sp, #16]
 378:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  91              		.loc 1 378 0
  92 0060 0226     		movs	r6, #2
  93 0062 0596     		str	r6, [sp, #20]
 379:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  94              		.loc 1 379 0
  95 0064 4046     		mov	r0, r8
  96 0066 02A9     		add	r1, sp, #8
  97 0068 FFF7FEFF 		bl	HAL_GPIO_Init
  98              	.LVL2:
 380:Src/main.c    **** 
 381:Src/main.c    ****   /*Configure GPIO pins : PB0 PB10 PB11 */
 382:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
  99              		.loc 1 382 0
 100 006c 40F60143 		movw	r3, #3073
 101 0070 0293     		str	r3, [sp, #8]
 383:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 102              		.loc 1 383 0
 103 0072 0397     		str	r7, [sp, #12]
 384:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 104              		.loc 1 384 0
 105 0074 0494     		str	r4, [sp, #16]
 385:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 106              		.loc 1 385 0
 107 0076 0596     		str	r6, [sp, #20]
 386:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 108              		.loc 1 386 0
 109 0078 2846     		mov	r0, r5
 110 007a 02A9     		add	r1, sp, #8
 111 007c FFF7FEFF 		bl	HAL_GPIO_Init
 112              	.LVL3:
 387:Src/main.c    **** 
 388:Src/main.c    **** }
 113              		.loc 1 388 0
 114 0080 06B0     		add	sp, sp, #24
 115              	.LCFI2:
 116              		.cfi_def_cfa_offset 24
 117              		@ sp needed
 118 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 119              	.L4:
 120 0086 00BF     		.align	2
 121              	.L3:
 122 0088 00100240 		.word	1073876992
 123 008c 000C0140 		.word	1073810432
 124 0090 00080140 		.word	1073809408
 125              		.cfi_endproc
 126              	.LFE68:
ARM GAS  /tmp/ccVQPWh7.s 			page 10


 128              		.section	.text.MX_ADC1_Init,"ax",%progbits
 129              		.align	2
 130              		.thumb
 131              		.thumb_func
 133              	MX_ADC1_Init:
 134              	.LFB65:
 231:Src/main.c    **** 
 135              		.loc 1 231 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 16
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139 0000 70B5     		push	{r4, r5, r6, lr}
 140              	.LCFI3:
 141              		.cfi_def_cfa_offset 16
 142              		.cfi_offset 4, -16
 143              		.cfi_offset 5, -12
 144              		.cfi_offset 6, -8
 145              		.cfi_offset 14, -4
 146 0002 84B0     		sub	sp, sp, #16
 147              	.LCFI4:
 148              		.cfi_def_cfa_offset 32
 237:Src/main.c    **** 
 149              		.loc 1 237 0
 150 0004 0025     		movs	r5, #0
 151 0006 0195     		str	r5, [sp, #4]
 152 0008 0295     		str	r5, [sp, #8]
 153 000a 0395     		str	r5, [sp, #12]
 244:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 154              		.loc 1 244 0
 155 000c 0B4C     		ldr	r4, .L7
 156 000e 0C4B     		ldr	r3, .L7+4
 157 0010 2360     		str	r3, [r4]
 245:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 158              		.loc 1 245 0
 159 0012 A560     		str	r5, [r4, #8]
 246:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 160              		.loc 1 246 0
 161 0014 E560     		str	r5, [r4, #12]
 247:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 162              		.loc 1 247 0
 163 0016 6561     		str	r5, [r4, #20]
 248:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 164              		.loc 1 248 0
 165 0018 4FF46023 		mov	r3, #917504
 166 001c E361     		str	r3, [r4, #28]
 249:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 167              		.loc 1 249 0
 168 001e 6560     		str	r5, [r4, #4]
 250:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 169              		.loc 1 250 0
 170 0020 0126     		movs	r6, #1
 171 0022 2661     		str	r6, [r4, #16]
 251:Src/main.c    ****   {
 172              		.loc 1 251 0
 173 0024 2046     		mov	r0, r4
 174 0026 FFF7FEFF 		bl	HAL_ADC_Init
 175              	.LVL4:
ARM GAS  /tmp/ccVQPWh7.s 			page 11


 257:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 176              		.loc 1 257 0
 177 002a 0195     		str	r5, [sp, #4]
 258:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 178              		.loc 1 258 0
 179 002c 0296     		str	r6, [sp, #8]
 259:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 180              		.loc 1 259 0
 181 002e 0395     		str	r5, [sp, #12]
 260:Src/main.c    ****   {
 182              		.loc 1 260 0
 183 0030 2046     		mov	r0, r4
 184 0032 01A9     		add	r1, sp, #4
 185 0034 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 186              	.LVL5:
 268:Src/main.c    **** 
 187              		.loc 1 268 0
 188 0038 04B0     		add	sp, sp, #16
 189              	.LCFI5:
 190              		.cfi_def_cfa_offset 16
 191              		@ sp needed
 192 003a 70BD     		pop	{r4, r5, r6, pc}
 193              	.L8:
 194              		.align	2
 195              	.L7:
 196 003c 00000000 		.word	hadc1
 197 0040 00240140 		.word	1073816576
 198              		.cfi_endproc
 199              	.LFE65:
 201              		.section	.text.MX_CAN_Init,"ax",%progbits
 202              		.align	2
 203              		.thumb
 204              		.thumb_func
 206              	MX_CAN_Init:
 207              	.LFB66:
 276:Src/main.c    **** 
 208              		.loc 1 276 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212 0000 08B5     		push	{r3, lr}
 213              	.LCFI6:
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 3, -8
 216              		.cfi_offset 14, -4
 286:Src/main.c    **** 	//hcan.pRxMsg = &RxMessage;
 217              		.loc 1 286 0
 218 0002 0E48     		ldr	r0, .L11
 219 0004 0E4B     		ldr	r3, .L11+4
 220 0006 0363     		str	r3, [r0, #48]
 290:Src/main.c    ****   hcan.Init.Prescaler = 2;
 221              		.loc 1 290 0
 222 0008 0E4B     		ldr	r3, .L11+8
 223 000a 0360     		str	r3, [r0]
 291:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_LOOPBACK;
 224              		.loc 1 291 0
 225 000c 0223     		movs	r3, #2
ARM GAS  /tmp/ccVQPWh7.s 			page 12


 226 000e 4360     		str	r3, [r0, #4]
 292:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 227              		.loc 1 292 0
 228 0010 4FF08043 		mov	r3, #1073741824
 229 0014 8360     		str	r3, [r0, #8]
 293:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_3TQ;
 230              		.loc 1 293 0
 231 0016 0023     		movs	r3, #0
 232 0018 C360     		str	r3, [r0, #12]
 294:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_4TQ;
 233              		.loc 1 294 0
 234 001a 4FF40032 		mov	r2, #131072
 235 001e 0261     		str	r2, [r0, #16]
 295:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 236              		.loc 1 295 0
 237 0020 4FF44012 		mov	r2, #3145728
 238 0024 4261     		str	r2, [r0, #20]
 296:Src/main.c    ****   hcan.Init.ABOM = ENABLE;
 239              		.loc 1 296 0
 240 0026 8361     		str	r3, [r0, #24]
 297:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
 241              		.loc 1 297 0
 242 0028 0122     		movs	r2, #1
 243 002a C261     		str	r2, [r0, #28]
 298:Src/main.c    ****   hcan.Init.NART = DISABLE;
 244              		.loc 1 298 0
 245 002c 0362     		str	r3, [r0, #32]
 299:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 246              		.loc 1 299 0
 247 002e 4362     		str	r3, [r0, #36]
 300:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 248              		.loc 1 300 0
 249 0030 8362     		str	r3, [r0, #40]
 301:Src/main.c    **** 
 250              		.loc 1 301 0
 251 0032 C362     		str	r3, [r0, #44]
 316:Src/main.c    ****   {
 252              		.loc 1 316 0
 253 0034 FFF7FEFF 		bl	HAL_CAN_Init
 254              	.LVL6:
 255 0038 08BD     		pop	{r3, pc}
 256              	.L12:
 257 003a 00BF     		.align	2
 258              	.L11:
 259 003c 00000000 		.word	hcan
 260 0040 00000000 		.word	.LANCHOR0
 261 0044 00640040 		.word	1073767424
 262              		.cfi_endproc
 263              	.LFE66:
 265              		.section	.text.SystemClock_Config,"ax",%progbits
 266              		.align	2
 267              		.global	SystemClock_Config
 268              		.thumb
 269              		.thumb_func
 271              	SystemClock_Config:
 272              	.LFB64:
 187:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
ARM GAS  /tmp/ccVQPWh7.s 			page 13


 273              		.loc 1 187 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 80
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277 0000 30B5     		push	{r4, r5, lr}
 278              	.LCFI7:
 279              		.cfi_def_cfa_offset 12
 280              		.cfi_offset 4, -12
 281              		.cfi_offset 5, -8
 282              		.cfi_offset 14, -4
 283 0002 95B0     		sub	sp, sp, #84
 284              	.LCFI8:
 285              		.cfi_def_cfa_offset 96
 188:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 286              		.loc 1 188 0
 287 0004 0024     		movs	r4, #0
 288 0006 0B94     		str	r4, [sp, #44]
 289 0008 0C94     		str	r4, [sp, #48]
 290 000a 0D94     		str	r4, [sp, #52]
 291 000c 1094     		str	r4, [sp, #64]
 292 000e 1194     		str	r4, [sp, #68]
 293 0010 1294     		str	r4, [sp, #72]
 294 0012 1394     		str	r4, [sp, #76]
 189:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 295              		.loc 1 189 0
 296 0014 0594     		str	r4, [sp, #20]
 297 0016 0694     		str	r4, [sp, #24]
 298 0018 0794     		str	r4, [sp, #28]
 299 001a 0894     		str	r4, [sp, #32]
 300 001c 0994     		str	r4, [sp, #36]
 190:Src/main.c    **** 
 301              		.loc 1 190 0
 302 001e 0194     		str	r4, [sp, #4]
 303 0020 0294     		str	r4, [sp, #8]
 304 0022 0394     		str	r4, [sp, #12]
 305 0024 0494     		str	r4, [sp, #16]
 194:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 306              		.loc 1 194 0
 307 0026 0225     		movs	r5, #2
 308 0028 0A95     		str	r5, [sp, #40]
 195:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 309              		.loc 1 195 0
 310 002a 0123     		movs	r3, #1
 311 002c 0E93     		str	r3, [sp, #56]
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 312              		.loc 1 196 0
 313 002e 1023     		movs	r3, #16
 314 0030 0F93     		str	r3, [sp, #60]
 198:Src/main.c    ****   {
 315              		.loc 1 198 0
 316 0032 0AA8     		add	r0, sp, #40
 317 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 318              	.LVL7:
 204:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 319              		.loc 1 204 0
 320 0038 0F23     		movs	r3, #15
 321 003a 0593     		str	r3, [sp, #20]
ARM GAS  /tmp/ccVQPWh7.s 			page 14


 206:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 322              		.loc 1 206 0
 323 003c 0694     		str	r4, [sp, #24]
 207:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 324              		.loc 1 207 0
 325 003e 0794     		str	r4, [sp, #28]
 208:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 326              		.loc 1 208 0
 327 0040 0894     		str	r4, [sp, #32]
 209:Src/main.c    **** 
 328              		.loc 1 209 0
 329 0042 0994     		str	r4, [sp, #36]
 211:Src/main.c    ****   {
 330              		.loc 1 211 0
 331 0044 05A8     		add	r0, sp, #20
 332 0046 2146     		mov	r1, r4
 333 0048 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 334              	.LVL8:
 215:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 335              		.loc 1 215 0
 336 004c 0195     		str	r5, [sp, #4]
 216:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 337              		.loc 1 216 0
 338 004e 0394     		str	r4, [sp, #12]
 217:Src/main.c    ****   {
 339              		.loc 1 217 0
 340 0050 01A8     		add	r0, sp, #4
 341 0052 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 342              	.LVL9:
 221:Src/main.c    **** 
 343              		.loc 1 221 0
 344 0056 15B0     		add	sp, sp, #84
 345              	.LCFI9:
 346              		.cfi_def_cfa_offset 12
 347              		@ sp needed
 348 0058 30BD     		pop	{r4, r5, pc}
 349              		.cfi_endproc
 350              	.LFE64:
 352              		.section	.text.main,"ax",%progbits
 353              		.align	2
 354              		.global	main
 355              		.thumb
 356              		.thumb_func
 358              	main:
 359              	.LFB63:
  95:Src/main.c    ****   /* USER CODE BEGIN 1 */
 360              		.loc 1 95 0
 361              		.cfi_startproc
 362              		@ Volatile: function does not return.
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365 0000 08B5     		push	{r3, lr}
 366              	.LCFI10:
 367              		.cfi_def_cfa_offset 8
 368              		.cfi_offset 3, -8
 369              		.cfi_offset 14, -4
 103:Src/main.c    **** 
ARM GAS  /tmp/ccVQPWh7.s 			page 15


 370              		.loc 1 103 0
 371 0002 FFF7FEFF 		bl	HAL_Init
 372              	.LVL10:
 110:Src/main.c    **** 
 373              		.loc 1 110 0
 374 0006 FFF7FEFF 		bl	SystemClock_Config
 375              	.LVL11:
 117:Src/main.c    ****   MX_ADC1_Init();
 376              		.loc 1 117 0
 377 000a FFF7FEFF 		bl	MX_GPIO_Init
 378              	.LVL12:
 118:Src/main.c    ****   /* USER CODE BEGIN 2 */
 379              		.loc 1 118 0
 380 000e FFF7FEFF 		bl	MX_ADC1_Init
 381              	.LVL13:
 120:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 382              		.loc 1 120 0
 383 0012 1E4C     		ldr	r4, .L20
 384 0014 2046     		mov	r0, r4
 385 0016 4FF48061 		mov	r1, #1024
 386 001a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 387              	.LVL14:
 121:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 388              		.loc 1 121 0
 389 001e 2046     		mov	r0, r4
 390 0020 4FF40061 		mov	r1, #2048
 391 0024 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 392              	.LVL15:
 122:Src/main.c    ****   //ConfigureADC();
 393              		.loc 1 122 0
 394 0028 2046     		mov	r0, r4
 395 002a 0121     		movs	r1, #1
 396 002c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 397              	.LVL16:
 124:Src/main.c    ****   //HAL_ADC_Start_IT(&g_AdcHandle);
 398              		.loc 1 124 0
 399 0030 1748     		ldr	r0, .L20+4
 400 0032 FFF7FEFF 		bl	HAL_ADC_Start_IT
 401              	.LVL17:
 137:Src/main.c    ****     hcan.pTxMsg->StdId = 0x321;
 402              		.loc 1 137 0
 403 0036 FFF7FEFF 		bl	MX_CAN_Init
 404              	.LVL18:
 138:Src/main.c    **** 	hcan.pTxMsg->ExtId = 0x01;
 405              		.loc 1 138 0
 406 003a 164B     		ldr	r3, .L20+8
 407 003c 1A6B     		ldr	r2, [r3, #48]
 408 003e 40F22131 		movw	r1, #801
 409 0042 1160     		str	r1, [r2]
 139:Src/main.c    **** 	hcan.pTxMsg->RTR = CAN_RTR_DATA;
 410              		.loc 1 139 0
 411 0044 196B     		ldr	r1, [r3, #48]
 412 0046 0122     		movs	r2, #1
 413 0048 4A60     		str	r2, [r1, #4]
 140:Src/main.c    **** 	hcan.pTxMsg->IDE = CAN_ID_STD;
 414              		.loc 1 140 0
 415 004a 186B     		ldr	r0, [r3, #48]
ARM GAS  /tmp/ccVQPWh7.s 			page 16


 416 004c 0021     		movs	r1, #0
 417 004e C160     		str	r1, [r0, #12]
 141:Src/main.c    **** 	hcan.pTxMsg->DLC = 1;
 418              		.loc 1 141 0
 419 0050 186B     		ldr	r0, [r3, #48]
 420 0052 8160     		str	r1, [r0, #8]
 142:Src/main.c    **** 	hcan.pTxMsg->Data[0] = 0x55;
 421              		.loc 1 142 0
 422 0054 196B     		ldr	r1, [r3, #48]
 423 0056 0A61     		str	r2, [r1, #16]
 143:Src/main.c    **** 	
 424              		.loc 1 143 0
 425 0058 1B6B     		ldr	r3, [r3, #48]
 426 005a 5522     		movs	r2, #85
 427 005c 1A75     		strb	r2, [r3, #20]
 428              	.L18:
 156:Src/main.c    **** 	
 429              		.loc 1 156 0
 430 005e 0C48     		ldr	r0, .L20+4
 431 0060 4FF47A71 		mov	r1, #1000
 432 0064 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 433              	.LVL19:
 158:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 434              		.loc 1 158 0
 435 0068 0B4B     		ldr	r3, .L20+12
 436 006a 1B88     		ldrh	r3, [r3]
 437 006c 202B     		cmp	r3, #32
 438 006e 04D9     		bls	.L16
 159:Src/main.c    **** 	else
 439              		.loc 1 159 0
 440 0070 0A48     		ldr	r0, .L20+16
 441 0072 4021     		movs	r1, #64
 442 0074 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 443              	.LVL20:
 444 0078 03E0     		b	.L17
 445              	.L16:
 161:Src/main.c    **** 	/*
 446              		.loc 1 161 0
 447 007a 0848     		ldr	r0, .L20+16
 448 007c 2021     		movs	r1, #32
 449 007e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 450              	.LVL21:
 451              	.L17:
 177:Src/main.c    ****   }
 452              		.loc 1 177 0
 453 0082 6420     		movs	r0, #100
 454 0084 FFF7FEFF 		bl	HAL_Delay
 455              	.LVL22:
 178:Src/main.c    ****   /* USER CODE END 3 */
 456              		.loc 1 178 0
 457 0088 E9E7     		b	.L18
 458              	.L21:
 459 008a 00BF     		.align	2
 460              	.L20:
 461 008c 000C0140 		.word	1073810432
 462 0090 00000000 		.word	hadc1
 463 0094 00000000 		.word	hcan
ARM GAS  /tmp/ccVQPWh7.s 			page 17


 464 0098 00000000 		.word	g_ADCValue
 465 009c 00080140 		.word	1073809408
 466              		.cfi_endproc
 467              	.LFE63:
 469              		.section	.text.HAL_CAN_RxCpltCallback,"ax",%progbits
 470              		.align	2
 471              		.global	HAL_CAN_RxCpltCallback
 472              		.thumb
 473              		.thumb_func
 475              	HAL_CAN_RxCpltCallback:
 476              	.LFB67:
 337:Src/main.c    **** 	//unsigned char data[8];
 477              		.loc 1 337 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              	.LVL23:
 482 0000 08B5     		push	{r3, lr}
 483              	.LCFI11:
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 3, -8
 486              		.cfi_offset 14, -4
 342:Src/main.c    **** 	{
 487              		.loc 1 342 0
 488 0002 074B     		ldr	r3, .L25
 489 0004 5B6B     		ldr	r3, [r3, #52]
 490 0006 1B68     		ldr	r3, [r3]
 491 0008 802B     		cmp	r3, #128
 492 000a 04D1     		bne	.L23
 344:Src/main.c    **** 	}
 493              		.loc 1 344 0
 494 000c 0548     		ldr	r0, .L25+4
 495              	.LVL24:
 496 000e 4FF48061 		mov	r1, #1024
 497 0012 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 498              	.LVL25:
 499              	.L23:
 348:Src/main.c    **** 
 500              		.loc 1 348 0
 501 0016 0248     		ldr	r0, .L25
 502 0018 0021     		movs	r1, #0
 503 001a FFF7FEFF 		bl	HAL_CAN_Receive_IT
 504              	.LVL26:
 505 001e 08BD     		pop	{r3, pc}
 506              	.L26:
 507              		.align	2
 508              	.L25:
 509 0020 00000000 		.word	hcan
 510 0024 000C0140 		.word	1073810432
 511              		.cfi_endproc
 512              	.LFE67:
 514              		.section	.text.readADC_Val,"ax",%progbits
 515              		.align	2
 516              		.global	readADC_Val
 517              		.thumb
 518              		.thumb_func
 520              	readADC_Val:
ARM GAS  /tmp/ccVQPWh7.s 			page 18


 521              	.LFB69:
 389:Src/main.c    **** 
 390:Src/main.c    **** /* USER CODE BEGIN 4 */
 391:Src/main.c    **** uint16_t readADC_Val(void)
 392:Src/main.c    **** {
 522              		.loc 1 392 0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 0, uses_anonymous_args = 0
 526 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 527              	.LCFI12:
 528              		.cfi_def_cfa_offset 24
 529              		.cfi_offset 3, -24
 530              		.cfi_offset 4, -20
 531              		.cfi_offset 5, -16
 532              		.cfi_offset 6, -12
 533              		.cfi_offset 7, -8
 534              		.cfi_offset 14, -4
 393:Src/main.c    **** 	//chConfig.Channel = channel; //configure channel to be read
 394:Src/main.c    **** 	sConfig.Rank =  ADC_REGULAR_RANK_1;
 535              		.loc 1 394 0
 536 0002 0F4D     		ldr	r5, .L29
 537 0004 0126     		movs	r6, #1
 538 0006 6E60     		str	r6, [r5, #4]
 395:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 539              		.loc 1 395 0
 540 0008 0023     		movs	r3, #0
 541 000a AB60     		str	r3, [r5, #8]
 396:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 542              		.loc 1 396 0
 543 000c 0D4C     		ldr	r4, .L29+4
 544 000e 2046     		mov	r0, r4
 545 0010 2946     		mov	r1, r5
 546 0012 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 547              	.LVL27:
 397:Src/main.c    **** 	
 398:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 548              		.loc 1 398 0
 549 0016 2046     		mov	r0, r4
 550 0018 FFF7FEFF 		bl	HAL_ADC_Start
 551              	.LVL28:
 399:Src/main.c    **** 	HAL_ADCEx_Calibration_Start(&hadc1);
 552              		.loc 1 399 0
 553 001c 2046     		mov	r0, r4
 554 001e FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 555              	.LVL29:
 400:Src/main.c    **** 	
 401:Src/main.c    **** 	uint32_t value = HAL_ADC_GetValue(&hadc1);
 556              		.loc 1 401 0
 557 0022 2046     		mov	r0, r4
 558 0024 FFF7FEFF 		bl	HAL_ADC_GetValue
 559              	.LVL30:
 560 0028 0746     		mov	r7, r0
 561              	.LVL31:
 402:Src/main.c    **** 	
 403:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 562              		.loc 1 403 0
ARM GAS  /tmp/ccVQPWh7.s 			page 19


 563 002a 2046     		mov	r0, r4
 564              	.LVL32:
 565 002c FFF7FEFF 		bl	HAL_ADC_Stop
 566              	.LVL33:
 404:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 567              		.loc 1 404 0
 568 0030 6E60     		str	r6, [r5, #4]
 405:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1,&sConfig);
 569              		.loc 1 405 0
 570 0032 2046     		mov	r0, r4
 571 0034 2946     		mov	r1, r5
 572 0036 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 573              	.LVL34:
 406:Src/main.c    **** 	
 407:Src/main.c    **** 	uint16_t value2 = (uint16_t)value;
 408:Src/main.c    **** 	//sprintf(TextBuffer,"%u\n",value2);
 409:Src/main.c    **** 	return value2;
 410:Src/main.c    **** }
 574              		.loc 1 410 0
 575 003a B8B2     		uxth	r0, r7
 576 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 577              	.LVL35:
 578              	.L30:
 579 003e 00BF     		.align	2
 580              	.L29:
 581 0040 00000000 		.word	sConfig
 582 0044 00000000 		.word	hadc1
 583              		.cfi_endproc
 584              	.LFE69:
 586              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 587              		.align	2
 588              		.weak	HAL_ADC_ConvCpltCallback
 589              		.thumb
 590              		.thumb_func
 592              	HAL_ADC_ConvCpltCallback:
 593              	.LFB70:
 411:Src/main.c    **** 
 412:Src/main.c    **** /*Interrupt Functions for ADC*/
 413:Src/main.c    **** 
 414:Src/main.c    **** 	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle){
 594              		.loc 1 414 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 598              	.LVL36:
 599 0000 08B5     		push	{r3, lr}
 600              	.LCFI13:
 601              		.cfi_def_cfa_offset 8
 602              		.cfi_offset 3, -8
 603              		.cfi_offset 14, -4
 415:Src/main.c    **** 		g_ADCValue = HAL_ADC_GetValue(AdcHandle);
 604              		.loc 1 415 0
 605 0002 FFF7FEFF 		bl	HAL_ADC_GetValue
 606              	.LVL37:
 607 0006 014B     		ldr	r3, .L33
 608 0008 1880     		strh	r0, [r3]	@ movhi
 609 000a 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccVQPWh7.s 			page 20


 610              	.L34:
 611              		.align	2
 612              	.L33:
 613 000c 00000000 		.word	g_ADCValue
 614              		.cfi_endproc
 615              	.LFE70:
 617              		.section	.text.ADC_IRQHandler,"ax",%progbits
 618              		.align	2
 619              		.global	ADC_IRQHandler
 620              		.thumb
 621              		.thumb_func
 623              	ADC_IRQHandler:
 624              	.LFB71:
 416:Src/main.c    **** 	}
 417:Src/main.c    **** 	
 418:Src/main.c    ****     void ADC_IRQHandler(){
 625              		.loc 1 418 0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 0
 628              		@ frame_needed = 0, uses_anonymous_args = 0
 629 0000 08B5     		push	{r3, lr}
 630              	.LCFI14:
 631              		.cfi_def_cfa_offset 8
 632              		.cfi_offset 3, -8
 633              		.cfi_offset 14, -4
 419:Src/main.c    ****         HAL_ADC_IRQHandler(&hadc1);
 634              		.loc 1 419 0
 635 0002 0248     		ldr	r0, .L37
 636 0004 FFF7FEFF 		bl	HAL_ADC_IRQHandler
 637              	.LVL38:
 638 0008 08BD     		pop	{r3, pc}
 639              	.L38:
 640 000a 00BF     		.align	2
 641              	.L37:
 642 000c 00000000 		.word	hadc1
 643              		.cfi_endproc
 644              	.LFE71:
 646              		.section	.text.Error_Handler,"ax",%progbits
 647              		.align	2
 648              		.global	Error_Handler
 649              		.thumb
 650              		.thumb_func
 652              	Error_Handler:
 653              	.LFB72:
 420:Src/main.c    ****     }
 421:Src/main.c    **** 
 422:Src/main.c    **** /* USER CODE END 4 */
 423:Src/main.c    **** 
 424:Src/main.c    **** /**
 425:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 426:Src/main.c    ****   * @retval None
 427:Src/main.c    ****   */
 428:Src/main.c    **** void Error_Handler(void)
 429:Src/main.c    **** {
 654              		.loc 1 429 0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccVQPWh7.s 			page 21


 657              		@ frame_needed = 0, uses_anonymous_args = 0
 658              		@ link register save eliminated.
 659 0000 7047     		bx	lr
 660              		.cfi_endproc
 661              	.LFE72:
 663              		.comm	sConfig,12,4
 664              		.comm	g_ADCValue,2,2
 665              		.comm	adc9,2,2
 666              		.comm	adc7,2,2
 667              		.comm	adc1,2,2
 668              		.comm	adc0,2,2
 669              		.comm	hcan,68,4
 670              		.comm	hadc1,48,4
 671 0002 00BF     		.section	.bss.TxMessage.6520,"aw",%nobits
 672              		.align	2
 673              		.set	.LANCHOR0,. + 0
 676              	TxMessage.6520:
 677 0000 00000000 		.space	28
 677      00000000 
 677      00000000 
 677      00000000 
 677      00000000 
 678              		.text
 679              	.Letext0:
 680              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 681              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 682              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 683              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 684              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 685              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 686              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 687              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 688              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 689              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 690              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 691              		.file 13 "Drivers/CMSIS/Include/core_cm3.h"
 692              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 693              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc_ex.h"
ARM GAS  /tmp/ccVQPWh7.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccVQPWh7.s:19     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccVQPWh7.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccVQPWh7.s:122    .text.MX_GPIO_Init:0000000000000088 $d
     /tmp/ccVQPWh7.s:129    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccVQPWh7.s:133    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccVQPWh7.s:196    .text.MX_ADC1_Init:000000000000003c $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccVQPWh7.s:202    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccVQPWh7.s:206    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccVQPWh7.s:259    .text.MX_CAN_Init:000000000000003c $d
                            *COM*:0000000000000044 hcan
     /tmp/ccVQPWh7.s:266    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccVQPWh7.s:271    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccVQPWh7.s:353    .text.main:0000000000000000 $t
     /tmp/ccVQPWh7.s:358    .text.main:0000000000000000 main
     /tmp/ccVQPWh7.s:461    .text.main:000000000000008c $d
                            *COM*:0000000000000002 g_ADCValue
     /tmp/ccVQPWh7.s:470    .text.HAL_CAN_RxCpltCallback:0000000000000000 $t
     /tmp/ccVQPWh7.s:475    .text.HAL_CAN_RxCpltCallback:0000000000000000 HAL_CAN_RxCpltCallback
     /tmp/ccVQPWh7.s:509    .text.HAL_CAN_RxCpltCallback:0000000000000020 $d
     /tmp/ccVQPWh7.s:515    .text.readADC_Val:0000000000000000 $t
     /tmp/ccVQPWh7.s:520    .text.readADC_Val:0000000000000000 readADC_Val
     /tmp/ccVQPWh7.s:581    .text.readADC_Val:0000000000000040 $d
                            *COM*:000000000000000c sConfig
     /tmp/ccVQPWh7.s:587    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccVQPWh7.s:592    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccVQPWh7.s:613    .text.HAL_ADC_ConvCpltCallback:000000000000000c $d
     /tmp/ccVQPWh7.s:618    .text.ADC_IRQHandler:0000000000000000 $t
     /tmp/ccVQPWh7.s:623    .text.ADC_IRQHandler:0000000000000000 ADC_IRQHandler
     /tmp/ccVQPWh7.s:642    .text.ADC_IRQHandler:000000000000000c $d
     /tmp/ccVQPWh7.s:647    .text.Error_Handler:0000000000000000 $t
     /tmp/ccVQPWh7.s:652    .text.Error_Handler:0000000000000000 Error_Handler
                            *COM*:0000000000000002 adc9
                            *COM*:0000000000000002 adc7
                            *COM*:0000000000000002 adc1
                            *COM*:0000000000000002 adc0
     /tmp/ccVQPWh7.s:672    .bss.TxMessage.6520:0000000000000000 $d
     /tmp/ccVQPWh7.s:676    .bss.TxMessage.6520:0000000000000000 TxMessage.6520
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_GPIO_TogglePin
HAL_ADC_Start_IT
HAL_ADC_PollForConversion
HAL_Delay
HAL_CAN_Receive_IT
ARM GAS  /tmp/ccVQPWh7.s 			page 23


HAL_ADC_Start
HAL_ADCEx_Calibration_Start
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_ADC_IRQHandler

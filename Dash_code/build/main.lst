ARM GAS  /tmp/cc5GuRPN.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB69:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/cc5GuRPN.s 			page 2


  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** //#include "stm32f0xx_hal.h"
  47:Src/main.c    **** /* USER CODE END Includes */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  50:Src/main.c    **** /* USER CODE BEGIN PTD */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PTD */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN PD */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PD */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN PM */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PM */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** ADC_HandleTypeDef hadc1;
  66:Src/main.c    **** CAN_HandleTypeDef hcan;
  67:Src/main.c    **** /* USER CODE BEGIN PV */
  68:Src/main.c    **** uint16_t adc0,adc1,adc7,adc9;
  69:Src/main.c    **** uint16_t g_ADCValue;
  70:Src/main.c    **** ADC_ChannelConfTypeDef sConfig;
  71:Src/main.c    **** //UART_HandleTypeDef huart1;
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** static void MX_GPIO_Init(void);
  77:Src/main.c    **** static void MX_CAN_Init(void);
  78:Src/main.c    **** static void MX_ADC1_Init(void);
  79:Src/main.c    **** //static void MX_USART1_UART_Init(void);
  80:Src/main.c    **** /* USER CODE BEGIN PFP */
  81:Src/main.c    **** uint16_t readADC_Val(void);
  82:Src/main.c    **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*);
  83:Src/main.c    **** /* USER CODE END PFP */
  84:Src/main.c    **** 
  85:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  86:Src/main.c    **** /* USER CODE BEGIN 0 */
  87:Src/main.c    **** 
  88:Src/main.c    **** /* USER CODE END 0 */
  89:Src/main.c    **** 
  90:Src/main.c    **** /**
  91:Src/main.c    ****   * @brief  The application entry point.
ARM GAS  /tmp/cc5GuRPN.s 			page 3


  92:Src/main.c    ****   * @retval int
  93:Src/main.c    ****   */
  94:Src/main.c    **** int main(void)
  95:Src/main.c    **** {
  96:Src/main.c    ****   /* USER CODE BEGIN 1 */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE END 1 */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 103:Src/main.c    ****   HAL_Init();
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE BEGIN Init */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE END Init */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Configure the system clock */
 110:Src/main.c    ****   SystemClock_Config();
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE END SysInit */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Initialize all configured peripherals */
 117:Src/main.c    ****   MX_GPIO_Init();
 118:Src/main.c    ****   MX_ADC1_Init();
 119:Src/main.c    ****   /* USER CODE BEGIN 2 */
 120:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 121:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 122:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 123:Src/main.c    ****   //ConfigureADC();
 124:Src/main.c    ****   HAL_ADC_Start_IT(&hadc1);
 125:Src/main.c    ****   //HAL_ADC_Start_IT(&g_AdcHandle);
 126:Src/main.c    ****   /*
 127:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 128:Src/main.c    ****   adc0 = readADC_Val();
 129:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 130:Src/main.c    ****   adc1 = readADC_Val();
 131:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_7;
 132:Src/main.c    ****   adc7 = readADC_Val();
 133:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 134:Src/main.c    ****   adc9 = readADC_Val();
 135:Src/main.c    ****   */
 136:Src/main.c    **** 	//send
 137:Src/main.c    ****     MX_CAN_Init();
 138:Src/main.c    ****     hcan.pTxMsg->StdId = 0x321;
 139:Src/main.c    **** 	hcan.pTxMsg->ExtId = 0x01;
 140:Src/main.c    **** 	hcan.pTxMsg->RTR = CAN_RTR_DATA;
 141:Src/main.c    **** 	hcan.pTxMsg->IDE = CAN_ID_STD;
 142:Src/main.c    **** 	hcan.pTxMsg->DLC = 1;
 143:Src/main.c    **** 	hcan.pTxMsg->Data[0] = 0x55;
 144:Src/main.c    **** 	
 145:Src/main.c    **** 	//receive
 146:Src/main.c    **** 	//HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 147:Src/main.c    ****   /* USER CODE END 2 */
 148:Src/main.c    **** 
ARM GAS  /tmp/cc5GuRPN.s 			page 4


 149:Src/main.c    ****   /* Infinite loop */
 150:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 151:Src/main.c    ****   while (1)
 152:Src/main.c    ****   {/**/
 153:Src/main.c    ****     //sConfig.Channel = ADC_CHANNEL_0;
 154:Src/main.c    ****     //adc0 = readADC_Val();
 155:Src/main.c    **** 	//int adcVal = 2148 / 4096 * 3.3
 156:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 157:Src/main.c    **** 	
 158:Src/main.c    **** 	if (g_ADCValue > 0x0020)
 159:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 160:Src/main.c    **** 	else
 161:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 162:Src/main.c    **** 	/*
 163:Src/main.c    **** 	hcan.pTxMsg->Data[0] = g_ADCValue >> 8;
 164:Src/main.c    **** 	hcan.pTxMsg->Data[1] = g_ADCValue & 0xFF;
 165:Src/main.c    **** 	
 166:Src/main.c    **** 	if (HAL_CAN_Transmit(&hcan, 100) == HAL_TIMEOUT)
 167:Src/main.c    **** 	{
 168:Src/main.c    **** 		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 169:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 170:Src/main.c    **** 		//Error_Handler();
 171:Src/main.c    **** 	}	*/
 172:Src/main.c    **** 	//HAL_Delay(100);
 173:Src/main.c    **** 	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 174:Src/main.c    ****     /* USER CODE END WHILE */
 175:Src/main.c    **** 
 176:Src/main.c    ****     /* USER CODE BEGIN 3 */
 177:Src/main.c    **** 	HAL_Delay(100);
 178:Src/main.c    ****   }
 179:Src/main.c    ****   /* USER CODE END 3 */
 180:Src/main.c    **** }
 181:Src/main.c    **** 
 182:Src/main.c    **** /**
 183:Src/main.c    ****   * @brief System Clock Configuration
 184:Src/main.c    ****   * @retval None
 185:Src/main.c    ****   */
 186:Src/main.c    **** void SystemClock_Config(void)
 187:Src/main.c    **** {
 188:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 189:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 190:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 191:Src/main.c    **** 
 192:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 193:Src/main.c    ****   */
 194:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 195:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 196:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 198:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 199:Src/main.c    ****   {
 200:Src/main.c    ****     Error_Handler();
 201:Src/main.c    ****   }
 202:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 203:Src/main.c    ****   */
 204:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 205:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  /tmp/cc5GuRPN.s 			page 5


 206:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 207:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 208:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 209:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 210:Src/main.c    **** 
 211:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 212:Src/main.c    ****   {
 213:Src/main.c    ****     Error_Handler();
 214:Src/main.c    ****   }
 215:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 216:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 217:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 218:Src/main.c    ****   {
 219:Src/main.c    ****     Error_Handler();
 220:Src/main.c    ****   }
 221:Src/main.c    **** }
 222:Src/main.c    **** 
 223:Src/main.c    **** 
 224:Src/main.c    **** 
 225:Src/main.c    **** /**
 226:Src/main.c    ****   * @brief ADC1 Initialization Function
 227:Src/main.c    ****   * @param None
 228:Src/main.c    ****   * @retval None
 229:Src/main.c    ****   */
 230:Src/main.c    **** static void MX_ADC1_Init(void)
 231:Src/main.c    **** {
 232:Src/main.c    **** 
 233:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 234:Src/main.c    **** 
 235:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 236:Src/main.c    **** 
 237:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 238:Src/main.c    **** 
 239:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 240:Src/main.c    **** 
 241:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 242:Src/main.c    ****   /**Common config 
 243:Src/main.c    ****   */
 244:Src/main.c    ****   hadc1.Instance = ADC1;
 245:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 246:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 247:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 248:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 249:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 250:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 251:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 252:Src/main.c    ****   {
 253:Src/main.c    ****     Error_Handler();
 254:Src/main.c    ****   }
 255:Src/main.c    ****   /**Configure Regular Channel 
 256:Src/main.c    ****   */
 257:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 258:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 259:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 260:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 261:Src/main.c    ****   {
 262:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/cc5GuRPN.s 			page 6


 263:Src/main.c    ****   }
 264:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 265:Src/main.c    **** 
 266:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 267:Src/main.c    **** 
 268:Src/main.c    **** }
 269:Src/main.c    **** 
 270:Src/main.c    **** /**
 271:Src/main.c    ****   * @brief CAN Initialization Function
 272:Src/main.c    ****   * @param None
 273:Src/main.c    ****   * @retval None
 274:Src/main.c    ****   */
 275:Src/main.c    **** static void MX_CAN_Init(void)
 276:Src/main.c    **** {
 277:Src/main.c    **** 
 278:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 279:Src/main.c    **** 
 280:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 281:Src/main.c    **** 
 282:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 283:Src/main.c    ****   	static CanTxMsgTypeDef TxMessage;
 284:Src/main.c    **** 	//static CanRxMsgTypeDef RxMessage;
 285:Src/main.c    **** 
 286:Src/main.c    **** 	hcan.pTxMsg = &TxMessage;
 287:Src/main.c    **** 	//hcan.pRxMsg = &RxMessage;
 288:Src/main.c    **** 	//CAN_FilterConfTypeDef	sFilterConfig;
 289:Src/main.c    **** /**/
 290:Src/main.c    ****   hcan.Instance = CAN1;
 291:Src/main.c    ****   hcan.Init.Prescaler = 2;
 292:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_LOOPBACK;
 293:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 294:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_3TQ;
 295:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_4TQ;
 296:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 297:Src/main.c    ****   hcan.Init.ABOM = ENABLE;
 298:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
 299:Src/main.c    ****   hcan.Init.NART = DISABLE;
 300:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 301:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 302:Src/main.c    **** 
 303:Src/main.c    ****   /* USER CODE END CAN_Init 1 
 304:Src/main.c    ****   hcan.Instance = CAN1;
 305:Src/main.c    ****   hcan.Init.Prescaler = 16;
 306:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 307:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 308:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 309:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 310:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 311:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 312:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 313:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 314:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 315:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;*/
 316:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 317:Src/main.c    ****   {
 318:Src/main.c    ****     Error_Handler();
 319:Src/main.c    ****   }
ARM GAS  /tmp/cc5GuRPN.s 			page 7


 320:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 
 321:Src/main.c    **** 	sFilterConfig.FilterNumber = 0;
 322:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 323:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 324:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;
 325:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 326:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;
 327:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 328:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_FIFO0;
 329:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 330:Src/main.c    **** 
 331:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);*/
 332:Src/main.c    **** 
 333:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 334:Src/main.c    **** 
 335:Src/main.c    **** }
 336:Src/main.c    **** void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef *CanHandle)
 337:Src/main.c    **** {
 338:Src/main.c    **** 	//unsigned char data[8];
 339:Src/main.c    **** 	//data[0] = hcan.pRxMsg->Data[0];
 340:Src/main.c    **** 	//HAL_UART_Transmit(&huart1, data, sizeof(data), 1000);
 341:Src/main.c    **** 
 342:Src/main.c    **** 	if (hcan.pRxMsg->StdId == 0x80)
 343:Src/main.c    **** 	{
 344:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 345:Src/main.c    **** 	}
 346:Src/main.c    **** 
 347:Src/main.c    **** 	/* Re-enable Rx interrupt */
 348:Src/main.c    **** 	HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 349:Src/main.c    **** 
 350:Src/main.c    **** }
 351:Src/main.c    **** 
 352:Src/main.c    **** /**
 353:Src/main.c    ****   * @brief GPIO Initialization Function
 354:Src/main.c    ****   * @param None
 355:Src/main.c    ****   * @retval None
 356:Src/main.c    ****   */
 357:Src/main.c    **** static void MX_GPIO_Init(void)
 358:Src/main.c    **** {
  25              		.loc 1 358 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 86B0     		sub	sp, sp, #24
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 359:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 359 0
ARM GAS  /tmp/cc5GuRPN.s 			page 8


  42 0006 0024     		movs	r4, #0
  43 0008 0294     		str	r4, [sp, #8]
  44 000a 0394     		str	r4, [sp, #12]
  45 000c 0494     		str	r4, [sp, #16]
  46 000e 0594     		str	r4, [sp, #20]
  47              	.LBB2:
 360:Src/main.c    **** 
 361:Src/main.c    ****   /* GPIO Ports Clock Enable */
 362:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  48              		.loc 1 362 0
  49 0010 1D4B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F00402 		orr	r2, r2, #4
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F00402 		and	r2, r2, #4
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE2:
  58              	.LBB3:
 363:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  59              		.loc 1 363 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F00802 		orr	r2, r2, #8
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9B69     		ldr	r3, [r3, #24]
  64 002e 03F00803 		and	r3, r3, #8
  65 0032 0193     		str	r3, [sp, #4]
  66 0034 019B     		ldr	r3, [sp, #4]
  67              	.LBE3:
 364:Src/main.c    **** 
 365:Src/main.c    ****   /*Configure GPIO pin Output Level */
 366:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
  68              		.loc 1 366 0
  69 0036 DFF85880 		ldr	r8, .L3+8
  70 003a 2246     		mov	r2, r4
  71 003c 4FF45C71 		mov	r1, #880
  72 0040 4046     		mov	r0, r8
  73 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  74              	.LVL0:
 367:Src/main.c    ****                           |GPIO_PIN_9, GPIO_PIN_RESET);
 368:Src/main.c    **** 
 369:Src/main.c    ****   /*Configure GPIO pin Output Level */
 370:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
  75              		.loc 1 370 0
  76 0046 114D     		ldr	r5, .L3+4
  77 0048 2246     		mov	r2, r4
  78 004a 40F60141 		movw	r1, #3073
  79 004e 2846     		mov	r0, r5
  80 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  81              	.LVL1:
 371:Src/main.c    **** 
 372:Src/main.c    ****   /*Configure GPIO pins : PA4 PA5 PA6 PA8 
 373:Src/main.c    ****                            PA9 */
 374:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
  82              		.loc 1 374 0
  83 0054 4FF45C73 		mov	r3, #880
ARM GAS  /tmp/cc5GuRPN.s 			page 9


  84 0058 0293     		str	r3, [sp, #8]
 375:Src/main.c    ****                           |GPIO_PIN_9;
 376:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  85              		.loc 1 376 0
  86 005a 0127     		movs	r7, #1
  87 005c 0397     		str	r7, [sp, #12]
 377:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  88              		.loc 1 377 0
  89 005e 0494     		str	r4, [sp, #16]
 378:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  90              		.loc 1 378 0
  91 0060 0226     		movs	r6, #2
  92 0062 0596     		str	r6, [sp, #20]
 379:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  93              		.loc 1 379 0
  94 0064 02A9     		add	r1, sp, #8
  95 0066 4046     		mov	r0, r8
  96 0068 FFF7FEFF 		bl	HAL_GPIO_Init
  97              	.LVL2:
 380:Src/main.c    **** 
 381:Src/main.c    ****   /*Configure GPIO pins : PB0 PB10 PB11 */
 382:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
  98              		.loc 1 382 0
  99 006c 40F60143 		movw	r3, #3073
 100 0070 0293     		str	r3, [sp, #8]
 383:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 101              		.loc 1 383 0
 102 0072 0397     		str	r7, [sp, #12]
 384:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 103              		.loc 1 384 0
 104 0074 0494     		str	r4, [sp, #16]
 385:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 105              		.loc 1 385 0
 106 0076 0596     		str	r6, [sp, #20]
 386:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 107              		.loc 1 386 0
 108 0078 02A9     		add	r1, sp, #8
 109 007a 2846     		mov	r0, r5
 110 007c FFF7FEFF 		bl	HAL_GPIO_Init
 111              	.LVL3:
 387:Src/main.c    **** 
 388:Src/main.c    **** }
 112              		.loc 1 388 0
 113 0080 06B0     		add	sp, sp, #24
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 24
 116              		@ sp needed
 117 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 118              	.L4:
 119 0086 00BF     		.align	2
 120              	.L3:
 121 0088 00100240 		.word	1073876992
 122 008c 000C0140 		.word	1073810432
 123 0090 00080140 		.word	1073809408
 124              		.cfi_endproc
 125              	.LFE69:
 127              		.section	.text.MX_ADC1_Init,"ax",%progbits
ARM GAS  /tmp/cc5GuRPN.s 			page 10


 128              		.align	1
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu softvfp
 134              	MX_ADC1_Init:
 135              	.LFB66:
 231:Src/main.c    **** 
 136              		.loc 1 231 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 16
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140 0000 70B5     		push	{r4, r5, r6, lr}
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 16
 143              		.cfi_offset 4, -16
 144              		.cfi_offset 5, -12
 145              		.cfi_offset 6, -8
 146              		.cfi_offset 14, -4
 147 0002 84B0     		sub	sp, sp, #16
 148              	.LCFI4:
 149              		.cfi_def_cfa_offset 32
 237:Src/main.c    **** 
 150              		.loc 1 237 0
 151 0004 0025     		movs	r5, #0
 152 0006 0195     		str	r5, [sp, #4]
 153 0008 0295     		str	r5, [sp, #8]
 154 000a 0395     		str	r5, [sp, #12]
 244:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 155              		.loc 1 244 0
 156 000c 0B4C     		ldr	r4, .L7
 157 000e 0C4B     		ldr	r3, .L7+4
 158 0010 2360     		str	r3, [r4]
 245:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 159              		.loc 1 245 0
 160 0012 A560     		str	r5, [r4, #8]
 246:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 161              		.loc 1 246 0
 162 0014 E560     		str	r5, [r4, #12]
 247:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 163              		.loc 1 247 0
 164 0016 6561     		str	r5, [r4, #20]
 248:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 165              		.loc 1 248 0
 166 0018 4FF46023 		mov	r3, #917504
 167 001c E361     		str	r3, [r4, #28]
 249:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 168              		.loc 1 249 0
 169 001e 6560     		str	r5, [r4, #4]
 250:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 170              		.loc 1 250 0
 171 0020 0126     		movs	r6, #1
 172 0022 2661     		str	r6, [r4, #16]
 251:Src/main.c    ****   {
 173              		.loc 1 251 0
 174 0024 2046     		mov	r0, r4
 175 0026 FFF7FEFF 		bl	HAL_ADC_Init
ARM GAS  /tmp/cc5GuRPN.s 			page 11


 176              	.LVL4:
 257:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 177              		.loc 1 257 0
 178 002a 0195     		str	r5, [sp, #4]
 258:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 179              		.loc 1 258 0
 180 002c 0296     		str	r6, [sp, #8]
 259:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 181              		.loc 1 259 0
 182 002e 0395     		str	r5, [sp, #12]
 260:Src/main.c    ****   {
 183              		.loc 1 260 0
 184 0030 01A9     		add	r1, sp, #4
 185 0032 2046     		mov	r0, r4
 186 0034 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 187              	.LVL5:
 268:Src/main.c    **** 
 188              		.loc 1 268 0
 189 0038 04B0     		add	sp, sp, #16
 190              	.LCFI5:
 191              		.cfi_def_cfa_offset 16
 192              		@ sp needed
 193 003a 70BD     		pop	{r4, r5, r6, pc}
 194              	.L8:
 195              		.align	2
 196              	.L7:
 197 003c 00000000 		.word	hadc1
 198 0040 00240140 		.word	1073816576
 199              		.cfi_endproc
 200              	.LFE66:
 202              		.section	.text.MX_CAN_Init,"ax",%progbits
 203              		.align	1
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 207              		.fpu softvfp
 209              	MX_CAN_Init:
 210              	.LFB67:
 276:Src/main.c    **** 
 211              		.loc 1 276 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215 0000 08B5     		push	{r3, lr}
 216              	.LCFI6:
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 3, -8
 219              		.cfi_offset 14, -4
 286:Src/main.c    **** 	//hcan.pRxMsg = &RxMessage;
 220              		.loc 1 286 0
 221 0002 0E48     		ldr	r0, .L11
 222 0004 0E4B     		ldr	r3, .L11+4
 223 0006 0363     		str	r3, [r0, #48]
 290:Src/main.c    ****   hcan.Init.Prescaler = 2;
 224              		.loc 1 290 0
 225 0008 0E4B     		ldr	r3, .L11+8
 226 000a 0360     		str	r3, [r0]
ARM GAS  /tmp/cc5GuRPN.s 			page 12


 291:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_LOOPBACK;
 227              		.loc 1 291 0
 228 000c 0223     		movs	r3, #2
 229 000e 4360     		str	r3, [r0, #4]
 292:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 230              		.loc 1 292 0
 231 0010 4FF08043 		mov	r3, #1073741824
 232 0014 8360     		str	r3, [r0, #8]
 293:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_3TQ;
 233              		.loc 1 293 0
 234 0016 0023     		movs	r3, #0
 235 0018 C360     		str	r3, [r0, #12]
 294:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_4TQ;
 236              		.loc 1 294 0
 237 001a 4FF40032 		mov	r2, #131072
 238 001e 0261     		str	r2, [r0, #16]
 295:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 239              		.loc 1 295 0
 240 0020 4FF44012 		mov	r2, #3145728
 241 0024 4261     		str	r2, [r0, #20]
 296:Src/main.c    ****   hcan.Init.ABOM = ENABLE;
 242              		.loc 1 296 0
 243 0026 8361     		str	r3, [r0, #24]
 297:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
 244              		.loc 1 297 0
 245 0028 0122     		movs	r2, #1
 246 002a C261     		str	r2, [r0, #28]
 298:Src/main.c    ****   hcan.Init.NART = DISABLE;
 247              		.loc 1 298 0
 248 002c 0362     		str	r3, [r0, #32]
 299:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 249              		.loc 1 299 0
 250 002e 4362     		str	r3, [r0, #36]
 300:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 251              		.loc 1 300 0
 252 0030 8362     		str	r3, [r0, #40]
 301:Src/main.c    **** 
 253              		.loc 1 301 0
 254 0032 C362     		str	r3, [r0, #44]
 316:Src/main.c    ****   {
 255              		.loc 1 316 0
 256 0034 FFF7FEFF 		bl	HAL_CAN_Init
 257              	.LVL6:
 258 0038 08BD     		pop	{r3, pc}
 259              	.L12:
 260 003a 00BF     		.align	2
 261              	.L11:
 262 003c 00000000 		.word	hcan
 263 0040 00000000 		.word	.LANCHOR0
 264 0044 00640040 		.word	1073767424
 265              		.cfi_endproc
 266              	.LFE67:
 268              		.section	.text.SystemClock_Config,"ax",%progbits
 269              		.align	1
 270              		.global	SystemClock_Config
 271              		.syntax unified
 272              		.thumb
ARM GAS  /tmp/cc5GuRPN.s 			page 13


 273              		.thumb_func
 274              		.fpu softvfp
 276              	SystemClock_Config:
 277              	.LFB65:
 187:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 278              		.loc 1 187 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 80
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282 0000 30B5     		push	{r4, r5, lr}
 283              	.LCFI7:
 284              		.cfi_def_cfa_offset 12
 285              		.cfi_offset 4, -12
 286              		.cfi_offset 5, -8
 287              		.cfi_offset 14, -4
 288 0002 95B0     		sub	sp, sp, #84
 289              	.LCFI8:
 290              		.cfi_def_cfa_offset 96
 188:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 291              		.loc 1 188 0
 292 0004 2822     		movs	r2, #40
 293 0006 0021     		movs	r1, #0
 294 0008 0DEB0200 		add	r0, sp, r2
 295 000c FFF7FEFF 		bl	memset
 296              	.LVL7:
 189:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 297              		.loc 1 189 0
 298 0010 0024     		movs	r4, #0
 299 0012 0594     		str	r4, [sp, #20]
 300 0014 0694     		str	r4, [sp, #24]
 301 0016 0794     		str	r4, [sp, #28]
 302 0018 0894     		str	r4, [sp, #32]
 303 001a 0994     		str	r4, [sp, #36]
 190:Src/main.c    **** 
 304              		.loc 1 190 0
 305 001c 0194     		str	r4, [sp, #4]
 306 001e 0294     		str	r4, [sp, #8]
 307 0020 0394     		str	r4, [sp, #12]
 308 0022 0494     		str	r4, [sp, #16]
 194:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 309              		.loc 1 194 0
 310 0024 0225     		movs	r5, #2
 311 0026 0A95     		str	r5, [sp, #40]
 195:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 312              		.loc 1 195 0
 313 0028 0123     		movs	r3, #1
 314 002a 0E93     		str	r3, [sp, #56]
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 315              		.loc 1 196 0
 316 002c 1023     		movs	r3, #16
 317 002e 0F93     		str	r3, [sp, #60]
 198:Src/main.c    ****   {
 318              		.loc 1 198 0
 319 0030 0AA8     		add	r0, sp, #40
 320 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 321              	.LVL8:
 204:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  /tmp/cc5GuRPN.s 			page 14


 322              		.loc 1 204 0
 323 0036 0F23     		movs	r3, #15
 324 0038 0593     		str	r3, [sp, #20]
 206:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 325              		.loc 1 206 0
 326 003a 0694     		str	r4, [sp, #24]
 207:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 327              		.loc 1 207 0
 328 003c 0794     		str	r4, [sp, #28]
 208:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 329              		.loc 1 208 0
 330 003e 0894     		str	r4, [sp, #32]
 209:Src/main.c    **** 
 331              		.loc 1 209 0
 332 0040 0994     		str	r4, [sp, #36]
 211:Src/main.c    ****   {
 333              		.loc 1 211 0
 334 0042 2146     		mov	r1, r4
 335 0044 05A8     		add	r0, sp, #20
 336 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 337              	.LVL9:
 215:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 338              		.loc 1 215 0
 339 004a 0195     		str	r5, [sp, #4]
 216:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 340              		.loc 1 216 0
 341 004c 0394     		str	r4, [sp, #12]
 217:Src/main.c    ****   {
 342              		.loc 1 217 0
 343 004e 01A8     		add	r0, sp, #4
 344 0050 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 345              	.LVL10:
 221:Src/main.c    **** 
 346              		.loc 1 221 0
 347 0054 15B0     		add	sp, sp, #84
 348              	.LCFI9:
 349              		.cfi_def_cfa_offset 12
 350              		@ sp needed
 351 0056 30BD     		pop	{r4, r5, pc}
 352              		.cfi_endproc
 353              	.LFE65:
 355              		.section	.text.main,"ax",%progbits
 356              		.align	1
 357              		.global	main
 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 361              		.fpu softvfp
 363              	main:
 364              	.LFB64:
  95:Src/main.c    ****   /* USER CODE BEGIN 1 */
 365              		.loc 1 95 0
 366              		.cfi_startproc
 367              		@ Volatile: function does not return.
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc5GuRPN.s 			page 15


 371              	.LCFI10:
 372              		.cfi_def_cfa_offset 8
 373              		.cfi_offset 3, -8
 374              		.cfi_offset 14, -4
 103:Src/main.c    **** 
 375              		.loc 1 103 0
 376 0002 FFF7FEFF 		bl	HAL_Init
 377              	.LVL11:
 110:Src/main.c    **** 
 378              		.loc 1 110 0
 379 0006 FFF7FEFF 		bl	SystemClock_Config
 380              	.LVL12:
 117:Src/main.c    ****   MX_ADC1_Init();
 381              		.loc 1 117 0
 382 000a FFF7FEFF 		bl	MX_GPIO_Init
 383              	.LVL13:
 118:Src/main.c    ****   /* USER CODE BEGIN 2 */
 384              		.loc 1 118 0
 385 000e FFF7FEFF 		bl	MX_ADC1_Init
 386              	.LVL14:
 120:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 387              		.loc 1 120 0
 388 0012 1E4C     		ldr	r4, .L20
 389 0014 4FF48061 		mov	r1, #1024
 390 0018 2046     		mov	r0, r4
 391 001a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 392              	.LVL15:
 121:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 393              		.loc 1 121 0
 394 001e 4FF40061 		mov	r1, #2048
 395 0022 2046     		mov	r0, r4
 396 0024 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 397              	.LVL16:
 122:Src/main.c    ****   //ConfigureADC();
 398              		.loc 1 122 0
 399 0028 0121     		movs	r1, #1
 400 002a 2046     		mov	r0, r4
 401 002c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 402              	.LVL17:
 124:Src/main.c    ****   //HAL_ADC_Start_IT(&g_AdcHandle);
 403              		.loc 1 124 0
 404 0030 1748     		ldr	r0, .L20+4
 405 0032 FFF7FEFF 		bl	HAL_ADC_Start_IT
 406              	.LVL18:
 137:Src/main.c    ****     hcan.pTxMsg->StdId = 0x321;
 407              		.loc 1 137 0
 408 0036 FFF7FEFF 		bl	MX_CAN_Init
 409              	.LVL19:
 138:Src/main.c    **** 	hcan.pTxMsg->ExtId = 0x01;
 410              		.loc 1 138 0
 411 003a 164B     		ldr	r3, .L20+8
 412 003c 1A6B     		ldr	r2, [r3, #48]
 413 003e 40F22131 		movw	r1, #801
 414 0042 1160     		str	r1, [r2]
 139:Src/main.c    **** 	hcan.pTxMsg->RTR = CAN_RTR_DATA;
 415              		.loc 1 139 0
 416 0044 196B     		ldr	r1, [r3, #48]
ARM GAS  /tmp/cc5GuRPN.s 			page 16


 417 0046 0122     		movs	r2, #1
 418 0048 4A60     		str	r2, [r1, #4]
 140:Src/main.c    **** 	hcan.pTxMsg->IDE = CAN_ID_STD;
 419              		.loc 1 140 0
 420 004a 186B     		ldr	r0, [r3, #48]
 421 004c 0021     		movs	r1, #0
 422 004e C160     		str	r1, [r0, #12]
 141:Src/main.c    **** 	hcan.pTxMsg->DLC = 1;
 423              		.loc 1 141 0
 424 0050 186B     		ldr	r0, [r3, #48]
 425 0052 8160     		str	r1, [r0, #8]
 142:Src/main.c    **** 	hcan.pTxMsg->Data[0] = 0x55;
 426              		.loc 1 142 0
 427 0054 196B     		ldr	r1, [r3, #48]
 428 0056 0A61     		str	r2, [r1, #16]
 143:Src/main.c    **** 	
 429              		.loc 1 143 0
 430 0058 1B6B     		ldr	r3, [r3, #48]
 431 005a 5522     		movs	r2, #85
 432 005c 1A75     		strb	r2, [r3, #20]
 433 005e 06E0     		b	.L18
 434              	.L16:
 161:Src/main.c    **** 	/*
 435              		.loc 1 161 0
 436 0060 2021     		movs	r1, #32
 437 0062 0D48     		ldr	r0, .L20+12
 438 0064 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 439              	.LVL20:
 440              	.L17:
 177:Src/main.c    ****   }
 441              		.loc 1 177 0
 442 0068 6420     		movs	r0, #100
 443 006a FFF7FEFF 		bl	HAL_Delay
 444              	.LVL21:
 445              	.L18:
 156:Src/main.c    **** 	
 446              		.loc 1 156 0
 447 006e 4FF47A71 		mov	r1, #1000
 448 0072 0748     		ldr	r0, .L20+4
 449 0074 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 450              	.LVL22:
 158:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 451              		.loc 1 158 0
 452 0078 084B     		ldr	r3, .L20+16
 453 007a 1B88     		ldrh	r3, [r3]
 454 007c 202B     		cmp	r3, #32
 455 007e EFD9     		bls	.L16
 159:Src/main.c    **** 	else
 456              		.loc 1 159 0
 457 0080 4021     		movs	r1, #64
 458 0082 0548     		ldr	r0, .L20+12
 459 0084 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 460              	.LVL23:
 461 0088 EEE7     		b	.L17
 462              	.L21:
 463 008a 00BF     		.align	2
 464              	.L20:
ARM GAS  /tmp/cc5GuRPN.s 			page 17


 465 008c 000C0140 		.word	1073810432
 466 0090 00000000 		.word	hadc1
 467 0094 00000000 		.word	hcan
 468 0098 00080140 		.word	1073809408
 469 009c 00000000 		.word	g_ADCValue
 470              		.cfi_endproc
 471              	.LFE64:
 473              		.section	.text.HAL_CAN_RxCpltCallback,"ax",%progbits
 474              		.align	1
 475              		.global	HAL_CAN_RxCpltCallback
 476              		.syntax unified
 477              		.thumb
 478              		.thumb_func
 479              		.fpu softvfp
 481              	HAL_CAN_RxCpltCallback:
 482              	.LFB68:
 337:Src/main.c    **** 	//unsigned char data[8];
 483              		.loc 1 337 0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 487              	.LVL24:
 488 0000 08B5     		push	{r3, lr}
 489              	.LCFI11:
 490              		.cfi_def_cfa_offset 8
 491              		.cfi_offset 3, -8
 492              		.cfi_offset 14, -4
 342:Src/main.c    **** 	{
 493              		.loc 1 342 0
 494 0002 084B     		ldr	r3, .L26
 495 0004 5B6B     		ldr	r3, [r3, #52]
 496 0006 1B68     		ldr	r3, [r3]
 497 0008 802B     		cmp	r3, #128
 498 000a 04D0     		beq	.L25
 499              	.LVL25:
 500              	.L23:
 348:Src/main.c    **** 
 501              		.loc 1 348 0
 502 000c 0021     		movs	r1, #0
 503 000e 0548     		ldr	r0, .L26
 504 0010 FFF7FEFF 		bl	HAL_CAN_Receive_IT
 505              	.LVL26:
 506 0014 08BD     		pop	{r3, pc}
 507              	.LVL27:
 508              	.L25:
 344:Src/main.c    **** 	}
 509              		.loc 1 344 0
 510 0016 4FF48061 		mov	r1, #1024
 511 001a 0348     		ldr	r0, .L26+4
 512              	.LVL28:
 513 001c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 514              	.LVL29:
 515 0020 F4E7     		b	.L23
 516              	.L27:
 517 0022 00BF     		.align	2
 518              	.L26:
 519 0024 00000000 		.word	hcan
ARM GAS  /tmp/cc5GuRPN.s 			page 18


 520 0028 000C0140 		.word	1073810432
 521              		.cfi_endproc
 522              	.LFE68:
 524              		.section	.text.readADC_Val,"ax",%progbits
 525              		.align	1
 526              		.global	readADC_Val
 527              		.syntax unified
 528              		.thumb
 529              		.thumb_func
 530              		.fpu softvfp
 532              	readADC_Val:
 533              	.LFB70:
 389:Src/main.c    **** 
 390:Src/main.c    **** /* USER CODE BEGIN 4 */
 391:Src/main.c    **** uint16_t readADC_Val(void)
 392:Src/main.c    **** {
 534              		.loc 1 392 0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 0, uses_anonymous_args = 0
 538 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 539              	.LCFI12:
 540              		.cfi_def_cfa_offset 24
 541              		.cfi_offset 3, -24
 542              		.cfi_offset 4, -20
 543              		.cfi_offset 5, -16
 544              		.cfi_offset 6, -12
 545              		.cfi_offset 7, -8
 546              		.cfi_offset 14, -4
 393:Src/main.c    **** 	//chConfig.Channel = channel; //configure channel to be read
 394:Src/main.c    **** 	sConfig.Rank =  ADC_REGULAR_RANK_1;
 547              		.loc 1 394 0
 548 0002 0F4D     		ldr	r5, .L30
 549 0004 0126     		movs	r6, #1
 550 0006 6E60     		str	r6, [r5, #4]
 395:Src/main.c    **** 	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 551              		.loc 1 395 0
 552 0008 0023     		movs	r3, #0
 553 000a AB60     		str	r3, [r5, #8]
 396:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 554              		.loc 1 396 0
 555 000c 0D4C     		ldr	r4, .L30+4
 556 000e 2946     		mov	r1, r5
 557 0010 2046     		mov	r0, r4
 558 0012 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 559              	.LVL30:
 397:Src/main.c    **** 	
 398:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 560              		.loc 1 398 0
 561 0016 2046     		mov	r0, r4
 562 0018 FFF7FEFF 		bl	HAL_ADC_Start
 563              	.LVL31:
 399:Src/main.c    **** 	HAL_ADCEx_Calibration_Start(&hadc1);
 564              		.loc 1 399 0
 565 001c 2046     		mov	r0, r4
 566 001e FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 567              	.LVL32:
ARM GAS  /tmp/cc5GuRPN.s 			page 19


 400:Src/main.c    **** 	
 401:Src/main.c    **** 	uint32_t value = HAL_ADC_GetValue(&hadc1);
 568              		.loc 1 401 0
 569 0022 2046     		mov	r0, r4
 570 0024 FFF7FEFF 		bl	HAL_ADC_GetValue
 571              	.LVL33:
 572 0028 0746     		mov	r7, r0
 573              	.LVL34:
 402:Src/main.c    **** 	
 403:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 574              		.loc 1 403 0
 575 002a 2046     		mov	r0, r4
 576              	.LVL35:
 577 002c FFF7FEFF 		bl	HAL_ADC_Stop
 578              	.LVL36:
 404:Src/main.c    **** 	sConfig.Rank = ADC_REGULAR_RANK_1;
 579              		.loc 1 404 0
 580 0030 6E60     		str	r6, [r5, #4]
 405:Src/main.c    **** 	HAL_ADC_ConfigChannel(&hadc1,&sConfig);
 581              		.loc 1 405 0
 582 0032 2946     		mov	r1, r5
 583 0034 2046     		mov	r0, r4
 584 0036 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 585              	.LVL37:
 406:Src/main.c    **** 	
 407:Src/main.c    **** 	uint16_t value2 = (uint16_t)value;
 408:Src/main.c    **** 	//sprintf(TextBuffer,"%u\n",value2);
 409:Src/main.c    **** 	return value2;
 410:Src/main.c    **** }
 586              		.loc 1 410 0
 587 003a B8B2     		uxth	r0, r7
 588 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 589              	.LVL38:
 590              	.L31:
 591 003e 00BF     		.align	2
 592              	.L30:
 593 0040 00000000 		.word	sConfig
 594 0044 00000000 		.word	hadc1
 595              		.cfi_endproc
 596              	.LFE70:
 598              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 599              		.align	1
 600              		.weak	HAL_ADC_ConvCpltCallback
 601              		.syntax unified
 602              		.thumb
 603              		.thumb_func
 604              		.fpu softvfp
 606              	HAL_ADC_ConvCpltCallback:
 607              	.LFB71:
 411:Src/main.c    **** 
 412:Src/main.c    **** /*Interrupt Functions for ADC*/
 413:Src/main.c    **** 
 414:Src/main.c    **** 	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle){
 608              		.loc 1 414 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc5GuRPN.s 			page 20


 612              	.LVL39:
 613 0000 08B5     		push	{r3, lr}
 614              	.LCFI13:
 615              		.cfi_def_cfa_offset 8
 616              		.cfi_offset 3, -8
 617              		.cfi_offset 14, -4
 415:Src/main.c    **** 		g_ADCValue = HAL_ADC_GetValue(AdcHandle);
 618              		.loc 1 415 0
 619 0002 FFF7FEFF 		bl	HAL_ADC_GetValue
 620              	.LVL40:
 621 0006 014B     		ldr	r3, .L34
 622 0008 1880     		strh	r0, [r3]	@ movhi
 623 000a 08BD     		pop	{r3, pc}
 624              	.L35:
 625              		.align	2
 626              	.L34:
 627 000c 00000000 		.word	g_ADCValue
 628              		.cfi_endproc
 629              	.LFE71:
 631              		.section	.text.ADC_IRQHandler,"ax",%progbits
 632              		.align	1
 633              		.global	ADC_IRQHandler
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu softvfp
 639              	ADC_IRQHandler:
 640              	.LFB72:
 416:Src/main.c    **** 	}
 417:Src/main.c    **** 	
 418:Src/main.c    ****     void ADC_IRQHandler(){
 641              		.loc 1 418 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645 0000 08B5     		push	{r3, lr}
 646              	.LCFI14:
 647              		.cfi_def_cfa_offset 8
 648              		.cfi_offset 3, -8
 649              		.cfi_offset 14, -4
 419:Src/main.c    ****         HAL_ADC_IRQHandler(&hadc1);
 650              		.loc 1 419 0
 651 0002 0248     		ldr	r0, .L38
 652 0004 FFF7FEFF 		bl	HAL_ADC_IRQHandler
 653              	.LVL41:
 654 0008 08BD     		pop	{r3, pc}
 655              	.L39:
 656 000a 00BF     		.align	2
 657              	.L38:
 658 000c 00000000 		.word	hadc1
 659              		.cfi_endproc
 660              	.LFE72:
 662              		.section	.text.Error_Handler,"ax",%progbits
 663              		.align	1
 664              		.global	Error_Handler
 665              		.syntax unified
 666              		.thumb
ARM GAS  /tmp/cc5GuRPN.s 			page 21


 667              		.thumb_func
 668              		.fpu softvfp
 670              	Error_Handler:
 671              	.LFB73:
 420:Src/main.c    ****     }
 421:Src/main.c    **** 
 422:Src/main.c    **** /* USER CODE END 4 */
 423:Src/main.c    **** 
 424:Src/main.c    **** /**
 425:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 426:Src/main.c    ****   * @retval None
 427:Src/main.c    ****   */
 428:Src/main.c    **** void Error_Handler(void)
 429:Src/main.c    **** {
 672              		.loc 1 429 0
 673              		.cfi_startproc
 674              		@ args = 0, pretend = 0, frame = 0
 675              		@ frame_needed = 0, uses_anonymous_args = 0
 676              		@ link register save eliminated.
 677 0000 7047     		bx	lr
 678              		.cfi_endproc
 679              	.LFE73:
 681              		.comm	sConfig,12,4
 682              		.comm	g_ADCValue,2,2
 683              		.comm	adc9,2,2
 684              		.comm	adc7,2,2
 685              		.comm	adc1,2,2
 686              		.comm	adc0,2,2
 687              		.comm	hcan,68,4
 688              		.comm	hadc1,48,4
 689              		.section	.bss.TxMessage.6587,"aw",%nobits
 690              		.align	2
 691              		.set	.LANCHOR0,. + 0
 694              	TxMessage.6587:
 695 0000 00000000 		.space	28
 695      00000000 
 695      00000000 
 695      00000000 
 695      00000000 
 696              		.text
 697              	.Letext0:
 698              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 699              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 700              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 701              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 702              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 703              		.file 7 "/usr/include/newlib/sys/lock.h"
 704              		.file 8 "/usr/include/newlib/sys/_types.h"
 705              		.file 9 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 706              		.file 10 "/usr/include/newlib/sys/reent.h"
 707              		.file 11 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 708              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 709              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 710              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 711              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 712              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 713              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
ARM GAS  /tmp/cc5GuRPN.s 			page 22


 714              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 715              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc_ex.h"
 716              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/cc5GuRPN.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc5GuRPN.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc5GuRPN.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc5GuRPN.s:121    .text.MX_GPIO_Init:0000000000000088 $d
     /tmp/cc5GuRPN.s:128    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc5GuRPN.s:134    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc5GuRPN.s:197    .text.MX_ADC1_Init:000000000000003c $d
                            *COM*:0000000000000030 hadc1
     /tmp/cc5GuRPN.s:203    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/cc5GuRPN.s:209    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/cc5GuRPN.s:262    .text.MX_CAN_Init:000000000000003c $d
                            *COM*:0000000000000044 hcan
     /tmp/cc5GuRPN.s:269    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc5GuRPN.s:276    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc5GuRPN.s:356    .text.main:0000000000000000 $t
     /tmp/cc5GuRPN.s:363    .text.main:0000000000000000 main
     /tmp/cc5GuRPN.s:465    .text.main:000000000000008c $d
                            *COM*:0000000000000002 g_ADCValue
     /tmp/cc5GuRPN.s:474    .text.HAL_CAN_RxCpltCallback:0000000000000000 $t
     /tmp/cc5GuRPN.s:481    .text.HAL_CAN_RxCpltCallback:0000000000000000 HAL_CAN_RxCpltCallback
     /tmp/cc5GuRPN.s:519    .text.HAL_CAN_RxCpltCallback:0000000000000024 $d
     /tmp/cc5GuRPN.s:525    .text.readADC_Val:0000000000000000 $t
     /tmp/cc5GuRPN.s:532    .text.readADC_Val:0000000000000000 readADC_Val
     /tmp/cc5GuRPN.s:593    .text.readADC_Val:0000000000000040 $d
                            *COM*:000000000000000c sConfig
     /tmp/cc5GuRPN.s:599    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cc5GuRPN.s:606    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cc5GuRPN.s:627    .text.HAL_ADC_ConvCpltCallback:000000000000000c $d
     /tmp/cc5GuRPN.s:632    .text.ADC_IRQHandler:0000000000000000 $t
     /tmp/cc5GuRPN.s:639    .text.ADC_IRQHandler:0000000000000000 ADC_IRQHandler
     /tmp/cc5GuRPN.s:658    .text.ADC_IRQHandler:000000000000000c $d
     /tmp/cc5GuRPN.s:663    .text.Error_Handler:0000000000000000 $t
     /tmp/cc5GuRPN.s:670    .text.Error_Handler:0000000000000000 Error_Handler
                            *COM*:0000000000000002 adc9
                            *COM*:0000000000000002 adc7
                            *COM*:0000000000000002 adc1
                            *COM*:0000000000000002 adc0
     /tmp/cc5GuRPN.s:690    .bss.TxMessage.6587:0000000000000000 $d
     /tmp/cc5GuRPN.s:694    .bss.TxMessage.6587:0000000000000000 TxMessage.6587
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_GPIO_TogglePin
HAL_ADC_Start_IT
HAL_Delay
HAL_ADC_PollForConversion
ARM GAS  /tmp/cc5GuRPN.s 			page 24


HAL_CAN_Receive_IT
HAL_ADC_Start
HAL_ADCEx_Calibration_Start
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_ADC_IRQHandler

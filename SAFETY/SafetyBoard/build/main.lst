ARM GAS  /tmp/ccLN6HNI.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB77:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/ccLN6HNI.s 			page 2


  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** 
  40:Src/main.c    **** 
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE END Header */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  45:Src/main.c    **** #include "main.h"
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** #include "stdlib.h"
  50:Src/main.c    **** 
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END Includes */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN PTD */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PTD */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN PD */
  61:Src/main.c    **** 
  62:Src/main.c    **** 
  63:Src/main.c    **** 
  64:Src/main.c    **** #define APPS_STDID        0x300
  65:Src/main.c    **** #define BTSF_STDID        0x301
  66:Src/main.c    **** #define FAULTS            0x0D0
  67:Src/main.c    **** // FAULT DEFS
  68:Src/main.c    ****   #define FAULT_ACTIVE    0xFF
  69:Src/main.c    ****   #define FAULT_INACTIVE  0x00
  70:Src/main.c    **** 
  71:Src/main.c    **** //FAULT DEGS
  72:Src/main.c    **** #define CAR_STATE         0x0D1
  73:Src/main.c    **** // CAR STATES
  74:Src/main.c    ****   #define LV_ON           0x01
  75:Src/main.c    ****   #define PRECHARGED      0x02
  76:Src/main.c    ****   #define ENABLE_FLIPPED  0x04
  77:Src/main.c    ****   #define RTDS_SOUND      0x08
  78:Src/main.c    ****   #define PWR_AVAILABLE   0x10 
  79:Src/main.c    ****   #define SOFT_FAULT      0x20
  80:Src/main.c    **** // CAR STATES
  81:Src/main.c    **** // 1 volt is 1241.21
  82:Src/main.c    **** //throttle A .66-3.2 scaled to .396-1.866
  83:Src/main.c    **** //throttle B .33-2.7 scaled to .198-1.62
  84:Src/main.c    **** // That means 5% from 0 is .4705 volts
  85:Src/main.c    **** const uint16_t ThrottleA_5 = 584;
  86:Src/main.c    **** // That means 25% from 0 is .7635 volts
  87:Src/main.c    **** const uint16_t ThrottleA_25 = 947;
  88:Src/main.c    **** const uint16_t brakeThreshold = 2000; //80; >> 3.5 volts on 5 v scale, 2.1 on 3.3v scale
  89:Src/main.c    **** const uint16_t RTD_Threshold = 2500; // NO idea for this
  90:Src/main.c    **** 
  91:Src/main.c    **** // APPS is .35 volts, so .21 volts scaled
ARM GAS  /tmp/ccLN6HNI.s 			page 3


  92:Src/main.c    **** //This values is 0-100 based
  93:Src/main.c    **** const int APPS_difference = 600; //~0.5 voltz
  94:Src/main.c    **** 
  95:Src/main.c    **** //These are based off above values measured
  96:Src/main.c    **** const int throttle_A_min = 491;
  97:Src/main.c    **** const int throttle_A_max = 2316;
  98:Src/main.c    **** const int throttle_B_min = 246;
  99:Src/main.c    **** const int throttle_B_max = 2010;
 100:Src/main.c    **** 
 101:Src/main.c    **** 
 102:Src/main.c    **** 
 103:Src/main.c    **** /* USER CODE END PD */
 104:Src/main.c    **** 
 105:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
 106:Src/main.c    **** /* USER CODE BEGIN PM */
 107:Src/main.c    **** 
 108:Src/main.c    **** /* USER CODE END PM */
 109:Src/main.c    **** 
 110:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
 111:Src/main.c    **** ADC_HandleTypeDef hadc1;
 112:Src/main.c    **** 
 113:Src/main.c    **** CAN_HandleTypeDef hcan;
 114:Src/main.c    **** 
 115:Src/main.c    **** SPI_HandleTypeDef hspi1;
 116:Src/main.c    **** 
 117:Src/main.c    **** /* USER CODE BEGIN PV */
 118:Src/main.c    **** 
 119:Src/main.c    **** uint16_t brakePos;
 120:Src/main.c    **** uint16_t steeringPos;
 121:Src/main.c    **** uint16_t brakePressure_1;
 122:Src/main.c    **** uint16_t brakePressure_2;
 123:Src/main.c    **** uint16_t throttle_A;
 124:Src/main.c    **** uint16_t throttle_B;
 125:Src/main.c    **** 
 126:Src/main.c    **** 
 127:Src/main.c    **** //need to figure out:
 128:Src/main.c    **** uint16_t max_throttle = 10;
 129:Src/main.c    **** 
 130:Src/main.c    **** 
 131:Src/main.c    **** //STATE FLAGS
 132:Src/main.c    **** char Prev_State = 0x00;     //boolean
 133:Src/main.c    **** int hardFaultFlag = 0;  //boolean
 134:Src/main.c    **** char BTSF_ACTIVE = 0x00;
 135:Src/main.c    **** 
 136:Src/main.c    **** // CAR STAT STATES FOR CAN
 137:Src/main.c    **** CAN_TxHeaderTypeDef TxCar_state;
 138:Src/main.c    **** uint8_t TxCar_state_data[8] = {0x00,0x45,0x45,0x86,0x56,0x97,0x67,0x98};
 139:Src/main.c    **** uint32_t TxCar_stateMailbox;
 140:Src/main.c    **** 
 141:Src/main.c    **** //CAN FAULT VARIABLES
 142:Src/main.c    **** CAN_TxHeaderTypeDef TxFaults;
 143:Src/main.c    **** uint8_t TxFault_data[8] = {0x55, 0x55, 0x55, 0x55,0x55, 0x55, 0x55, 0x55};
 144:Src/main.c    **** /*Set these values: 0xFF = Fault present
 145:Src/main.c    ****                     0x00 = No fault*/
 146:Src/main.c    **** uint8_t bms;        //TxData[0]
 147:Src/main.c    **** uint8_t imd;        //TxData[1]
 148:Src/main.c    **** uint8_t bspd;       //TxData[2]
ARM GAS  /tmp/ccLN6HNI.s 			page 4


 149:Src/main.c    **** uint8_t apps;       //TxData[3]
 150:Src/main.c    **** uint32_t TxFaultsMailbox;
 151:Src/main.c    **** 
 152:Src/main.c    **** //For Timers
 153:Src/main.c    **** extern uint32_t millisTimer;
 154:Src/main.c    **** extern uint32_t RTDS_Timer;
 155:Src/main.c    **** extern uint32_t CAN_Timer;
 156:Src/main.c    **** 
 157:Src/main.c    **** ADC_ChannelConfTypeDef sConfig = {0};
 158:Src/main.c    **** /* USER CODE END PV */
 159:Src/main.c    **** 
 160:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 161:Src/main.c    **** void SystemClock_Config(void);
 162:Src/main.c    **** static void MX_GPIO_Init(void);
 163:Src/main.c    **** static void MX_SPI1_Init(void);
 164:Src/main.c    **** static void MX_ADC1_Init(void);
 165:Src/main.c    **** static void MX_CAN_Init(void);
 166:Src/main.c    **** /* USER CODE BEGIN PFP */
 167:Src/main.c    **** 
 168:Src/main.c    **** char checkBTSF();
 169:Src/main.c    **** char checkAPPS();
 170:Src/main.c    **** char APPS_Diff();
 171:Src/main.c    **** void sendFaultMsg();
 172:Src/main.c    **** void sendCar_state();
 173:Src/main.c    **** void readFaults();
 174:Src/main.c    **** void car_state_machine(char STATE);
 175:Src/main.c    **** uint16_t updateADC(int channel); 
 176:Src/main.c    **** /* USER CODE END PFP */
 177:Src/main.c    **** 
 178:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 179:Src/main.c    **** /* USER CODE BEGIN 0 */
 180:Src/main.c    **** 
 181:Src/main.c    **** //int refTime = millis();
 182:Src/main.c    **** //int APPSFlag = 0; //boolean
 183:Src/main.c    **** 
 184:Src/main.c    **** /**
 185:Src/main.c    ****   * @brief  The application entry point.
 186:Src/main.c    ****   * @retval int
 187:Src/main.c    ****   */
 188:Src/main.c    **** int main(void)
 189:Src/main.c    **** {
 190:Src/main.c    ****   /* USER CODE BEGIN 1 */
 191:Src/main.c    ****   //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 192:Src/main.c    ****   //HAL_Delay(200);
 193:Src/main.c    **** 
 194:Src/main.c    **** 
 195:Src/main.c    ****   //For Timers
 196:Src/main.c    ****   millisTimer = 100; //100 millis
 197:Src/main.c    ****   RTDS_Timer = 2500; //3 seconds
 198:Src/main.c    ****   CAN_Timer = 1000; //timer to send message every second
 199:Src/main.c    **** 
 200:Src/main.c    ****   /* USER CODE END 1 */
 201:Src/main.c    **** 
 202:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 203:Src/main.c    **** 
 204:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 205:Src/main.c    ****   HAL_Init();
ARM GAS  /tmp/ccLN6HNI.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    ****   /* USER CODE BEGIN Init */
 208:Src/main.c    **** 
 209:Src/main.c    ****   // Update SystemCoreClock value
 210:Src/main.c    ****   SystemCoreClockUpdate();
 211:Src/main.c    ****   // Configure the SysTick timer to overflow every 1 ms
 212:Src/main.c    ****   SysTick_Config(SystemCoreClock / 1000);
 213:Src/main.c    **** 
 214:Src/main.c    ****   /* USER CODE END Init */
 215:Src/main.c    **** 
 216:Src/main.c    ****   /* Configure the system clock */
 217:Src/main.c    ****   SystemClock_Config();
 218:Src/main.c    **** 
 219:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 220:Src/main.c    **** 
 221:Src/main.c    ****   /* USER CODE END SysInit */
 222:Src/main.c    **** 
 223:Src/main.c    ****   /* Initialize all configured peripherals */
 224:Src/main.c    ****   MX_GPIO_Init();
 225:Src/main.c    ****   MX_SPI1_Init();
 226:Src/main.c    ****   MX_ADC1_Init();
 227:Src/main.c    ****   MX_CAN_Init();
 228:Src/main.c    ****   /* USER CODE BEGIN 2 */
 229:Src/main.c    **** 
 230:Src/main.c    **** 
 231:Src/main.c    ****   /* USER CODE END 2 */
 232:Src/main.c    **** 
 233:Src/main.c    ****   /* Infinite loop */
 234:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 235:Src/main.c    **** 
 236:Src/main.c    ****   while (1)
 237:Src/main.c    ****   {
 238:Src/main.c    ****     //READ FOR PRECHARGE
 239:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOB, PRECHARGE_COMPLETE_Pin) == GPIO_PIN_RESET){
 240:Src/main.c    ****     car_state_machine(PRECHARGED);
 241:Src/main.c    **** 
 242:Src/main.c    ****       //READ FOR ENABLE
 243:Src/main.c    ****     if(HAL_GPIO_ReadPin(GPIOB,ENABLE_IN_Pin) == GPIO_PIN_RESET){
 244:Src/main.c    ****       car_state_machine(ENABLE_FLIPPED);
 245:Src/main.c    ****       //ADC for Brake pressure
 246:Src/main.c    ****       brakePressure_2 = updateADC(BRAKE_PRESSURE_2_ADC_CHANNEL);
 247:Src/main.c    ****       //SEE IF BRAKE IS PRESSED 
 248:Src/main.c    ****       if(brakePressure_2 >= RTD_Threshold){
 249:Src/main.c    ****       //set 3 second timer
 250:Src/main.c    ****        if(TxCar_state_data[0] == ENABLE_FLIPPED) {
 251:Src/main.c    ****         RTDS_Timer = 2500; //change to 3000 for 3 seconds
 252:Src/main.c    ****         car_state_machine(RTDS_SOUND);
 253:Src/main.c    ****           
 254:Src/main.c    ****         HAL_GPIO_WritePin(GPIOB, RTD_EN_Pin | RTDS_EN_Pin | BTSF_EN_Pin | APPS_EN_Pin, GPIO_PIN_SET
 255:Src/main.c    ****         } 
 256:Src/main.c    ****       //RTD Sound Enable Play sound for 2.5 seconds 
 257:Src/main.c    ****       }
 258:Src/main.c    ****       
 259:Src/main.c    ****       // IF OUR TIMER IS OVER FINALLY //we also stop timer if we started it from RTDS state or Soft
 260:Src/main.c    ****         if((RTDS_Timer == 0) && (TxCar_state_data[0] & 0x38)){
 261:Src/main.c    ****           HAL_GPIO_WritePin(GPIOB, RTDS_EN_Pin, GPIO_PIN_RESET);
 262:Src/main.c    ****           //SeT pwr
ARM GAS  /tmp/ccLN6HNI.s 			page 6


 263:Src/main.c    ****           car_state_machine(PWR_AVAILABLE);
 264:Src/main.c    ****            }// rtds buzzer stop
 265:Src/main.c    ****     }//END OF RTD SEQUENCE*/
 266:Src/main.c    ****     else if(HAL_GPIO_ReadPin(GPIOB,ENABLE_IN_Pin) == GPIO_PIN_SET)
 267:Src/main.c    ****     { //IF WE HAVE DE ENABLED LA COCHE
 268:Src/main.c    ****       TxCar_state_data[0] = PRECHARGED;
 269:Src/main.c    ****       HAL_Delay(500);//THIS IS PUT HERE TO AVOID BOUNCING WHEN ITS REMOVED
 270:Src/main.c    ****     }
 271:Src/main.c    ****   } // end of if precharge complete statement
 272:Src/main.c    ****      if(RTDS_Timer == 0)
 273:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RTDS_EN_Pin, GPIO_PIN_RESET);
 274:Src/main.c    ****     
 275:Src/main.c    ****     // SEQUENCE FOR CHECKING SOFT FAULTS
 276:Src/main.c    ****     if(TxCar_state_data[0] >= RTDS_SOUND){
 277:Src/main.c    ****     if (checkBTSF()){
 278:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB,BTSF_EN_Pin | APPS_EN_Pin,GPIO_PIN_RESET);
 279:Src/main.c    ****       TxCar_state_data[0] = SOFT_FAULT;
 280:Src/main.c    ****     }
 281:Src/main.c    ****     else if(TxCar_state_data[0] == SOFT_FAULT) {
 282:Src/main.c    ****         TxCar_state_data[0] = PWR_AVAILABLE;
 283:Src/main.c    ****         HAL_GPIO_WritePin(GPIOB, BTSF_EN_Pin|APPS_EN_Pin ,GPIO_PIN_SET);
 284:Src/main.c    ****     }
 285:Src/main.c    ****   }
 286:Src/main.c    **** 
 287:Src/main.c    ****   readFaults(); 
 288:Src/main.c    ****   if (CAN_Timer == 0){ //sending routine message every 1 second
 289:Src/main.c    ****     sendFaultMsg();
 290:Src/main.c    ****     sendCar_state();
 291:Src/main.c    ****     CAN_Timer = 1000;
 292:Src/main.c    ****     //HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
 293:Src/main.c    **** 
 294:Src/main.c    ****   }
 295:Src/main.c    **** 
 296:Src/main.c    ****   //Brake Light
 297:Src/main.c    ****   brakePressure_2 = updateADC(BRAKE_PRESSURE_2_ADC_CHANNEL);
 298:Src/main.c    ****   if(brakePressure_2 > brakeThreshold){
 299:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
 300:Src/main.c    ****   }
 301:Src/main.c    ****   else
 302:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, BRAKE_LIGHT_EN_Pin, GPIO_PIN_RESET);
 303:Src/main.c    **** 
 304:Src/main.c    **** 
 305:Src/main.c    ****     /* USER CODE END WHILE */
 306:Src/main.c    **** 
 307:Src/main.c    ****     /* USER CODE BEGIN 3 */
 308:Src/main.c    ****   }
 309:Src/main.c    ****   /* USER CODE END 3 */
 310:Src/main.c    **** 
 311:Src/main.c    ****   //TEST WHILE
 312:Src/main.c    ****  /* while(1){
 313:Src/main.c    **** 
 314:Src/main.c    ****     HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
 315:Src/main.c    ****     HAL_Delay(500);
 316:Src/main.c    ****   }
 317:Src/main.c    ****   */
 318:Src/main.c    **** 
 319:Src/main.c    ****   
ARM GAS  /tmp/ccLN6HNI.s 			page 7


 320:Src/main.c    **** }
 321:Src/main.c    **** 
 322:Src/main.c    **** /********************************************************************************/
 323:Src/main.c    **** //Checks for APPS errors, sends fault if there is one 
 324:Src/main.c    **** //Returns one if difference in throttleA/B is greater than 10% for 100 ms
 325:Src/main.c    **** //Returns zero if else
 326:Src/main.c    **** /********************************************************************************/
 327:Src/main.c    **** char checkAPPS(){
 328:Src/main.c    **** 
 329:Src/main.c    ****   throttle_A = updateADC(THROTTLE_A_ADC_CHANNEL); 
 330:Src/main.c    ****   throttle_B = updateADC(THROTTLE_B_ADC_CHANNEL); 
 331:Src/main.c    **** 
 332:Src/main.c    **** /*
 333:Src/main.c    ****   if(throttle_A > throttle_B){
 334:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 335:Src/main.c    ****     HAL_Delay(100);
 336:Src/main.c    ****   }
 337:Src/main.c    ****   else
 338:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 339:Src/main.c    ****   return 1;*/
 340:Src/main.c    ****   
 341:Src/main.c    ****   //Throttles Agree
 342:Src/main.c    ****   if(APPS_Diff() == 0){
 343:Src/main.c    ****    millisTimer = 100;
 344:Src/main.c    ****    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 345:Src/main.c    ****   }
 346:Src/main.c    ****   
 347:Src/main.c    ****   //APPS_EN Fault
 348:Src/main.c    ****   if(millisTimer == 0){ //this occurs when APPS_diff is true for > 100 ms
 349:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 350:Src/main.c    ****     return 1; //will set driving = 0;
 351:Src/main.c    ****   }
 352:Src/main.c    ****   return 0; //APPS is good
 353:Src/main.c    **** 
 354:Src/main.c    **** }
 355:Src/main.c    **** 
 356:Src/main.c    **** /********************************************************************************/
 357:Src/main.c    **** //Checks for BTSF errors, If the brake and throttle are pressed at the same time, above a certain t
 358:Src/main.c    **** //Returns one if fault was sensed and sent out
 359:Src/main.c    **** //zero if nothing is detected
 360:Src/main.c    **** /********************************************************************************/
 361:Src/main.c    **** char checkBTSF(){
 362:Src/main.c    ****   brakePressure_2 = updateADC(BRAKE_PRESSURE_2_ADC_CHANNEL);
 363:Src/main.c    ****   throttle_A = updateADC(THROTTLE_A_ADC_CHANNEL); 
 364:Src/main.c    ****   
 365:Src/main.c    ****   if(BTSF_ACTIVE)
 366:Src/main.c    ****   {
 367:Src/main.c    ****     if(throttle_A <= ThrottleA_5)
 368:Src/main.c    ****     {
 369:Src/main.c    ****       BTSF_ACTIVE = 0x00;
 370:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 371:Src/main.c    ****       return 0;
 372:Src/main.c    ****     }
 373:Src/main.c    ****     return 1;
 374:Src/main.c    ****   }
 375:Src/main.c    **** 
 376:Src/main.c    ****   if((brakePressure_2 > brakeThreshold) && (throttle_A > ThrottleA_25)){
ARM GAS  /tmp/ccLN6HNI.s 			page 8


 377:Src/main.c    ****        //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 378:Src/main.c    ****        BTSF_ACTIVE = 0xFF;
 379:Src/main.c    ****        return 1;
 380:Src/main.c    ****   }
 381:Src/main.c    ****   
 382:Src/main.c    ****   
 383:Src/main.c    ****   return 0;
 384:Src/main.c    **** }
 385:Src/main.c    **** 
 386:Src/main.c    **** /********************************************************************************/
 387:Src/main.c    **** // This function updates the ADC values for all positions/pressures
 388:Src/main.c    **** //
 389:Src/main.c    **** //
 390:Src/main.c    **** /********************************************************************************/
 391:Src/main.c    **** uint16_t updateADC(int channel){  
 392:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 393:Src/main.c    ****   if (channel == BRAKE_POS_ADC_CHANNEL) //Brake position 
 394:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_0;
 395:Src/main.c    ****   if (channel == STEERING_POS_ADC_CHANNEL) //steering position 
 396:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_1;
 397:Src/main.c    ****   if (channel == BRAKE_PRESSURE_1_ADC_CHANNEL) //brake pressure 1
 398:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_3;
 399:Src/main.c    ****   if (channel == BRAKE_PRESSURE_2_ADC_CHANNEL) //brake pressure 2
 400:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_2;
 401:Src/main.c    ****   if (channel == THROTTLE_A_ADC_CHANNEL) //throttle A
 402:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 403:Src/main.c    ****   if (channel == THROTTLE_B_ADC_CHANNEL) //throttle B 
 404:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_9;
 405:Src/main.c    **** 
 406:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 407:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 408:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 409:Src/main.c    **** 
 410:Src/main.c    ****   HAL_ADC_Start(&hadc1);
 411:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 412:Src/main.c    ****   return HAL_ADC_GetValue(&hadc1);
 413:Src/main.c    ****   //HAL_ADC_Stop(&hadc1);
 414:Src/main.c    ****   //////////////////////////////////////////////////////////////
 415:Src/main.c    ****   /*
 416:Src/main.c    ****   HAL_ADC_Start(&hadc1);
 417:Src/main.c    ****   
 418:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 419:Src/main.c    ****   brakePos = HAL_ADC_GetValue(&hadc1);  //brakePos
 420:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 421:Src/main.c    ****   steeringPos = HAL_ADC_GetValue(&hadc1);  //steeringPos
 422:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 423:Src/main.c    ****   brakePressure_1 = HAL_ADC_GetValue(&hadc1);  //brakePressure_1
 424:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 425:Src/main.c    ****   brakePressure_2 = HAL_ADC_GetValue(&hadc1);  //brakePressure_2
 426:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 427:Src/main.c    ****   throttle_A = HAL_ADC_GetValue(&hadc1);  //throttle_A
 428:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 429:Src/main.c    ****   throttle_B = HAL_ADC_GetValue(&hadc1);  //throttle_B
 430:Src/main.c    ****   
 431:Src/main.c    ****   HAL_ADC_Stop(&hadc1);
 432:Src/main.c    ****   */
 433:Src/main.c    **** }
ARM GAS  /tmp/ccLN6HNI.s 			page 9


 434:Src/main.c    **** 
 435:Src/main.c    **** /********************************************************************************/
 436:Src/main.c    **** //Determines if the throttle percent difference is above 10%
 437:Src/main.c    **** //Returns: 1 if difference > 10%
 438:Src/main.c    **** //       0 if everything is good 
 439:Src/main.c    **** //
 440:Src/main.c    **** //Throttle_A will get values 491 to 2316 (throttle_A_min to max)
 441:Src/main.c    **** //Throttle_B will get values 246 to 2010 (throttle_B_min to max)
 442:Src/main.c    **** /********************************************************************************/
 443:Src/main.c    **** char APPS_Diff(){
 444:Src/main.c    **** 
 445:Src/main.c    **** //0.66 3.11
 446:Src/main.c    **** //0.32 2.77
 447:Src/main.c    ****  // int t_A = (int)throttle_A;
 448:Src/main.c    ****   //int t_B = (int)throttle_B;
 449:Src/main.c    **** 
 450:Src/main.c    ****   if(abs(throttle_A - throttle_B) > APPS_difference){ //600 ~ 0.5v
 451:Src/main.c    ****     return 1;
 452:Src/main.c    ****   }
 453:Src/main.c    ****   else return 0;
 454:Src/main.c    **** 
 455:Src/main.c    ****   /*
 456:Src/main.c    **** 
 457:Src/main.c    ****   t_A = (t_A - throttle_A_min)/(throttle_A_max - throttle_A_min); //Normalize both values to be 0-1
 458:Src/main.c    ****   t_B = (t_B - throttle_B_min)/(throttle_B_max - throttle_B_min);
 459:Src/main.c    **** 
 460:Src/main.c    ****   if(abs(t_A-t_B) > APPS_difference)
 461:Src/main.c    ****     return 1;
 462:Src/main.c    ****   else
 463:Src/main.c    ****     return 0;
 464:Src/main.c    **** 
 465:Src/main.c    ****     */
 466:Src/main.c    **** 
 467:Src/main.c    **** 
 468:Src/main.c    **** }
 469:Src/main.c    **** void sendFaultMsg(){
 470:Src/main.c    ****   TxFault_data[0] = bms;  //Set all the data (faults) to their current values
 471:Src/main.c    ****   TxFault_data[1] = imd;
 472:Src/main.c    ****   TxFault_data[2] = bspd;
 473:Src/main.c    ****   TxFault_data[3] = apps;
 474:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxFaults, TxFault_data, &TxFaultsMailbox);
 475:Src/main.c    **** }
 476:Src/main.c    **** 
 477:Src/main.c    **** void sendCar_state(){
 478:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxCar_state,TxCar_state_data, &TxCar_stateMailbox);
 479:Src/main.c    **** }
 480:Src/main.c    **** 
 481:Src/main.c    **** void car_state_machine(char STATE)
 482:Src/main.c    **** {
 483:Src/main.c    ****   if(STATE > TxCar_state_data[0])
 484:Src/main.c    ****   {
 485:Src/main.c    ****     TxCar_state_data[0] = STATE;
 486:Src/main.c    ****   }
 487:Src/main.c    **** }
 488:Src/main.c    **** 
 489:Src/main.c    **** void readFaults(){
 490:Src/main.c    ****   if (HAL_GPIO_ReadPin(GPIOD, FAULT_BSPD_STATUS_Pin) == GPIO_PIN_SET)
ARM GAS  /tmp/ccLN6HNI.s 			page 10


 491:Src/main.c    ****     bspd = FAULT_ACTIVE;
 492:Src/main.c    ****   else bspd = FAULT_INACTIVE;
 493:Src/main.c    ****   
 494:Src/main.c    ****   if (HAL_GPIO_ReadPin(GPIOC, FAULT_IMD_STATUS_Pin) == GPIO_PIN_SET)
 495:Src/main.c    ****     imd = FAULT_ACTIVE;
 496:Src/main.c    ****   else imd = FAULT_INACTIVE;
 497:Src/main.c    ****   
 498:Src/main.c    ****   if (HAL_GPIO_ReadPin(GPIOC, FAULT_BMS_STATUS_Pin) == GPIO_PIN_SET)
 499:Src/main.c    ****     bms = FAULT_ACTIVE;
 500:Src/main.c    ****   else bms = FAULT_INACTIVE;
 501:Src/main.c    **** 
 502:Src/main.c    ****   if(bms || imd || bspd){
 503:Src/main.c    ****    // TxCar_state_data[0] = LV_ON;
 504:Src/main.c    ****    // HAL_GPIO_WritePin(GPIOB, RTD_EN_Pin | RTDS_EN_Pin, GPIO_PIN_RESET);
 505:Src/main.c    ****   }
 506:Src/main.c    **** 
 507:Src/main.c    **** }
 508:Src/main.c    **** 
 509:Src/main.c    **** /* USER CODE END 0 */
 510:Src/main.c    **** 
 511:Src/main.c    **** 
 512:Src/main.c    **** 
 513:Src/main.c    **** /**
 514:Src/main.c    ****   * @brief System Clock Configuration
 515:Src/main.c    ****   * @retval None
 516:Src/main.c    ****   */
 517:Src/main.c    **** void SystemClock_Config(void)
 518:Src/main.c    **** {
 519:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 520:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 521:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 522:Src/main.c    **** 
 523:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 524:Src/main.c    ****   */
 525:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 526:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 527:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 528:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 529:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 530:Src/main.c    ****   {
 531:Src/main.c    ****     Error_Handler();
 532:Src/main.c    ****   }
 533:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 534:Src/main.c    ****   */
 535:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 536:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 537:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 538:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 539:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 540:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 541:Src/main.c    **** 
 542:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 543:Src/main.c    ****   {
 544:Src/main.c    ****     Error_Handler();
 545:Src/main.c    ****   }
 546:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 547:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
ARM GAS  /tmp/ccLN6HNI.s 			page 11


 548:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 549:Src/main.c    ****   {
 550:Src/main.c    ****     Error_Handler();
 551:Src/main.c    ****   }
 552:Src/main.c    **** }
 553:Src/main.c    **** 
 554:Src/main.c    **** /**
 555:Src/main.c    ****   * @brief ADC1 Initialization Function
 556:Src/main.c    ****   * @param None
 557:Src/main.c    ****   * @retval None
 558:Src/main.c    ****   */
 559:Src/main.c    **** static void MX_ADC1_Init(void)
 560:Src/main.c    **** {
 561:Src/main.c    **** 
 562:Src/main.c    ****    /* USER CODE BEGIN ADC1_Init 0 */
 563:Src/main.c    **** 
 564:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 565:Src/main.c    **** 
 566:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 567:Src/main.c    **** 
 568:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 569:Src/main.c    ****   /**Common config 
 570:Src/main.c    ****   */
 571:Src/main.c    ****   hadc1.Instance = ADC1;
 572:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE; //enable 
 573:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE; //enable 
 574:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 575:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 576:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 577:Src/main.c    ****   hadc1.Init.NbrOfConversion = 6;
 578:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 579:Src/main.c    ****   {
 580:Src/main.c    ****     Error_Handler();
 581:Src/main.c    ****   }
 582:Src/main.c    ****   /**Configure Regular Channel 
 583:Src/main.c    ****   */
 584:Src/main.c    ****   //Brake position
 585:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 586:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 587:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 588:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 589:Src/main.c    ****   {
 590:Src/main.c    ****     Error_Handler();
 591:Src/main.c    ****   }
 592:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 593:Src/main.c    **** 
 594:Src/main.c    ****   //Steering Position 
 595:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 596:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 597:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 598:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 599:Src/main.c    ****     Error_Handler();
 600:Src/main.c    ****   }
 601:Src/main.c    ****   
 602:Src/main.c    ****   //Brake Pressure 1
 603:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_3;
 604:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
ARM GAS  /tmp/ccLN6HNI.s 			page 12


 605:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 606:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 607:Src/main.c    ****     Error_Handler();
 608:Src/main.c    ****   }
 609:Src/main.c    ****   
 610:Src/main.c    ****   //Brake Pressure 2
 611:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 612:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 613:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 614:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 615:Src/main.c    ****     Error_Handler();
 616:Src/main.c    ****   }
 617:Src/main.c    ****   
 618:Src/main.c    ****   //ADC for throttle_A
 619:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_8;
 620:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 621:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 622:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 623:Src/main.c    ****     Error_Handler();
 624:Src/main.c    ****   }
 625:Src/main.c    ****   
 626:Src/main.c    ****   //ADC for throttle_B
 627:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 628:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 629:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 630:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 631:Src/main.c    ****     Error_Handler();
 632:Src/main.c    ****   }
 633:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 634:Src/main.c    **** 
 635:Src/main.c    **** }
 636:Src/main.c    **** 
 637:Src/main.c    **** /**
 638:Src/main.c    ****   * @brief CAN Initialization Function
 639:Src/main.c    ****   * @param None
 640:Src/main.c    ****   * @retval None
 641:Src/main.c    ****   */
 642:Src/main.c    **** static void MX_CAN_Init(void)
 643:Src/main.c    **** {
 644:Src/main.c    **** 
 645:Src/main.c    ****  /* USER CODE BEGIN CAN_Init 0 */
 646:Src/main.c    **** 
 647:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 648:Src/main.c    **** 
 649:Src/main.c    **** 
 650:Src/main.c    ****   hcan.Instance = CAN1;
 651:Src/main.c    ****   hcan.Init.Prescaler = 2;
 652:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 653:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 654:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 655:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 656:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 657:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE; //enable this if no other nodes on bus
 658:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 659:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 660:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 661:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
ARM GAS  /tmp/ccLN6HNI.s 			page 13


 662:Src/main.c    **** 
 663:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 664:Src/main.c    ****   {
 665:Src/main.c    ****     Error_Handler();
 666:Src/main.c    ****   }
 667:Src/main.c    ****   
 668:Src/main.c    ****     /* USER CODE BEGIN CAN_Init 1 */
 669:Src/main.c    ****  // HAL_CAN_Start(&hcan);
 670:Src/main.c    ****   TxFaults.StdId = FAULTS;         // CAN standard ID
 671:Src/main.c    ****   TxFaults.ExtId = 0x01;          // CAN extended ID
 672:Src/main.c    ****   TxFaults.RTR = CAN_RTR_DATA;      // CAN frame type
 673:Src/main.c    ****   TxFaults.IDE = CAN_ID_STD;        // CAN ID type
 674:Src/main.c    ****   TxFaults.DLC = 8;             // CAN frame length in bytes
 675:Src/main.c    ****   TxFaults.TransmitGlobalTime = DISABLE;  // CAN timestamp in TxData[6] and TxData[7]
 676:Src/main.c    **** 
 677:Src/main.c    ****   TxCar_state.StdId = CAR_STATE;         // CAN standard ID
 678:Src/main.c    ****   TxCar_state.ExtId = 0x01;          // CAN extended ID
 679:Src/main.c    ****   TxCar_state.RTR = CAN_RTR_DATA;      // CAN frame type
 680:Src/main.c    ****   TxCar_state.IDE = CAN_ID_STD;        // CAN ID type
 681:Src/main.c    ****   TxCar_state.DLC = 8;             // CAN frame length in bytes
 682:Src/main.c    ****   TxCar_state.TransmitGlobalTime = DISABLE;
 683:Src/main.c    **** 
 684:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 685:Src/main.c    **** 
 686:Src/main.c    ****     HAL_CAN_Start(&hcan);
 687:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 688:Src/main.c    **** 
 689:Src/main.c    **** }
 690:Src/main.c    **** 
 691:Src/main.c    **** /**
 692:Src/main.c    ****   * @brief SPI1 Initialization Function
 693:Src/main.c    ****   * @param None
 694:Src/main.c    ****   * @retval None
 695:Src/main.c    ****   */
 696:Src/main.c    **** static void MX_SPI1_Init(void)
 697:Src/main.c    **** {
 698:Src/main.c    **** 
 699:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 700:Src/main.c    **** 
 701:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 702:Src/main.c    **** 
 703:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 704:Src/main.c    **** 
 705:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 706:Src/main.c    ****   /* SPI1 parameter configuration*/
 707:Src/main.c    ****   hspi1.Instance = SPI1;
 708:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 709:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 710:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 711:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 712:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 713:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 714:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 715:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 716:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 717:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 718:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
ARM GAS  /tmp/ccLN6HNI.s 			page 14


 719:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 720:Src/main.c    ****   {
 721:Src/main.c    ****     Error_Handler();
 722:Src/main.c    ****   }
 723:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 724:Src/main.c    **** 
 725:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 726:Src/main.c    **** 
 727:Src/main.c    **** }
 728:Src/main.c    **** 
 729:Src/main.c    **** /**
 730:Src/main.c    ****   * @brief GPIO Initialization Function
 731:Src/main.c    ****   * @param None
 732:Src/main.c    ****   * @retval None
 733:Src/main.c    ****   */
 734:Src/main.c    **** static void MX_GPIO_Init(void)
 735:Src/main.c    **** {
  25              		.loc 1 735 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 88B0     		sub	sp, sp, #32
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 736:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 736 0
  42 0006 0024     		movs	r4, #0
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
  47              	.LBB8:
 737:Src/main.c    **** 
 738:Src/main.c    ****   /* GPIO Ports Clock Enable */
 739:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 739 0
  49 0010 374B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F01002 		orr	r2, r2, #16
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F01002 		and	r2, r2, #16
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE8:
  58              	.LBB9:
 740:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  59              		.loc 1 740 0
ARM GAS  /tmp/ccLN6HNI.s 			page 15


  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F02002 		orr	r2, r2, #32
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9A69     		ldr	r2, [r3, #24]
  64 002e 02F02002 		and	r2, r2, #32
  65 0032 0192     		str	r2, [sp, #4]
  66 0034 019A     		ldr	r2, [sp, #4]
  67              	.LBE9:
  68              	.LBB10:
 741:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  69              		.loc 1 741 0
  70 0036 9A69     		ldr	r2, [r3, #24]
  71 0038 42F00402 		orr	r2, r2, #4
  72 003c 9A61     		str	r2, [r3, #24]
  73 003e 9A69     		ldr	r2, [r3, #24]
  74 0040 02F00402 		and	r2, r2, #4
  75 0044 0292     		str	r2, [sp, #8]
  76 0046 029A     		ldr	r2, [sp, #8]
  77              	.LBE10:
  78              	.LBB11:
 742:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  79              		.loc 1 742 0
  80 0048 9A69     		ldr	r2, [r3, #24]
  81 004a 42F00802 		orr	r2, r2, #8
  82 004e 9A61     		str	r2, [r3, #24]
  83 0050 9B69     		ldr	r3, [r3, #24]
  84 0052 03F00803 		and	r3, r3, #8
  85 0056 0393     		str	r3, [sp, #12]
  86 0058 039B     		ldr	r3, [sp, #12]
  87              	.LBE11:
 743:Src/main.c    **** 
 744:Src/main.c    ****   /*Configure GPIO pin Output Level */
 745:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin|APPS_EN_Pin|RTD_EN_Pin 
  88              		.loc 1 745 0
  89 005a 264E     		ldr	r6, .L3+4
  90 005c 2246     		mov	r2, r4
  91 005e 42F23811 		movw	r1, #8504
  92 0062 3046     		mov	r0, r6
  93 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  94              	.LVL0:
 746:Src/main.c    ****                           |BTSF_EN_Pin, GPIO_PIN_RESET);
 747:Src/main.c    **** 
 748:Src/main.c    ****   /*Configure GPIO pin Output Level */
 749:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
  95              		.loc 1 749 0
  96 0068 234F     		ldr	r7, .L3+8
  97 006a 2246     		mov	r2, r4
  98 006c 4FF48061 		mov	r1, #1024
  99 0070 3846     		mov	r0, r7
 100 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL1:
 750:Src/main.c    **** 
 751:Src/main.c    ****   /*Configure GPIO pins : FAULT_IMD_STATUS_Pin FAULT_BMS_STATUS_Pin */
 752:Src/main.c    ****   GPIO_InitStruct.Pin = FAULT_IMD_STATUS_Pin|FAULT_BMS_STATUS_Pin;
 102              		.loc 1 752 0
 103 0076 4FF44043 		mov	r3, #49152
 104 007a 0493     		str	r3, [sp, #16]
ARM GAS  /tmp/ccLN6HNI.s 			page 16


 753:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 105              		.loc 1 753 0
 106 007c 0594     		str	r4, [sp, #20]
 754:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 107              		.loc 1 754 0
 108 007e 0694     		str	r4, [sp, #24]
 755:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 109              		.loc 1 755 0
 110 0080 04A9     		add	r1, sp, #16
 111 0082 1E48     		ldr	r0, .L3+12
 112 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 113              	.LVL2:
 756:Src/main.c    **** 
 757:Src/main.c    ****   /*Configure GPIO pin : FAULT_BSPD_STATUS_Pin */
 758:Src/main.c    ****   GPIO_InitStruct.Pin = FAULT_BSPD_STATUS_Pin;
 114              		.loc 1 758 0
 115 0088 0125     		movs	r5, #1
 116 008a 0495     		str	r5, [sp, #16]
 759:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 117              		.loc 1 759 0
 118 008c 0594     		str	r4, [sp, #20]
 760:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 119              		.loc 1 760 0
 120 008e 0694     		str	r4, [sp, #24]
 761:Src/main.c    ****   HAL_GPIO_Init(FAULT_BSPD_STATUS_GPIO_Port, &GPIO_InitStruct);
 121              		.loc 1 761 0
 122 0090 04A9     		add	r1, sp, #16
 123 0092 1B48     		ldr	r0, .L3+16
 124 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 125              	.LVL3:
 762:Src/main.c    **** 
 763:Src/main.c    ****   /*Configure GPIO pins : HV_CONNECTED_Pin ENABLE_IN_Pin PRECHARGE_COMPLETE_Pin */
 764:Src/main.c    ****   GPIO_InitStruct.Pin = HV_CONNECTED_Pin|ENABLE_IN_Pin|PRECHARGE_COMPLETE_Pin;
 126              		.loc 1 764 0
 127 0098 48F24043 		movw	r3, #33856
 128 009c 0493     		str	r3, [sp, #16]
 765:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 129              		.loc 1 765 0
 130 009e 0594     		str	r4, [sp, #20]
 766:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 131              		.loc 1 766 0
 132 00a0 0694     		str	r4, [sp, #24]
 767:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 133              		.loc 1 767 0
 134 00a2 04A9     		add	r1, sp, #16
 135 00a4 3046     		mov	r0, r6
 136 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 137              	.LVL4:
 768:Src/main.c    **** 
 769:Src/main.c    ****   /*Configure GPIO pins : BRAKE_LIGHT_EN_Pin RTDS_EN_Pin APPS_EN_Pin RTD_EN_Pin 
 770:Src/main.c    ****                            BTSF_EN_Pin */
 771:Src/main.c    ****   GPIO_InitStruct.Pin = BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin|APPS_EN_Pin|RTD_EN_Pin 
 138              		.loc 1 771 0
 139 00aa 42F23813 		movw	r3, #8504
 140 00ae 0493     		str	r3, [sp, #16]
 772:Src/main.c    ****                           |BTSF_EN_Pin;
 773:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
ARM GAS  /tmp/ccLN6HNI.s 			page 17


 141              		.loc 1 773 0
 142 00b0 0595     		str	r5, [sp, #20]
 774:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 143              		.loc 1 774 0
 144 00b2 0694     		str	r4, [sp, #24]
 775:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 145              		.loc 1 775 0
 146 00b4 4FF00208 		mov	r8, #2
 147 00b8 CDF81C80 		str	r8, [sp, #28]
 776:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 148              		.loc 1 776 0
 149 00bc 04A9     		add	r1, sp, #16
 150 00be 3046     		mov	r0, r6
 151 00c0 FFF7FEFF 		bl	HAL_GPIO_Init
 152              	.LVL5:
 777:Src/main.c    **** 
 778:Src/main.c    ****   /*Configure GPIO pin : PA10 */
 779:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 153              		.loc 1 779 0
 154 00c4 4FF48063 		mov	r3, #1024
 155 00c8 0493     		str	r3, [sp, #16]
 780:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 156              		.loc 1 780 0
 157 00ca 0595     		str	r5, [sp, #20]
 781:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 158              		.loc 1 781 0
 159 00cc 0694     		str	r4, [sp, #24]
 782:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 160              		.loc 1 782 0
 161 00ce CDF81C80 		str	r8, [sp, #28]
 783:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 162              		.loc 1 783 0
 163 00d2 04A9     		add	r1, sp, #16
 164 00d4 3846     		mov	r0, r7
 165 00d6 FFF7FEFF 		bl	HAL_GPIO_Init
 166              	.LVL6:
 167              	.LBB12:
 784:Src/main.c    **** 
 785:Src/main.c    ****   /*Configure peripheral I/O remapping */
 786:Src/main.c    ****   __HAL_AFIO_REMAP_PD01_ENABLE();
 168              		.loc 1 786 0
 169 00da 0A4A     		ldr	r2, .L3+20
 170 00dc 5368     		ldr	r3, [r2, #4]
 171              	.LVL7:
 172 00de 43F0E063 		orr	r3, r3, #117440512
 173              	.LVL8:
 174 00e2 43F40043 		orr	r3, r3, #32768
 175              	.LVL9:
 176 00e6 5360     		str	r3, [r2, #4]
 177              	.LBE12:
 787:Src/main.c    **** 
 788:Src/main.c    **** }
 178              		.loc 1 788 0
 179 00e8 08B0     		add	sp, sp, #32
 180              	.LCFI2:
 181              		.cfi_def_cfa_offset 24
 182              		@ sp needed
ARM GAS  /tmp/ccLN6HNI.s 			page 18


 183 00ea BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 184              	.L4:
 185 00ee 00BF     		.align	2
 186              	.L3:
 187 00f0 00100240 		.word	1073876992
 188 00f4 000C0140 		.word	1073810432
 189 00f8 00080140 		.word	1073809408
 190 00fc 00100140 		.word	1073811456
 191 0100 00140140 		.word	1073812480
 192 0104 00000140 		.word	1073807360
 193              		.cfi_endproc
 194              	.LFE77:
 196              		.section	.text.MX_SPI1_Init,"ax",%progbits
 197              		.align	1
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu softvfp
 203              	MX_SPI1_Init:
 204              	.LFB76:
 697:Src/main.c    **** 
 205              		.loc 1 697 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209 0000 08B5     		push	{r3, lr}
 210              	.LCFI3:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 3, -8
 213              		.cfi_offset 14, -4
 707:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 214              		.loc 1 707 0
 215 0002 0B48     		ldr	r0, .L7
 216 0004 0B4B     		ldr	r3, .L7+4
 217 0006 0360     		str	r3, [r0]
 708:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 218              		.loc 1 708 0
 219 0008 4FF48273 		mov	r3, #260
 220 000c 4360     		str	r3, [r0, #4]
 709:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 221              		.loc 1 709 0
 222 000e 0023     		movs	r3, #0
 223 0010 8360     		str	r3, [r0, #8]
 710:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 224              		.loc 1 710 0
 225 0012 C360     		str	r3, [r0, #12]
 711:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 226              		.loc 1 711 0
 227 0014 0361     		str	r3, [r0, #16]
 712:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 228              		.loc 1 712 0
 229 0016 4361     		str	r3, [r0, #20]
 713:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 230              		.loc 1 713 0
 231 0018 4FF48022 		mov	r2, #262144
 232 001c 8261     		str	r2, [r0, #24]
 714:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
ARM GAS  /tmp/ccLN6HNI.s 			page 19


 233              		.loc 1 714 0
 234 001e C361     		str	r3, [r0, #28]
 715:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 235              		.loc 1 715 0
 236 0020 0362     		str	r3, [r0, #32]
 716:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 237              		.loc 1 716 0
 238 0022 4362     		str	r3, [r0, #36]
 717:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 239              		.loc 1 717 0
 240 0024 8362     		str	r3, [r0, #40]
 718:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 241              		.loc 1 718 0
 242 0026 0A23     		movs	r3, #10
 243 0028 C362     		str	r3, [r0, #44]
 719:Src/main.c    ****   {
 244              		.loc 1 719 0
 245 002a FFF7FEFF 		bl	HAL_SPI_Init
 246              	.LVL10:
 247 002e 08BD     		pop	{r3, pc}
 248              	.L8:
 249              		.align	2
 250              	.L7:
 251 0030 00000000 		.word	hspi1
 252 0034 00300140 		.word	1073819648
 253              		.cfi_endproc
 254              	.LFE76:
 256              		.section	.text.MX_ADC1_Init,"ax",%progbits
 257              		.align	1
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 261              		.fpu softvfp
 263              	MX_ADC1_Init:
 264              	.LFB74:
 560:Src/main.c    **** 
 265              		.loc 1 560 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 270              	.LCFI4:
 271              		.cfi_def_cfa_offset 24
 272              		.cfi_offset 4, -24
 273              		.cfi_offset 5, -20
 274              		.cfi_offset 6, -16
 275              		.cfi_offset 7, -12
 276              		.cfi_offset 8, -8
 277              		.cfi_offset 14, -4
 571:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE; //enable 
 278              		.loc 1 571 0
 279 0004 2A4D     		ldr	r5, .L11
 280 0006 2B4B     		ldr	r3, .L11+4
 281 0008 2B60     		str	r3, [r5]
 572:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE; //enable 
 282              		.loc 1 572 0
 283 000a 0026     		movs	r6, #0
ARM GAS  /tmp/ccLN6HNI.s 			page 20


 284 000c AE60     		str	r6, [r5, #8]
 573:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 285              		.loc 1 573 0
 286 000e EE60     		str	r6, [r5, #12]
 574:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 287              		.loc 1 574 0
 288 0010 6E61     		str	r6, [r5, #20]
 575:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 289              		.loc 1 575 0
 290 0012 4FF46023 		mov	r3, #917504
 291 0016 EB61     		str	r3, [r5, #28]
 576:Src/main.c    ****   hadc1.Init.NbrOfConversion = 6;
 292              		.loc 1 576 0
 293 0018 6E60     		str	r6, [r5, #4]
 577:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 294              		.loc 1 577 0
 295 001a 0627     		movs	r7, #6
 296 001c 2F61     		str	r7, [r5, #16]
 578:Src/main.c    ****   {
 297              		.loc 1 578 0
 298 001e 2846     		mov	r0, r5
 299 0020 FFF7FEFF 		bl	HAL_ADC_Init
 300              	.LVL11:
 585:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 301              		.loc 1 585 0
 302 0024 244C     		ldr	r4, .L11+8
 303 0026 2660     		str	r6, [r4]
 586:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 304              		.loc 1 586 0
 305 0028 4FF00108 		mov	r8, #1
 306 002c C4F80480 		str	r8, [r4, #4]
 587:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 307              		.loc 1 587 0
 308 0030 A660     		str	r6, [r4, #8]
 588:Src/main.c    ****   {
 309              		.loc 1 588 0
 310 0032 2146     		mov	r1, r4
 311 0034 2846     		mov	r0, r5
 312 0036 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 313              	.LVL12:
 595:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 314              		.loc 1 595 0
 315 003a C4F80080 		str	r8, [r4]
 596:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 316              		.loc 1 596 0
 317 003e 0226     		movs	r6, #2
 318 0040 6660     		str	r6, [r4, #4]
 597:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 319              		.loc 1 597 0
 320 0042 2146     		mov	r1, r4
 321 0044 2846     		mov	r0, r5
 322 0046 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 323              	.LVL13:
 598:Src/main.c    ****     Error_Handler();
 324              		.loc 1 598 0
 325 004a 2146     		mov	r1, r4
 326 004c 2846     		mov	r0, r5
ARM GAS  /tmp/ccLN6HNI.s 			page 21


 327 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 328              	.LVL14:
 603:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 329              		.loc 1 603 0
 330 0052 0323     		movs	r3, #3
 331 0054 2360     		str	r3, [r4]
 604:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 332              		.loc 1 604 0
 333 0056 6360     		str	r3, [r4, #4]
 605:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 334              		.loc 1 605 0
 335 0058 2146     		mov	r1, r4
 336 005a 2846     		mov	r0, r5
 337 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 338              	.LVL15:
 606:Src/main.c    ****     Error_Handler();
 339              		.loc 1 606 0
 340 0060 2146     		mov	r1, r4
 341 0062 2846     		mov	r0, r5
 342 0064 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 343              	.LVL16:
 611:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 344              		.loc 1 611 0
 345 0068 2660     		str	r6, [r4]
 612:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 346              		.loc 1 612 0
 347 006a 0423     		movs	r3, #4
 348 006c 6360     		str	r3, [r4, #4]
 613:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 349              		.loc 1 613 0
 350 006e 2146     		mov	r1, r4
 351 0070 2846     		mov	r0, r5
 352 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 353              	.LVL17:
 614:Src/main.c    ****     Error_Handler();
 354              		.loc 1 614 0
 355 0076 2146     		mov	r1, r4
 356 0078 2846     		mov	r0, r5
 357 007a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 358              	.LVL18:
 619:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 359              		.loc 1 619 0
 360 007e 0823     		movs	r3, #8
 361 0080 2360     		str	r3, [r4]
 620:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 362              		.loc 1 620 0
 363 0082 0523     		movs	r3, #5
 364 0084 6360     		str	r3, [r4, #4]
 621:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 365              		.loc 1 621 0
 366 0086 2146     		mov	r1, r4
 367 0088 2846     		mov	r0, r5
 368 008a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 369              	.LVL19:
 622:Src/main.c    ****     Error_Handler();
 370              		.loc 1 622 0
 371 008e 2146     		mov	r1, r4
ARM GAS  /tmp/ccLN6HNI.s 			page 22


 372 0090 2846     		mov	r0, r5
 373 0092 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 374              	.LVL20:
 627:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 375              		.loc 1 627 0
 376 0096 0923     		movs	r3, #9
 377 0098 2360     		str	r3, [r4]
 628:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 378              		.loc 1 628 0
 379 009a 6760     		str	r7, [r4, #4]
 629:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 380              		.loc 1 629 0
 381 009c 2146     		mov	r1, r4
 382 009e 2846     		mov	r0, r5
 383 00a0 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 384              	.LVL21:
 630:Src/main.c    ****     Error_Handler();
 385              		.loc 1 630 0
 386 00a4 2146     		mov	r1, r4
 387 00a6 2846     		mov	r0, r5
 388 00a8 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 389              	.LVL22:
 390 00ac BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 391              	.L12:
 392              		.align	2
 393              	.L11:
 394 00b0 00000000 		.word	hadc1
 395 00b4 00240140 		.word	1073816576
 396 00b8 00000000 		.word	.LANCHOR0
 397              		.cfi_endproc
 398              	.LFE74:
 400              		.section	.text.MX_CAN_Init,"ax",%progbits
 401              		.align	1
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 405              		.fpu softvfp
 407              	MX_CAN_Init:
 408              	.LFB75:
 643:Src/main.c    **** 
 409              		.loc 1 643 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413 0000 38B5     		push	{r3, r4, r5, lr}
 414              	.LCFI5:
 415              		.cfi_def_cfa_offset 16
 416              		.cfi_offset 3, -16
 417              		.cfi_offset 4, -12
 418              		.cfi_offset 5, -8
 419              		.cfi_offset 14, -4
 650:Src/main.c    ****   hcan.Init.Prescaler = 2;
 420              		.loc 1 650 0
 421 0002 164C     		ldr	r4, .L15
 422 0004 164B     		ldr	r3, .L15+4
 423 0006 2360     		str	r3, [r4]
 651:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
ARM GAS  /tmp/ccLN6HNI.s 			page 23


 424              		.loc 1 651 0
 425 0008 0223     		movs	r3, #2
 426 000a 6360     		str	r3, [r4, #4]
 652:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 427              		.loc 1 652 0
 428 000c 0025     		movs	r5, #0
 429 000e A560     		str	r5, [r4, #8]
 653:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 430              		.loc 1 653 0
 431 0010 E560     		str	r5, [r4, #12]
 654:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 432              		.loc 1 654 0
 433 0012 4FF40033 		mov	r3, #131072
 434 0016 2361     		str	r3, [r4, #16]
 655:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 435              		.loc 1 655 0
 436 0018 4FF44013 		mov	r3, #3145728
 437 001c 6361     		str	r3, [r4, #20]
 656:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE; //enable this if no other nodes on bus
 438              		.loc 1 656 0
 439 001e 2576     		strb	r5, [r4, #24]
 657:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 440              		.loc 1 657 0
 441 0020 6576     		strb	r5, [r4, #25]
 658:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 442              		.loc 1 658 0
 443 0022 A576     		strb	r5, [r4, #26]
 659:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 444              		.loc 1 659 0
 445 0024 E576     		strb	r5, [r4, #27]
 660:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 446              		.loc 1 660 0
 447 0026 2577     		strb	r5, [r4, #28]
 661:Src/main.c    **** 
 448              		.loc 1 661 0
 449 0028 6577     		strb	r5, [r4, #29]
 663:Src/main.c    ****   {
 450              		.loc 1 663 0
 451 002a 2046     		mov	r0, r4
 452 002c FFF7FEFF 		bl	HAL_CAN_Init
 453              	.LVL23:
 670:Src/main.c    ****   TxFaults.ExtId = 0x01;          // CAN extended ID
 454              		.loc 1 670 0
 455 0030 0C4B     		ldr	r3, .L15+8
 456 0032 D022     		movs	r2, #208
 457 0034 1A60     		str	r2, [r3]
 671:Src/main.c    ****   TxFaults.RTR = CAN_RTR_DATA;      // CAN frame type
 458              		.loc 1 671 0
 459 0036 0121     		movs	r1, #1
 460 0038 5960     		str	r1, [r3, #4]
 672:Src/main.c    ****   TxFaults.IDE = CAN_ID_STD;        // CAN ID type
 461              		.loc 1 672 0
 462 003a DD60     		str	r5, [r3, #12]
 673:Src/main.c    ****   TxFaults.DLC = 8;             // CAN frame length in bytes
 463              		.loc 1 673 0
 464 003c 9D60     		str	r5, [r3, #8]
 674:Src/main.c    ****   TxFaults.TransmitGlobalTime = DISABLE;  // CAN timestamp in TxData[6] and TxData[7]
ARM GAS  /tmp/ccLN6HNI.s 			page 24


 465              		.loc 1 674 0
 466 003e 0822     		movs	r2, #8
 467 0040 1A61     		str	r2, [r3, #16]
 675:Src/main.c    **** 
 468              		.loc 1 675 0
 469 0042 1D75     		strb	r5, [r3, #20]
 677:Src/main.c    ****   TxCar_state.ExtId = 0x01;          // CAN extended ID
 470              		.loc 1 677 0
 471 0044 084B     		ldr	r3, .L15+12
 472 0046 D120     		movs	r0, #209
 473 0048 1860     		str	r0, [r3]
 678:Src/main.c    ****   TxCar_state.RTR = CAN_RTR_DATA;      // CAN frame type
 474              		.loc 1 678 0
 475 004a 5960     		str	r1, [r3, #4]
 679:Src/main.c    ****   TxCar_state.IDE = CAN_ID_STD;        // CAN ID type
 476              		.loc 1 679 0
 477 004c DD60     		str	r5, [r3, #12]
 680:Src/main.c    ****   TxCar_state.DLC = 8;             // CAN frame length in bytes
 478              		.loc 1 680 0
 479 004e 9D60     		str	r5, [r3, #8]
 681:Src/main.c    ****   TxCar_state.TransmitGlobalTime = DISABLE;
 480              		.loc 1 681 0
 481 0050 1A61     		str	r2, [r3, #16]
 682:Src/main.c    **** 
 482              		.loc 1 682 0
 483 0052 1D75     		strb	r5, [r3, #20]
 686:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 484              		.loc 1 686 0
 485 0054 2046     		mov	r0, r4
 486 0056 FFF7FEFF 		bl	HAL_CAN_Start
 487              	.LVL24:
 488 005a 38BD     		pop	{r3, r4, r5, pc}
 489              	.L16:
 490              		.align	2
 491              	.L15:
 492 005c 00000000 		.word	hcan
 493 0060 00640040 		.word	1073767424
 494 0064 00000000 		.word	TxFaults
 495 0068 00000000 		.word	TxCar_state
 496              		.cfi_endproc
 497              	.LFE75:
 499              		.section	.text.updateADC,"ax",%progbits
 500              		.align	1
 501              		.global	updateADC
 502              		.syntax unified
 503              		.thumb
 504              		.thumb_func
 505              		.fpu softvfp
 507              	updateADC:
 508              	.LFB67:
 391:Src/main.c    ****   //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 509              		.loc 1 391 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              	.LVL25:
 514 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccLN6HNI.s 			page 25


 515              	.LCFI6:
 516              		.cfi_def_cfa_offset 8
 517              		.cfi_offset 4, -8
 518              		.cfi_offset 14, -4
 393:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_0;
 519              		.loc 1 393 0
 520 0002 0346     		mov	r3, r0
 521 0004 10B9     		cbnz	r0, .L18
 394:Src/main.c    ****   if (channel == STEERING_POS_ADC_CHANNEL) //steering position 
 522              		.loc 1 394 0
 523 0006 0021     		movs	r1, #0
 524 0008 1A4A     		ldr	r2, .L30
 525 000a 1160     		str	r1, [r2]
 526              	.L18:
 395:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_1;
 527              		.loc 1 395 0
 528 000c 012B     		cmp	r3, #1
 529 000e 1CD0     		beq	.L25
 530              	.L19:
 397:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_3;
 531              		.loc 1 397 0
 532 0010 032B     		cmp	r3, #3
 533 0012 1ED0     		beq	.L26
 534              	.L20:
 399:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_2;
 535              		.loc 1 399 0
 536 0014 022B     		cmp	r3, #2
 537 0016 20D0     		beq	.L27
 538              	.L21:
 401:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 539              		.loc 1 401 0
 540 0018 082B     		cmp	r3, #8
 541 001a 22D0     		beq	.L28
 542              	.L22:
 403:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_9;
 543              		.loc 1 403 0
 544 001c 092B     		cmp	r3, #9
 545 001e 24D0     		beq	.L29
 546              	.L23:
 406:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 547              		.loc 1 406 0
 548 0020 1449     		ldr	r1, .L30
 549 0022 0123     		movs	r3, #1
 550 0024 4B60     		str	r3, [r1, #4]
 407:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 551              		.loc 1 407 0
 552 0026 8B60     		str	r3, [r1, #8]
 408:Src/main.c    **** 
 553              		.loc 1 408 0
 554 0028 134C     		ldr	r4, .L30+4
 555 002a 2046     		mov	r0, r4
 556              	.LVL26:
 557 002c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 558              	.LVL27:
 410:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 559              		.loc 1 410 0
 560 0030 2046     		mov	r0, r4
ARM GAS  /tmp/ccLN6HNI.s 			page 26


 561 0032 FFF7FEFF 		bl	HAL_ADC_Start
 562              	.LVL28:
 411:Src/main.c    ****   return HAL_ADC_GetValue(&hadc1);
 563              		.loc 1 411 0
 564 0036 4FF47A71 		mov	r1, #1000
 565 003a 2046     		mov	r0, r4
 566 003c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 567              	.LVL29:
 412:Src/main.c    ****   //HAL_ADC_Stop(&hadc1);
 568              		.loc 1 412 0
 569 0040 2046     		mov	r0, r4
 570 0042 FFF7FEFF 		bl	HAL_ADC_GetValue
 571              	.LVL30:
 433:Src/main.c    **** 
 572              		.loc 1 433 0
 573 0046 80B2     		uxth	r0, r0
 574 0048 10BD     		pop	{r4, pc}
 575              	.LVL31:
 576              	.L25:
 396:Src/main.c    ****   if (channel == BRAKE_PRESSURE_1_ADC_CHANNEL) //brake pressure 1
 577              		.loc 1 396 0
 578 004a 0121     		movs	r1, #1
 579 004c 094A     		ldr	r2, .L30
 580 004e 1160     		str	r1, [r2]
 581 0050 DEE7     		b	.L19
 582              	.L26:
 398:Src/main.c    ****   if (channel == BRAKE_PRESSURE_2_ADC_CHANNEL) //brake pressure 2
 583              		.loc 1 398 0
 584 0052 0321     		movs	r1, #3
 585 0054 074A     		ldr	r2, .L30
 586 0056 1160     		str	r1, [r2]
 587 0058 DCE7     		b	.L20
 588              	.L27:
 400:Src/main.c    ****   if (channel == THROTTLE_A_ADC_CHANNEL) //throttle A
 589              		.loc 1 400 0
 590 005a 0221     		movs	r1, #2
 591 005c 054A     		ldr	r2, .L30
 592 005e 1160     		str	r1, [r2]
 593 0060 DAE7     		b	.L21
 594              	.L28:
 402:Src/main.c    ****   if (channel == THROTTLE_B_ADC_CHANNEL) //throttle B 
 595              		.loc 1 402 0
 596 0062 0821     		movs	r1, #8
 597 0064 034A     		ldr	r2, .L30
 598 0066 1160     		str	r1, [r2]
 599 0068 D8E7     		b	.L22
 600              	.L29:
 404:Src/main.c    **** 
 601              		.loc 1 404 0
 602 006a 0922     		movs	r2, #9
 603 006c 014B     		ldr	r3, .L30
 604 006e 1A60     		str	r2, [r3]
 605 0070 D6E7     		b	.L23
 606              	.L31:
 607 0072 00BF     		.align	2
 608              	.L30:
 609 0074 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccLN6HNI.s 			page 27


 610 0078 00000000 		.word	hadc1
 611              		.cfi_endproc
 612              	.LFE67:
 614              		.section	.text.checkBTSF,"ax",%progbits
 615              		.align	1
 616              		.global	checkBTSF
 617              		.syntax unified
 618              		.thumb
 619              		.thumb_func
 620              		.fpu softvfp
 622              	checkBTSF:
 623              	.LFB66:
 361:Src/main.c    ****   brakePressure_2 = updateADC(BRAKE_PRESSURE_2_ADC_CHANNEL);
 624              		.loc 1 361 0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 0
 627              		@ frame_needed = 0, uses_anonymous_args = 0
 628 0000 08B5     		push	{r3, lr}
 629              	.LCFI7:
 630              		.cfi_def_cfa_offset 8
 631              		.cfi_offset 3, -8
 632              		.cfi_offset 14, -4
 362:Src/main.c    ****   throttle_A = updateADC(THROTTLE_A_ADC_CHANNEL); 
 633              		.loc 1 362 0
 634 0002 0220     		movs	r0, #2
 635 0004 FFF7FEFF 		bl	updateADC
 636              	.LVL32:
 637 0008 0F4B     		ldr	r3, .L37
 638 000a 1880     		strh	r0, [r3]	@ movhi
 363:Src/main.c    ****   
 639              		.loc 1 363 0
 640 000c 0820     		movs	r0, #8
 641 000e FFF7FEFF 		bl	updateADC
 642              	.LVL33:
 643 0012 0346     		mov	r3, r0
 644 0014 0D4A     		ldr	r2, .L37+4
 645 0016 1080     		strh	r0, [r2]	@ movhi
 365:Src/main.c    ****   {
 646              		.loc 1 365 0
 647 0018 0D4A     		ldr	r2, .L37+8
 648 001a 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 649 001c 28B1     		cbz	r0, .L33
 367:Src/main.c    ****     {
 650              		.loc 1 367 0
 651 001e B3F5127F 		cmp	r3, #584
 652 0022 0FD8     		bhi	.L35
 369:Src/main.c    ****       //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 653              		.loc 1 369 0
 654 0024 0020     		movs	r0, #0
 655 0026 1070     		strb	r0, [r2]
 371:Src/main.c    ****     }
 656              		.loc 1 371 0
 657 0028 08BD     		pop	{r3, pc}
 658              	.L33:
 376:Src/main.c    ****        //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 659              		.loc 1 376 0
 660 002a 074A     		ldr	r2, .L37
ARM GAS  /tmp/ccLN6HNI.s 			page 28


 661 002c 1288     		ldrh	r2, [r2]
 662 002e B2F5FA6F 		cmp	r2, #2000
 663 0032 08D9     		bls	.L34
 376:Src/main.c    ****        //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 664              		.loc 1 376 0 is_stmt 0 discriminator 1
 665 0034 B3F56D7F 		cmp	r3, #948
 666 0038 05D3     		bcc	.L34
 378:Src/main.c    ****        return 1;
 667              		.loc 1 378 0 is_stmt 1
 668 003a FF22     		movs	r2, #255
 669 003c 044B     		ldr	r3, .L37+8
 670 003e 1A70     		strb	r2, [r3]
 379:Src/main.c    ****   }
 671              		.loc 1 379 0
 672 0040 0120     		movs	r0, #1
 673 0042 08BD     		pop	{r3, pc}
 674              	.L35:
 373:Src/main.c    ****   }
 675              		.loc 1 373 0
 676 0044 0120     		movs	r0, #1
 677              	.L34:
 384:Src/main.c    **** 
 678              		.loc 1 384 0
 679 0046 08BD     		pop	{r3, pc}
 680              	.L38:
 681              		.align	2
 682              	.L37:
 683 0048 00000000 		.word	brakePressure_2
 684 004c 00000000 		.word	throttle_A
 685 0050 00000000 		.word	.LANCHOR1
 686              		.cfi_endproc
 687              	.LFE66:
 689              		.section	.text.APPS_Diff,"ax",%progbits
 690              		.align	1
 691              		.global	APPS_Diff
 692              		.syntax unified
 693              		.thumb
 694              		.thumb_func
 695              		.fpu softvfp
 697              	APPS_Diff:
 698              	.LFB68:
 443:Src/main.c    **** 
 699              		.loc 1 443 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 0
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703              		@ link register save eliminated.
 450:Src/main.c    ****     return 1;
 704              		.loc 1 450 0
 705 0000 074B     		ldr	r3, .L43
 706 0002 1B88     		ldrh	r3, [r3]
 707 0004 074A     		ldr	r2, .L43+4
 708 0006 1288     		ldrh	r2, [r2]
 709 0008 9B1A     		subs	r3, r3, r2
 710 000a 002B     		cmp	r3, #0
 711 000c B8BF     		it	lt
 712 000e 5B42     		rsblt	r3, r3, #0
ARM GAS  /tmp/ccLN6HNI.s 			page 29


 713 0010 B3F5167F 		cmp	r3, #600
 714 0014 01DC     		bgt	.L42
 453:Src/main.c    **** 
 715              		.loc 1 453 0
 716 0016 0020     		movs	r0, #0
 468:Src/main.c    **** void sendFaultMsg(){
 717              		.loc 1 468 0
 718 0018 7047     		bx	lr
 719              	.L42:
 451:Src/main.c    ****   }
 720              		.loc 1 451 0
 721 001a 0120     		movs	r0, #1
 722 001c 7047     		bx	lr
 723              	.L44:
 724 001e 00BF     		.align	2
 725              	.L43:
 726 0020 00000000 		.word	throttle_A
 727 0024 00000000 		.word	throttle_B
 728              		.cfi_endproc
 729              	.LFE68:
 731              		.section	.text.checkAPPS,"ax",%progbits
 732              		.align	1
 733              		.global	checkAPPS
 734              		.syntax unified
 735              		.thumb
 736              		.thumb_func
 737              		.fpu softvfp
 739              	checkAPPS:
 740              	.LFB65:
 327:Src/main.c    **** 
 741              		.loc 1 327 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 745 0000 08B5     		push	{r3, lr}
 746              	.LCFI8:
 747              		.cfi_def_cfa_offset 8
 748              		.cfi_offset 3, -8
 749              		.cfi_offset 14, -4
 329:Src/main.c    ****   throttle_B = updateADC(THROTTLE_B_ADC_CHANNEL); 
 750              		.loc 1 329 0
 751 0002 0820     		movs	r0, #8
 752 0004 FFF7FEFF 		bl	updateADC
 753              	.LVL34:
 754 0008 094B     		ldr	r3, .L51
 755 000a 1880     		strh	r0, [r3]	@ movhi
 330:Src/main.c    **** 
 756              		.loc 1 330 0
 757 000c 0920     		movs	r0, #9
 758 000e FFF7FEFF 		bl	updateADC
 759              	.LVL35:
 760 0012 084B     		ldr	r3, .L51+4
 761 0014 1880     		strh	r0, [r3]	@ movhi
 342:Src/main.c    ****    millisTimer = 100;
 762              		.loc 1 342 0
 763 0016 FFF7FEFF 		bl	APPS_Diff
 764              	.LVL36:
ARM GAS  /tmp/ccLN6HNI.s 			page 30


 765 001a 10B9     		cbnz	r0, .L46
 343:Src/main.c    ****    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 766              		.loc 1 343 0
 767 001c 6422     		movs	r2, #100
 768 001e 064B     		ldr	r3, .L51+8
 769 0020 1A60     		str	r2, [r3]
 770              	.L46:
 348:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 771              		.loc 1 348 0
 772 0022 054B     		ldr	r3, .L51+8
 773 0024 1B68     		ldr	r3, [r3]
 774 0026 0BB1     		cbz	r3, .L50
 352:Src/main.c    **** 
 775              		.loc 1 352 0
 776 0028 0020     		movs	r0, #0
 354:Src/main.c    **** 
 777              		.loc 1 354 0
 778 002a 08BD     		pop	{r3, pc}
 779              	.L50:
 350:Src/main.c    ****   }
 780              		.loc 1 350 0
 781 002c 0120     		movs	r0, #1
 782 002e 08BD     		pop	{r3, pc}
 783              	.L52:
 784              		.align	2
 785              	.L51:
 786 0030 00000000 		.word	throttle_A
 787 0034 00000000 		.word	throttle_B
 788 0038 00000000 		.word	millisTimer
 789              		.cfi_endproc
 790              	.LFE65:
 792              		.section	.text.sendFaultMsg,"ax",%progbits
 793              		.align	1
 794              		.global	sendFaultMsg
 795              		.syntax unified
 796              		.thumb
 797              		.thumb_func
 798              		.fpu softvfp
 800              	sendFaultMsg:
 801              	.LFB69:
 469:Src/main.c    ****   TxFault_data[0] = bms;  //Set all the data (faults) to their current values
 802              		.loc 1 469 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806 0000 08B5     		push	{r3, lr}
 807              	.LCFI9:
 808              		.cfi_def_cfa_offset 8
 809              		.cfi_offset 3, -8
 810              		.cfi_offset 14, -4
 470:Src/main.c    ****   TxFault_data[1] = imd;
 811              		.loc 1 470 0
 812 0002 094A     		ldr	r2, .L55
 813 0004 094B     		ldr	r3, .L55+4
 814 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 815 0008 1370     		strb	r3, [r2]
 471:Src/main.c    ****   TxFault_data[2] = bspd;
ARM GAS  /tmp/ccLN6HNI.s 			page 31


 816              		.loc 1 471 0
 817 000a 094B     		ldr	r3, .L55+8
 818 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 819 000e 5370     		strb	r3, [r2, #1]
 472:Src/main.c    ****   TxFault_data[3] = apps;
 820              		.loc 1 472 0
 821 0010 084B     		ldr	r3, .L55+12
 822 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 823 0014 9370     		strb	r3, [r2, #2]
 473:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxFaults, TxFault_data, &TxFaultsMailbox);
 824              		.loc 1 473 0
 825 0016 084B     		ldr	r3, .L55+16
 826 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 827 001a D370     		strb	r3, [r2, #3]
 474:Src/main.c    **** }
 828              		.loc 1 474 0
 829 001c 074B     		ldr	r3, .L55+20
 830 001e 0849     		ldr	r1, .L55+24
 831 0020 0848     		ldr	r0, .L55+28
 832 0022 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 833              	.LVL37:
 834 0026 08BD     		pop	{r3, pc}
 835              	.L56:
 836              		.align	2
 837              	.L55:
 838 0028 00000000 		.word	.LANCHOR2
 839 002c 00000000 		.word	bms
 840 0030 00000000 		.word	imd
 841 0034 00000000 		.word	bspd
 842 0038 00000000 		.word	apps
 843 003c 00000000 		.word	TxFaultsMailbox
 844 0040 00000000 		.word	TxFaults
 845 0044 00000000 		.word	hcan
 846              		.cfi_endproc
 847              	.LFE69:
 849              		.section	.text.sendCar_state,"ax",%progbits
 850              		.align	1
 851              		.global	sendCar_state
 852              		.syntax unified
 853              		.thumb
 854              		.thumb_func
 855              		.fpu softvfp
 857              	sendCar_state:
 858              	.LFB70:
 477:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxCar_state,TxCar_state_data, &TxCar_stateMailbox);
 859              		.loc 1 477 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863 0000 08B5     		push	{r3, lr}
 864              	.LCFI10:
 865              		.cfi_def_cfa_offset 8
 866              		.cfi_offset 3, -8
 867              		.cfi_offset 14, -4
 478:Src/main.c    **** }
 868              		.loc 1 478 0
 869 0002 034B     		ldr	r3, .L59
ARM GAS  /tmp/ccLN6HNI.s 			page 32


 870 0004 034A     		ldr	r2, .L59+4
 871 0006 0449     		ldr	r1, .L59+8
 872 0008 0448     		ldr	r0, .L59+12
 873 000a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 874              	.LVL38:
 875 000e 08BD     		pop	{r3, pc}
 876              	.L60:
 877              		.align	2
 878              	.L59:
 879 0010 00000000 		.word	TxCar_stateMailbox
 880 0014 00000000 		.word	.LANCHOR3
 881 0018 00000000 		.word	TxCar_state
 882 001c 00000000 		.word	hcan
 883              		.cfi_endproc
 884              	.LFE70:
 886              		.section	.text.car_state_machine,"ax",%progbits
 887              		.align	1
 888              		.global	car_state_machine
 889              		.syntax unified
 890              		.thumb
 891              		.thumb_func
 892              		.fpu softvfp
 894              	car_state_machine:
 895              	.LFB71:
 482:Src/main.c    ****   if(STATE > TxCar_state_data[0])
 896              		.loc 1 482 0
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 0
 899              		@ frame_needed = 0, uses_anonymous_args = 0
 900              		@ link register save eliminated.
 901              	.LVL39:
 483:Src/main.c    ****   {
 902              		.loc 1 483 0
 903 0000 034B     		ldr	r3, .L63
 904 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 905 0004 8342     		cmp	r3, r0
 906 0006 01D2     		bcs	.L61
 485:Src/main.c    ****   }
 907              		.loc 1 485 0
 908 0008 014B     		ldr	r3, .L63
 909 000a 1870     		strb	r0, [r3]
 910              	.L61:
 911 000c 7047     		bx	lr
 912              	.L64:
 913 000e 00BF     		.align	2
 914              	.L63:
 915 0010 00000000 		.word	.LANCHOR3
 916              		.cfi_endproc
 917              	.LFE71:
 919              		.section	.text.readFaults,"ax",%progbits
 920              		.align	1
 921              		.global	readFaults
 922              		.syntax unified
 923              		.thumb
 924              		.thumb_func
 925              		.fpu softvfp
 927              	readFaults:
ARM GAS  /tmp/ccLN6HNI.s 			page 33


 928              	.LFB72:
 489:Src/main.c    ****   if (HAL_GPIO_ReadPin(GPIOD, FAULT_BSPD_STATUS_Pin) == GPIO_PIN_SET)
 929              		.loc 1 489 0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 0
 932              		@ frame_needed = 0, uses_anonymous_args = 0
 933 0000 08B5     		push	{r3, lr}
 934              	.LCFI11:
 935              		.cfi_def_cfa_offset 8
 936              		.cfi_offset 3, -8
 937              		.cfi_offset 14, -4
 490:Src/main.c    ****     bspd = FAULT_ACTIVE;
 938              		.loc 1 490 0
 939 0002 0121     		movs	r1, #1
 940 0004 1448     		ldr	r0, .L76
 941 0006 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 942              	.LVL40:
 943 000a 0128     		cmp	r0, #1
 944 000c 17D0     		beq	.L73
 492:Src/main.c    ****   
 945              		.loc 1 492 0
 946 000e 0022     		movs	r2, #0
 947 0010 124B     		ldr	r3, .L76+4
 948 0012 1A70     		strb	r2, [r3]
 949              	.L67:
 494:Src/main.c    ****     imd = FAULT_ACTIVE;
 950              		.loc 1 494 0
 951 0014 4FF48041 		mov	r1, #16384
 952 0018 1148     		ldr	r0, .L76+8
 953 001a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 954              	.LVL41:
 955 001e 0128     		cmp	r0, #1
 956 0020 11D0     		beq	.L74
 496:Src/main.c    ****   
 957              		.loc 1 496 0
 958 0022 0022     		movs	r2, #0
 959 0024 0F4B     		ldr	r3, .L76+12
 960 0026 1A70     		strb	r2, [r3]
 961              	.L69:
 498:Src/main.c    ****     bms = FAULT_ACTIVE;
 962              		.loc 1 498 0
 963 0028 4FF40041 		mov	r1, #32768
 964 002c 0C48     		ldr	r0, .L76+8
 965 002e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 966              	.LVL42:
 967 0032 0128     		cmp	r0, #1
 968 0034 0BD0     		beq	.L75
 500:Src/main.c    **** 
 969              		.loc 1 500 0
 970 0036 0022     		movs	r2, #0
 971 0038 0B4B     		ldr	r3, .L76+16
 972 003a 1A70     		strb	r2, [r3]
 973 003c 08BD     		pop	{r3, pc}
 974              	.L73:
 491:Src/main.c    ****   else bspd = FAULT_INACTIVE;
 975              		.loc 1 491 0
 976 003e FF22     		movs	r2, #255
ARM GAS  /tmp/ccLN6HNI.s 			page 34


 977 0040 064B     		ldr	r3, .L76+4
 978 0042 1A70     		strb	r2, [r3]
 979 0044 E6E7     		b	.L67
 980              	.L74:
 495:Src/main.c    ****   else imd = FAULT_INACTIVE;
 981              		.loc 1 495 0
 982 0046 FF22     		movs	r2, #255
 983 0048 064B     		ldr	r3, .L76+12
 984 004a 1A70     		strb	r2, [r3]
 985 004c ECE7     		b	.L69
 986              	.L75:
 499:Src/main.c    ****   else bms = FAULT_INACTIVE;
 987              		.loc 1 499 0
 988 004e FF22     		movs	r2, #255
 989 0050 054B     		ldr	r3, .L76+16
 990 0052 1A70     		strb	r2, [r3]
 991 0054 08BD     		pop	{r3, pc}
 992              	.L77:
 993 0056 00BF     		.align	2
 994              	.L76:
 995 0058 00140140 		.word	1073812480
 996 005c 00000000 		.word	bspd
 997 0060 00100140 		.word	1073811456
 998 0064 00000000 		.word	imd
 999 0068 00000000 		.word	bms
 1000              		.cfi_endproc
 1001              	.LFE72:
 1003              		.section	.text.SystemClock_Config,"ax",%progbits
 1004              		.align	1
 1005              		.global	SystemClock_Config
 1006              		.syntax unified
 1007              		.thumb
 1008              		.thumb_func
 1009              		.fpu softvfp
 1011              	SystemClock_Config:
 1012              	.LFB73:
 518:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1013              		.loc 1 518 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 80
 1016              		@ frame_needed = 0, uses_anonymous_args = 0
 1017 0000 30B5     		push	{r4, r5, lr}
 1018              	.LCFI12:
 1019              		.cfi_def_cfa_offset 12
 1020              		.cfi_offset 4, -12
 1021              		.cfi_offset 5, -8
 1022              		.cfi_offset 14, -4
 1023 0002 95B0     		sub	sp, sp, #84
 1024              	.LCFI13:
 1025              		.cfi_def_cfa_offset 96
 519:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1026              		.loc 1 519 0
 1027 0004 2822     		movs	r2, #40
 1028 0006 0021     		movs	r1, #0
 1029 0008 0DEB0200 		add	r0, sp, r2
 1030 000c FFF7FEFF 		bl	memset
 1031              	.LVL43:
ARM GAS  /tmp/ccLN6HNI.s 			page 35


 520:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1032              		.loc 1 520 0
 1033 0010 0024     		movs	r4, #0
 1034 0012 0594     		str	r4, [sp, #20]
 1035 0014 0694     		str	r4, [sp, #24]
 1036 0016 0794     		str	r4, [sp, #28]
 1037 0018 0894     		str	r4, [sp, #32]
 1038 001a 0994     		str	r4, [sp, #36]
 521:Src/main.c    **** 
 1039              		.loc 1 521 0
 1040 001c 0194     		str	r4, [sp, #4]
 1041 001e 0294     		str	r4, [sp, #8]
 1042 0020 0394     		str	r4, [sp, #12]
 1043 0022 0494     		str	r4, [sp, #16]
 525:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1044              		.loc 1 525 0
 1045 0024 0225     		movs	r5, #2
 1046 0026 0A95     		str	r5, [sp, #40]
 526:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1047              		.loc 1 526 0
 1048 0028 0123     		movs	r3, #1
 1049 002a 0E93     		str	r3, [sp, #56]
 527:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1050              		.loc 1 527 0
 1051 002c 1023     		movs	r3, #16
 1052 002e 0F93     		str	r3, [sp, #60]
 529:Src/main.c    ****   {
 1053              		.loc 1 529 0
 1054 0030 0AA8     		add	r0, sp, #40
 1055 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1056              	.LVL44:
 535:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1057              		.loc 1 535 0
 1058 0036 0F23     		movs	r3, #15
 1059 0038 0593     		str	r3, [sp, #20]
 537:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1060              		.loc 1 537 0
 1061 003a 0694     		str	r4, [sp, #24]
 538:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1062              		.loc 1 538 0
 1063 003c 0794     		str	r4, [sp, #28]
 539:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1064              		.loc 1 539 0
 1065 003e 0894     		str	r4, [sp, #32]
 540:Src/main.c    **** 
 1066              		.loc 1 540 0
 1067 0040 0994     		str	r4, [sp, #36]
 542:Src/main.c    ****   {
 1068              		.loc 1 542 0
 1069 0042 2146     		mov	r1, r4
 1070 0044 05A8     		add	r0, sp, #20
 1071 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1072              	.LVL45:
 546:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 1073              		.loc 1 546 0
 1074 004a 0195     		str	r5, [sp, #4]
 547:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
ARM GAS  /tmp/ccLN6HNI.s 			page 36


 1075              		.loc 1 547 0
 1076 004c 0394     		str	r4, [sp, #12]
 548:Src/main.c    ****   {
 1077              		.loc 1 548 0
 1078 004e 01A8     		add	r0, sp, #4
 1079 0050 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1080              	.LVL46:
 552:Src/main.c    **** 
 1081              		.loc 1 552 0
 1082 0054 15B0     		add	sp, sp, #84
 1083              	.LCFI14:
 1084              		.cfi_def_cfa_offset 12
 1085              		@ sp needed
 1086 0056 30BD     		pop	{r4, r5, pc}
 1087              		.cfi_endproc
 1088              	.LFE73:
 1090              		.section	.text.main,"ax",%progbits
 1091              		.align	1
 1092              		.global	main
 1093              		.syntax unified
 1094              		.thumb
 1095              		.thumb_func
 1096              		.fpu softvfp
 1098              	main:
 1099              	.LFB64:
 189:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1100              		.loc 1 189 0
 1101              		.cfi_startproc
 1102              		@ Volatile: function does not return.
 1103              		@ args = 0, pretend = 0, frame = 0
 1104              		@ frame_needed = 0, uses_anonymous_args = 0
 1105 0000 08B5     		push	{r3, lr}
 1106              	.LCFI15:
 1107              		.cfi_def_cfa_offset 8
 1108              		.cfi_offset 3, -8
 1109              		.cfi_offset 14, -4
 196:Src/main.c    ****   RTDS_Timer = 2500; //3 seconds
 1110              		.loc 1 196 0
 1111 0002 6422     		movs	r2, #100
 1112 0004 634B     		ldr	r3, .L99
 1113 0006 1A60     		str	r2, [r3]
 197:Src/main.c    ****   CAN_Timer = 1000; //timer to send message every second
 1114              		.loc 1 197 0
 1115 0008 40F6C412 		movw	r2, #2500
 1116 000c 624B     		ldr	r3, .L99+4
 1117 000e 1A60     		str	r2, [r3]
 198:Src/main.c    **** 
 1118              		.loc 1 198 0
 1119 0010 4FF47A72 		mov	r2, #1000
 1120 0014 614B     		ldr	r3, .L99+8
 1121 0016 1A60     		str	r2, [r3]
 205:Src/main.c    **** 
 1122              		.loc 1 205 0
 1123 0018 FFF7FEFF 		bl	HAL_Init
 1124              	.LVL47:
 210:Src/main.c    ****   // Configure the SysTick timer to overflow every 1 ms
 1125              		.loc 1 210 0
ARM GAS  /tmp/ccLN6HNI.s 			page 37


 1126 001c FFF7FEFF 		bl	SystemCoreClockUpdate
 1127              	.LVL48:
 212:Src/main.c    **** 
 1128              		.loc 1 212 0
 1129 0020 5F4B     		ldr	r3, .L99+12
 1130 0022 1B68     		ldr	r3, [r3]
 1131 0024 5F4A     		ldr	r2, .L99+16
 1132 0026 A2FB0323 		umull	r2, r3, r2, r3
 1133 002a 9B09     		lsrs	r3, r3, #6
 1134              	.LVL49:
 1135              	.LBB13:
 1136              	.LBB14:
 1137              		.file 2 "Drivers/CMSIS/Include/core_cm3.h"
   1:Drivers/CMSIS/Include/core_cm3.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm3.h ****  * @file     core_cm3.h
   3:Drivers/CMSIS/Include/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm3.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm3.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm3.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm3.h **** 
   9:Drivers/CMSIS/Include/core_cm3.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm3.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm3.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm3.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm3.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm3.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm3.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm3.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm3.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm3.h ****    *
  21:Drivers/CMSIS/Include/core_cm3.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm3.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm3.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm3.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm3.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm3.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm3.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm3.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm3.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm3.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm3.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm3.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm3.h **** 
  34:Drivers/CMSIS/Include/core_cm3.h **** 
  35:Drivers/CMSIS/Include/core_cm3.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm3.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm3.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm3.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm3.h **** #endif
  40:Drivers/CMSIS/Include/core_cm3.h **** 
  41:Drivers/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm3.h **** 
  44:Drivers/CMSIS/Include/core_cm3.h **** #include <stdint.h>
ARM GAS  /tmp/ccLN6HNI.s 			page 38


  45:Drivers/CMSIS/Include/core_cm3.h **** 
  46:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm3.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm3.h **** #endif
  49:Drivers/CMSIS/Include/core_cm3.h **** 
  50:Drivers/CMSIS/Include/core_cm3.h **** /**
  51:Drivers/CMSIS/Include/core_cm3.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm3.h **** 
  54:Drivers/CMSIS/Include/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm3.h **** 
  57:Drivers/CMSIS/Include/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm3.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm3.h **** 
  60:Drivers/CMSIS/Include/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm3.h ****  */
  63:Drivers/CMSIS/Include/core_cm3.h **** 
  64:Drivers/CMSIS/Include/core_cm3.h **** 
  65:Drivers/CMSIS/Include/core_cm3.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm3.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm3.h **** /**
  69:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup Cortex_M3
  70:Drivers/CMSIS/Include/core_cm3.h ****   @{
  71:Drivers/CMSIS/Include/core_cm3.h ****  */
  72:Drivers/CMSIS/Include/core_cm3.h **** 
  73:Drivers/CMSIS/Include/core_cm3.h **** /*  CMSIS CM3 definitions */
  74:Drivers/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm3.h **** 
  79:Drivers/CMSIS/Include/core_cm3.h **** #define __CORTEX_M                (0x03U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm3.h **** 
  81:Drivers/CMSIS/Include/core_cm3.h **** 
  82:Drivers/CMSIS/Include/core_cm3.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm3.h **** 
  87:Drivers/CMSIS/Include/core_cm3.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm3.h **** 
  92:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm3.h **** 
  97:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccLN6HNI.s 			page 39


 102:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm3.h **** 
 106:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm3.h **** 
 111:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm3.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm3.h **** 
 117:Drivers/CMSIS/Include/core_cm3.h **** #else
 118:Drivers/CMSIS/Include/core_cm3.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm3.h **** #endif
 120:Drivers/CMSIS/Include/core_cm3.h **** 
 121:Drivers/CMSIS/Include/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm3.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm3.h **** */
 124:Drivers/CMSIS/Include/core_cm3.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm3.h **** 
 126:Drivers/CMSIS/Include/core_cm3.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm3.h **** 
 131:Drivers/CMSIS/Include/core_cm3.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm3.h **** 
 136:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm3.h **** 
 141:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm3.h **** 
 146:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm3.h **** 
 151:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm3.h **** 
 156:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm3.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
ARM GAS  /tmp/ccLN6HNI.s 			page 40


 159:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm3.h **** 
 161:Drivers/CMSIS/Include/core_cm3.h **** #endif
 162:Drivers/CMSIS/Include/core_cm3.h **** 
 163:Drivers/CMSIS/Include/core_cm3.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm3.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm3.h **** 
 166:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm3.h **** }
 168:Drivers/CMSIS/Include/core_cm3.h **** #endif
 169:Drivers/CMSIS/Include/core_cm3.h **** 
 170:Drivers/CMSIS/Include/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm3.h **** 
 172:Drivers/CMSIS/Include/core_cm3.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm3.h **** 
 174:Drivers/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm3.h **** 
 177:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm3.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm3.h **** #endif
 180:Drivers/CMSIS/Include/core_cm3.h **** 
 181:Drivers/CMSIS/Include/core_cm3.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __CM3_REV
 184:Drivers/CMSIS/Include/core_cm3.h ****     #define __CM3_REV               0x0200U
 185:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm3.h **** 
 188:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __MPU_PRESENT
 189:Drivers/CMSIS/Include/core_cm3.h ****     #define __MPU_PRESENT             0U
 190:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm3.h **** 
 193:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 194:Drivers/CMSIS/Include/core_cm3.h ****     #define __NVIC_PRIO_BITS          4U
 195:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm3.h **** 
 198:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 199:Drivers/CMSIS/Include/core_cm3.h ****     #define __Vendor_SysTickConfig    0U
 200:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 201:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 202:Drivers/CMSIS/Include/core_cm3.h **** #endif
 203:Drivers/CMSIS/Include/core_cm3.h **** 
 204:Drivers/CMSIS/Include/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 205:Drivers/CMSIS/Include/core_cm3.h **** /**
 206:Drivers/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 207:Drivers/CMSIS/Include/core_cm3.h **** 
 208:Drivers/CMSIS/Include/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 209:Drivers/CMSIS/Include/core_cm3.h ****     \li to specify the access to peripheral variables.
 210:Drivers/CMSIS/Include/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 211:Drivers/CMSIS/Include/core_cm3.h **** */
 212:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 213:Drivers/CMSIS/Include/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 214:Drivers/CMSIS/Include/core_cm3.h **** #else
 215:Drivers/CMSIS/Include/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
ARM GAS  /tmp/ccLN6HNI.s 			page 41


 216:Drivers/CMSIS/Include/core_cm3.h **** #endif
 217:Drivers/CMSIS/Include/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 218:Drivers/CMSIS/Include/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 219:Drivers/CMSIS/Include/core_cm3.h **** 
 220:Drivers/CMSIS/Include/core_cm3.h **** /* following defines should be used for structure members */
 221:Drivers/CMSIS/Include/core_cm3.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 222:Drivers/CMSIS/Include/core_cm3.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 223:Drivers/CMSIS/Include/core_cm3.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 224:Drivers/CMSIS/Include/core_cm3.h **** 
 225:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group Cortex_M3 */
 226:Drivers/CMSIS/Include/core_cm3.h **** 
 227:Drivers/CMSIS/Include/core_cm3.h **** 
 228:Drivers/CMSIS/Include/core_cm3.h **** 
 229:Drivers/CMSIS/Include/core_cm3.h **** /*******************************************************************************
 230:Drivers/CMSIS/Include/core_cm3.h ****  *                 Register Abstraction
 231:Drivers/CMSIS/Include/core_cm3.h ****   Core Register contain:
 232:Drivers/CMSIS/Include/core_cm3.h ****   - Core Register
 233:Drivers/CMSIS/Include/core_cm3.h ****   - Core NVIC Register
 234:Drivers/CMSIS/Include/core_cm3.h ****   - Core SCB Register
 235:Drivers/CMSIS/Include/core_cm3.h ****   - Core SysTick Register
 236:Drivers/CMSIS/Include/core_cm3.h ****   - Core Debug Register
 237:Drivers/CMSIS/Include/core_cm3.h ****   - Core MPU Register
 238:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
 239:Drivers/CMSIS/Include/core_cm3.h **** /**
 240:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 241:Drivers/CMSIS/Include/core_cm3.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 242:Drivers/CMSIS/Include/core_cm3.h **** */
 243:Drivers/CMSIS/Include/core_cm3.h **** 
 244:Drivers/CMSIS/Include/core_cm3.h **** /**
 245:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
 246:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 247:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Core Register type definitions.
 248:Drivers/CMSIS/Include/core_cm3.h ****   @{
 249:Drivers/CMSIS/Include/core_cm3.h ****  */
 250:Drivers/CMSIS/Include/core_cm3.h **** 
 251:Drivers/CMSIS/Include/core_cm3.h **** /**
 252:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 253:Drivers/CMSIS/Include/core_cm3.h ****  */
 254:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 255:Drivers/CMSIS/Include/core_cm3.h **** {
 256:Drivers/CMSIS/Include/core_cm3.h ****   struct
 257:Drivers/CMSIS/Include/core_cm3.h ****   {
 258:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved */
 259:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 260:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 261:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 262:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 263:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 264:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 265:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 266:Drivers/CMSIS/Include/core_cm3.h **** } APSR_Type;
 267:Drivers/CMSIS/Include/core_cm3.h **** 
 268:Drivers/CMSIS/Include/core_cm3.h **** /* APSR Register Definitions */
 269:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 270:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm3.h **** 
 272:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
ARM GAS  /tmp/ccLN6HNI.s 			page 42


 273:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 274:Drivers/CMSIS/Include/core_cm3.h **** 
 275:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 276:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 277:Drivers/CMSIS/Include/core_cm3.h **** 
 278:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 279:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 280:Drivers/CMSIS/Include/core_cm3.h **** 
 281:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 282:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 283:Drivers/CMSIS/Include/core_cm3.h **** 
 284:Drivers/CMSIS/Include/core_cm3.h **** 
 285:Drivers/CMSIS/Include/core_cm3.h **** /**
 286:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 287:Drivers/CMSIS/Include/core_cm3.h ****  */
 288:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 289:Drivers/CMSIS/Include/core_cm3.h **** {
 290:Drivers/CMSIS/Include/core_cm3.h ****   struct
 291:Drivers/CMSIS/Include/core_cm3.h ****   {
 292:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 293:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 294:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 295:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 296:Drivers/CMSIS/Include/core_cm3.h **** } IPSR_Type;
 297:Drivers/CMSIS/Include/core_cm3.h **** 
 298:Drivers/CMSIS/Include/core_cm3.h **** /* IPSR Register Definitions */
 299:Drivers/CMSIS/Include/core_cm3.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 300:Drivers/CMSIS/Include/core_cm3.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 301:Drivers/CMSIS/Include/core_cm3.h **** 
 302:Drivers/CMSIS/Include/core_cm3.h **** 
 303:Drivers/CMSIS/Include/core_cm3.h **** /**
 304:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 305:Drivers/CMSIS/Include/core_cm3.h ****  */
 306:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 307:Drivers/CMSIS/Include/core_cm3.h **** {
 308:Drivers/CMSIS/Include/core_cm3.h ****   struct
 309:Drivers/CMSIS/Include/core_cm3.h ****   {
 310:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 311:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 312:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 313:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 314:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 315:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 316:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 317:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 318:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 319:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 320:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 321:Drivers/CMSIS/Include/core_cm3.h **** } xPSR_Type;
 322:Drivers/CMSIS/Include/core_cm3.h **** 
 323:Drivers/CMSIS/Include/core_cm3.h **** /* xPSR Register Definitions */
 324:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm3.h **** 
 327:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccLN6HNI.s 			page 43


 330:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 331:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 332:Drivers/CMSIS/Include/core_cm3.h **** 
 333:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 334:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 335:Drivers/CMSIS/Include/core_cm3.h **** 
 336:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 337:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 338:Drivers/CMSIS/Include/core_cm3.h **** 
 339:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 340:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 341:Drivers/CMSIS/Include/core_cm3.h **** 
 342:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 343:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 344:Drivers/CMSIS/Include/core_cm3.h **** 
 345:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 346:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 347:Drivers/CMSIS/Include/core_cm3.h **** 
 348:Drivers/CMSIS/Include/core_cm3.h **** 
 349:Drivers/CMSIS/Include/core_cm3.h **** /**
 350:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Control Registers (CONTROL).
 351:Drivers/CMSIS/Include/core_cm3.h ****  */
 352:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 353:Drivers/CMSIS/Include/core_cm3.h **** {
 354:Drivers/CMSIS/Include/core_cm3.h ****   struct
 355:Drivers/CMSIS/Include/core_cm3.h ****   {
 356:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 357:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 358:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 359:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 360:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 361:Drivers/CMSIS/Include/core_cm3.h **** } CONTROL_Type;
 362:Drivers/CMSIS/Include/core_cm3.h **** 
 363:Drivers/CMSIS/Include/core_cm3.h **** /* CONTROL Register Definitions */
 364:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 365:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 366:Drivers/CMSIS/Include/core_cm3.h **** 
 367:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 368:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 369:Drivers/CMSIS/Include/core_cm3.h **** 
 370:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CORE */
 371:Drivers/CMSIS/Include/core_cm3.h **** 
 372:Drivers/CMSIS/Include/core_cm3.h **** 
 373:Drivers/CMSIS/Include/core_cm3.h **** /**
 374:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
 375:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 376:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Type definitions for the NVIC Registers
 377:Drivers/CMSIS/Include/core_cm3.h ****   @{
 378:Drivers/CMSIS/Include/core_cm3.h ****  */
 379:Drivers/CMSIS/Include/core_cm3.h **** 
 380:Drivers/CMSIS/Include/core_cm3.h **** /**
 381:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 382:Drivers/CMSIS/Include/core_cm3.h ****  */
 383:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 384:Drivers/CMSIS/Include/core_cm3.h **** {
 385:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 386:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[24U];
ARM GAS  /tmp/ccLN6HNI.s 			page 44


 387:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 388:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RSERVED1[24U];
 389:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 390:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[24U];
 391:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 392:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[24U];
 393:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 394:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[56U];
 395:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 396:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[644U];
 397:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 398:Drivers/CMSIS/Include/core_cm3.h **** }  NVIC_Type;
 399:Drivers/CMSIS/Include/core_cm3.h **** 
 400:Drivers/CMSIS/Include/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 401:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 402:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 403:Drivers/CMSIS/Include/core_cm3.h **** 
 404:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 405:Drivers/CMSIS/Include/core_cm3.h **** 
 406:Drivers/CMSIS/Include/core_cm3.h **** 
 407:Drivers/CMSIS/Include/core_cm3.h **** /**
 408:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 409:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 410:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Control Block Registers
 411:Drivers/CMSIS/Include/core_cm3.h ****   @{
 412:Drivers/CMSIS/Include/core_cm3.h ****  */
 413:Drivers/CMSIS/Include/core_cm3.h **** 
 414:Drivers/CMSIS/Include/core_cm3.h **** /**
 415:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Control Block (SCB).
 416:Drivers/CMSIS/Include/core_cm3.h ****  */
 417:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 418:Drivers/CMSIS/Include/core_cm3.h **** {
 419:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 420:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 421:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 422:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 423:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 424:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 425:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 426:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 427:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 428:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 429:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 430:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 431:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 432:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 433:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 434:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 435:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 436:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 437:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 438:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[5U];
 439:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 440:Drivers/CMSIS/Include/core_cm3.h **** } SCB_Type;
 441:Drivers/CMSIS/Include/core_cm3.h **** 
 442:Drivers/CMSIS/Include/core_cm3.h **** /* SCB CPUID Register Definitions */
 443:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
ARM GAS  /tmp/ccLN6HNI.s 			page 45


 444:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm3.h **** 
 446:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 447:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm3.h **** 
 449:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm3.h **** 
 452:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm3.h **** 
 455:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 456:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm3.h **** 
 458:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 459:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm3.h **** 
 462:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 463:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm3.h **** 
 465:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 466:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm3.h **** 
 468:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 469:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm3.h **** 
 471:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 472:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 473:Drivers/CMSIS/Include/core_cm3.h **** 
 474:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 476:Drivers/CMSIS/Include/core_cm3.h **** 
 477:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 479:Drivers/CMSIS/Include/core_cm3.h **** 
 480:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm3.h **** 
 483:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 484:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 485:Drivers/CMSIS/Include/core_cm3.h **** 
 486:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 487:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 488:Drivers/CMSIS/Include/core_cm3.h **** 
 489:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 490:Drivers/CMSIS/Include/core_cm3.h **** #if (__CM3_REV < 0x0201U)                   /* core r2p1 */
 491:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29U                                            /*!< SCB 
 492:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 493:Drivers/CMSIS/Include/core_cm3.h **** 
 494:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 495:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 496:Drivers/CMSIS/Include/core_cm3.h **** #else
 497:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 498:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 499:Drivers/CMSIS/Include/core_cm3.h **** #endif
 500:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccLN6HNI.s 			page 46


 501:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 502:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 503:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 504:Drivers/CMSIS/Include/core_cm3.h **** 
 505:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 506:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 507:Drivers/CMSIS/Include/core_cm3.h **** 
 508:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 509:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 510:Drivers/CMSIS/Include/core_cm3.h **** 
 511:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 512:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 513:Drivers/CMSIS/Include/core_cm3.h **** 
 514:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 515:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 516:Drivers/CMSIS/Include/core_cm3.h **** 
 517:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 518:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 519:Drivers/CMSIS/Include/core_cm3.h **** 
 520:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 521:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 522:Drivers/CMSIS/Include/core_cm3.h **** 
 523:Drivers/CMSIS/Include/core_cm3.h **** /* SCB System Control Register Definitions */
 524:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 525:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 526:Drivers/CMSIS/Include/core_cm3.h **** 
 527:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 528:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 529:Drivers/CMSIS/Include/core_cm3.h **** 
 530:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 531:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 532:Drivers/CMSIS/Include/core_cm3.h **** 
 533:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 534:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 535:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 536:Drivers/CMSIS/Include/core_cm3.h **** 
 537:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 538:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 539:Drivers/CMSIS/Include/core_cm3.h **** 
 540:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 541:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 542:Drivers/CMSIS/Include/core_cm3.h **** 
 543:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 544:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 545:Drivers/CMSIS/Include/core_cm3.h **** 
 546:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 547:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 548:Drivers/CMSIS/Include/core_cm3.h **** 
 549:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 550:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 551:Drivers/CMSIS/Include/core_cm3.h **** 
 552:Drivers/CMSIS/Include/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 553:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 554:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 555:Drivers/CMSIS/Include/core_cm3.h **** 
 556:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 557:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
ARM GAS  /tmp/ccLN6HNI.s 			page 47


 558:Drivers/CMSIS/Include/core_cm3.h **** 
 559:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 560:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 561:Drivers/CMSIS/Include/core_cm3.h **** 
 562:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 563:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 564:Drivers/CMSIS/Include/core_cm3.h **** 
 565:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 566:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 567:Drivers/CMSIS/Include/core_cm3.h **** 
 568:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 569:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 570:Drivers/CMSIS/Include/core_cm3.h **** 
 571:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 572:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 573:Drivers/CMSIS/Include/core_cm3.h **** 
 574:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 575:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 576:Drivers/CMSIS/Include/core_cm3.h **** 
 577:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 578:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 579:Drivers/CMSIS/Include/core_cm3.h **** 
 580:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 581:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 582:Drivers/CMSIS/Include/core_cm3.h **** 
 583:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 584:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 585:Drivers/CMSIS/Include/core_cm3.h **** 
 586:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 587:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 588:Drivers/CMSIS/Include/core_cm3.h **** 
 589:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 590:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 591:Drivers/CMSIS/Include/core_cm3.h **** 
 592:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 593:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 594:Drivers/CMSIS/Include/core_cm3.h **** 
 595:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Configurable Fault Status Register Definitions */
 596:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 597:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 598:Drivers/CMSIS/Include/core_cm3.h **** 
 599:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 600:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 601:Drivers/CMSIS/Include/core_cm3.h **** 
 602:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 603:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 604:Drivers/CMSIS/Include/core_cm3.h **** 
 605:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Hard Fault Status Register Definitions */
 606:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 607:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 608:Drivers/CMSIS/Include/core_cm3.h **** 
 609:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 610:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 611:Drivers/CMSIS/Include/core_cm3.h **** 
 612:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 613:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 614:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccLN6HNI.s 			page 48


 615:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 616:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 617:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 618:Drivers/CMSIS/Include/core_cm3.h **** 
 619:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 620:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 621:Drivers/CMSIS/Include/core_cm3.h **** 
 622:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 623:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 624:Drivers/CMSIS/Include/core_cm3.h **** 
 625:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 626:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 627:Drivers/CMSIS/Include/core_cm3.h **** 
 628:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 629:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 630:Drivers/CMSIS/Include/core_cm3.h **** 
 631:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCB */
 632:Drivers/CMSIS/Include/core_cm3.h **** 
 633:Drivers/CMSIS/Include/core_cm3.h **** 
 634:Drivers/CMSIS/Include/core_cm3.h **** /**
 635:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 636:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 637:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 638:Drivers/CMSIS/Include/core_cm3.h ****   @{
 639:Drivers/CMSIS/Include/core_cm3.h ****  */
 640:Drivers/CMSIS/Include/core_cm3.h **** 
 641:Drivers/CMSIS/Include/core_cm3.h **** /**
 642:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 643:Drivers/CMSIS/Include/core_cm3.h ****  */
 644:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 645:Drivers/CMSIS/Include/core_cm3.h **** {
 646:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[1U];
 647:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 648:Drivers/CMSIS/Include/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200U))
 649:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 650:Drivers/CMSIS/Include/core_cm3.h **** #else
 651:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[1U];
 652:Drivers/CMSIS/Include/core_cm3.h **** #endif
 653:Drivers/CMSIS/Include/core_cm3.h **** } SCnSCB_Type;
 654:Drivers/CMSIS/Include/core_cm3.h **** 
 655:Drivers/CMSIS/Include/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 656:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 657:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 658:Drivers/CMSIS/Include/core_cm3.h **** 
 659:Drivers/CMSIS/Include/core_cm3.h **** /* Auxiliary Control Register Definitions */
 660:Drivers/CMSIS/Include/core_cm3.h **** 
 661:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 662:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 663:Drivers/CMSIS/Include/core_cm3.h **** 
 664:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 665:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 666:Drivers/CMSIS/Include/core_cm3.h **** 
 667:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 668:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 669:Drivers/CMSIS/Include/core_cm3.h **** 
 670:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 671:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccLN6HNI.s 			page 49


 672:Drivers/CMSIS/Include/core_cm3.h **** 
 673:Drivers/CMSIS/Include/core_cm3.h **** /**
 674:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 675:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 676:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Timer Registers.
 677:Drivers/CMSIS/Include/core_cm3.h ****   @{
 678:Drivers/CMSIS/Include/core_cm3.h ****  */
 679:Drivers/CMSIS/Include/core_cm3.h **** 
 680:Drivers/CMSIS/Include/core_cm3.h **** /**
 681:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Timer (SysTick).
 682:Drivers/CMSIS/Include/core_cm3.h ****  */
 683:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 684:Drivers/CMSIS/Include/core_cm3.h **** {
 685:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 686:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 687:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 688:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 689:Drivers/CMSIS/Include/core_cm3.h **** } SysTick_Type;
 690:Drivers/CMSIS/Include/core_cm3.h **** 
 691:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 692:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 693:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 694:Drivers/CMSIS/Include/core_cm3.h **** 
 695:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 696:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 697:Drivers/CMSIS/Include/core_cm3.h **** 
 698:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 699:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 700:Drivers/CMSIS/Include/core_cm3.h **** 
 701:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 702:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 703:Drivers/CMSIS/Include/core_cm3.h **** 
 704:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Reload Register Definitions */
 705:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 706:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 707:Drivers/CMSIS/Include/core_cm3.h **** 
 708:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Current Register Definitions */
 709:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 710:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 711:Drivers/CMSIS/Include/core_cm3.h **** 
 712:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Calibration Register Definitions */
 713:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 714:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 715:Drivers/CMSIS/Include/core_cm3.h **** 
 716:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 717:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 718:Drivers/CMSIS/Include/core_cm3.h **** 
 719:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 720:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 721:Drivers/CMSIS/Include/core_cm3.h **** 
 722:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 723:Drivers/CMSIS/Include/core_cm3.h **** 
 724:Drivers/CMSIS/Include/core_cm3.h **** 
 725:Drivers/CMSIS/Include/core_cm3.h **** /**
 726:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 727:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 728:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
ARM GAS  /tmp/ccLN6HNI.s 			page 50


 729:Drivers/CMSIS/Include/core_cm3.h ****   @{
 730:Drivers/CMSIS/Include/core_cm3.h ****  */
 731:Drivers/CMSIS/Include/core_cm3.h **** 
 732:Drivers/CMSIS/Include/core_cm3.h **** /**
 733:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 734:Drivers/CMSIS/Include/core_cm3.h ****  */
 735:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 736:Drivers/CMSIS/Include/core_cm3.h **** {
 737:Drivers/CMSIS/Include/core_cm3.h ****   __OM  union
 738:Drivers/CMSIS/Include/core_cm3.h ****   {
 739:Drivers/CMSIS/Include/core_cm3.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 740:Drivers/CMSIS/Include/core_cm3.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 741:Drivers/CMSIS/Include/core_cm3.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 742:Drivers/CMSIS/Include/core_cm3.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 743:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[864U];
 744:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 745:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[15U];
 746:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 747:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[15U];
 748:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 749:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[29U];
 750:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 751:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 752:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 753:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[43U];
 754:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 755:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 756:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[6U];
 757:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 758:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 759:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 760:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 761:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 762:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 763:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 764:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 765:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 766:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 767:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 768:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 769:Drivers/CMSIS/Include/core_cm3.h **** } ITM_Type;
 770:Drivers/CMSIS/Include/core_cm3.h **** 
 771:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 772:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 773:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 774:Drivers/CMSIS/Include/core_cm3.h **** 
 775:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Trace Control Register Definitions */
 776:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 777:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 778:Drivers/CMSIS/Include/core_cm3.h **** 
 779:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 780:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 781:Drivers/CMSIS/Include/core_cm3.h **** 
 782:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 783:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 784:Drivers/CMSIS/Include/core_cm3.h **** 
 785:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
ARM GAS  /tmp/ccLN6HNI.s 			page 51


 786:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 787:Drivers/CMSIS/Include/core_cm3.h **** 
 788:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 789:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 790:Drivers/CMSIS/Include/core_cm3.h **** 
 791:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 792:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 793:Drivers/CMSIS/Include/core_cm3.h **** 
 794:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 795:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 796:Drivers/CMSIS/Include/core_cm3.h **** 
 797:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 798:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 799:Drivers/CMSIS/Include/core_cm3.h **** 
 800:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 801:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 802:Drivers/CMSIS/Include/core_cm3.h **** 
 803:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Integration Write Register Definitions */
 804:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 805:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 806:Drivers/CMSIS/Include/core_cm3.h **** 
 807:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Integration Read Register Definitions */
 808:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 809:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 810:Drivers/CMSIS/Include/core_cm3.h **** 
 811:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 812:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 813:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 814:Drivers/CMSIS/Include/core_cm3.h **** 
 815:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Lock Status Register Definitions */
 816:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 817:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 818:Drivers/CMSIS/Include/core_cm3.h **** 
 819:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 820:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 821:Drivers/CMSIS/Include/core_cm3.h **** 
 822:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 823:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 824:Drivers/CMSIS/Include/core_cm3.h **** 
 825:Drivers/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 826:Drivers/CMSIS/Include/core_cm3.h **** 
 827:Drivers/CMSIS/Include/core_cm3.h **** 
 828:Drivers/CMSIS/Include/core_cm3.h **** /**
 829:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 830:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 831:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 832:Drivers/CMSIS/Include/core_cm3.h ****   @{
 833:Drivers/CMSIS/Include/core_cm3.h ****  */
 834:Drivers/CMSIS/Include/core_cm3.h **** 
 835:Drivers/CMSIS/Include/core_cm3.h **** /**
 836:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 837:Drivers/CMSIS/Include/core_cm3.h ****  */
 838:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 839:Drivers/CMSIS/Include/core_cm3.h **** {
 840:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 841:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 842:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
ARM GAS  /tmp/ccLN6HNI.s 			page 52


 843:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 844:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 845:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 846:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 847:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 848:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 849:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 850:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 851:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[1U];
 852:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 853:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 854:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 855:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[1U];
 856:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 857:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 858:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 859:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[1U];
 860:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 861:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 862:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 863:Drivers/CMSIS/Include/core_cm3.h **** } DWT_Type;
 864:Drivers/CMSIS/Include/core_cm3.h **** 
 865:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Control Register Definitions */
 866:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 867:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 868:Drivers/CMSIS/Include/core_cm3.h **** 
 869:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 870:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 871:Drivers/CMSIS/Include/core_cm3.h **** 
 872:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 873:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 874:Drivers/CMSIS/Include/core_cm3.h **** 
 875:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 876:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 877:Drivers/CMSIS/Include/core_cm3.h **** 
 878:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 879:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 880:Drivers/CMSIS/Include/core_cm3.h **** 
 881:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 882:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 883:Drivers/CMSIS/Include/core_cm3.h **** 
 884:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 885:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 886:Drivers/CMSIS/Include/core_cm3.h **** 
 887:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 888:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 889:Drivers/CMSIS/Include/core_cm3.h **** 
 890:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 891:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 892:Drivers/CMSIS/Include/core_cm3.h **** 
 893:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 894:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 895:Drivers/CMSIS/Include/core_cm3.h **** 
 896:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 897:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 898:Drivers/CMSIS/Include/core_cm3.h **** 
 899:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
ARM GAS  /tmp/ccLN6HNI.s 			page 53


 900:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 901:Drivers/CMSIS/Include/core_cm3.h **** 
 902:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 903:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 904:Drivers/CMSIS/Include/core_cm3.h **** 
 905:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 906:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 907:Drivers/CMSIS/Include/core_cm3.h **** 
 908:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 909:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 910:Drivers/CMSIS/Include/core_cm3.h **** 
 911:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 912:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 913:Drivers/CMSIS/Include/core_cm3.h **** 
 914:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 915:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 916:Drivers/CMSIS/Include/core_cm3.h **** 
 917:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 918:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 919:Drivers/CMSIS/Include/core_cm3.h **** 
 920:Drivers/CMSIS/Include/core_cm3.h **** /* DWT CPI Count Register Definitions */
 921:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 922:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 923:Drivers/CMSIS/Include/core_cm3.h **** 
 924:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 925:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 926:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 927:Drivers/CMSIS/Include/core_cm3.h **** 
 928:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 929:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 930:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 931:Drivers/CMSIS/Include/core_cm3.h **** 
 932:Drivers/CMSIS/Include/core_cm3.h **** /* DWT LSU Count Register Definitions */
 933:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 934:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 935:Drivers/CMSIS/Include/core_cm3.h **** 
 936:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 937:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 938:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 939:Drivers/CMSIS/Include/core_cm3.h **** 
 940:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 941:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
 942:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 943:Drivers/CMSIS/Include/core_cm3.h **** 
 944:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 945:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
 946:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 947:Drivers/CMSIS/Include/core_cm3.h **** 
 948:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
 949:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 950:Drivers/CMSIS/Include/core_cm3.h **** 
 951:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
 952:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 953:Drivers/CMSIS/Include/core_cm3.h **** 
 954:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
 955:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 956:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccLN6HNI.s 			page 54


 957:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
 958:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 959:Drivers/CMSIS/Include/core_cm3.h **** 
 960:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
 961:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 962:Drivers/CMSIS/Include/core_cm3.h **** 
 963:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
 964:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 965:Drivers/CMSIS/Include/core_cm3.h **** 
 966:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
 967:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 968:Drivers/CMSIS/Include/core_cm3.h **** 
 969:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
 970:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 971:Drivers/CMSIS/Include/core_cm3.h **** 
 972:Drivers/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 973:Drivers/CMSIS/Include/core_cm3.h **** 
 974:Drivers/CMSIS/Include/core_cm3.h **** 
 975:Drivers/CMSIS/Include/core_cm3.h **** /**
 976:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 977:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 978:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
 979:Drivers/CMSIS/Include/core_cm3.h ****   @{
 980:Drivers/CMSIS/Include/core_cm3.h ****  */
 981:Drivers/CMSIS/Include/core_cm3.h **** 
 982:Drivers/CMSIS/Include/core_cm3.h **** /**
 983:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
 984:Drivers/CMSIS/Include/core_cm3.h ****  */
 985:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 986:Drivers/CMSIS/Include/core_cm3.h **** {
 987:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 988:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 989:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[2U];
 990:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 991:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[55U];
 992:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 993:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[131U];
 994:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 995:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 996:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 997:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[759U];
 998:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 999:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1000:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1001:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[1U];
1002:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1003:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1004:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1005:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[39U];
1006:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1007:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1008:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED7[8U];
1009:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1010:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1011:Drivers/CMSIS/Include/core_cm3.h **** } TPI_Type;
1012:Drivers/CMSIS/Include/core_cm3.h **** 
1013:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
ARM GAS  /tmp/ccLN6HNI.s 			page 55


1014:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1015:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1016:Drivers/CMSIS/Include/core_cm3.h **** 
1017:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
1018:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1019:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1020:Drivers/CMSIS/Include/core_cm3.h **** 
1021:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
1022:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1023:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1024:Drivers/CMSIS/Include/core_cm3.h **** 
1025:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1026:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1027:Drivers/CMSIS/Include/core_cm3.h **** 
1028:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1029:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1030:Drivers/CMSIS/Include/core_cm3.h **** 
1031:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1032:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1033:Drivers/CMSIS/Include/core_cm3.h **** 
1034:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
1035:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1036:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1037:Drivers/CMSIS/Include/core_cm3.h **** 
1038:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1039:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1040:Drivers/CMSIS/Include/core_cm3.h **** 
1041:Drivers/CMSIS/Include/core_cm3.h **** /* TPI TRIGGER Register Definitions */
1042:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1043:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1044:Drivers/CMSIS/Include/core_cm3.h **** 
1045:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1046:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1047:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1048:Drivers/CMSIS/Include/core_cm3.h **** 
1049:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1050:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1051:Drivers/CMSIS/Include/core_cm3.h **** 
1052:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1053:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1054:Drivers/CMSIS/Include/core_cm3.h **** 
1055:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1056:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1057:Drivers/CMSIS/Include/core_cm3.h **** 
1058:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1059:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1060:Drivers/CMSIS/Include/core_cm3.h **** 
1061:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1062:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1063:Drivers/CMSIS/Include/core_cm3.h **** 
1064:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1065:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1066:Drivers/CMSIS/Include/core_cm3.h **** 
1067:Drivers/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
1068:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1069:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1070:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccLN6HNI.s 			page 56


1071:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1072:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1073:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1074:Drivers/CMSIS/Include/core_cm3.h **** 
1075:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1076:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1077:Drivers/CMSIS/Include/core_cm3.h **** 
1078:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1079:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1080:Drivers/CMSIS/Include/core_cm3.h **** 
1081:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1082:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1083:Drivers/CMSIS/Include/core_cm3.h **** 
1084:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1085:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1086:Drivers/CMSIS/Include/core_cm3.h **** 
1087:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1088:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1089:Drivers/CMSIS/Include/core_cm3.h **** 
1090:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1091:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1092:Drivers/CMSIS/Include/core_cm3.h **** 
1093:Drivers/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
1094:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1095:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1096:Drivers/CMSIS/Include/core_cm3.h **** 
1097:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
1098:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1099:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1100:Drivers/CMSIS/Include/core_cm3.h **** 
1101:Drivers/CMSIS/Include/core_cm3.h **** /* TPI DEVID Register Definitions */
1102:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1103:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1104:Drivers/CMSIS/Include/core_cm3.h **** 
1105:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1106:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1107:Drivers/CMSIS/Include/core_cm3.h **** 
1108:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1109:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1110:Drivers/CMSIS/Include/core_cm3.h **** 
1111:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1112:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1113:Drivers/CMSIS/Include/core_cm3.h **** 
1114:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1115:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1116:Drivers/CMSIS/Include/core_cm3.h **** 
1117:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1118:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1119:Drivers/CMSIS/Include/core_cm3.h **** 
1120:Drivers/CMSIS/Include/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1121:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1122:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1123:Drivers/CMSIS/Include/core_cm3.h **** 
1124:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1125:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1126:Drivers/CMSIS/Include/core_cm3.h **** 
1127:Drivers/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
ARM GAS  /tmp/ccLN6HNI.s 			page 57


1128:Drivers/CMSIS/Include/core_cm3.h **** 
1129:Drivers/CMSIS/Include/core_cm3.h **** 
1130:Drivers/CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1U)
1131:Drivers/CMSIS/Include/core_cm3.h **** /**
1132:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
1133:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1134:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1135:Drivers/CMSIS/Include/core_cm3.h ****   @{
1136:Drivers/CMSIS/Include/core_cm3.h ****  */
1137:Drivers/CMSIS/Include/core_cm3.h **** 
1138:Drivers/CMSIS/Include/core_cm3.h **** /**
1139:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1140:Drivers/CMSIS/Include/core_cm3.h ****  */
1141:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
1142:Drivers/CMSIS/Include/core_cm3.h **** {
1143:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1144:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1145:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1146:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1147:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1148:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1149:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1150:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1151:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1152:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1153:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1154:Drivers/CMSIS/Include/core_cm3.h **** } MPU_Type;
1155:Drivers/CMSIS/Include/core_cm3.h **** 
1156:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Type Register Definitions */
1157:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1158:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1159:Drivers/CMSIS/Include/core_cm3.h **** 
1160:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1161:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1162:Drivers/CMSIS/Include/core_cm3.h **** 
1163:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1164:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1165:Drivers/CMSIS/Include/core_cm3.h **** 
1166:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Control Register Definitions */
1167:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1168:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1169:Drivers/CMSIS/Include/core_cm3.h **** 
1170:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1171:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1172:Drivers/CMSIS/Include/core_cm3.h **** 
1173:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1174:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1175:Drivers/CMSIS/Include/core_cm3.h **** 
1176:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Region Number Register Definitions */
1177:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1178:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1179:Drivers/CMSIS/Include/core_cm3.h **** 
1180:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Region Base Address Register Definitions */
1181:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1182:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1183:Drivers/CMSIS/Include/core_cm3.h **** 
1184:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
ARM GAS  /tmp/ccLN6HNI.s 			page 58


1185:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1186:Drivers/CMSIS/Include/core_cm3.h **** 
1187:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1188:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1189:Drivers/CMSIS/Include/core_cm3.h **** 
1190:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Region Attribute and Size Register Definitions */
1191:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1192:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1193:Drivers/CMSIS/Include/core_cm3.h **** 
1194:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1195:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1196:Drivers/CMSIS/Include/core_cm3.h **** 
1197:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1198:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1199:Drivers/CMSIS/Include/core_cm3.h **** 
1200:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1201:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1202:Drivers/CMSIS/Include/core_cm3.h **** 
1203:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1204:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1205:Drivers/CMSIS/Include/core_cm3.h **** 
1206:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1207:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1208:Drivers/CMSIS/Include/core_cm3.h **** 
1209:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1210:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1211:Drivers/CMSIS/Include/core_cm3.h **** 
1212:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1213:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1214:Drivers/CMSIS/Include/core_cm3.h **** 
1215:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1216:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1217:Drivers/CMSIS/Include/core_cm3.h **** 
1218:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1219:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1220:Drivers/CMSIS/Include/core_cm3.h **** 
1221:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_MPU */
1222:Drivers/CMSIS/Include/core_cm3.h **** #endif
1223:Drivers/CMSIS/Include/core_cm3.h **** 
1224:Drivers/CMSIS/Include/core_cm3.h **** 
1225:Drivers/CMSIS/Include/core_cm3.h **** /**
1226:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
1227:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1228:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Core Debug Registers
1229:Drivers/CMSIS/Include/core_cm3.h ****   @{
1230:Drivers/CMSIS/Include/core_cm3.h ****  */
1231:Drivers/CMSIS/Include/core_cm3.h **** 
1232:Drivers/CMSIS/Include/core_cm3.h **** /**
1233:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1234:Drivers/CMSIS/Include/core_cm3.h ****  */
1235:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
1236:Drivers/CMSIS/Include/core_cm3.h **** {
1237:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1238:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1239:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1240:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1241:Drivers/CMSIS/Include/core_cm3.h **** } CoreDebug_Type;
ARM GAS  /tmp/ccLN6HNI.s 			page 59


1242:Drivers/CMSIS/Include/core_cm3.h **** 
1243:Drivers/CMSIS/Include/core_cm3.h **** /* Debug Halting Control and Status Register Definitions */
1244:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1245:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1246:Drivers/CMSIS/Include/core_cm3.h **** 
1247:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1248:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1249:Drivers/CMSIS/Include/core_cm3.h **** 
1250:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1251:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1252:Drivers/CMSIS/Include/core_cm3.h **** 
1253:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1254:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1255:Drivers/CMSIS/Include/core_cm3.h **** 
1256:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1257:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1258:Drivers/CMSIS/Include/core_cm3.h **** 
1259:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1260:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1261:Drivers/CMSIS/Include/core_cm3.h **** 
1262:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1263:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1264:Drivers/CMSIS/Include/core_cm3.h **** 
1265:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1266:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1267:Drivers/CMSIS/Include/core_cm3.h **** 
1268:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1269:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1270:Drivers/CMSIS/Include/core_cm3.h **** 
1271:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1272:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1273:Drivers/CMSIS/Include/core_cm3.h **** 
1274:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1275:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1276:Drivers/CMSIS/Include/core_cm3.h **** 
1277:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1278:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1279:Drivers/CMSIS/Include/core_cm3.h **** 
1280:Drivers/CMSIS/Include/core_cm3.h **** /* Debug Core Register Selector Register Definitions */
1281:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1282:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1283:Drivers/CMSIS/Include/core_cm3.h **** 
1284:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1285:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1286:Drivers/CMSIS/Include/core_cm3.h **** 
1287:Drivers/CMSIS/Include/core_cm3.h **** /* Debug Exception and Monitor Control Register Definitions */
1288:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1289:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1290:Drivers/CMSIS/Include/core_cm3.h **** 
1291:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1292:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1293:Drivers/CMSIS/Include/core_cm3.h **** 
1294:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1295:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1296:Drivers/CMSIS/Include/core_cm3.h **** 
1297:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1298:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
ARM GAS  /tmp/ccLN6HNI.s 			page 60


1299:Drivers/CMSIS/Include/core_cm3.h **** 
1300:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1301:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1302:Drivers/CMSIS/Include/core_cm3.h **** 
1303:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1304:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1305:Drivers/CMSIS/Include/core_cm3.h **** 
1306:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1307:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1308:Drivers/CMSIS/Include/core_cm3.h **** 
1309:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1310:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1311:Drivers/CMSIS/Include/core_cm3.h **** 
1312:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1313:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1314:Drivers/CMSIS/Include/core_cm3.h **** 
1315:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1316:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1317:Drivers/CMSIS/Include/core_cm3.h **** 
1318:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1319:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1320:Drivers/CMSIS/Include/core_cm3.h **** 
1321:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1322:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1323:Drivers/CMSIS/Include/core_cm3.h **** 
1324:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1325:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1326:Drivers/CMSIS/Include/core_cm3.h **** 
1327:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1328:Drivers/CMSIS/Include/core_cm3.h **** 
1329:Drivers/CMSIS/Include/core_cm3.h **** 
1330:Drivers/CMSIS/Include/core_cm3.h **** /**
1331:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
1332:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1333:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1334:Drivers/CMSIS/Include/core_cm3.h ****   @{
1335:Drivers/CMSIS/Include/core_cm3.h ****  */
1336:Drivers/CMSIS/Include/core_cm3.h **** 
1337:Drivers/CMSIS/Include/core_cm3.h **** /**
1338:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1339:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] field  Name of the register bit field.
1340:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] value  Value of the bit field.
1341:Drivers/CMSIS/Include/core_cm3.h ****   \return           Masked and shifted value.
1342:Drivers/CMSIS/Include/core_cm3.h **** */
1343:Drivers/CMSIS/Include/core_cm3.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1344:Drivers/CMSIS/Include/core_cm3.h **** 
1345:Drivers/CMSIS/Include/core_cm3.h **** /**
1346:Drivers/CMSIS/Include/core_cm3.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1347:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] field  Name of the register bit field.
1348:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] value  Value of register.
1349:Drivers/CMSIS/Include/core_cm3.h ****   \return           Masked and shifted bit field value.
1350:Drivers/CMSIS/Include/core_cm3.h **** */
1351:Drivers/CMSIS/Include/core_cm3.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1352:Drivers/CMSIS/Include/core_cm3.h **** 
1353:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_core_bitfield */
1354:Drivers/CMSIS/Include/core_cm3.h **** 
1355:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccLN6HNI.s 			page 61


1356:Drivers/CMSIS/Include/core_cm3.h **** /**
1357:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
1358:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_core_base     Core Definitions
1359:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Definitions for base addresses, unions, and structures.
1360:Drivers/CMSIS/Include/core_cm3.h ****   @{
1361:Drivers/CMSIS/Include/core_cm3.h ****  */
1362:Drivers/CMSIS/Include/core_cm3.h **** 
1363:Drivers/CMSIS/Include/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1364:Drivers/CMSIS/Include/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1365:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1366:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1367:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1368:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1369:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1370:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1371:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1372:Drivers/CMSIS/Include/core_cm3.h **** 
1373:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1374:Drivers/CMSIS/Include/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1375:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1376:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1377:Drivers/CMSIS/Include/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1378:Drivers/CMSIS/Include/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1379:Drivers/CMSIS/Include/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1380:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1381:Drivers/CMSIS/Include/core_cm3.h **** 
1382:Drivers/CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1U)
1383:Drivers/CMSIS/Include/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1384:Drivers/CMSIS/Include/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1385:Drivers/CMSIS/Include/core_cm3.h **** #endif
1386:Drivers/CMSIS/Include/core_cm3.h **** 
1387:Drivers/CMSIS/Include/core_cm3.h **** /*@} */
1388:Drivers/CMSIS/Include/core_cm3.h **** 
1389:Drivers/CMSIS/Include/core_cm3.h **** 
1390:Drivers/CMSIS/Include/core_cm3.h **** 
1391:Drivers/CMSIS/Include/core_cm3.h **** /*******************************************************************************
1392:Drivers/CMSIS/Include/core_cm3.h ****  *                Hardware Abstraction Layer
1393:Drivers/CMSIS/Include/core_cm3.h ****   Core Function Interface contains:
1394:Drivers/CMSIS/Include/core_cm3.h ****   - Core NVIC Functions
1395:Drivers/CMSIS/Include/core_cm3.h ****   - Core SysTick Functions
1396:Drivers/CMSIS/Include/core_cm3.h ****   - Core Debug Functions
1397:Drivers/CMSIS/Include/core_cm3.h ****   - Core Register Access Functions
1398:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
1399:Drivers/CMSIS/Include/core_cm3.h **** /**
1400:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1401:Drivers/CMSIS/Include/core_cm3.h **** */
1402:Drivers/CMSIS/Include/core_cm3.h **** 
1403:Drivers/CMSIS/Include/core_cm3.h **** 
1404:Drivers/CMSIS/Include/core_cm3.h **** 
1405:Drivers/CMSIS/Include/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1406:Drivers/CMSIS/Include/core_cm3.h **** /**
1407:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1408:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1409:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1410:Drivers/CMSIS/Include/core_cm3.h ****   @{
1411:Drivers/CMSIS/Include/core_cm3.h ****  */
1412:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccLN6HNI.s 			page 62


1413:Drivers/CMSIS/Include/core_cm3.h **** /**
1414:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Set Priority Grouping
1415:Drivers/CMSIS/Include/core_cm3.h ****   \details Sets the priority grouping field using the required unlock sequence.
1416:Drivers/CMSIS/Include/core_cm3.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1417:Drivers/CMSIS/Include/core_cm3.h ****            Only values from 0..7 are used.
1418:Drivers/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1419:Drivers/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1420:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      PriorityGroup  Priority grouping field.
1421:Drivers/CMSIS/Include/core_cm3.h ****  */
1422:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1423:Drivers/CMSIS/Include/core_cm3.h **** {
1424:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t reg_value;
1425:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1426:Drivers/CMSIS/Include/core_cm3.h **** 
1427:Drivers/CMSIS/Include/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1428:Drivers/CMSIS/Include/core_cm3.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1429:Drivers/CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                   |
1430:Drivers/CMSIS/Include/core_cm3.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1431:Drivers/CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1432:Drivers/CMSIS/Include/core_cm3.h ****   SCB->AIRCR =  reg_value;
1433:Drivers/CMSIS/Include/core_cm3.h **** }
1434:Drivers/CMSIS/Include/core_cm3.h **** 
1435:Drivers/CMSIS/Include/core_cm3.h **** 
1436:Drivers/CMSIS/Include/core_cm3.h **** /**
1437:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Priority Grouping
1438:Drivers/CMSIS/Include/core_cm3.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1439:Drivers/CMSIS/Include/core_cm3.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1440:Drivers/CMSIS/Include/core_cm3.h ****  */
1441:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1442:Drivers/CMSIS/Include/core_cm3.h **** {
1443:Drivers/CMSIS/Include/core_cm3.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1444:Drivers/CMSIS/Include/core_cm3.h **** }
1445:Drivers/CMSIS/Include/core_cm3.h **** 
1446:Drivers/CMSIS/Include/core_cm3.h **** 
1447:Drivers/CMSIS/Include/core_cm3.h **** /**
1448:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Enable External Interrupt
1449:Drivers/CMSIS/Include/core_cm3.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1450:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1451:Drivers/CMSIS/Include/core_cm3.h ****  */
1452:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1453:Drivers/CMSIS/Include/core_cm3.h **** {
1454:Drivers/CMSIS/Include/core_cm3.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1455:Drivers/CMSIS/Include/core_cm3.h **** }
1456:Drivers/CMSIS/Include/core_cm3.h **** 
1457:Drivers/CMSIS/Include/core_cm3.h **** 
1458:Drivers/CMSIS/Include/core_cm3.h **** /**
1459:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Disable External Interrupt
1460:Drivers/CMSIS/Include/core_cm3.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1461:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1462:Drivers/CMSIS/Include/core_cm3.h ****  */
1463:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1464:Drivers/CMSIS/Include/core_cm3.h **** {
1465:Drivers/CMSIS/Include/core_cm3.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1466:Drivers/CMSIS/Include/core_cm3.h **** }
1467:Drivers/CMSIS/Include/core_cm3.h **** 
1468:Drivers/CMSIS/Include/core_cm3.h **** 
1469:Drivers/CMSIS/Include/core_cm3.h **** /**
ARM GAS  /tmp/ccLN6HNI.s 			page 63


1470:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Pending Interrupt
1471:Drivers/CMSIS/Include/core_cm3.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1472:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1473:Drivers/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt status is not pending.
1474:Drivers/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt status is pending.
1475:Drivers/CMSIS/Include/core_cm3.h ****  */
1476:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1477:Drivers/CMSIS/Include/core_cm3.h **** {
1478:Drivers/CMSIS/Include/core_cm3.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1479:Drivers/CMSIS/Include/core_cm3.h **** }
1480:Drivers/CMSIS/Include/core_cm3.h **** 
1481:Drivers/CMSIS/Include/core_cm3.h **** 
1482:Drivers/CMSIS/Include/core_cm3.h **** /**
1483:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Set Pending Interrupt
1484:Drivers/CMSIS/Include/core_cm3.h ****   \details Sets the pending bit of an external interrupt.
1485:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1486:Drivers/CMSIS/Include/core_cm3.h ****  */
1487:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1488:Drivers/CMSIS/Include/core_cm3.h **** {
1489:Drivers/CMSIS/Include/core_cm3.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1490:Drivers/CMSIS/Include/core_cm3.h **** }
1491:Drivers/CMSIS/Include/core_cm3.h **** 
1492:Drivers/CMSIS/Include/core_cm3.h **** 
1493:Drivers/CMSIS/Include/core_cm3.h **** /**
1494:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Clear Pending Interrupt
1495:Drivers/CMSIS/Include/core_cm3.h ****   \details Clears the pending bit of an external interrupt.
1496:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1497:Drivers/CMSIS/Include/core_cm3.h ****  */
1498:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1499:Drivers/CMSIS/Include/core_cm3.h **** {
1500:Drivers/CMSIS/Include/core_cm3.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1501:Drivers/CMSIS/Include/core_cm3.h **** }
1502:Drivers/CMSIS/Include/core_cm3.h **** 
1503:Drivers/CMSIS/Include/core_cm3.h **** 
1504:Drivers/CMSIS/Include/core_cm3.h **** /**
1505:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Active Interrupt
1506:Drivers/CMSIS/Include/core_cm3.h ****   \details Reads the active register in NVIC and returns the active bit.
1507:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1508:Drivers/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt status is not active.
1509:Drivers/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt status is active.
1510:Drivers/CMSIS/Include/core_cm3.h ****  */
1511:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1512:Drivers/CMSIS/Include/core_cm3.h **** {
1513:Drivers/CMSIS/Include/core_cm3.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1514:Drivers/CMSIS/Include/core_cm3.h **** }
1515:Drivers/CMSIS/Include/core_cm3.h **** 
1516:Drivers/CMSIS/Include/core_cm3.h **** 
1517:Drivers/CMSIS/Include/core_cm3.h **** /**
1518:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Set Interrupt Priority
1519:Drivers/CMSIS/Include/core_cm3.h ****   \details Sets the priority of an interrupt.
1520:Drivers/CMSIS/Include/core_cm3.h ****   \note    The priority cannot be set for every core interrupt.
1521:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1522:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]  priority  Priority to set.
1523:Drivers/CMSIS/Include/core_cm3.h ****  */
1524:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1525:Drivers/CMSIS/Include/core_cm3.h **** {
1526:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) < 0)
ARM GAS  /tmp/ccLN6HNI.s 			page 64


1527:Drivers/CMSIS/Include/core_cm3.h ****   {
1528:Drivers/CMSIS/Include/core_cm3.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1529:Drivers/CMSIS/Include/core_cm3.h ****   }
1530:Drivers/CMSIS/Include/core_cm3.h ****   else
1531:Drivers/CMSIS/Include/core_cm3.h ****   {
1532:Drivers/CMSIS/Include/core_cm3.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1533:Drivers/CMSIS/Include/core_cm3.h ****   }
1534:Drivers/CMSIS/Include/core_cm3.h **** }
1535:Drivers/CMSIS/Include/core_cm3.h **** 
1536:Drivers/CMSIS/Include/core_cm3.h **** 
1537:Drivers/CMSIS/Include/core_cm3.h **** /**
1538:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Interrupt Priority
1539:Drivers/CMSIS/Include/core_cm3.h ****   \details Reads the priority of an interrupt.
1540:Drivers/CMSIS/Include/core_cm3.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
1541:Drivers/CMSIS/Include/core_cm3.h ****            or negative to specify an internal (core) interrupt.
1542:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]   IRQn  Interrupt number.
1543:Drivers/CMSIS/Include/core_cm3.h ****   \return             Interrupt Priority.
1544:Drivers/CMSIS/Include/core_cm3.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1545:Drivers/CMSIS/Include/core_cm3.h ****  */
1546:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1547:Drivers/CMSIS/Include/core_cm3.h **** {
1548:Drivers/CMSIS/Include/core_cm3.h **** 
1549:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) < 0)
1550:Drivers/CMSIS/Include/core_cm3.h ****   {
1551:Drivers/CMSIS/Include/core_cm3.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS))
1552:Drivers/CMSIS/Include/core_cm3.h ****   }
1553:Drivers/CMSIS/Include/core_cm3.h ****   else
1554:Drivers/CMSIS/Include/core_cm3.h ****   {
1555:Drivers/CMSIS/Include/core_cm3.h ****     return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS))
1556:Drivers/CMSIS/Include/core_cm3.h ****   }
1557:Drivers/CMSIS/Include/core_cm3.h **** }
1558:Drivers/CMSIS/Include/core_cm3.h **** 
1559:Drivers/CMSIS/Include/core_cm3.h **** 
1560:Drivers/CMSIS/Include/core_cm3.h **** /**
1561:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Encode Priority
1562:Drivers/CMSIS/Include/core_cm3.h ****   \details Encodes the priority for an interrupt with the given priority group,
1563:Drivers/CMSIS/Include/core_cm3.h ****            preemptive priority value, and subpriority value.
1564:Drivers/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1565:Drivers/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1566:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1567:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1568:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1569:Drivers/CMSIS/Include/core_cm3.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1570:Drivers/CMSIS/Include/core_cm3.h ****  */
1571:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1572:Drivers/CMSIS/Include/core_cm3.h **** {
1573:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1574:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t PreemptPriorityBits;
1575:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t SubPriorityBits;
1576:Drivers/CMSIS/Include/core_cm3.h **** 
1577:Drivers/CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1578:Drivers/CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1579:Drivers/CMSIS/Include/core_cm3.h **** 
1580:Drivers/CMSIS/Include/core_cm3.h ****   return (
1581:Drivers/CMSIS/Include/core_cm3.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1582:Drivers/CMSIS/Include/core_cm3.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1583:Drivers/CMSIS/Include/core_cm3.h ****          );
ARM GAS  /tmp/ccLN6HNI.s 			page 65


1584:Drivers/CMSIS/Include/core_cm3.h **** }
1585:Drivers/CMSIS/Include/core_cm3.h **** 
1586:Drivers/CMSIS/Include/core_cm3.h **** 
1587:Drivers/CMSIS/Include/core_cm3.h **** /**
1588:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Decode Priority
1589:Drivers/CMSIS/Include/core_cm3.h ****   \details Decodes an interrupt priority value with a given priority group to
1590:Drivers/CMSIS/Include/core_cm3.h ****            preemptive priority value and subpriority value.
1591:Drivers/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1592:Drivers/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1593:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1594:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1595:Drivers/CMSIS/Include/core_cm3.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1596:Drivers/CMSIS/Include/core_cm3.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1597:Drivers/CMSIS/Include/core_cm3.h ****  */
1598:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1599:Drivers/CMSIS/Include/core_cm3.h **** {
1600:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1601:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t PreemptPriorityBits;
1602:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t SubPriorityBits;
1603:Drivers/CMSIS/Include/core_cm3.h **** 
1604:Drivers/CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1605:Drivers/CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1606:Drivers/CMSIS/Include/core_cm3.h **** 
1607:Drivers/CMSIS/Include/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1608:Drivers/CMSIS/Include/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1609:Drivers/CMSIS/Include/core_cm3.h **** }
1610:Drivers/CMSIS/Include/core_cm3.h **** 
1611:Drivers/CMSIS/Include/core_cm3.h **** 
1612:Drivers/CMSIS/Include/core_cm3.h **** /**
1613:Drivers/CMSIS/Include/core_cm3.h ****   \brief   System Reset
1614:Drivers/CMSIS/Include/core_cm3.h ****   \details Initiates a system reset request to reset the MCU.
1615:Drivers/CMSIS/Include/core_cm3.h ****  */
1616:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SystemReset(void)
1617:Drivers/CMSIS/Include/core_cm3.h **** {
1618:Drivers/CMSIS/Include/core_cm3.h ****   __DSB();                                                          /* Ensure all outstanding memor
1619:Drivers/CMSIS/Include/core_cm3.h ****                                                                        buffered write are completed
1620:Drivers/CMSIS/Include/core_cm3.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1621:Drivers/CMSIS/Include/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1622:Drivers/CMSIS/Include/core_cm3.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1623:Drivers/CMSIS/Include/core_cm3.h ****   __DSB();                                                          /* Ensure completion of memory 
1624:Drivers/CMSIS/Include/core_cm3.h **** 
1625:Drivers/CMSIS/Include/core_cm3.h ****   for(;;)                                                           /* wait until reset */
1626:Drivers/CMSIS/Include/core_cm3.h ****   {
1627:Drivers/CMSIS/Include/core_cm3.h ****     __NOP();
1628:Drivers/CMSIS/Include/core_cm3.h ****   }
1629:Drivers/CMSIS/Include/core_cm3.h **** }
1630:Drivers/CMSIS/Include/core_cm3.h **** 
1631:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of CMSIS_Core_NVICFunctions */
1632:Drivers/CMSIS/Include/core_cm3.h **** 
1633:Drivers/CMSIS/Include/core_cm3.h **** 
1634:Drivers/CMSIS/Include/core_cm3.h **** 
1635:Drivers/CMSIS/Include/core_cm3.h **** /* ##################################    SysTick function  ########################################
1636:Drivers/CMSIS/Include/core_cm3.h **** /**
1637:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1638:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1639:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Functions that configure the System.
1640:Drivers/CMSIS/Include/core_cm3.h ****   @{
ARM GAS  /tmp/ccLN6HNI.s 			page 66


1641:Drivers/CMSIS/Include/core_cm3.h ****  */
1642:Drivers/CMSIS/Include/core_cm3.h **** 
1643:Drivers/CMSIS/Include/core_cm3.h **** #if (__Vendor_SysTickConfig == 0U)
1644:Drivers/CMSIS/Include/core_cm3.h **** 
1645:Drivers/CMSIS/Include/core_cm3.h **** /**
1646:Drivers/CMSIS/Include/core_cm3.h ****   \brief   System Tick Configuration
1647:Drivers/CMSIS/Include/core_cm3.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1648:Drivers/CMSIS/Include/core_cm3.h ****            Counter is in free running mode to generate periodic interrupts.
1649:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]  ticks  Number of ticks between two interrupts.
1650:Drivers/CMSIS/Include/core_cm3.h ****   \return          0  Function succeeded.
1651:Drivers/CMSIS/Include/core_cm3.h ****   \return          1  Function failed.
1652:Drivers/CMSIS/Include/core_cm3.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1653:Drivers/CMSIS/Include/core_cm3.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
1654:Drivers/CMSIS/Include/core_cm3.h ****            must contain a vendor-specific implementation of this function.
1655:Drivers/CMSIS/Include/core_cm3.h ****  */
1656:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
1657:Drivers/CMSIS/Include/core_cm3.h **** {
1658:Drivers/CMSIS/Include/core_cm3.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 1138              		.loc 2 1658 0
 1139 002c 013B     		subs	r3, r3, #1
 1140              	.LVL50:
 1141 002e B3F1807F 		cmp	r3, #16777216
 1142 0032 09D2     		bcs	.L81
1659:Drivers/CMSIS/Include/core_cm3.h ****   {
1660:Drivers/CMSIS/Include/core_cm3.h ****     return (1UL);                                                   /* Reload value impossible */
1661:Drivers/CMSIS/Include/core_cm3.h ****   }
1662:Drivers/CMSIS/Include/core_cm3.h **** 
1663:Drivers/CMSIS/Include/core_cm3.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 1143              		.loc 2 1663 0
 1144 0034 5C4A     		ldr	r2, .L99+20
 1145 0036 5360     		str	r3, [r2, #4]
 1146              	.LVL51:
 1147              	.LBB15:
 1148              	.LBB16:
1528:Drivers/CMSIS/Include/core_cm3.h ****   }
 1149              		.loc 2 1528 0
 1150 0038 F021     		movs	r1, #240
 1151 003a 5C4B     		ldr	r3, .L99+24
 1152              	.LVL52:
 1153 003c 83F82310 		strb	r1, [r3, #35]
 1154              	.LVL53:
 1155              	.LBE16:
 1156              	.LBE15:
1664:Drivers/CMSIS/Include/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
1665:Drivers/CMSIS/Include/core_cm3.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 1157              		.loc 2 1665 0
 1158 0040 0023     		movs	r3, #0
 1159 0042 9360     		str	r3, [r2, #8]
1666:Drivers/CMSIS/Include/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 1160              		.loc 2 1666 0
 1161 0044 0723     		movs	r3, #7
 1162 0046 1360     		str	r3, [r2]
 1163              	.L81:
 1164              	.LBE14:
 1165              	.LBE13:
 217:Src/main.c    **** 
 1166              		.loc 1 217 0
ARM GAS  /tmp/ccLN6HNI.s 			page 67


 1167 0048 FFF7FEFF 		bl	SystemClock_Config
 1168              	.LVL54:
 224:Src/main.c    ****   MX_SPI1_Init();
 1169              		.loc 1 224 0
 1170 004c FFF7FEFF 		bl	MX_GPIO_Init
 1171              	.LVL55:
 225:Src/main.c    ****   MX_ADC1_Init();
 1172              		.loc 1 225 0
 1173 0050 FFF7FEFF 		bl	MX_SPI1_Init
 1174              	.LVL56:
 226:Src/main.c    ****   MX_CAN_Init();
 1175              		.loc 1 226 0
 1176 0054 FFF7FEFF 		bl	MX_ADC1_Init
 1177              	.LVL57:
 227:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1178              		.loc 1 227 0
 1179 0058 FFF7FEFF 		bl	MX_CAN_Init
 1180              	.LVL58:
 1181 005c 77E0     		b	.L82
 1182              	.L95:
 240:Src/main.c    **** 
 1183              		.loc 1 240 0
 1184 005e 0220     		movs	r0, #2
 1185 0060 FFF7FEFF 		bl	car_state_machine
 1186              	.LVL59:
 243:Src/main.c    ****       car_state_machine(ENABLE_FLIPPED);
 1187              		.loc 1 243 0
 1188 0064 4FF40041 		mov	r1, #32768
 1189 0068 5148     		ldr	r0, .L99+28
 1190 006a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1191              	.LVL60:
 1192 006e 78BB     		cbnz	r0, .L84
 244:Src/main.c    ****       //ADC for Brake pressure
 1193              		.loc 1 244 0
 1194 0070 0420     		movs	r0, #4
 1195 0072 FFF7FEFF 		bl	car_state_machine
 1196              	.LVL61:
 246:Src/main.c    ****       //SEE IF BRAKE IS PRESSED 
 1197              		.loc 1 246 0
 1198 0076 0220     		movs	r0, #2
 1199 0078 FFF7FEFF 		bl	updateADC
 1200              	.LVL62:
 1201 007c 4D4B     		ldr	r3, .L99+32
 1202 007e 1880     		strh	r0, [r3]	@ movhi
 248:Src/main.c    ****       //set 3 second timer
 1203              		.loc 1 248 0
 1204 0080 40F6C313 		movw	r3, #2499
 1205 0084 9842     		cmp	r0, r3
 1206 0086 03D9     		bls	.L85
 250:Src/main.c    ****         RTDS_Timer = 2500; //change to 3000 for 3 seconds
 1207              		.loc 1 250 0
 1208 0088 4B4B     		ldr	r3, .L99+36
 1209 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1210 008c 042B     		cmp	r3, #4
 1211 008e 11D0     		beq	.L93
 1212              	.L85:
 260:Src/main.c    ****           HAL_GPIO_WritePin(GPIOB, RTDS_EN_Pin, GPIO_PIN_RESET);
ARM GAS  /tmp/ccLN6HNI.s 			page 68


 1213              		.loc 1 260 0
 1214 0090 414B     		ldr	r3, .L99+4
 1215 0092 1B68     		ldr	r3, [r3]
 1216 0094 002B     		cmp	r3, #0
 1217 0096 60D1     		bne	.L83
 260:Src/main.c    ****           HAL_GPIO_WritePin(GPIOB, RTDS_EN_Pin, GPIO_PIN_RESET);
 1218              		.loc 1 260 0 is_stmt 0 discriminator 1
 1219 0098 474B     		ldr	r3, .L99+36
 1220 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1221 009c 13F0380F 		tst	r3, #56
 1222 00a0 5BD0     		beq	.L83
 261:Src/main.c    ****           //SeT pwr
 1223              		.loc 1 261 0 is_stmt 1
 1224 00a2 0022     		movs	r2, #0
 1225 00a4 0821     		movs	r1, #8
 1226 00a6 4248     		ldr	r0, .L99+28
 1227 00a8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1228              	.LVL63:
 263:Src/main.c    ****            }// rtds buzzer stop
 1229              		.loc 1 263 0
 1230 00ac 1020     		movs	r0, #16
 1231 00ae FFF7FEFF 		bl	car_state_machine
 1232              	.LVL64:
 1233 00b2 52E0     		b	.L83
 1234              	.L93:
 251:Src/main.c    ****         car_state_machine(RTDS_SOUND);
 1235              		.loc 1 251 0
 1236 00b4 40F6C412 		movw	r2, #2500
 1237 00b8 374B     		ldr	r3, .L99+4
 1238 00ba 1A60     		str	r2, [r3]
 252:Src/main.c    ****           
 1239              		.loc 1 252 0
 1240 00bc 0820     		movs	r0, #8
 1241 00be FFF7FEFF 		bl	car_state_machine
 1242              	.LVL65:
 254:Src/main.c    ****         } 
 1243              		.loc 1 254 0
 1244 00c2 0122     		movs	r2, #1
 1245 00c4 4FF49C71 		mov	r1, #312
 1246 00c8 3948     		ldr	r0, .L99+28
 1247 00ca FFF7FEFF 		bl	HAL_GPIO_WritePin
 1248              	.LVL66:
 1249 00ce DFE7     		b	.L85
 1250              	.L84:
 266:Src/main.c    ****     { //IF WE HAVE DE ENABLED LA COCHE
 1251              		.loc 1 266 0
 1252 00d0 4FF40041 		mov	r1, #32768
 1253 00d4 3648     		ldr	r0, .L99+28
 1254 00d6 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1255              	.LVL67:
 1256 00da 0128     		cmp	r0, #1
 1257 00dc 3DD1     		bne	.L83
 268:Src/main.c    ****       HAL_Delay(500);//THIS IS PUT HERE TO AVOID BOUNCING WHEN ITS REMOVED
 1258              		.loc 1 268 0
 1259 00de 0222     		movs	r2, #2
 1260 00e0 354B     		ldr	r3, .L99+36
 1261 00e2 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccLN6HNI.s 			page 69


 269:Src/main.c    ****     }
 1262              		.loc 1 269 0
 1263 00e4 4FF4FA70 		mov	r0, #500
 1264 00e8 FFF7FEFF 		bl	HAL_Delay
 1265              	.LVL68:
 1266 00ec 35E0     		b	.L83
 1267              	.L96:
 273:Src/main.c    ****     
 1268              		.loc 1 273 0
 1269 00ee 0022     		movs	r2, #0
 1270 00f0 0821     		movs	r1, #8
 1271 00f2 2F48     		ldr	r0, .L99+28
 1272 00f4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1273              	.LVL69:
 1274 00f8 33E0     		b	.L86
 1275              	.L97:
 277:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB,BTSF_EN_Pin | APPS_EN_Pin,GPIO_PIN_RESET);
 1276              		.loc 1 277 0
 1277 00fa FFF7FEFF 		bl	checkBTSF
 1278              	.LVL70:
 1279 00fe 68B9     		cbnz	r0, .L94
 281:Src/main.c    ****         TxCar_state_data[0] = PWR_AVAILABLE;
 1280              		.loc 1 281 0
 1281 0100 2D4B     		ldr	r3, .L99+36
 1282 0102 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1283 0104 202B     		cmp	r3, #32
 1284 0106 30D1     		bne	.L87
 282:Src/main.c    ****         HAL_GPIO_WritePin(GPIOB, BTSF_EN_Pin|APPS_EN_Pin ,GPIO_PIN_SET);
 1285              		.loc 1 282 0
 1286 0108 1022     		movs	r2, #16
 1287 010a 2B4B     		ldr	r3, .L99+36
 1288 010c 1A70     		strb	r2, [r3]
 283:Src/main.c    ****     }
 1289              		.loc 1 283 0
 1290 010e 0122     		movs	r2, #1
 1291 0110 4FF48871 		mov	r1, #272
 1292 0114 2648     		ldr	r0, .L99+28
 1293 0116 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1294              	.LVL71:
 1295 011a 26E0     		b	.L87
 1296              	.L94:
 278:Src/main.c    ****       TxCar_state_data[0] = SOFT_FAULT;
 1297              		.loc 1 278 0
 1298 011c 0022     		movs	r2, #0
 1299 011e 4FF48871 		mov	r1, #272
 1300 0122 2348     		ldr	r0, .L99+28
 1301 0124 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1302              	.LVL72:
 279:Src/main.c    ****     }
 1303              		.loc 1 279 0
 1304 0128 2022     		movs	r2, #32
 1305 012a 234B     		ldr	r3, .L99+36
 1306 012c 1A70     		strb	r2, [r3]
 1307 012e 1CE0     		b	.L87
 1308              	.L98:
 289:Src/main.c    ****     sendCar_state();
 1309              		.loc 1 289 0
ARM GAS  /tmp/ccLN6HNI.s 			page 70


 1310 0130 FFF7FEFF 		bl	sendFaultMsg
 1311              	.LVL73:
 290:Src/main.c    ****     CAN_Timer = 1000;
 1312              		.loc 1 290 0
 1313 0134 FFF7FEFF 		bl	sendCar_state
 1314              	.LVL74:
 291:Src/main.c    ****     //HAL_GPIO_WritePin(BRAKE_LIGHT_EN_GPIO_Port, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
 1315              		.loc 1 291 0
 1316 0138 4FF47A72 		mov	r2, #1000
 1317 013c 174B     		ldr	r3, .L99+8
 1318 013e 1A60     		str	r2, [r3]
 1319 0140 19E0     		b	.L89
 1320              	.L90:
 302:Src/main.c    **** 
 1321              		.loc 1 302 0
 1322 0142 0022     		movs	r2, #0
 1323 0144 4FF40051 		mov	r1, #8192
 1324 0148 1948     		ldr	r0, .L99+28
 1325 014a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1326              	.LVL75:
 1327              	.L82:
 239:Src/main.c    ****     car_state_machine(PRECHARGED);
 1328              		.loc 1 239 0
 1329 014e 4021     		movs	r1, #64
 1330 0150 1748     		ldr	r0, .L99+28
 1331 0152 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1332              	.LVL76:
 1333 0156 0028     		cmp	r0, #0
 1334 0158 81D0     		beq	.L95
 1335              	.L83:
 272:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, RTDS_EN_Pin, GPIO_PIN_RESET);
 1336              		.loc 1 272 0
 1337 015a 0F4B     		ldr	r3, .L99+4
 1338 015c 1B68     		ldr	r3, [r3]
 1339 015e 002B     		cmp	r3, #0
 1340 0160 C5D0     		beq	.L96
 1341              	.L86:
 276:Src/main.c    ****     if (checkBTSF()){
 1342              		.loc 1 276 0
 1343 0162 154B     		ldr	r3, .L99+36
 1344 0164 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1345 0166 072B     		cmp	r3, #7
 1346 0168 C7D8     		bhi	.L97
 1347              	.L87:
 287:Src/main.c    ****   if (CAN_Timer == 0){ //sending routine message every 1 second
 1348              		.loc 1 287 0
 1349 016a FFF7FEFF 		bl	readFaults
 1350              	.LVL77:
 288:Src/main.c    ****     sendFaultMsg();
 1351              		.loc 1 288 0
 1352 016e 0B4B     		ldr	r3, .L99+8
 1353 0170 1B68     		ldr	r3, [r3]
 1354 0172 002B     		cmp	r3, #0
 1355 0174 DCD0     		beq	.L98
 1356              	.L89:
 297:Src/main.c    ****   if(brakePressure_2 > brakeThreshold){
 1357              		.loc 1 297 0
ARM GAS  /tmp/ccLN6HNI.s 			page 71


 1358 0176 0220     		movs	r0, #2
 1359 0178 FFF7FEFF 		bl	updateADC
 1360              	.LVL78:
 1361 017c 0D4B     		ldr	r3, .L99+32
 1362 017e 1880     		strh	r0, [r3]	@ movhi
 298:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, BRAKE_LIGHT_EN_Pin, GPIO_PIN_SET);
 1363              		.loc 1 298 0
 1364 0180 B0F5FA6F 		cmp	r0, #2000
 1365 0184 DDD9     		bls	.L90
 299:Src/main.c    ****   }
 1366              		.loc 1 299 0
 1367 0186 0122     		movs	r2, #1
 1368 0188 4FF40051 		mov	r1, #8192
 1369 018c 0848     		ldr	r0, .L99+28
 1370 018e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1371              	.LVL79:
 1372 0192 DCE7     		b	.L82
 1373              	.L100:
 1374              		.align	2
 1375              	.L99:
 1376 0194 00000000 		.word	millisTimer
 1377 0198 00000000 		.word	RTDS_Timer
 1378 019c 00000000 		.word	CAN_Timer
 1379 01a0 00000000 		.word	SystemCoreClock
 1380 01a4 D34D6210 		.word	274877907
 1381 01a8 10E000E0 		.word	-536813552
 1382 01ac 00ED00E0 		.word	-536810240
 1383 01b0 000C0140 		.word	1073810432
 1384 01b4 00000000 		.word	brakePressure_2
 1385 01b8 00000000 		.word	.LANCHOR3
 1386              		.cfi_endproc
 1387              	.LFE64:
 1389              		.section	.text.Error_Handler,"ax",%progbits
 1390              		.align	1
 1391              		.global	Error_Handler
 1392              		.syntax unified
 1393              		.thumb
 1394              		.thumb_func
 1395              		.fpu softvfp
 1397              	Error_Handler:
 1398              	.LFB78:
 789:Src/main.c    **** 
 790:Src/main.c    **** /* USER CODE BEGIN 4 */
 791:Src/main.c    **** 
 792:Src/main.c    **** 
 793:Src/main.c    **** /* USER CODE END 4 */
 794:Src/main.c    **** 
 795:Src/main.c    **** /**
 796:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 797:Src/main.c    ****   * @retval None
 798:Src/main.c    ****   */
 799:Src/main.c    **** void Error_Handler(void)
 800:Src/main.c    **** {
 1399              		.loc 1 800 0
 1400              		.cfi_startproc
 1401              		@ args = 0, pretend = 0, frame = 0
 1402              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccLN6HNI.s 			page 72


 1403              		@ link register save eliminated.
 1404 0000 7047     		bx	lr
 1405              		.cfi_endproc
 1406              	.LFE78:
 1408              		.global	sConfig
 1409              		.comm	TxFaultsMailbox,4,4
 1410              		.comm	apps,1,1
 1411              		.comm	bspd,1,1
 1412              		.comm	imd,1,1
 1413              		.comm	bms,1,1
 1414              		.global	TxFault_data
 1415              		.comm	TxFaults,24,4
 1416              		.comm	TxCar_stateMailbox,4,4
 1417              		.global	TxCar_state_data
 1418              		.comm	TxCar_state,24,4
 1419              		.global	BTSF_ACTIVE
 1420              		.global	hardFaultFlag
 1421              		.global	Prev_State
 1422              		.global	max_throttle
 1423              		.comm	throttle_B,2,2
 1424              		.comm	throttle_A,2,2
 1425              		.comm	brakePressure_2,2,2
 1426              		.comm	brakePressure_1,2,2
 1427              		.comm	steeringPos,2,2
 1428              		.comm	brakePos,2,2
 1429              		.comm	hspi1,88,4
 1430              		.comm	hcan,40,4
 1431              		.comm	hadc1,48,4
 1432              		.global	throttle_B_max
 1433              		.global	throttle_B_min
 1434              		.global	throttle_A_max
 1435              		.global	throttle_A_min
 1436              		.global	APPS_difference
 1437              		.global	RTD_Threshold
 1438              		.global	brakeThreshold
 1439              		.global	ThrottleA_25
 1440              		.global	ThrottleA_5
 1441              		.comm	CAN_Timer,4,4
 1442              		.comm	RTDS_Timer,4,4
 1443              		.comm	millisTimer,4,4
 1444              		.section	.bss.BTSF_ACTIVE,"aw",%nobits
 1445              		.set	.LANCHOR1,. + 0
 1448              	BTSF_ACTIVE:
 1449 0000 00       		.space	1
 1450              		.section	.bss.Prev_State,"aw",%nobits
 1453              	Prev_State:
 1454 0000 00       		.space	1
 1455              		.section	.bss.hardFaultFlag,"aw",%nobits
 1456              		.align	2
 1459              	hardFaultFlag:
 1460 0000 00000000 		.space	4
 1461              		.section	.bss.sConfig,"aw",%nobits
 1462              		.align	2
 1463              		.set	.LANCHOR0,. + 0
 1466              	sConfig:
 1467 0000 00000000 		.space	12
 1467      00000000 
ARM GAS  /tmp/ccLN6HNI.s 			page 73


 1467      00000000 
 1468              		.section	.data.TxCar_state_data,"aw",%progbits
 1469              		.align	2
 1470              		.set	.LANCHOR3,. + 0
 1473              	TxCar_state_data:
 1474 0000 00       		.byte	0
 1475 0001 45       		.byte	69
 1476 0002 45       		.byte	69
 1477 0003 86       		.byte	-122
 1478 0004 56       		.byte	86
 1479 0005 97       		.byte	-105
 1480 0006 67       		.byte	103
 1481 0007 98       		.byte	-104
 1482              		.section	.data.TxFault_data,"aw",%progbits
 1483              		.align	2
 1484              		.set	.LANCHOR2,. + 0
 1487              	TxFault_data:
 1488 0000 55       		.byte	85
 1489 0001 55       		.byte	85
 1490 0002 55       		.byte	85
 1491 0003 55       		.byte	85
 1492 0004 55       		.byte	85
 1493 0005 55       		.byte	85
 1494 0006 55       		.byte	85
 1495 0007 55       		.byte	85
 1496              		.section	.data.max_throttle,"aw",%progbits
 1497              		.align	1
 1500              	max_throttle:
 1501 0000 0A00     		.short	10
 1502              		.section	.rodata.APPS_difference,"a",%progbits
 1503              		.align	2
 1506              	APPS_difference:
 1507 0000 58020000 		.word	600
 1508              		.section	.rodata.RTD_Threshold,"a",%progbits
 1509              		.align	1
 1512              	RTD_Threshold:
 1513 0000 C409     		.short	2500
 1514              		.section	.rodata.ThrottleA_25,"a",%progbits
 1515              		.align	1
 1518              	ThrottleA_25:
 1519 0000 B303     		.short	947
 1520              		.section	.rodata.ThrottleA_5,"a",%progbits
 1521              		.align	1
 1524              	ThrottleA_5:
 1525 0000 4802     		.short	584
 1526              		.section	.rodata.brakeThreshold,"a",%progbits
 1527              		.align	1
 1530              	brakeThreshold:
 1531 0000 D007     		.short	2000
 1532              		.section	.rodata.throttle_A_max,"a",%progbits
 1533              		.align	2
 1536              	throttle_A_max:
 1537 0000 0C090000 		.word	2316
 1538              		.section	.rodata.throttle_A_min,"a",%progbits
 1539              		.align	2
 1542              	throttle_A_min:
 1543 0000 EB010000 		.word	491
ARM GAS  /tmp/ccLN6HNI.s 			page 74


 1544              		.section	.rodata.throttle_B_max,"a",%progbits
 1545              		.align	2
 1548              	throttle_B_max:
 1549 0000 DA070000 		.word	2010
 1550              		.section	.rodata.throttle_B_min,"a",%progbits
 1551              		.align	2
 1554              	throttle_B_min:
 1555 0000 F6000000 		.word	246
 1556              		.text
 1557              	.Letext0:
 1558              		.file 3 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1559              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 1560              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 1561              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1562              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1563              		.file 8 "/usr/include/newlib/sys/lock.h"
 1564              		.file 9 "/usr/include/newlib/sys/_types.h"
 1565              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1566              		.file 11 "/usr/include/newlib/sys/reent.h"
 1567              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1568              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1569              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1570              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1571              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1572              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1573              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1574              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 1575              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1576              		.file 21 "Inc/main.h"
 1577              		.file 22 "/usr/include/newlib/stdlib.h"
ARM GAS  /tmp/ccLN6HNI.s 			page 75


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccLN6HNI.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccLN6HNI.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccLN6HNI.s:187    .text.MX_GPIO_Init:00000000000000f0 $d
     /tmp/ccLN6HNI.s:197    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccLN6HNI.s:203    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccLN6HNI.s:251    .text.MX_SPI1_Init:0000000000000030 $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccLN6HNI.s:257    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccLN6HNI.s:263    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccLN6HNI.s:394    .text.MX_ADC1_Init:00000000000000b0 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccLN6HNI.s:401    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccLN6HNI.s:407    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccLN6HNI.s:492    .text.MX_CAN_Init:000000000000005c $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 TxFaults
                            *COM*:0000000000000018 TxCar_state
     /tmp/ccLN6HNI.s:500    .text.updateADC:0000000000000000 $t
     /tmp/ccLN6HNI.s:507    .text.updateADC:0000000000000000 updateADC
     /tmp/ccLN6HNI.s:609    .text.updateADC:0000000000000074 $d
     /tmp/ccLN6HNI.s:615    .text.checkBTSF:0000000000000000 $t
     /tmp/ccLN6HNI.s:622    .text.checkBTSF:0000000000000000 checkBTSF
     /tmp/ccLN6HNI.s:683    .text.checkBTSF:0000000000000048 $d
                            *COM*:0000000000000002 brakePressure_2
                            *COM*:0000000000000002 throttle_A
     /tmp/ccLN6HNI.s:690    .text.APPS_Diff:0000000000000000 $t
     /tmp/ccLN6HNI.s:697    .text.APPS_Diff:0000000000000000 APPS_Diff
     /tmp/ccLN6HNI.s:726    .text.APPS_Diff:0000000000000020 $d
                            *COM*:0000000000000002 throttle_B
     /tmp/ccLN6HNI.s:732    .text.checkAPPS:0000000000000000 $t
     /tmp/ccLN6HNI.s:739    .text.checkAPPS:0000000000000000 checkAPPS
     /tmp/ccLN6HNI.s:786    .text.checkAPPS:0000000000000030 $d
                            *COM*:0000000000000004 millisTimer
     /tmp/ccLN6HNI.s:793    .text.sendFaultMsg:0000000000000000 $t
     /tmp/ccLN6HNI.s:800    .text.sendFaultMsg:0000000000000000 sendFaultMsg
     /tmp/ccLN6HNI.s:838    .text.sendFaultMsg:0000000000000028 $d
                            *COM*:0000000000000001 bms
                            *COM*:0000000000000001 imd
                            *COM*:0000000000000001 bspd
                            *COM*:0000000000000001 apps
                            *COM*:0000000000000004 TxFaultsMailbox
     /tmp/ccLN6HNI.s:850    .text.sendCar_state:0000000000000000 $t
     /tmp/ccLN6HNI.s:857    .text.sendCar_state:0000000000000000 sendCar_state
     /tmp/ccLN6HNI.s:879    .text.sendCar_state:0000000000000010 $d
                            *COM*:0000000000000004 TxCar_stateMailbox
     /tmp/ccLN6HNI.s:887    .text.car_state_machine:0000000000000000 $t
     /tmp/ccLN6HNI.s:894    .text.car_state_machine:0000000000000000 car_state_machine
     /tmp/ccLN6HNI.s:915    .text.car_state_machine:0000000000000010 $d
     /tmp/ccLN6HNI.s:920    .text.readFaults:0000000000000000 $t
     /tmp/ccLN6HNI.s:927    .text.readFaults:0000000000000000 readFaults
     /tmp/ccLN6HNI.s:995    .text.readFaults:0000000000000058 $d
     /tmp/ccLN6HNI.s:1004   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccLN6HNI.s:1011   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccLN6HNI.s:1091   .text.main:0000000000000000 $t
     /tmp/ccLN6HNI.s:1098   .text.main:0000000000000000 main
ARM GAS  /tmp/ccLN6HNI.s 			page 76


     /tmp/ccLN6HNI.s:1376   .text.main:0000000000000194 $d
                            *COM*:0000000000000004 RTDS_Timer
                            *COM*:0000000000000004 CAN_Timer
     /tmp/ccLN6HNI.s:1390   .text.Error_Handler:0000000000000000 $t
     /tmp/ccLN6HNI.s:1397   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccLN6HNI.s:1466   .bss.sConfig:0000000000000000 sConfig
     /tmp/ccLN6HNI.s:1487   .data.TxFault_data:0000000000000000 TxFault_data
     /tmp/ccLN6HNI.s:1473   .data.TxCar_state_data:0000000000000000 TxCar_state_data
     /tmp/ccLN6HNI.s:1448   .bss.BTSF_ACTIVE:0000000000000000 BTSF_ACTIVE
     /tmp/ccLN6HNI.s:1459   .bss.hardFaultFlag:0000000000000000 hardFaultFlag
     /tmp/ccLN6HNI.s:1453   .bss.Prev_State:0000000000000000 Prev_State
     /tmp/ccLN6HNI.s:1500   .data.max_throttle:0000000000000000 max_throttle
                            *COM*:0000000000000002 brakePressure_1
                            *COM*:0000000000000002 steeringPos
                            *COM*:0000000000000002 brakePos
     /tmp/ccLN6HNI.s:1548   .rodata.throttle_B_max:0000000000000000 throttle_B_max
     /tmp/ccLN6HNI.s:1554   .rodata.throttle_B_min:0000000000000000 throttle_B_min
     /tmp/ccLN6HNI.s:1536   .rodata.throttle_A_max:0000000000000000 throttle_A_max
     /tmp/ccLN6HNI.s:1542   .rodata.throttle_A_min:0000000000000000 throttle_A_min
     /tmp/ccLN6HNI.s:1506   .rodata.APPS_difference:0000000000000000 APPS_difference
     /tmp/ccLN6HNI.s:1512   .rodata.RTD_Threshold:0000000000000000 RTD_Threshold
     /tmp/ccLN6HNI.s:1530   .rodata.brakeThreshold:0000000000000000 brakeThreshold
     /tmp/ccLN6HNI.s:1518   .rodata.ThrottleA_25:0000000000000000 ThrottleA_25
     /tmp/ccLN6HNI.s:1524   .rodata.ThrottleA_5:0000000000000000 ThrottleA_5
     /tmp/ccLN6HNI.s:1449   .bss.BTSF_ACTIVE:0000000000000000 $d
     /tmp/ccLN6HNI.s:1454   .bss.Prev_State:0000000000000000 $d
     /tmp/ccLN6HNI.s:1456   .bss.hardFaultFlag:0000000000000000 $d
     /tmp/ccLN6HNI.s:1462   .bss.sConfig:0000000000000000 $d
     /tmp/ccLN6HNI.s:1469   .data.TxCar_state_data:0000000000000000 $d
     /tmp/ccLN6HNI.s:1483   .data.TxFault_data:0000000000000000 $d
     /tmp/ccLN6HNI.s:1497   .data.max_throttle:0000000000000000 $d
     /tmp/ccLN6HNI.s:1503   .rodata.APPS_difference:0000000000000000 $d
     /tmp/ccLN6HNI.s:1509   .rodata.RTD_Threshold:0000000000000000 $d
     /tmp/ccLN6HNI.s:1515   .rodata.ThrottleA_25:0000000000000000 $d
     /tmp/ccLN6HNI.s:1521   .rodata.ThrottleA_5:0000000000000000 $d
     /tmp/ccLN6HNI.s:1527   .rodata.brakeThreshold:0000000000000000 $d
     /tmp/ccLN6HNI.s:1533   .rodata.throttle_A_max:0000000000000000 $d
     /tmp/ccLN6HNI.s:1539   .rodata.throttle_A_min:0000000000000000 $d
     /tmp/ccLN6HNI.s:1545   .rodata.throttle_B_max:0000000000000000 $d
     /tmp/ccLN6HNI.s:1551   .rodata.throttle_B_min:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_SPI_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_CAN_Start
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_CAN_AddTxMessage
HAL_GPIO_ReadPin
memset
HAL_RCC_OscConfig
ARM GAS  /tmp/ccLN6HNI.s 			page 77


HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
SystemCoreClockUpdate
HAL_Delay
SystemCoreClock

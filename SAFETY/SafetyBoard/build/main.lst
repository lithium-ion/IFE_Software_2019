ARM GAS  /tmp/cc5I5c8k.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB77:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/cc5I5c8k.s 			page 2


  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** 
  40:Src/main.c    **** 
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE END Header */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  45:Src/main.c    **** #include "main.h"
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** 
  50:Src/main.c    **** 
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END Includes */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN PTD */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PTD */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN PD */
  61:Src/main.c    **** 
  62:Src/main.c    **** 
  63:Src/main.c    **** 
  64:Src/main.c    **** #define APPS_STDID        0x300
  65:Src/main.c    **** #define BTSF_STDID        0x301
  66:Src/main.c    **** #define FAULTS            0x0D0
  67:Src/main.c    **** // FAULT DEFS
  68:Src/main.c    ****   #define FAULT_ACTIVE    0xFF
  69:Src/main.c    ****   #define FAULT_INACTIVE  0x00
  70:Src/main.c    **** 
  71:Src/main.c    **** //FAULT DEGS
  72:Src/main.c    **** #define CAR_STATE         0x0D1
  73:Src/main.c    **** // CAR STATES
  74:Src/main.c    ****   #define LV_ON           0x01
  75:Src/main.c    ****   #define PRECHARGED      0x02
  76:Src/main.c    ****   #define ENABLE_FLIPPED  0x04
  77:Src/main.c    ****   #define RTDS_SOUND      0x08
  78:Src/main.c    ****   #define PWR_AVAILABLE   0x10 
  79:Src/main.c    ****   #define SOFT_FAULT      0x20
  80:Src/main.c    **** // CAR STATES
  81:Src/main.c    **** 
  82:Src/main.c    **** const int throttleThreshold = 80;
  83:Src/main.c    **** const int brakeThreshold = 0; //80;
  84:Src/main.c    **** 
  85:Src/main.c    **** 
  86:Src/main.c    **** /* USER CODE END PD */
  87:Src/main.c    **** 
  88:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  89:Src/main.c    **** /* USER CODE BEGIN PM */
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE END PM */
ARM GAS  /tmp/cc5I5c8k.s 			page 3


  92:Src/main.c    **** 
  93:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  94:Src/main.c    **** ADC_HandleTypeDef hadc1;
  95:Src/main.c    **** 
  96:Src/main.c    **** CAN_HandleTypeDef hcan;
  97:Src/main.c    **** 
  98:Src/main.c    **** SPI_HandleTypeDef hspi1;
  99:Src/main.c    **** 
 100:Src/main.c    **** /* USER CODE BEGIN PV */
 101:Src/main.c    **** 
 102:Src/main.c    **** uint16_t brakePos;
 103:Src/main.c    **** uint16_t steeringPos;
 104:Src/main.c    **** uint16_t brakePressure_1;
 105:Src/main.c    **** uint16_t brakePressure_2;
 106:Src/main.c    **** uint16_t throttle_A;
 107:Src/main.c    **** uint16_t throttle_B;
 108:Src/main.c    **** 
 109:Src/main.c    **** //need to figure out:
 110:Src/main.c    **** uint16_t max_throttle = 10;
 111:Src/main.c    **** 
 112:Src/main.c    **** char Prev_State = 0x00; 		//boolean
 113:Src/main.c    **** int hardFaultFlag = 0;  //boolean
 114:Src/main.c    **** 
 115:Src/main.c    **** // CAR STAT STATES FOR CAN
 116:Src/main.c    **** CAN_TxHeaderTypeDef TxCar_state;
 117:Src/main.c    **** uint8_t TxCar_state_data[1] = {0x00};
 118:Src/main.c    **** uint32_t TxCar_stateMailbox;
 119:Src/main.c    **** 
 120:Src/main.c    **** //CAN FAULT VARIABLES
 121:Src/main.c    **** CAN_TxHeaderTypeDef TxFaults;
 122:Src/main.c    **** uint8_t TxFault_data[8] = {0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55};
 123:Src/main.c    **** /*Set these values: 0xFF = Fault present
 124:Src/main.c    ****                     0x00 = No fault*/
 125:Src/main.c    **** uint8_t bms;        //TxData[0]
 126:Src/main.c    **** uint8_t imd;        //TxData[1]
 127:Src/main.c    **** uint8_t bspd;       //TxData[2]
 128:Src/main.c    **** uint8_t apps;       //TxData[3]
 129:Src/main.c    **** uint32_t TxFaultsMailbox;
 130:Src/main.c    **** 
 131:Src/main.c    **** //For Timers
 132:Src/main.c    **** extern uint32_t millisTimer;
 133:Src/main.c    **** extern uint32_t secTimer;
 134:Src/main.c    **** extern uint32_t sysTimer;
 135:Src/main.c    **** 
 136:Src/main.c    **** ADC_ChannelConfTypeDef sConfig = {0};
 137:Src/main.c    **** /* USER CODE END PV */
 138:Src/main.c    **** 
 139:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 140:Src/main.c    **** void SystemClock_Config(void);
 141:Src/main.c    **** static void MX_GPIO_Init(void);
 142:Src/main.c    **** static void MX_SPI1_Init(void);
 143:Src/main.c    **** static void MX_ADC1_Init(void);
 144:Src/main.c    **** static void MX_CAN_Init(void);
 145:Src/main.c    **** /* USER CODE BEGIN PFP */
 146:Src/main.c    **** 
 147:Src/main.c    **** int checkBTSF();
 148:Src/main.c    **** int checkAPPS();
ARM GAS  /tmp/cc5I5c8k.s 			page 4


 149:Src/main.c    **** int APPS_Diff();
 150:Src/main.c    **** void sendFaultMsg();
 151:Src/main.c    **** void sendCar_state();
 152:Src/main.c    **** void readFaults();
 153:Src/main.c    **** void car_state_machine(char STATE);
 154:Src/main.c    **** uint16_t updateADC(int channel); 
 155:Src/main.c    **** /* USER CODE END PFP */
 156:Src/main.c    **** 
 157:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 158:Src/main.c    **** /* USER CODE BEGIN 0 */
 159:Src/main.c    **** 
 160:Src/main.c    **** //int refTime = millis();
 161:Src/main.c    **** //int APPSFlag = 0; //boolean
 162:Src/main.c    **** 
 163:Src/main.c    **** /**
 164:Src/main.c    ****   * @brief  The application entry point.
 165:Src/main.c    ****   * @retval int
 166:Src/main.c    ****   */
 167:Src/main.c    **** int main(void)
 168:Src/main.c    **** {
 169:Src/main.c    ****   /* USER CODE BEGIN 1 */
 170:Src/main.c    **** 
 171:Src/main.c    **** 
 172:Src/main.c    ****   //For Timers
 173:Src/main.c    ****   millisTimer = 100000; //100 millis
 174:Src/main.c    ****   secTimer = 3000000; //3 seconds
 175:Src/main.c    ****   sysTimer = 500; //timer to send message every second
 176:Src/main.c    **** 
 177:Src/main.c    ****   /* USER CODE END 1 */
 178:Src/main.c    **** 
 179:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 180:Src/main.c    **** 
 181:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 182:Src/main.c    ****   HAL_Init();
 183:Src/main.c    **** 
 184:Src/main.c    ****   /* USER CODE BEGIN Init */
 185:Src/main.c    **** 
 186:Src/main.c    ****   // Update SystemCoreClock value
 187:Src/main.c    ****  // SystemCoreClockUpdate();
 188:Src/main.c    ****   // Configure the SysTick timer to overflow every 1 us
 189:Src/main.c    ****  // SysTick_Config(SystemCoreClock / 1000000);
 190:Src/main.c    **** 
 191:Src/main.c    ****   /* USER CODE END Init */
 192:Src/main.c    **** 
 193:Src/main.c    ****   /* Configure the system clock */
 194:Src/main.c    ****   SystemClock_Config();
 195:Src/main.c    **** 
 196:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 197:Src/main.c    **** 
 198:Src/main.c    ****   /* USER CODE END SysInit */
 199:Src/main.c    **** 
 200:Src/main.c    ****   /* Initialize all configured peripherals */
 201:Src/main.c    ****   MX_GPIO_Init();
 202:Src/main.c    ****   MX_SPI1_Init();
 203:Src/main.c    ****   MX_ADC1_Init();
 204:Src/main.c    ****   MX_CAN_Init();
 205:Src/main.c    ****   /* USER CODE BEGIN 2 */
ARM GAS  /tmp/cc5I5c8k.s 			page 5


 206:Src/main.c    ****   HAL_CAN_Start(&hcan);
 207:Src/main.c    **** 
 208:Src/main.c    ****   /* USER CODE END 2 */
 209:Src/main.c    **** 
 210:Src/main.c    ****   /* Infinite loop */
 211:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 212:Src/main.c    ****   
 213:Src/main.c    ****   while (1)
 214:Src/main.c    ****   {
 215:Src/main.c    ****     //READ FOR PRECHARGE
 216:Src/main.c    **** 	if(HAL_GPIO_ReadPin(GPIOB, PRECHARGE_COMPLETE_Pin) == GPIO_PIN_SET){
 217:Src/main.c    **** 	  car_state_machine(PRECHARGED);
 218:Src/main.c    **** 
 219:Src/main.c    ****       //READ FOR ENABLE
 220:Src/main.c    **** 	  if(HAL_GPIO_ReadPin(GPIOB,ENABLE_IN_Pin) == GPIO_PIN_RESET){
 221:Src/main.c    **** 		  car_state_machine(ENABLE_FLIPPED);
 222:Src/main.c    ****       //ADC for Brake pressure
 223:Src/main.c    **** 		  brakePressure_1 = updateADC(2);
 224:Src/main.c    **** 
 225:Src/main.c    **** 		  //SEE IF BRAKE IS PRESSED 
 226:Src/main.c    **** 		  if(brakePressure_1 >= brakeThreshold){
 227:Src/main.c    **** 			//set 3 second timer
 228:Src/main.c    **** 			 if(TxCar_state_data[0] == ENABLE_FLIPPED) {
 229:Src/main.c    ****         secTimer = 3000; //change to 3000 for 3 seconds
 230:Src/main.c    ****         car_state_machine(RTDS_SOUND);
 231:Src/main.c    ****         HAL_GPIO_WritePin(GPIOB, RTD_EN_Pin | RTDS_EN_Pin | BTSF_EN_Pin | APPS_EN_Pin, GPIO_PIN_SET
 232:Src/main.c    ****         } 
 233:Src/main.c    **** 			//RTD Sound Enable Play sound for 2.5 seconds 
 234:Src/main.c    ****       }
 235:Src/main.c    **** 			
 236:Src/main.c    **** 			// IF OUR TIMER IS OVER FINALLY
 237:Src/main.c    ****         if((secTimer == 0) && (TxCar_state_data[0] & 0x28)){
 238:Src/main.c    **** 			    HAL_GPIO_WritePin(GPIOB, RTDS_EN_Pin, GPIO_PIN_RESET);
 239:Src/main.c    ****           //SeT pwr
 240:Src/main.c    ****           car_state_machine(PWR_AVAILABLE);
 241:Src/main.c    **** 
 242:Src/main.c    ****         }// rtds buzzer stop
 243:Src/main.c    **** 	  }//END OF RTD SEQUENCE
 244:Src/main.c    ****   } // of start up sequence
 245:Src/main.c    **** 	  
 246:Src/main.c    ****     // SEQUENCE FOR CHECKING SOFT FAULTS
 247:Src/main.c    ****     if(TxCar_state_data[0] >= RTDS_SOUND){
 248:Src/main.c    **** 	  if (checkBTSF() || checkAPPS()){
 249:Src/main.c    **** 		  HAL_GPIO_WritePin(GPIOB,BTSF_EN_Pin | APPS_EN_Pin,GPIO_PIN_RESET);
 250:Src/main.c    ****       TxCar_state_data[0] = SOFT_FAULT;
 251:Src/main.c    ****     }
 252:Src/main.c    ****     else if(TxCar_state_data[0] == SOFT_FAULT) {
 253:Src/main.c    ****         TxCar_state_data[0] = PWR_AVAILABLE;
 254:Src/main.c    ****         HAL_GPIO_WritePin(GPIOB, BTSF_EN_Pin|APPS_EN_Pin ,GPIO_PIN_SET);
 255:Src/main.c    ****     }
 256:Src/main.c    ****   }
 257:Src/main.c    ****     readFaults();
 258:Src/main.c    **** 	 
 259:Src/main.c    **** 	if (sysTimer == 0){
 260:Src/main.c    **** 		sendFaultMsg();
 261:Src/main.c    **** 		sendCar_state();
 262:Src/main.c    **** 		sysTimer = 500;
ARM GAS  /tmp/cc5I5c8k.s 			page 6


 263:Src/main.c    **** 	}
 264:Src/main.c    ****     /* USER CODE END WHILE */
 265:Src/main.c    **** 
 266:Src/main.c    ****     /* USER CODE BEGIN 3 */
 267:Src/main.c    ****   }
 268:Src/main.c    ****   /* USER CODE END 3 */
 269:Src/main.c    **** }
 270:Src/main.c    **** 
 271:Src/main.c    **** /********************************************************************************/
 272:Src/main.c    **** //Checks for APPS errors, sends fault if there is one 
 273:Src/main.c    **** //Returns one if difference in throttleA/B is greater than 10% for 100 ms
 274:Src/main.c    **** //Returns zero if else
 275:Src/main.c    **** /********************************************************************************/
 276:Src/main.c    **** int checkAPPS(){
 277:Src/main.c    **** 
 278:Src/main.c    ****   throttle_A = updateADC(8); 
 279:Src/main.c    ****   throttle_B = updateADC(9); 
 280:Src/main.c    ****   //0-5000 based ?
 281:Src/main.c    **** 
 282:Src/main.c    ****   //Throttles Agree
 283:Src/main.c    ****   millisTimer = 1000;
 284:Src/main.c    ****   while(millisTimer > 0 && APPS_Diff()){
 285:Src/main.c    **** 	throttle_A = updateADC(8);
 286:Src/main.c    **** 	throttle_B = updateADC(9);
 287:Src/main.c    ****   } //stay in this loop while there is a 10% difference in throttles
 288:Src/main.c    **** 
 289:Src/main.c    ****   //APPS_EN Fault
 290:Src/main.c    ****   if(millisTimer == 0){ //hmmm needs to be changed
 291:Src/main.c    ****     return 1; //will set driving = 0;
 292:Src/main.c    ****   }
 293:Src/main.c    ****   return 0; //APPS is good
 294:Src/main.c    **** }
 295:Src/main.c    **** 
 296:Src/main.c    **** /********************************************************************************/
 297:Src/main.c    **** //Checks for BTSF errors, If the brake and throttle are pressed at the same time, above a certain t
 298:Src/main.c    **** //Returns one if fault was sensed and sent out
 299:Src/main.c    **** //zero if nothing is detected
 300:Src/main.c    **** /********************************************************************************/
 301:Src/main.c    **** int checkBTSF(){
 302:Src/main.c    ****   brakePressure_1 = updateADC(2);
 303:Src/main.c    ****   throttle_A = updateADC(8); 
 304:Src/main.c    **** 
 305:Src/main.c    ****   //0-5000 based
 306:Src/main.c    **** 
 307:Src/main.c    ****   if(brakePressure_1 > brakeThreshold && throttle_A > throttleThreshold){
 308:Src/main.c    **** 	     return 1;
 309:Src/main.c    ****   }
 310:Src/main.c    ****   
 311:Src/main.c    ****   return 0;
 312:Src/main.c    **** }
 313:Src/main.c    **** 
 314:Src/main.c    **** /********************************************************************************/
 315:Src/main.c    **** // This function updates the ADC values for all positions/pressures
 316:Src/main.c    **** //
 317:Src/main.c    **** //
 318:Src/main.c    **** /********************************************************************************/
 319:Src/main.c    **** uint16_t updateADC(int channel){	
ARM GAS  /tmp/cc5I5c8k.s 			page 7


 320:Src/main.c    **** 	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 321:Src/main.c    ****   if (channel == 0) //Brake position 
 322:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_0;
 323:Src/main.c    ****   if (channel == 1) //steering position 
 324:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_1;
 325:Src/main.c    ****   if (channel == 2) //brake pressure 1
 326:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_2;
 327:Src/main.c    ****   if (channel == 3) //brake pressure 2
 328:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_3;
 329:Src/main.c    ****   if (channel == 8) //throttle A
 330:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 331:Src/main.c    ****   if (channel == 9) //throttle B 
 332:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_9;
 333:Src/main.c    **** 
 334:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 335:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 336:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 337:Src/main.c    **** 
 338:Src/main.c    ****   HAL_ADC_Start(&hadc1);
 339:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 340:Src/main.c    ****   return HAL_ADC_GetValue(&hadc1);
 341:Src/main.c    ****   //HAL_ADC_Stop(&hadc1);
 342:Src/main.c    **** 	//////////////////////////////////////////////////////////////
 343:Src/main.c    **** 	/*
 344:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 345:Src/main.c    **** 	
 346:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 347:Src/main.c    **** 	brakePos = HAL_ADC_GetValue(&hadc1);  //brakePos
 348:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 349:Src/main.c    **** 	steeringPos = HAL_ADC_GetValue(&hadc1);  //steeringPos
 350:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 351:Src/main.c    **** 	brakePressure_1 = HAL_ADC_GetValue(&hadc1);  //brakePressure_1
 352:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 353:Src/main.c    **** 	brakePressure_2 = HAL_ADC_GetValue(&hadc1);  //brakePressure_2
 354:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 355:Src/main.c    **** 	throttle_A = HAL_ADC_GetValue(&hadc1);  //throttle_A
 356:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 357:Src/main.c    **** 	throttle_B = HAL_ADC_GetValue(&hadc1);  //throttle_B
 358:Src/main.c    **** 	
 359:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 360:Src/main.c    **** 	*/
 361:Src/main.c    **** }
 362:Src/main.c    **** 
 363:Src/main.c    **** /********************************************************************************/
 364:Src/main.c    **** //Determines if the throttle percent difference is above 10%
 365:Src/main.c    **** //Returns: 1 if difference > 10%
 366:Src/main.c    **** //		   0 if everything is good 
 367:Src/main.c    **** /********************************************************************************/
 368:Src/main.c    **** int APPS_Diff(){
 369:Src/main.c    **** 
 370:Src/main.c    **** 
 371:Src/main.c    **** 
 372:Src/main.c    **** //0.66 3.11
 373:Src/main.c    **** //0.32 2.77
 374:Src/main.c    ****   double t_A = throttle_A;
 375:Src/main.c    ****   double t_B = throttle_B;
 376:Src/main.c    ****   
ARM GAS  /tmp/cc5I5c8k.s 			page 8


 377:Src/main.c    ****   //equalize throttles assuming 1mm diff out of 12.5mm from pots
 378:Src/main.c    ****   t_A -= (1/12.5)*max_throttle; 
 379:Src/main.c    **** 
 380:Src/main.c    ****   double numerator = t_A - t_B;
 381:Src/main.c    ****   
 382:Src/main.c    ****   //absolute value
 383:Src/main.c    ****   if(numerator < 0){
 384:Src/main.c    ****     numerator = -1*numerator;
 385:Src/main.c    ****   }
 386:Src/main.c    **** 
 387:Src/main.c    ****   double denominator = (t_A + t_B)/2;
 388:Src/main.c    **** 
 389:Src/main.c    ****   double difference = 100*numerator/denominator;
 390:Src/main.c    **** 
 391:Src/main.c    ****   if(difference >= 10){
 392:Src/main.c    ****     return 1;
 393:Src/main.c    ****   }
 394:Src/main.c    ****   return 0;
 395:Src/main.c    **** }
 396:Src/main.c    **** void sendFaultMsg(){
 397:Src/main.c    ****   TxFault_data[0] = bms;  //Set all the data (faults) to their current values
 398:Src/main.c    ****   TxFault_data[1] = imd;
 399:Src/main.c    ****   TxFault_data[2] = bspd;
 400:Src/main.c    ****   TxFault_data[3] = apps;
 401:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxFaults, TxFault_data, &TxFaultsMailbox);
 402:Src/main.c    **** }
 403:Src/main.c    **** 
 404:Src/main.c    **** void sendCar_state(){
 405:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxCar_state,TxCar_state_data, &TxCar_stateMailbox);
 406:Src/main.c    **** }
 407:Src/main.c    **** 
 408:Src/main.c    **** void car_state_machine(char STATE)
 409:Src/main.c    **** {
 410:Src/main.c    ****   if(STATE > TxCar_state_data[0])
 411:Src/main.c    ****   {
 412:Src/main.c    ****     TxCar_state_data[0] = STATE;
 413:Src/main.c    ****   }
 414:Src/main.c    **** }
 415:Src/main.c    **** 
 416:Src/main.c    **** void readFaults(){
 417:Src/main.c    ****   if (HAL_GPIO_ReadPin(GPIOD, FAULT_BSPD_STATUS_Pin) == GPIO_PIN_RESET)
 418:Src/main.c    ****     bspd = FAULT_ACTIVE;
 419:Src/main.c    ****   else bspd = FAULT_INACTIVE;
 420:Src/main.c    ****   
 421:Src/main.c    ****   if (HAL_GPIO_ReadPin(GPIOC, FAULT_IMD_STATUS_Pin) == GPIO_PIN_RESET)
 422:Src/main.c    ****     imd = FAULT_ACTIVE;
 423:Src/main.c    ****   else imd = FAULT_INACTIVE;
 424:Src/main.c    ****   
 425:Src/main.c    ****   if (HAL_GPIO_ReadPin(GPIOC, FAULT_BMS_STATUS_Pin) == GPIO_PIN_RESET)
 426:Src/main.c    ****     bms = FAULT_ACTIVE;
 427:Src/main.c    ****   else bms = FAULT_INACTIVE;
 428:Src/main.c    **** 
 429:Src/main.c    ****   if(bms || imd || bspd){
 430:Src/main.c    ****     TxCar_state_data[0] = LV_ON;
 431:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, RTD_EN_Pin | RTDS_EN_Pin, GPIO_PIN_RESET);
 432:Src/main.c    ****   }
 433:Src/main.c    **** 
ARM GAS  /tmp/cc5I5c8k.s 			page 9


 434:Src/main.c    **** }
 435:Src/main.c    **** 
 436:Src/main.c    **** /* USER CODE END 0 */
 437:Src/main.c    **** 
 438:Src/main.c    **** 
 439:Src/main.c    **** 
 440:Src/main.c    **** /**
 441:Src/main.c    ****   * @brief System Clock Configuration
 442:Src/main.c    ****   * @retval None
 443:Src/main.c    ****   */
 444:Src/main.c    **** void SystemClock_Config(void)
 445:Src/main.c    **** {
 446:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 447:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 448:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 449:Src/main.c    **** 
 450:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 451:Src/main.c    ****   */
 452:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 453:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 454:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 455:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 456:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 457:Src/main.c    ****   {
 458:Src/main.c    ****     Error_Handler();
 459:Src/main.c    ****   }
 460:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 461:Src/main.c    ****   */
 462:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 463:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 464:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 465:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 466:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 467:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 468:Src/main.c    **** 
 469:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 470:Src/main.c    ****   {
 471:Src/main.c    ****     Error_Handler();
 472:Src/main.c    ****   }
 473:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 474:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 475:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 476:Src/main.c    ****   {
 477:Src/main.c    ****     Error_Handler();
 478:Src/main.c    ****   }
 479:Src/main.c    **** }
 480:Src/main.c    **** 
 481:Src/main.c    **** /**
 482:Src/main.c    ****   * @brief ADC1 Initialization Function
 483:Src/main.c    ****   * @param None
 484:Src/main.c    ****   * @retval None
 485:Src/main.c    ****   */
 486:Src/main.c    **** static void MX_ADC1_Init(void)
 487:Src/main.c    **** {
 488:Src/main.c    **** 
 489:Src/main.c    ****    /* USER CODE BEGIN ADC1_Init 0 */
 490:Src/main.c    **** 
ARM GAS  /tmp/cc5I5c8k.s 			page 10


 491:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 492:Src/main.c    **** 
 493:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 494:Src/main.c    **** 
 495:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 496:Src/main.c    ****   /**Common config 
 497:Src/main.c    ****   */
 498:Src/main.c    ****   hadc1.Instance = ADC1;
 499:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE; //enable 
 500:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE; //enable 
 501:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 502:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 503:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 504:Src/main.c    ****   hadc1.Init.NbrOfConversion = 6;
 505:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 506:Src/main.c    ****   {
 507:Src/main.c    ****     Error_Handler();
 508:Src/main.c    ****   }
 509:Src/main.c    ****   /**Configure Regular Channel 
 510:Src/main.c    ****   */
 511:Src/main.c    ****   //Brake position
 512:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 513:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 514:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 515:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 516:Src/main.c    ****   {
 517:Src/main.c    ****     Error_Handler();
 518:Src/main.c    ****   }
 519:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 520:Src/main.c    **** 
 521:Src/main.c    ****   //Steering Position 
 522:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 523:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 524:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 525:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 526:Src/main.c    ****     Error_Handler();
 527:Src/main.c    ****   }
 528:Src/main.c    ****   
 529:Src/main.c    ****   //Brake Pressure 1
 530:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_3;
 531:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 532:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 533:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 534:Src/main.c    ****     Error_Handler();
 535:Src/main.c    ****   }
 536:Src/main.c    ****   
 537:Src/main.c    ****   //Brake Pressure 2
 538:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 539:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 540:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 541:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 542:Src/main.c    ****     Error_Handler();
 543:Src/main.c    ****   }
 544:Src/main.c    ****   
 545:Src/main.c    ****   //ADC for throttle_A
 546:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_8;
 547:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_5;
ARM GAS  /tmp/cc5I5c8k.s 			page 11


 548:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 549:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 550:Src/main.c    ****     Error_Handler();
 551:Src/main.c    ****   }
 552:Src/main.c    ****   
 553:Src/main.c    ****   //ADC for throttle_B
 554:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 555:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 556:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 557:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 558:Src/main.c    ****     Error_Handler();
 559:Src/main.c    ****   }
 560:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 561:Src/main.c    **** 
 562:Src/main.c    **** }
 563:Src/main.c    **** 
 564:Src/main.c    **** /**
 565:Src/main.c    ****   * @brief CAN Initialization Function
 566:Src/main.c    ****   * @param None
 567:Src/main.c    ****   * @retval None
 568:Src/main.c    ****   */
 569:Src/main.c    **** static void MX_CAN_Init(void)
 570:Src/main.c    **** {
 571:Src/main.c    **** 
 572:Src/main.c    ****  /* USER CODE BEGIN CAN_Init 0 */
 573:Src/main.c    **** 
 574:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 575:Src/main.c    **** 
 576:Src/main.c    **** 
 577:Src/main.c    ****   hcan.Instance = CAN1;
 578:Src/main.c    ****   hcan.Init.Prescaler = 2;
 579:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 580:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 581:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 582:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 583:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 584:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 585:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 586:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 587:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 588:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 589:Src/main.c    **** 
 590:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 591:Src/main.c    ****   {
 592:Src/main.c    ****     Error_Handler();
 593:Src/main.c    ****   }
 594:Src/main.c    ****   
 595:Src/main.c    ****     /* USER CODE BEGIN CAN_Init 1 */
 596:Src/main.c    ****  // HAL_CAN_Start(&hcan);
 597:Src/main.c    ****   TxFaults.StdId = FAULTS;         // CAN standard ID
 598:Src/main.c    ****   TxFaults.ExtId = 0x01;          // CAN extended ID
 599:Src/main.c    ****   TxFaults.RTR = CAN_RTR_DATA;      // CAN frame type
 600:Src/main.c    ****   TxFaults.IDE = CAN_ID_STD;        // CAN ID type
 601:Src/main.c    ****   TxFaults.DLC = 8;             // CAN frame length in bytes
 602:Src/main.c    ****   TxFaults.TransmitGlobalTime = DISABLE;  // CAN timestamp in TxData[6] and TxData[7]
 603:Src/main.c    **** 
 604:Src/main.c    ****   TxCar_state.StdId = CAR_STATE;         // CAN standard ID
ARM GAS  /tmp/cc5I5c8k.s 			page 12


 605:Src/main.c    ****   TxCar_state.ExtId = 0x01;          // CAN extended ID
 606:Src/main.c    ****   TxCar_state.RTR = CAN_RTR_DATA;      // CAN frame type
 607:Src/main.c    ****   TxCar_state.IDE = CAN_ID_STD;        // CAN ID type
 608:Src/main.c    ****   TxCar_state.DLC = 1;             // CAN frame length in bytes
 609:Src/main.c    ****   TxCar_state.TransmitGlobalTime = DISABLE;
 610:Src/main.c    **** 
 611:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 612:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 613:Src/main.c    **** 
 614:Src/main.c    **** }
 615:Src/main.c    **** 
 616:Src/main.c    **** /**
 617:Src/main.c    ****   * @brief SPI1 Initialization Function
 618:Src/main.c    ****   * @param None
 619:Src/main.c    ****   * @retval None
 620:Src/main.c    ****   */
 621:Src/main.c    **** static void MX_SPI1_Init(void)
 622:Src/main.c    **** {
 623:Src/main.c    **** 
 624:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 625:Src/main.c    **** 
 626:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 627:Src/main.c    **** 
 628:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 629:Src/main.c    **** 
 630:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 631:Src/main.c    ****   /* SPI1 parameter configuration*/
 632:Src/main.c    ****   hspi1.Instance = SPI1;
 633:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 634:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 635:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 636:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 637:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 638:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 639:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 640:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 641:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 642:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 643:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 644:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 645:Src/main.c    ****   {
 646:Src/main.c    ****     Error_Handler();
 647:Src/main.c    ****   }
 648:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 649:Src/main.c    **** 
 650:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 651:Src/main.c    **** 
 652:Src/main.c    **** }
 653:Src/main.c    **** 
 654:Src/main.c    **** /**
 655:Src/main.c    ****   * @brief GPIO Initialization Function
 656:Src/main.c    ****   * @param None
 657:Src/main.c    ****   * @retval None
 658:Src/main.c    ****   */
 659:Src/main.c    **** static void MX_GPIO_Init(void)
 660:Src/main.c    **** {
  25              		.loc 1 660 0
ARM GAS  /tmp/cc5I5c8k.s 			page 13


  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 88B0     		sub	sp, sp, #32
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 661:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 661 0
  42 0006 0024     		movs	r4, #0
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
  47              	.LBB2:
 662:Src/main.c    **** 
 663:Src/main.c    ****   /* GPIO Ports Clock Enable */
 664:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 664 0
  49 0010 374B     		ldr	r3, .L3
  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F01002 		orr	r2, r2, #16
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F01002 		and	r2, r2, #16
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE2:
  58              	.LBB3:
 665:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  59              		.loc 1 665 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F02002 		orr	r2, r2, #32
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9A69     		ldr	r2, [r3, #24]
  64 002e 02F02002 		and	r2, r2, #32
  65 0032 0192     		str	r2, [sp, #4]
  66 0034 019A     		ldr	r2, [sp, #4]
  67              	.LBE3:
  68              	.LBB4:
 666:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  69              		.loc 1 666 0
  70 0036 9A69     		ldr	r2, [r3, #24]
  71 0038 42F00402 		orr	r2, r2, #4
  72 003c 9A61     		str	r2, [r3, #24]
  73 003e 9A69     		ldr	r2, [r3, #24]
  74 0040 02F00402 		and	r2, r2, #4
  75 0044 0292     		str	r2, [sp, #8]
  76 0046 029A     		ldr	r2, [sp, #8]
ARM GAS  /tmp/cc5I5c8k.s 			page 14


  77              	.LBE4:
  78              	.LBB5:
 667:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  79              		.loc 1 667 0
  80 0048 9A69     		ldr	r2, [r3, #24]
  81 004a 42F00802 		orr	r2, r2, #8
  82 004e 9A61     		str	r2, [r3, #24]
  83 0050 9B69     		ldr	r3, [r3, #24]
  84 0052 03F00803 		and	r3, r3, #8
  85 0056 0393     		str	r3, [sp, #12]
  86 0058 039B     		ldr	r3, [sp, #12]
  87              	.LBE5:
 668:Src/main.c    **** 
 669:Src/main.c    ****   /*Configure GPIO pin Output Level */
 670:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin|APPS_EN_Pin|RTD_EN_Pin 
  88              		.loc 1 670 0
  89 005a 264E     		ldr	r6, .L3+4
  90 005c 2246     		mov	r2, r4
  91 005e 42F23811 		movw	r1, #8504
  92 0062 3046     		mov	r0, r6
  93 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  94              	.LVL0:
 671:Src/main.c    ****                           |BTSF_EN_Pin, GPIO_PIN_RESET);
 672:Src/main.c    **** 
 673:Src/main.c    ****   /*Configure GPIO pin Output Level */
 674:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
  95              		.loc 1 674 0
  96 0068 234F     		ldr	r7, .L3+8
  97 006a 2246     		mov	r2, r4
  98 006c 4FF48061 		mov	r1, #1024
  99 0070 3846     		mov	r0, r7
 100 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL1:
 675:Src/main.c    **** 
 676:Src/main.c    ****   /*Configure GPIO pins : FAULT_IMD_STATUS_Pin FAULT_BMS_STATUS_Pin */
 677:Src/main.c    ****   GPIO_InitStruct.Pin = FAULT_IMD_STATUS_Pin|FAULT_BMS_STATUS_Pin;
 102              		.loc 1 677 0
 103 0076 4FF44043 		mov	r3, #49152
 104 007a 0493     		str	r3, [sp, #16]
 678:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 105              		.loc 1 678 0
 106 007c 0594     		str	r4, [sp, #20]
 679:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 107              		.loc 1 679 0
 108 007e 0694     		str	r4, [sp, #24]
 680:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 109              		.loc 1 680 0
 110 0080 04A9     		add	r1, sp, #16
 111 0082 1E48     		ldr	r0, .L3+12
 112 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 113              	.LVL2:
 681:Src/main.c    **** 
 682:Src/main.c    ****   /*Configure GPIO pin : FAULT_BSPD_STATUS_Pin */
 683:Src/main.c    ****   GPIO_InitStruct.Pin = FAULT_BSPD_STATUS_Pin;
 114              		.loc 1 683 0
 115 0088 0125     		movs	r5, #1
 116 008a 0495     		str	r5, [sp, #16]
ARM GAS  /tmp/cc5I5c8k.s 			page 15


 684:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 117              		.loc 1 684 0
 118 008c 0594     		str	r4, [sp, #20]
 685:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 119              		.loc 1 685 0
 120 008e 0694     		str	r4, [sp, #24]
 686:Src/main.c    ****   HAL_GPIO_Init(FAULT_BSPD_STATUS_GPIO_Port, &GPIO_InitStruct);
 121              		.loc 1 686 0
 122 0090 04A9     		add	r1, sp, #16
 123 0092 1B48     		ldr	r0, .L3+16
 124 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 125              	.LVL3:
 687:Src/main.c    **** 
 688:Src/main.c    ****   /*Configure GPIO pins : HV_CONNECTED_Pin ENABLE_IN_Pin PRECHARGE_COMPLETE_Pin */
 689:Src/main.c    ****   GPIO_InitStruct.Pin = HV_CONNECTED_Pin|ENABLE_IN_Pin|PRECHARGE_COMPLETE_Pin;
 126              		.loc 1 689 0
 127 0098 48F24043 		movw	r3, #33856
 128 009c 0493     		str	r3, [sp, #16]
 690:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 129              		.loc 1 690 0
 130 009e 0594     		str	r4, [sp, #20]
 691:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 131              		.loc 1 691 0
 132 00a0 0694     		str	r4, [sp, #24]
 692:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 133              		.loc 1 692 0
 134 00a2 04A9     		add	r1, sp, #16
 135 00a4 3046     		mov	r0, r6
 136 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 137              	.LVL4:
 693:Src/main.c    **** 
 694:Src/main.c    ****   /*Configure GPIO pins : BRAKE_LIGHT_EN_Pin RTDS_EN_Pin APPS_EN_Pin RTD_EN_Pin 
 695:Src/main.c    ****                            BTSF_EN_Pin */
 696:Src/main.c    ****   GPIO_InitStruct.Pin = BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin|APPS_EN_Pin|RTD_EN_Pin 
 138              		.loc 1 696 0
 139 00aa 42F23813 		movw	r3, #8504
 140 00ae 0493     		str	r3, [sp, #16]
 697:Src/main.c    ****                           |BTSF_EN_Pin;
 698:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 141              		.loc 1 698 0
 142 00b0 0595     		str	r5, [sp, #20]
 699:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 143              		.loc 1 699 0
 144 00b2 0694     		str	r4, [sp, #24]
 700:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 145              		.loc 1 700 0
 146 00b4 4FF00208 		mov	r8, #2
 147 00b8 CDF81C80 		str	r8, [sp, #28]
 701:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 148              		.loc 1 701 0
 149 00bc 04A9     		add	r1, sp, #16
 150 00be 3046     		mov	r0, r6
 151 00c0 FFF7FEFF 		bl	HAL_GPIO_Init
 152              	.LVL5:
 702:Src/main.c    **** 
 703:Src/main.c    ****   /*Configure GPIO pin : PA10 */
 704:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
ARM GAS  /tmp/cc5I5c8k.s 			page 16


 153              		.loc 1 704 0
 154 00c4 4FF48063 		mov	r3, #1024
 155 00c8 0493     		str	r3, [sp, #16]
 705:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 156              		.loc 1 705 0
 157 00ca 0595     		str	r5, [sp, #20]
 706:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 158              		.loc 1 706 0
 159 00cc 0694     		str	r4, [sp, #24]
 707:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 160              		.loc 1 707 0
 161 00ce CDF81C80 		str	r8, [sp, #28]
 708:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 162              		.loc 1 708 0
 163 00d2 04A9     		add	r1, sp, #16
 164 00d4 3846     		mov	r0, r7
 165 00d6 FFF7FEFF 		bl	HAL_GPIO_Init
 166              	.LVL6:
 167              	.LBB6:
 709:Src/main.c    **** 
 710:Src/main.c    ****   /*Configure peripheral I/O remapping */
 711:Src/main.c    ****   __HAL_AFIO_REMAP_PD01_ENABLE();
 168              		.loc 1 711 0
 169 00da 0A4A     		ldr	r2, .L3+20
 170 00dc 5368     		ldr	r3, [r2, #4]
 171              	.LVL7:
 172 00de 43F0E063 		orr	r3, r3, #117440512
 173              	.LVL8:
 174 00e2 43F40043 		orr	r3, r3, #32768
 175              	.LVL9:
 176 00e6 5360     		str	r3, [r2, #4]
 177              	.LBE6:
 712:Src/main.c    **** 
 713:Src/main.c    **** }
 178              		.loc 1 713 0
 179 00e8 08B0     		add	sp, sp, #32
 180              	.LCFI2:
 181              		.cfi_def_cfa_offset 24
 182              		@ sp needed
 183 00ea BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 184              	.L4:
 185 00ee 00BF     		.align	2
 186              	.L3:
 187 00f0 00100240 		.word	1073876992
 188 00f4 000C0140 		.word	1073810432
 189 00f8 00080140 		.word	1073809408
 190 00fc 00100140 		.word	1073811456
 191 0100 00140140 		.word	1073812480
 192 0104 00000140 		.word	1073807360
 193              		.cfi_endproc
 194              	.LFE77:
 196              		.section	.text.MX_SPI1_Init,"ax",%progbits
 197              		.align	1
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu softvfp
ARM GAS  /tmp/cc5I5c8k.s 			page 17


 203              	MX_SPI1_Init:
 204              	.LFB76:
 622:Src/main.c    **** 
 205              		.loc 1 622 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209 0000 08B5     		push	{r3, lr}
 210              	.LCFI3:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 3, -8
 213              		.cfi_offset 14, -4
 632:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 214              		.loc 1 632 0
 215 0002 0B48     		ldr	r0, .L7
 216 0004 0B4B     		ldr	r3, .L7+4
 217 0006 0360     		str	r3, [r0]
 633:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 218              		.loc 1 633 0
 219 0008 4FF48273 		mov	r3, #260
 220 000c 4360     		str	r3, [r0, #4]
 634:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 221              		.loc 1 634 0
 222 000e 0023     		movs	r3, #0
 223 0010 8360     		str	r3, [r0, #8]
 635:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 224              		.loc 1 635 0
 225 0012 C360     		str	r3, [r0, #12]
 636:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 226              		.loc 1 636 0
 227 0014 0361     		str	r3, [r0, #16]
 637:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 228              		.loc 1 637 0
 229 0016 4361     		str	r3, [r0, #20]
 638:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 230              		.loc 1 638 0
 231 0018 4FF48022 		mov	r2, #262144
 232 001c 8261     		str	r2, [r0, #24]
 639:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 233              		.loc 1 639 0
 234 001e C361     		str	r3, [r0, #28]
 640:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 235              		.loc 1 640 0
 236 0020 0362     		str	r3, [r0, #32]
 641:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 237              		.loc 1 641 0
 238 0022 4362     		str	r3, [r0, #36]
 642:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 239              		.loc 1 642 0
 240 0024 8362     		str	r3, [r0, #40]
 643:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 241              		.loc 1 643 0
 242 0026 0A23     		movs	r3, #10
 243 0028 C362     		str	r3, [r0, #44]
 644:Src/main.c    ****   {
 244              		.loc 1 644 0
 245 002a FFF7FEFF 		bl	HAL_SPI_Init
ARM GAS  /tmp/cc5I5c8k.s 			page 18


 246              	.LVL10:
 247 002e 08BD     		pop	{r3, pc}
 248              	.L8:
 249              		.align	2
 250              	.L7:
 251 0030 00000000 		.word	hspi1
 252 0034 00300140 		.word	1073819648
 253              		.cfi_endproc
 254              	.LFE76:
 256              		.section	.text.MX_ADC1_Init,"ax",%progbits
 257              		.align	1
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 261              		.fpu softvfp
 263              	MX_ADC1_Init:
 264              	.LFB74:
 487:Src/main.c    **** 
 265              		.loc 1 487 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 270              	.LCFI4:
 271              		.cfi_def_cfa_offset 24
 272              		.cfi_offset 4, -24
 273              		.cfi_offset 5, -20
 274              		.cfi_offset 6, -16
 275              		.cfi_offset 7, -12
 276              		.cfi_offset 8, -8
 277              		.cfi_offset 14, -4
 498:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE; //enable 
 278              		.loc 1 498 0
 279 0004 2A4D     		ldr	r5, .L11
 280 0006 2B4B     		ldr	r3, .L11+4
 281 0008 2B60     		str	r3, [r5]
 499:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE; //enable 
 282              		.loc 1 499 0
 283 000a 0026     		movs	r6, #0
 284 000c AE60     		str	r6, [r5, #8]
 500:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 285              		.loc 1 500 0
 286 000e EE60     		str	r6, [r5, #12]
 501:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 287              		.loc 1 501 0
 288 0010 6E61     		str	r6, [r5, #20]
 502:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 289              		.loc 1 502 0
 290 0012 4FF46023 		mov	r3, #917504
 291 0016 EB61     		str	r3, [r5, #28]
 503:Src/main.c    ****   hadc1.Init.NbrOfConversion = 6;
 292              		.loc 1 503 0
 293 0018 6E60     		str	r6, [r5, #4]
 504:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 294              		.loc 1 504 0
 295 001a 0627     		movs	r7, #6
 296 001c 2F61     		str	r7, [r5, #16]
ARM GAS  /tmp/cc5I5c8k.s 			page 19


 505:Src/main.c    ****   {
 297              		.loc 1 505 0
 298 001e 2846     		mov	r0, r5
 299 0020 FFF7FEFF 		bl	HAL_ADC_Init
 300              	.LVL11:
 512:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 301              		.loc 1 512 0
 302 0024 244C     		ldr	r4, .L11+8
 303 0026 2660     		str	r6, [r4]
 513:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 304              		.loc 1 513 0
 305 0028 4FF00108 		mov	r8, #1
 306 002c C4F80480 		str	r8, [r4, #4]
 514:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 307              		.loc 1 514 0
 308 0030 A660     		str	r6, [r4, #8]
 515:Src/main.c    ****   {
 309              		.loc 1 515 0
 310 0032 2146     		mov	r1, r4
 311 0034 2846     		mov	r0, r5
 312 0036 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 313              	.LVL12:
 522:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 314              		.loc 1 522 0
 315 003a C4F80080 		str	r8, [r4]
 523:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 316              		.loc 1 523 0
 317 003e 0226     		movs	r6, #2
 318 0040 6660     		str	r6, [r4, #4]
 524:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 319              		.loc 1 524 0
 320 0042 2146     		mov	r1, r4
 321 0044 2846     		mov	r0, r5
 322 0046 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 323              	.LVL13:
 525:Src/main.c    ****     Error_Handler();
 324              		.loc 1 525 0
 325 004a 2146     		mov	r1, r4
 326 004c 2846     		mov	r0, r5
 327 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 328              	.LVL14:
 530:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 329              		.loc 1 530 0
 330 0052 0323     		movs	r3, #3
 331 0054 2360     		str	r3, [r4]
 531:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 332              		.loc 1 531 0
 333 0056 6360     		str	r3, [r4, #4]
 532:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 334              		.loc 1 532 0
 335 0058 2146     		mov	r1, r4
 336 005a 2846     		mov	r0, r5
 337 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 338              	.LVL15:
 533:Src/main.c    ****     Error_Handler();
 339              		.loc 1 533 0
 340 0060 2146     		mov	r1, r4
ARM GAS  /tmp/cc5I5c8k.s 			page 20


 341 0062 2846     		mov	r0, r5
 342 0064 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 343              	.LVL16:
 538:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 344              		.loc 1 538 0
 345 0068 2660     		str	r6, [r4]
 539:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 346              		.loc 1 539 0
 347 006a 0423     		movs	r3, #4
 348 006c 6360     		str	r3, [r4, #4]
 540:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 349              		.loc 1 540 0
 350 006e 2146     		mov	r1, r4
 351 0070 2846     		mov	r0, r5
 352 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 353              	.LVL17:
 541:Src/main.c    ****     Error_Handler();
 354              		.loc 1 541 0
 355 0076 2146     		mov	r1, r4
 356 0078 2846     		mov	r0, r5
 357 007a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 358              	.LVL18:
 546:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 359              		.loc 1 546 0
 360 007e 0823     		movs	r3, #8
 361 0080 2360     		str	r3, [r4]
 547:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 362              		.loc 1 547 0
 363 0082 0523     		movs	r3, #5
 364 0084 6360     		str	r3, [r4, #4]
 548:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 365              		.loc 1 548 0
 366 0086 2146     		mov	r1, r4
 367 0088 2846     		mov	r0, r5
 368 008a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 369              	.LVL19:
 549:Src/main.c    ****     Error_Handler();
 370              		.loc 1 549 0
 371 008e 2146     		mov	r1, r4
 372 0090 2846     		mov	r0, r5
 373 0092 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 374              	.LVL20:
 554:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 375              		.loc 1 554 0
 376 0096 0923     		movs	r3, #9
 377 0098 2360     		str	r3, [r4]
 555:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 378              		.loc 1 555 0
 379 009a 6760     		str	r7, [r4, #4]
 556:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 380              		.loc 1 556 0
 381 009c 2146     		mov	r1, r4
 382 009e 2846     		mov	r0, r5
 383 00a0 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 384              	.LVL21:
 557:Src/main.c    ****     Error_Handler();
 385              		.loc 1 557 0
ARM GAS  /tmp/cc5I5c8k.s 			page 21


 386 00a4 2146     		mov	r1, r4
 387 00a6 2846     		mov	r0, r5
 388 00a8 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 389              	.LVL22:
 390 00ac BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 391              	.L12:
 392              		.align	2
 393              	.L11:
 394 00b0 00000000 		.word	hadc1
 395 00b4 00240140 		.word	1073816576
 396 00b8 00000000 		.word	.LANCHOR0
 397              		.cfi_endproc
 398              	.LFE74:
 400              		.section	.text.MX_CAN_Init,"ax",%progbits
 401              		.align	1
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 405              		.fpu softvfp
 407              	MX_CAN_Init:
 408              	.LFB75:
 570:Src/main.c    **** 
 409              		.loc 1 570 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413 0000 10B5     		push	{r4, lr}
 414              	.LCFI5:
 415              		.cfi_def_cfa_offset 8
 416              		.cfi_offset 4, -8
 417              		.cfi_offset 14, -4
 577:Src/main.c    ****   hcan.Init.Prescaler = 2;
 418              		.loc 1 577 0
 419 0002 1448     		ldr	r0, .L15
 420 0004 144B     		ldr	r3, .L15+4
 421 0006 0360     		str	r3, [r0]
 578:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 422              		.loc 1 578 0
 423 0008 0223     		movs	r3, #2
 424 000a 4360     		str	r3, [r0, #4]
 579:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 425              		.loc 1 579 0
 426 000c 0024     		movs	r4, #0
 427 000e 8460     		str	r4, [r0, #8]
 580:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 428              		.loc 1 580 0
 429 0010 C460     		str	r4, [r0, #12]
 581:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 430              		.loc 1 581 0
 431 0012 4FF42023 		mov	r3, #655360
 432 0016 0361     		str	r3, [r0, #16]
 582:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 433              		.loc 1 582 0
 434 0018 4FF44013 		mov	r3, #3145728
 435 001c 4361     		str	r3, [r0, #20]
 583:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 436              		.loc 1 583 0
ARM GAS  /tmp/cc5I5c8k.s 			page 22


 437 001e 0476     		strb	r4, [r0, #24]
 584:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 438              		.loc 1 584 0
 439 0020 4476     		strb	r4, [r0, #25]
 585:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 440              		.loc 1 585 0
 441 0022 8476     		strb	r4, [r0, #26]
 586:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 442              		.loc 1 586 0
 443 0024 C476     		strb	r4, [r0, #27]
 587:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 444              		.loc 1 587 0
 445 0026 0477     		strb	r4, [r0, #28]
 588:Src/main.c    **** 
 446              		.loc 1 588 0
 447 0028 4477     		strb	r4, [r0, #29]
 590:Src/main.c    ****   {
 448              		.loc 1 590 0
 449 002a FFF7FEFF 		bl	HAL_CAN_Init
 450              	.LVL23:
 597:Src/main.c    ****   TxFaults.ExtId = 0x01;          // CAN extended ID
 451              		.loc 1 597 0
 452 002e 0B4B     		ldr	r3, .L15+8
 453 0030 D022     		movs	r2, #208
 454 0032 1A60     		str	r2, [r3]
 598:Src/main.c    ****   TxFaults.RTR = CAN_RTR_DATA;      // CAN frame type
 455              		.loc 1 598 0
 456 0034 0122     		movs	r2, #1
 457 0036 5A60     		str	r2, [r3, #4]
 599:Src/main.c    ****   TxFaults.IDE = CAN_ID_STD;        // CAN ID type
 458              		.loc 1 599 0
 459 0038 DC60     		str	r4, [r3, #12]
 600:Src/main.c    ****   TxFaults.DLC = 8;             // CAN frame length in bytes
 460              		.loc 1 600 0
 461 003a 9C60     		str	r4, [r3, #8]
 601:Src/main.c    ****   TxFaults.TransmitGlobalTime = DISABLE;  // CAN timestamp in TxData[6] and TxData[7]
 462              		.loc 1 601 0
 463 003c 0821     		movs	r1, #8
 464 003e 1961     		str	r1, [r3, #16]
 602:Src/main.c    **** 
 465              		.loc 1 602 0
 466 0040 1C75     		strb	r4, [r3, #20]
 604:Src/main.c    ****   TxCar_state.ExtId = 0x01;          // CAN extended ID
 467              		.loc 1 604 0
 468 0042 074B     		ldr	r3, .L15+12
 469 0044 D121     		movs	r1, #209
 470 0046 1960     		str	r1, [r3]
 605:Src/main.c    ****   TxCar_state.RTR = CAN_RTR_DATA;      // CAN frame type
 471              		.loc 1 605 0
 472 0048 5A60     		str	r2, [r3, #4]
 606:Src/main.c    ****   TxCar_state.IDE = CAN_ID_STD;        // CAN ID type
 473              		.loc 1 606 0
 474 004a DC60     		str	r4, [r3, #12]
 607:Src/main.c    ****   TxCar_state.DLC = 1;             // CAN frame length in bytes
 475              		.loc 1 607 0
 476 004c 9C60     		str	r4, [r3, #8]
 608:Src/main.c    ****   TxCar_state.TransmitGlobalTime = DISABLE;
ARM GAS  /tmp/cc5I5c8k.s 			page 23


 477              		.loc 1 608 0
 478 004e 1A61     		str	r2, [r3, #16]
 609:Src/main.c    **** 
 479              		.loc 1 609 0
 480 0050 1C75     		strb	r4, [r3, #20]
 481 0052 10BD     		pop	{r4, pc}
 482              	.L16:
 483              		.align	2
 484              	.L15:
 485 0054 00000000 		.word	hcan
 486 0058 00640040 		.word	1073767424
 487 005c 00000000 		.word	TxFaults
 488 0060 00000000 		.word	TxCar_state
 489              		.cfi_endproc
 490              	.LFE75:
 492              		.section	.text.updateADC,"ax",%progbits
 493              		.align	1
 494              		.global	updateADC
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 498              		.fpu softvfp
 500              	updateADC:
 501              	.LFB67:
 319:Src/main.c    **** 	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 502              		.loc 1 319 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506              	.LVL24:
 507 0000 10B5     		push	{r4, lr}
 508              	.LCFI6:
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 4, -8
 511              		.cfi_offset 14, -4
 321:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_0;
 512              		.loc 1 321 0
 513 0002 0346     		mov	r3, r0
 514 0004 10B9     		cbnz	r0, .L18
 322:Src/main.c    ****   if (channel == 1) //steering position 
 515              		.loc 1 322 0
 516 0006 0021     		movs	r1, #0
 517 0008 1A4A     		ldr	r2, .L30
 518 000a 1160     		str	r1, [r2]
 519              	.L18:
 323:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_1;
 520              		.loc 1 323 0
 521 000c 012B     		cmp	r3, #1
 522 000e 1CD0     		beq	.L25
 523              	.L19:
 325:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_2;
 524              		.loc 1 325 0
 525 0010 022B     		cmp	r3, #2
 526 0012 1ED0     		beq	.L26
 527              	.L20:
 327:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_3;
 528              		.loc 1 327 0
ARM GAS  /tmp/cc5I5c8k.s 			page 24


 529 0014 032B     		cmp	r3, #3
 530 0016 20D0     		beq	.L27
 531              	.L21:
 329:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 532              		.loc 1 329 0
 533 0018 082B     		cmp	r3, #8
 534 001a 22D0     		beq	.L28
 535              	.L22:
 331:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_9;
 536              		.loc 1 331 0
 537 001c 092B     		cmp	r3, #9
 538 001e 24D0     		beq	.L29
 539              	.L23:
 334:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 540              		.loc 1 334 0
 541 0020 1449     		ldr	r1, .L30
 542 0022 0123     		movs	r3, #1
 543 0024 4B60     		str	r3, [r1, #4]
 335:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 544              		.loc 1 335 0
 545 0026 8B60     		str	r3, [r1, #8]
 336:Src/main.c    **** 
 546              		.loc 1 336 0
 547 0028 134C     		ldr	r4, .L30+4
 548 002a 2046     		mov	r0, r4
 549              	.LVL25:
 550 002c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 551              	.LVL26:
 338:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 552              		.loc 1 338 0
 553 0030 2046     		mov	r0, r4
 554 0032 FFF7FEFF 		bl	HAL_ADC_Start
 555              	.LVL27:
 339:Src/main.c    ****   return HAL_ADC_GetValue(&hadc1);
 556              		.loc 1 339 0
 557 0036 4FF47A71 		mov	r1, #1000
 558 003a 2046     		mov	r0, r4
 559 003c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 560              	.LVL28:
 340:Src/main.c    ****   //HAL_ADC_Stop(&hadc1);
 561              		.loc 1 340 0
 562 0040 2046     		mov	r0, r4
 563 0042 FFF7FEFF 		bl	HAL_ADC_GetValue
 564              	.LVL29:
 361:Src/main.c    **** 
 565              		.loc 1 361 0
 566 0046 80B2     		uxth	r0, r0
 567 0048 10BD     		pop	{r4, pc}
 568              	.LVL30:
 569              	.L25:
 324:Src/main.c    ****   if (channel == 2) //brake pressure 1
 570              		.loc 1 324 0
 571 004a 0121     		movs	r1, #1
 572 004c 094A     		ldr	r2, .L30
 573 004e 1160     		str	r1, [r2]
 574 0050 DEE7     		b	.L19
 575              	.L26:
ARM GAS  /tmp/cc5I5c8k.s 			page 25


 326:Src/main.c    ****   if (channel == 3) //brake pressure 2
 576              		.loc 1 326 0
 577 0052 0221     		movs	r1, #2
 578 0054 074A     		ldr	r2, .L30
 579 0056 1160     		str	r1, [r2]
 580 0058 DCE7     		b	.L20
 581              	.L27:
 328:Src/main.c    ****   if (channel == 8) //throttle A
 582              		.loc 1 328 0
 583 005a 0321     		movs	r1, #3
 584 005c 054A     		ldr	r2, .L30
 585 005e 1160     		str	r1, [r2]
 586 0060 DAE7     		b	.L21
 587              	.L28:
 330:Src/main.c    ****   if (channel == 9) //throttle B 
 588              		.loc 1 330 0
 589 0062 0821     		movs	r1, #8
 590 0064 034A     		ldr	r2, .L30
 591 0066 1160     		str	r1, [r2]
 592 0068 D8E7     		b	.L22
 593              	.L29:
 332:Src/main.c    **** 
 594              		.loc 1 332 0
 595 006a 0922     		movs	r2, #9
 596 006c 014B     		ldr	r3, .L30
 597 006e 1A60     		str	r2, [r3]
 598 0070 D6E7     		b	.L23
 599              	.L31:
 600 0072 00BF     		.align	2
 601              	.L30:
 602 0074 00000000 		.word	.LANCHOR0
 603 0078 00000000 		.word	hadc1
 604              		.cfi_endproc
 605              	.LFE67:
 607              		.section	.text.checkBTSF,"ax",%progbits
 608              		.align	1
 609              		.global	checkBTSF
 610              		.syntax unified
 611              		.thumb
 612              		.thumb_func
 613              		.fpu softvfp
 615              	checkBTSF:
 616              	.LFB66:
 301:Src/main.c    ****   brakePressure_1 = updateADC(2);
 617              		.loc 1 301 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621 0000 10B5     		push	{r4, lr}
 622              	.LCFI7:
 623              		.cfi_def_cfa_offset 8
 624              		.cfi_offset 4, -8
 625              		.cfi_offset 14, -4
 302:Src/main.c    ****   throttle_A = updateADC(8); 
 626              		.loc 1 302 0
 627 0002 0220     		movs	r0, #2
 628 0004 FFF7FEFF 		bl	updateADC
ARM GAS  /tmp/cc5I5c8k.s 			page 26


 629              	.LVL31:
 630 0008 084C     		ldr	r4, .L37
 631 000a 2080     		strh	r0, [r4]	@ movhi
 303:Src/main.c    **** 
 632              		.loc 1 303 0
 633 000c 0820     		movs	r0, #8
 634 000e FFF7FEFF 		bl	updateADC
 635              	.LVL32:
 636 0012 074B     		ldr	r3, .L37+4
 637 0014 1880     		strh	r0, [r3]	@ movhi
 307:Src/main.c    **** 	     return 1;
 638              		.loc 1 307 0
 639 0016 2388     		ldrh	r3, [r4]
 640 0018 1BB1     		cbz	r3, .L34
 307:Src/main.c    **** 	     return 1;
 641              		.loc 1 307 0 is_stmt 0 discriminator 1
 642 001a 5028     		cmp	r0, #80
 643 001c 03DC     		bgt	.L35
 311:Src/main.c    **** }
 644              		.loc 1 311 0 is_stmt 1
 645 001e 0020     		movs	r0, #0
 646 0020 10BD     		pop	{r4, pc}
 647              	.L34:
 648 0022 0020     		movs	r0, #0
 649 0024 10BD     		pop	{r4, pc}
 650              	.L35:
 308:Src/main.c    ****   }
 651              		.loc 1 308 0
 652 0026 0120     		movs	r0, #1
 312:Src/main.c    **** 
 653              		.loc 1 312 0
 654 0028 10BD     		pop	{r4, pc}
 655              	.L38:
 656 002a 00BF     		.align	2
 657              	.L37:
 658 002c 00000000 		.word	brakePressure_1
 659 0030 00000000 		.word	throttle_A
 660              		.cfi_endproc
 661              	.LFE66:
 663              		.global	__aeabi_ui2d
 664              		.global	__aeabi_i2d
 665              		.global	__aeabi_dmul
 666              		.global	__aeabi_dsub
 667              		.global	__aeabi_dcmplt
 668              		.global	__aeabi_dadd
 669              		.global	__aeabi_ddiv
 670              		.global	__aeabi_dcmpge
 671              		.section	.text.APPS_Diff,"ax",%progbits
 672              		.align	1
 673              		.global	APPS_Diff
 674              		.syntax unified
 675              		.thumb
 676              		.thumb_func
 677              		.fpu softvfp
 679              	APPS_Diff:
 680              	.LFB68:
 368:Src/main.c    **** 
ARM GAS  /tmp/cc5I5c8k.s 			page 27


 681              		.loc 1 368 0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 0
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 686              	.LCFI8:
 687              		.cfi_def_cfa_offset 32
 688              		.cfi_offset 3, -32
 689              		.cfi_offset 4, -28
 690              		.cfi_offset 5, -24
 691              		.cfi_offset 6, -20
 692              		.cfi_offset 7, -16
 693              		.cfi_offset 8, -12
 694              		.cfi_offset 9, -8
 695              		.cfi_offset 14, -4
 374:Src/main.c    ****   double t_B = throttle_B;
 696              		.loc 1 374 0
 697 0004 284B     		ldr	r3, .L51+8
 698 0006 1888     		ldrh	r0, [r3]
 699 0008 FFF7FEFF 		bl	__aeabi_ui2d
 700              	.LVL33:
 701 000c 0446     		mov	r4, r0
 702 000e 0D46     		mov	r5, r1
 703              	.LVL34:
 375:Src/main.c    ****   
 704              		.loc 1 375 0
 705 0010 264B     		ldr	r3, .L51+12
 706 0012 1888     		ldrh	r0, [r3]
 707 0014 FFF7FEFF 		bl	__aeabi_ui2d
 708              	.LVL35:
 709 0018 0646     		mov	r6, r0
 710 001a 0F46     		mov	r7, r1
 711              	.LVL36:
 378:Src/main.c    **** 
 712              		.loc 1 378 0
 713 001c 244B     		ldr	r3, .L51+16
 714 001e 1888     		ldrh	r0, [r3]
 715 0020 FFF7FEFF 		bl	__aeabi_i2d
 716              	.LVL37:
 717 0024 1EA3     		adr	r3, .L51
 718 0026 D3E90023 		ldrd	r2, [r3]
 719 002a FFF7FEFF 		bl	__aeabi_dmul
 720              	.LVL38:
 721 002e 0246     		mov	r2, r0
 722 0030 0B46     		mov	r3, r1
 723 0032 2046     		mov	r0, r4
 724 0034 2946     		mov	r1, r5
 725 0036 FFF7FEFF 		bl	__aeabi_dsub
 726              	.LVL39:
 727 003a 8046     		mov	r8, r0
 728 003c 8946     		mov	r9, r1
 729              	.LVL40:
 380:Src/main.c    ****   
 730              		.loc 1 380 0
 731 003e 3246     		mov	r2, r6
 732 0040 3B46     		mov	r3, r7
 733 0042 FFF7FEFF 		bl	__aeabi_dsub
ARM GAS  /tmp/cc5I5c8k.s 			page 28


 734              	.LVL41:
 735 0046 0546     		mov	r5, r0
 736 0048 0C46     		mov	r4, r1
 737              	.LVL42:
 383:Src/main.c    ****     numerator = -1*numerator;
 738              		.loc 1 383 0
 739 004a 0022     		movs	r2, #0
 740 004c 0023     		movs	r3, #0
 741 004e 2846     		mov	r0, r5
 742 0050 2146     		mov	r1, r4
 743 0052 FFF7FEFF 		bl	__aeabi_dcmplt
 744              	.LVL43:
 745 0056 E8B9     		cbnz	r0, .L49
 746              	.LVL44:
 747              	.L40:
 387:Src/main.c    **** 
 748              		.loc 1 387 0
 749 0058 4246     		mov	r2, r8
 750 005a 4B46     		mov	r3, r9
 751 005c 3046     		mov	r0, r6
 752 005e 3946     		mov	r1, r7
 753 0060 FFF7FEFF 		bl	__aeabi_dadd
 754              	.LVL45:
 755 0064 0022     		movs	r2, #0
 756 0066 134B     		ldr	r3, .L51+20
 757 0068 FFF7FEFF 		bl	__aeabi_dmul
 758              	.LVL46:
 759 006c 0646     		mov	r6, r0
 760              	.LVL47:
 761 006e 0F46     		mov	r7, r1
 762              	.LVL48:
 389:Src/main.c    **** 
 763              		.loc 1 389 0
 764 0070 0022     		movs	r2, #0
 765 0072 114B     		ldr	r3, .L51+24
 766 0074 2846     		mov	r0, r5
 767 0076 2146     		mov	r1, r4
 768 0078 FFF7FEFF 		bl	__aeabi_dmul
 769              	.LVL49:
 770 007c 3246     		mov	r2, r6
 771 007e 3B46     		mov	r3, r7
 772 0080 FFF7FEFF 		bl	__aeabi_ddiv
 773              	.LVL50:
 391:Src/main.c    ****     return 1;
 774              		.loc 1 391 0
 775 0084 0022     		movs	r2, #0
 776 0086 0D4B     		ldr	r3, .L51+28
 777 0088 FFF7FEFF 		bl	__aeabi_dcmpge
 778              	.LVL51:
 779 008c 28B9     		cbnz	r0, .L50
 394:Src/main.c    **** }
 780              		.loc 1 394 0
 781 008e 0020     		movs	r0, #0
 395:Src/main.c    **** void sendFaultMsg(){
 782              		.loc 1 395 0
 783 0090 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 784              	.LVL52:
ARM GAS  /tmp/cc5I5c8k.s 			page 29


 785              	.L49:
 384:Src/main.c    ****   }
 786              		.loc 1 384 0
 787 0094 04F10044 		add	r4, r4, #-2147483648
 788              	.LVL53:
 789 0098 DEE7     		b	.L40
 790              	.LVL54:
 791              	.L50:
 392:Src/main.c    ****   }
 792              		.loc 1 392 0
 793 009a 0120     		movs	r0, #1
 794 009c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 795              	.LVL55:
 796              	.L52:
 797              		.align	3
 798              	.L51:
 799 00a0 7B14AE47 		.word	1202590843
 800 00a4 E17AB43F 		.word	1068792545
 801 00a8 00000000 		.word	throttle_A
 802 00ac 00000000 		.word	throttle_B
 803 00b0 00000000 		.word	.LANCHOR1
 804 00b4 0000E03F 		.word	1071644672
 805 00b8 00005940 		.word	1079574528
 806 00bc 00002440 		.word	1076101120
 807              		.cfi_endproc
 808              	.LFE68:
 810              		.section	.text.checkAPPS,"ax",%progbits
 811              		.align	1
 812              		.global	checkAPPS
 813              		.syntax unified
 814              		.thumb
 815              		.thumb_func
 816              		.fpu softvfp
 818              	checkAPPS:
 819              	.LFB65:
 276:Src/main.c    **** 
 820              		.loc 1 276 0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824 0000 10B5     		push	{r4, lr}
 825              	.LCFI9:
 826              		.cfi_def_cfa_offset 8
 827              		.cfi_offset 4, -8
 828              		.cfi_offset 14, -4
 278:Src/main.c    ****   throttle_B = updateADC(9); 
 829              		.loc 1 278 0
 830 0002 0820     		movs	r0, #8
 831 0004 FFF7FEFF 		bl	updateADC
 832              	.LVL56:
 833 0008 104B     		ldr	r3, .L61
 834 000a 1880     		strh	r0, [r3]	@ movhi
 279:Src/main.c    ****   //0-5000 based ?
 835              		.loc 1 279 0
 836 000c 0920     		movs	r0, #9
 837 000e FFF7FEFF 		bl	updateADC
 838              	.LVL57:
ARM GAS  /tmp/cc5I5c8k.s 			page 30


 839 0012 0F4B     		ldr	r3, .L61+4
 840 0014 1880     		strh	r0, [r3]	@ movhi
 283:Src/main.c    ****   while(millisTimer > 0 && APPS_Diff()){
 841              		.loc 1 283 0
 842 0016 4FF47A72 		mov	r2, #1000
 843 001a 0E4B     		ldr	r3, .L61+8
 844 001c 1A60     		str	r2, [r3]
 284:Src/main.c    **** 	throttle_A = updateADC(8);
 845              		.loc 1 284 0
 846 001e 09E0     		b	.L54
 847              	.L56:
 285:Src/main.c    **** 	throttle_B = updateADC(9);
 848              		.loc 1 285 0
 849 0020 0820     		movs	r0, #8
 850 0022 FFF7FEFF 		bl	updateADC
 851              	.LVL58:
 852 0026 094B     		ldr	r3, .L61
 853 0028 1880     		strh	r0, [r3]	@ movhi
 286:Src/main.c    ****   } //stay in this loop while there is a 10% difference in throttles
 854              		.loc 1 286 0
 855 002a 0920     		movs	r0, #9
 856 002c FFF7FEFF 		bl	updateADC
 857              	.LVL59:
 858 0030 074B     		ldr	r3, .L61+4
 859 0032 1880     		strh	r0, [r3]	@ movhi
 860              	.L54:
 284:Src/main.c    **** 	throttle_A = updateADC(8);
 861              		.loc 1 284 0
 862 0034 074B     		ldr	r3, .L61+8
 863 0036 1C68     		ldr	r4, [r3]
 864 0038 1CB1     		cbz	r4, .L55
 284:Src/main.c    **** 	throttle_A = updateADC(8);
 865              		.loc 1 284 0 is_stmt 0 discriminator 1
 866 003a FFF7FEFF 		bl	APPS_Diff
 867              	.LVL60:
 868 003e 0028     		cmp	r0, #0
 869 0040 EED1     		bne	.L56
 870              	.L55:
 290:Src/main.c    ****     return 1; //will set driving = 0;
 871              		.loc 1 290 0 is_stmt 1
 872 0042 0CB1     		cbz	r4, .L60
 293:Src/main.c    **** }
 873              		.loc 1 293 0
 874 0044 0020     		movs	r0, #0
 294:Src/main.c    **** 
 875              		.loc 1 294 0
 876 0046 10BD     		pop	{r4, pc}
 877              	.L60:
 291:Src/main.c    ****   }
 878              		.loc 1 291 0
 879 0048 0120     		movs	r0, #1
 880 004a 10BD     		pop	{r4, pc}
 881              	.L62:
 882              		.align	2
 883              	.L61:
 884 004c 00000000 		.word	throttle_A
 885 0050 00000000 		.word	throttle_B
ARM GAS  /tmp/cc5I5c8k.s 			page 31


 886 0054 00000000 		.word	millisTimer
 887              		.cfi_endproc
 888              	.LFE65:
 890              		.section	.text.sendFaultMsg,"ax",%progbits
 891              		.align	1
 892              		.global	sendFaultMsg
 893              		.syntax unified
 894              		.thumb
 895              		.thumb_func
 896              		.fpu softvfp
 898              	sendFaultMsg:
 899              	.LFB69:
 396:Src/main.c    ****   TxFault_data[0] = bms;  //Set all the data (faults) to their current values
 900              		.loc 1 396 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 0
 903              		@ frame_needed = 0, uses_anonymous_args = 0
 904 0000 08B5     		push	{r3, lr}
 905              	.LCFI10:
 906              		.cfi_def_cfa_offset 8
 907              		.cfi_offset 3, -8
 908              		.cfi_offset 14, -4
 397:Src/main.c    ****   TxFault_data[1] = imd;
 909              		.loc 1 397 0
 910 0002 094A     		ldr	r2, .L65
 911 0004 094B     		ldr	r3, .L65+4
 912 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 913 0008 1370     		strb	r3, [r2]
 398:Src/main.c    ****   TxFault_data[2] = bspd;
 914              		.loc 1 398 0
 915 000a 094B     		ldr	r3, .L65+8
 916 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 917 000e 5370     		strb	r3, [r2, #1]
 399:Src/main.c    ****   TxFault_data[3] = apps;
 918              		.loc 1 399 0
 919 0010 084B     		ldr	r3, .L65+12
 920 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 921 0014 9370     		strb	r3, [r2, #2]
 400:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxFaults, TxFault_data, &TxFaultsMailbox);
 922              		.loc 1 400 0
 923 0016 084B     		ldr	r3, .L65+16
 924 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 925 001a D370     		strb	r3, [r2, #3]
 401:Src/main.c    **** }
 926              		.loc 1 401 0
 927 001c 074B     		ldr	r3, .L65+20
 928 001e 0849     		ldr	r1, .L65+24
 929 0020 0848     		ldr	r0, .L65+28
 930 0022 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 931              	.LVL61:
 932 0026 08BD     		pop	{r3, pc}
 933              	.L66:
 934              		.align	2
 935              	.L65:
 936 0028 00000000 		.word	.LANCHOR2
 937 002c 00000000 		.word	bms
 938 0030 00000000 		.word	imd
ARM GAS  /tmp/cc5I5c8k.s 			page 32


 939 0034 00000000 		.word	bspd
 940 0038 00000000 		.word	apps
 941 003c 00000000 		.word	TxFaultsMailbox
 942 0040 00000000 		.word	TxFaults
 943 0044 00000000 		.word	hcan
 944              		.cfi_endproc
 945              	.LFE69:
 947              		.section	.text.sendCar_state,"ax",%progbits
 948              		.align	1
 949              		.global	sendCar_state
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu softvfp
 955              	sendCar_state:
 956              	.LFB70:
 404:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxCar_state,TxCar_state_data, &TxCar_stateMailbox);
 957              		.loc 1 404 0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 0
 960              		@ frame_needed = 0, uses_anonymous_args = 0
 961 0000 08B5     		push	{r3, lr}
 962              	.LCFI11:
 963              		.cfi_def_cfa_offset 8
 964              		.cfi_offset 3, -8
 965              		.cfi_offset 14, -4
 405:Src/main.c    **** }
 966              		.loc 1 405 0
 967 0002 034B     		ldr	r3, .L69
 968 0004 034A     		ldr	r2, .L69+4
 969 0006 0449     		ldr	r1, .L69+8
 970 0008 0448     		ldr	r0, .L69+12
 971 000a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 972              	.LVL62:
 973 000e 08BD     		pop	{r3, pc}
 974              	.L70:
 975              		.align	2
 976              	.L69:
 977 0010 00000000 		.word	TxCar_stateMailbox
 978 0014 00000000 		.word	.LANCHOR3
 979 0018 00000000 		.word	TxCar_state
 980 001c 00000000 		.word	hcan
 981              		.cfi_endproc
 982              	.LFE70:
 984              		.section	.text.car_state_machine,"ax",%progbits
 985              		.align	1
 986              		.global	car_state_machine
 987              		.syntax unified
 988              		.thumb
 989              		.thumb_func
 990              		.fpu softvfp
 992              	car_state_machine:
 993              	.LFB71:
 409:Src/main.c    ****   if(STATE > TxCar_state_data[0])
 994              		.loc 1 409 0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc5I5c8k.s 			page 33


 997              		@ frame_needed = 0, uses_anonymous_args = 0
 998              		@ link register save eliminated.
 999              	.LVL63:
 410:Src/main.c    ****   {
 1000              		.loc 1 410 0
 1001 0000 034B     		ldr	r3, .L73
 1002 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1003 0004 8342     		cmp	r3, r0
 1004 0006 01D2     		bcs	.L71
 412:Src/main.c    ****   }
 1005              		.loc 1 412 0
 1006 0008 014B     		ldr	r3, .L73
 1007 000a 1870     		strb	r0, [r3]
 1008              	.L71:
 1009 000c 7047     		bx	lr
 1010              	.L74:
 1011 000e 00BF     		.align	2
 1012              	.L73:
 1013 0010 00000000 		.word	.LANCHOR3
 1014              		.cfi_endproc
 1015              	.LFE71:
 1017              		.section	.text.readFaults,"ax",%progbits
 1018              		.align	1
 1019              		.global	readFaults
 1020              		.syntax unified
 1021              		.thumb
 1022              		.thumb_func
 1023              		.fpu softvfp
 1025              	readFaults:
 1026              	.LFB72:
 416:Src/main.c    ****   if (HAL_GPIO_ReadPin(GPIOD, FAULT_BSPD_STATUS_Pin) == GPIO_PIN_RESET)
 1027              		.loc 1 416 0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 0
 1030              		@ frame_needed = 0, uses_anonymous_args = 0
 1031 0000 08B5     		push	{r3, lr}
 1032              	.LCFI12:
 1033              		.cfi_def_cfa_offset 8
 1034              		.cfi_offset 3, -8
 1035              		.cfi_offset 14, -4
 417:Src/main.c    ****     bspd = FAULT_ACTIVE;
 1036              		.loc 1 417 0
 1037 0002 0121     		movs	r1, #1
 1038 0004 1B48     		ldr	r0, .L85
 1039 0006 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1040              	.LVL64:
 1041 000a 30BB     		cbnz	r0, .L76
 418:Src/main.c    ****   else bspd = FAULT_INACTIVE;
 1042              		.loc 1 418 0
 1043 000c FF22     		movs	r2, #255
 1044 000e 1A4B     		ldr	r3, .L85+4
 1045 0010 1A70     		strb	r2, [r3]
 1046              	.L77:
 421:Src/main.c    ****     imd = FAULT_ACTIVE;
 1047              		.loc 1 421 0
 1048 0012 4FF48041 		mov	r1, #16384
 1049 0016 1948     		ldr	r0, .L85+8
ARM GAS  /tmp/cc5I5c8k.s 			page 34


 1050 0018 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1051              	.LVL65:
 1052 001c 08BB     		cbnz	r0, .L78
 422:Src/main.c    ****   else imd = FAULT_INACTIVE;
 1053              		.loc 1 422 0
 1054 001e FF22     		movs	r2, #255
 1055 0020 174B     		ldr	r3, .L85+12
 1056 0022 1A70     		strb	r2, [r3]
 1057              	.L79:
 425:Src/main.c    ****     bms = FAULT_ACTIVE;
 1058              		.loc 1 425 0
 1059 0024 4FF40041 		mov	r1, #32768
 1060 0028 1448     		ldr	r0, .L85+8
 1061 002a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1062              	.LVL66:
 1063 002e E0B9     		cbnz	r0, .L80
 426:Src/main.c    ****   else bms = FAULT_INACTIVE;
 1064              		.loc 1 426 0
 1065 0030 FF22     		movs	r2, #255
 1066 0032 144B     		ldr	r3, .L85+16
 1067 0034 1A70     		strb	r2, [r3]
 1068              	.L81:
 429:Src/main.c    ****     TxCar_state_data[0] = LV_ON;
 1069              		.loc 1 429 0
 1070 0036 134B     		ldr	r3, .L85+16
 1071 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1072 003a 2BB9     		cbnz	r3, .L82
 429:Src/main.c    ****     TxCar_state_data[0] = LV_ON;
 1073              		.loc 1 429 0 is_stmt 0 discriminator 1
 1074 003c 104B     		ldr	r3, .L85+12
 1075 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1076 0040 13B9     		cbnz	r3, .L82
 429:Src/main.c    ****     TxCar_state_data[0] = LV_ON;
 1077              		.loc 1 429 0 discriminator 2
 1078 0042 0D4B     		ldr	r3, .L85+4
 1079 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1080 0046 3BB1     		cbz	r3, .L75
 1081              	.L82:
 430:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, RTD_EN_Pin | RTDS_EN_Pin, GPIO_PIN_RESET);
 1082              		.loc 1 430 0 is_stmt 1
 1083 0048 0122     		movs	r2, #1
 1084 004a 0F4B     		ldr	r3, .L85+20
 1085 004c 1A70     		strb	r2, [r3]
 431:Src/main.c    ****   }
 1086              		.loc 1 431 0
 1087 004e 0022     		movs	r2, #0
 1088 0050 2821     		movs	r1, #40
 1089 0052 0E48     		ldr	r0, .L85+24
 1090 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1091              	.LVL67:
 1092              	.L75:
 1093 0058 08BD     		pop	{r3, pc}
 1094              	.L76:
 419:Src/main.c    ****   
 1095              		.loc 1 419 0
 1096 005a 0022     		movs	r2, #0
 1097 005c 064B     		ldr	r3, .L85+4
ARM GAS  /tmp/cc5I5c8k.s 			page 35


 1098 005e 1A70     		strb	r2, [r3]
 1099 0060 D7E7     		b	.L77
 1100              	.L78:
 423:Src/main.c    ****   
 1101              		.loc 1 423 0
 1102 0062 0022     		movs	r2, #0
 1103 0064 064B     		ldr	r3, .L85+12
 1104 0066 1A70     		strb	r2, [r3]
 1105 0068 DCE7     		b	.L79
 1106              	.L80:
 427:Src/main.c    **** 
 1107              		.loc 1 427 0
 1108 006a 0022     		movs	r2, #0
 1109 006c 054B     		ldr	r3, .L85+16
 1110 006e 1A70     		strb	r2, [r3]
 1111 0070 E1E7     		b	.L81
 1112              	.L86:
 1113 0072 00BF     		.align	2
 1114              	.L85:
 1115 0074 00140140 		.word	1073812480
 1116 0078 00000000 		.word	bspd
 1117 007c 00100140 		.word	1073811456
 1118 0080 00000000 		.word	imd
 1119 0084 00000000 		.word	bms
 1120 0088 00000000 		.word	.LANCHOR3
 1121 008c 000C0140 		.word	1073810432
 1122              		.cfi_endproc
 1123              	.LFE72:
 1125              		.section	.text.SystemClock_Config,"ax",%progbits
 1126              		.align	1
 1127              		.global	SystemClock_Config
 1128              		.syntax unified
 1129              		.thumb
 1130              		.thumb_func
 1131              		.fpu softvfp
 1133              	SystemClock_Config:
 1134              	.LFB73:
 445:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1135              		.loc 1 445 0
 1136              		.cfi_startproc
 1137              		@ args = 0, pretend = 0, frame = 80
 1138              		@ frame_needed = 0, uses_anonymous_args = 0
 1139 0000 30B5     		push	{r4, r5, lr}
 1140              	.LCFI13:
 1141              		.cfi_def_cfa_offset 12
 1142              		.cfi_offset 4, -12
 1143              		.cfi_offset 5, -8
 1144              		.cfi_offset 14, -4
 1145 0002 95B0     		sub	sp, sp, #84
 1146              	.LCFI14:
 1147              		.cfi_def_cfa_offset 96
 446:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1148              		.loc 1 446 0
 1149 0004 2822     		movs	r2, #40
 1150 0006 0021     		movs	r1, #0
 1151 0008 0DEB0200 		add	r0, sp, r2
 1152 000c FFF7FEFF 		bl	memset
ARM GAS  /tmp/cc5I5c8k.s 			page 36


 1153              	.LVL68:
 447:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1154              		.loc 1 447 0
 1155 0010 0024     		movs	r4, #0
 1156 0012 0594     		str	r4, [sp, #20]
 1157 0014 0694     		str	r4, [sp, #24]
 1158 0016 0794     		str	r4, [sp, #28]
 1159 0018 0894     		str	r4, [sp, #32]
 1160 001a 0994     		str	r4, [sp, #36]
 448:Src/main.c    **** 
 1161              		.loc 1 448 0
 1162 001c 0194     		str	r4, [sp, #4]
 1163 001e 0294     		str	r4, [sp, #8]
 1164 0020 0394     		str	r4, [sp, #12]
 1165 0022 0494     		str	r4, [sp, #16]
 452:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1166              		.loc 1 452 0
 1167 0024 0225     		movs	r5, #2
 1168 0026 0A95     		str	r5, [sp, #40]
 453:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1169              		.loc 1 453 0
 1170 0028 0123     		movs	r3, #1
 1171 002a 0E93     		str	r3, [sp, #56]
 454:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1172              		.loc 1 454 0
 1173 002c 1023     		movs	r3, #16
 1174 002e 0F93     		str	r3, [sp, #60]
 456:Src/main.c    ****   {
 1175              		.loc 1 456 0
 1176 0030 0AA8     		add	r0, sp, #40
 1177 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1178              	.LVL69:
 462:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1179              		.loc 1 462 0
 1180 0036 0F23     		movs	r3, #15
 1181 0038 0593     		str	r3, [sp, #20]
 464:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1182              		.loc 1 464 0
 1183 003a 0694     		str	r4, [sp, #24]
 465:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1184              		.loc 1 465 0
 1185 003c 0794     		str	r4, [sp, #28]
 466:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1186              		.loc 1 466 0
 1187 003e 0894     		str	r4, [sp, #32]
 467:Src/main.c    **** 
 1188              		.loc 1 467 0
 1189 0040 0994     		str	r4, [sp, #36]
 469:Src/main.c    ****   {
 1190              		.loc 1 469 0
 1191 0042 2146     		mov	r1, r4
 1192 0044 05A8     		add	r0, sp, #20
 1193 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1194              	.LVL70:
 473:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 1195              		.loc 1 473 0
 1196 004a 0195     		str	r5, [sp, #4]
ARM GAS  /tmp/cc5I5c8k.s 			page 37


 474:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1197              		.loc 1 474 0
 1198 004c 0394     		str	r4, [sp, #12]
 475:Src/main.c    ****   {
 1199              		.loc 1 475 0
 1200 004e 01A8     		add	r0, sp, #4
 1201 0050 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1202              	.LVL71:
 479:Src/main.c    **** 
 1203              		.loc 1 479 0
 1204 0054 15B0     		add	sp, sp, #84
 1205              	.LCFI15:
 1206              		.cfi_def_cfa_offset 12
 1207              		@ sp needed
 1208 0056 30BD     		pop	{r4, r5, pc}
 1209              		.cfi_endproc
 1210              	.LFE73:
 1212              		.section	.text.main,"ax",%progbits
 1213              		.align	1
 1214              		.global	main
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1218              		.fpu softvfp
 1220              	main:
 1221              	.LFB64:
 168:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1222              		.loc 1 168 0
 1223              		.cfi_startproc
 1224              		@ Volatile: function does not return.
 1225              		@ args = 0, pretend = 0, frame = 0
 1226              		@ frame_needed = 0, uses_anonymous_args = 0
 1227 0000 08B5     		push	{r3, lr}
 1228              	.LCFI16:
 1229              		.cfi_def_cfa_offset 8
 1230              		.cfi_offset 3, -8
 1231              		.cfi_offset 14, -4
 173:Src/main.c    ****   secTimer = 3000000; //3 seconds
 1232              		.loc 1 173 0
 1233 0002 434A     		ldr	r2, .L101
 1234 0004 434B     		ldr	r3, .L101+4
 1235 0006 1A60     		str	r2, [r3]
 174:Src/main.c    ****   sysTimer = 500; //timer to send message every second
 1236              		.loc 1 174 0
 1237 0008 434A     		ldr	r2, .L101+8
 1238 000a 444B     		ldr	r3, .L101+12
 1239 000c 1A60     		str	r2, [r3]
 175:Src/main.c    **** 
 1240              		.loc 1 175 0
 1241 000e 4FF4FA72 		mov	r2, #500
 1242 0012 434B     		ldr	r3, .L101+16
 1243 0014 1A60     		str	r2, [r3]
 182:Src/main.c    **** 
 1244              		.loc 1 182 0
 1245 0016 FFF7FEFF 		bl	HAL_Init
 1246              	.LVL72:
 194:Src/main.c    **** 
ARM GAS  /tmp/cc5I5c8k.s 			page 38


 1247              		.loc 1 194 0
 1248 001a FFF7FEFF 		bl	SystemClock_Config
 1249              	.LVL73:
 201:Src/main.c    ****   MX_SPI1_Init();
 1250              		.loc 1 201 0
 1251 001e FFF7FEFF 		bl	MX_GPIO_Init
 1252              	.LVL74:
 202:Src/main.c    ****   MX_ADC1_Init();
 1253              		.loc 1 202 0
 1254 0022 FFF7FEFF 		bl	MX_SPI1_Init
 1255              	.LVL75:
 203:Src/main.c    ****   MX_CAN_Init();
 1256              		.loc 1 203 0
 1257 0026 FFF7FEFF 		bl	MX_ADC1_Init
 1258              	.LVL76:
 204:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1259              		.loc 1 204 0
 1260 002a FFF7FEFF 		bl	MX_CAN_Init
 1261              	.LVL77:
 206:Src/main.c    **** 
 1262              		.loc 1 206 0
 1263 002e 3D48     		ldr	r0, .L101+20
 1264 0030 FFF7FEFF 		bl	HAL_CAN_Start
 1265              	.LVL78:
 1266 0034 42E0     		b	.L95
 1267              	.L100:
 217:Src/main.c    **** 
 1268              		.loc 1 217 0
 1269 0036 0220     		movs	r0, #2
 1270 0038 FFF7FEFF 		bl	car_state_machine
 1271              	.LVL79:
 220:Src/main.c    **** 		  car_state_machine(ENABLE_FLIPPED);
 1272              		.loc 1 220 0
 1273 003c 4FF40041 		mov	r1, #32768
 1274 0040 3948     		ldr	r0, .L101+24
 1275 0042 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1276              	.LVL80:
 1277 0046 0028     		cmp	r0, #0
 1278 0048 3ED1     		bne	.L90
 221:Src/main.c    ****       //ADC for Brake pressure
 1279              		.loc 1 221 0
 1280 004a 0420     		movs	r0, #4
 1281 004c FFF7FEFF 		bl	car_state_machine
 1282              	.LVL81:
 223:Src/main.c    **** 
 1283              		.loc 1 223 0
 1284 0050 0220     		movs	r0, #2
 1285 0052 FFF7FEFF 		bl	updateADC
 1286              	.LVL82:
 1287 0056 354B     		ldr	r3, .L101+28
 1288 0058 1880     		strh	r0, [r3]	@ movhi
 228:Src/main.c    ****         secTimer = 3000; //change to 3000 for 3 seconds
 1289              		.loc 1 228 0
 1290 005a 354B     		ldr	r3, .L101+32
 1291 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1292 005e 042B     		cmp	r3, #4
 1293 0060 10D0     		beq	.L98
ARM GAS  /tmp/cc5I5c8k.s 			page 39


 1294              	.L91:
 237:Src/main.c    **** 			    HAL_GPIO_WritePin(GPIOB, RTDS_EN_Pin, GPIO_PIN_RESET);
 1295              		.loc 1 237 0
 1296 0062 2E4B     		ldr	r3, .L101+12
 1297 0064 1B68     		ldr	r3, [r3]
 1298 0066 7BBB     		cbnz	r3, .L90
 237:Src/main.c    **** 			    HAL_GPIO_WritePin(GPIOB, RTDS_EN_Pin, GPIO_PIN_RESET);
 1299              		.loc 1 237 0 is_stmt 0 discriminator 1
 1300 0068 314B     		ldr	r3, .L101+32
 1301 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1302 006c 13F0280F 		tst	r3, #40
 1303 0070 2AD0     		beq	.L90
 238:Src/main.c    ****           //SeT pwr
 1304              		.loc 1 238 0 is_stmt 1
 1305 0072 0022     		movs	r2, #0
 1306 0074 0821     		movs	r1, #8
 1307 0076 2C48     		ldr	r0, .L101+24
 1308 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1309              	.LVL83:
 240:Src/main.c    **** 
 1310              		.loc 1 240 0
 1311 007c 1020     		movs	r0, #16
 1312 007e FFF7FEFF 		bl	car_state_machine
 1313              	.LVL84:
 1314 0082 21E0     		b	.L90
 1315              	.L98:
 229:Src/main.c    ****         car_state_machine(RTDS_SOUND);
 1316              		.loc 1 229 0
 1317 0084 40F6B832 		movw	r2, #3000
 1318 0088 244B     		ldr	r3, .L101+12
 1319 008a 1A60     		str	r2, [r3]
 230:Src/main.c    ****         HAL_GPIO_WritePin(GPIOB, RTD_EN_Pin | RTDS_EN_Pin | BTSF_EN_Pin | APPS_EN_Pin, GPIO_PIN_SET
 1320              		.loc 1 230 0
 1321 008c 0820     		movs	r0, #8
 1322 008e FFF7FEFF 		bl	car_state_machine
 1323              	.LVL85:
 231:Src/main.c    ****         } 
 1324              		.loc 1 231 0
 1325 0092 0122     		movs	r2, #1
 1326 0094 4FF49C71 		mov	r1, #312
 1327 0098 2348     		ldr	r0, .L101+24
 1328 009a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1329              	.LVL86:
 1330 009e E0E7     		b	.L91
 1331              	.L93:
 249:Src/main.c    ****       TxCar_state_data[0] = SOFT_FAULT;
 1332              		.loc 1 249 0
 1333 00a0 0022     		movs	r2, #0
 1334 00a2 4FF48871 		mov	r1, #272
 1335 00a6 2048     		ldr	r0, .L101+24
 1336 00a8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1337              	.LVL87:
 250:Src/main.c    ****     }
 1338              		.loc 1 250 0
 1339 00ac 2022     		movs	r2, #32
 1340 00ae 204B     		ldr	r3, .L101+32
 1341 00b0 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cc5I5c8k.s 			page 40


 1342              	.L92:
 257:Src/main.c    **** 	 
 1343              		.loc 1 257 0
 1344 00b2 FFF7FEFF 		bl	readFaults
 1345              	.LVL88:
 259:Src/main.c    **** 		sendFaultMsg();
 1346              		.loc 1 259 0
 1347 00b6 1A4B     		ldr	r3, .L101+16
 1348 00b8 1B68     		ldr	r3, [r3]
 1349 00ba FBB1     		cbz	r3, .L99
 1350              	.L95:
 216:Src/main.c    **** 	  car_state_machine(PRECHARGED);
 1351              		.loc 1 216 0
 1352 00bc 4021     		movs	r1, #64
 1353 00be 1A48     		ldr	r0, .L101+24
 1354 00c0 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1355              	.LVL89:
 1356 00c4 0128     		cmp	r0, #1
 1357 00c6 B6D0     		beq	.L100
 1358              	.L90:
 247:Src/main.c    **** 	  if (checkBTSF() || checkAPPS()){
 1359              		.loc 1 247 0
 1360 00c8 194B     		ldr	r3, .L101+32
 1361 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1362 00cc 072B     		cmp	r3, #7
 1363 00ce F0D9     		bls	.L92
 248:Src/main.c    **** 		  HAL_GPIO_WritePin(GPIOB,BTSF_EN_Pin | APPS_EN_Pin,GPIO_PIN_RESET);
 1364              		.loc 1 248 0
 1365 00d0 FFF7FEFF 		bl	checkBTSF
 1366              	.LVL90:
 1367 00d4 0028     		cmp	r0, #0
 1368 00d6 E3D1     		bne	.L93
 248:Src/main.c    **** 		  HAL_GPIO_WritePin(GPIOB,BTSF_EN_Pin | APPS_EN_Pin,GPIO_PIN_RESET);
 1369              		.loc 1 248 0 is_stmt 0 discriminator 1
 1370 00d8 FFF7FEFF 		bl	checkAPPS
 1371              	.LVL91:
 1372 00dc 0028     		cmp	r0, #0
 1373 00de DFD1     		bne	.L93
 252:Src/main.c    ****         TxCar_state_data[0] = PWR_AVAILABLE;
 1374              		.loc 1 252 0 is_stmt 1
 1375 00e0 134B     		ldr	r3, .L101+32
 1376 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1377 00e4 202B     		cmp	r3, #32
 1378 00e6 E4D1     		bne	.L92
 253:Src/main.c    ****         HAL_GPIO_WritePin(GPIOB, BTSF_EN_Pin|APPS_EN_Pin ,GPIO_PIN_SET);
 1379              		.loc 1 253 0
 1380 00e8 1022     		movs	r2, #16
 1381 00ea 114B     		ldr	r3, .L101+32
 1382 00ec 1A70     		strb	r2, [r3]
 254:Src/main.c    ****     }
 1383              		.loc 1 254 0
 1384 00ee 0122     		movs	r2, #1
 1385 00f0 4FF48871 		mov	r1, #272
 1386 00f4 0C48     		ldr	r0, .L101+24
 1387 00f6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1388              	.LVL92:
 1389 00fa DAE7     		b	.L92
ARM GAS  /tmp/cc5I5c8k.s 			page 41


 1390              	.L99:
 260:Src/main.c    **** 		sendCar_state();
 1391              		.loc 1 260 0
 1392 00fc FFF7FEFF 		bl	sendFaultMsg
 1393              	.LVL93:
 261:Src/main.c    **** 		sysTimer = 500;
 1394              		.loc 1 261 0
 1395 0100 FFF7FEFF 		bl	sendCar_state
 1396              	.LVL94:
 262:Src/main.c    **** 	}
 1397              		.loc 1 262 0
 1398 0104 4FF4FA72 		mov	r2, #500
 1399 0108 054B     		ldr	r3, .L101+16
 1400 010a 1A60     		str	r2, [r3]
 1401 010c D6E7     		b	.L95
 1402              	.L102:
 1403 010e 00BF     		.align	2
 1404              	.L101:
 1405 0110 A0860100 		.word	100000
 1406 0114 00000000 		.word	millisTimer
 1407 0118 C0C62D00 		.word	3000000
 1408 011c 00000000 		.word	secTimer
 1409 0120 00000000 		.word	sysTimer
 1410 0124 00000000 		.word	hcan
 1411 0128 000C0140 		.word	1073810432
 1412 012c 00000000 		.word	brakePressure_1
 1413 0130 00000000 		.word	.LANCHOR3
 1414              		.cfi_endproc
 1415              	.LFE64:
 1417              		.section	.text.Error_Handler,"ax",%progbits
 1418              		.align	1
 1419              		.global	Error_Handler
 1420              		.syntax unified
 1421              		.thumb
 1422              		.thumb_func
 1423              		.fpu softvfp
 1425              	Error_Handler:
 1426              	.LFB78:
 714:Src/main.c    **** 
 715:Src/main.c    **** /* USER CODE BEGIN 4 */
 716:Src/main.c    **** 
 717:Src/main.c    **** 
 718:Src/main.c    **** /* USER CODE END 4 */
 719:Src/main.c    **** 
 720:Src/main.c    **** /**
 721:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 722:Src/main.c    ****   * @retval None
 723:Src/main.c    ****   */
 724:Src/main.c    **** void Error_Handler(void)
 725:Src/main.c    **** {
 1427              		.loc 1 725 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431              		@ link register save eliminated.
 1432 0000 7047     		bx	lr
 1433              		.cfi_endproc
ARM GAS  /tmp/cc5I5c8k.s 			page 42


 1434              	.LFE78:
 1436              		.global	sConfig
 1437              		.comm	TxFaultsMailbox,4,4
 1438              		.comm	apps,1,1
 1439              		.comm	bspd,1,1
 1440              		.comm	imd,1,1
 1441              		.comm	bms,1,1
 1442              		.global	TxFault_data
 1443              		.comm	TxFaults,24,4
 1444              		.comm	TxCar_stateMailbox,4,4
 1445              		.global	TxCar_state_data
 1446              		.comm	TxCar_state,24,4
 1447              		.global	hardFaultFlag
 1448              		.global	Prev_State
 1449              		.global	max_throttle
 1450              		.comm	throttle_B,2,2
 1451              		.comm	throttle_A,2,2
 1452              		.comm	brakePressure_2,2,2
 1453              		.comm	brakePressure_1,2,2
 1454              		.comm	steeringPos,2,2
 1455              		.comm	brakePos,2,2
 1456              		.comm	hspi1,88,4
 1457              		.comm	hcan,40,4
 1458              		.comm	hadc1,48,4
 1459              		.global	brakeThreshold
 1460              		.global	throttleThreshold
 1461              		.comm	sysTimer,4,4
 1462              		.comm	secTimer,4,4
 1463              		.comm	millisTimer,4,4
 1464              		.section	.bss.Prev_State,"aw",%nobits
 1467              	Prev_State:
 1468 0000 00       		.space	1
 1469              		.section	.bss.TxCar_state_data,"aw",%nobits
 1470              		.align	2
 1471              		.set	.LANCHOR3,. + 0
 1474              	TxCar_state_data:
 1475 0000 00       		.space	1
 1476              		.section	.bss.hardFaultFlag,"aw",%nobits
 1477              		.align	2
 1480              	hardFaultFlag:
 1481 0000 00000000 		.space	4
 1482              		.section	.bss.sConfig,"aw",%nobits
 1483              		.align	2
 1484              		.set	.LANCHOR0,. + 0
 1487              	sConfig:
 1488 0000 00000000 		.space	12
 1488      00000000 
 1488      00000000 
 1489              		.section	.data.TxFault_data,"aw",%progbits
 1490              		.align	2
 1491              		.set	.LANCHOR2,. + 0
 1494              	TxFault_data:
 1495 0000 55       		.byte	85
 1496 0001 55       		.byte	85
 1497 0002 55       		.byte	85
 1498 0003 55       		.byte	85
 1499 0004 55       		.byte	85
ARM GAS  /tmp/cc5I5c8k.s 			page 43


 1500 0005 55       		.byte	85
 1501 0006 55       		.byte	85
 1502 0007 55       		.byte	85
 1503              		.section	.data.max_throttle,"aw",%progbits
 1504              		.align	1
 1505              		.set	.LANCHOR1,. + 0
 1508              	max_throttle:
 1509 0000 0A00     		.short	10
 1510              		.section	.rodata.brakeThreshold,"a",%progbits
 1511              		.align	2
 1514              	brakeThreshold:
 1515 0000 00000000 		.space	4
 1516              		.section	.rodata.throttleThreshold,"a",%progbits
 1517              		.align	2
 1520              	throttleThreshold:
 1521 0000 50000000 		.word	80
 1522              		.text
 1523              	.Letext0:
 1524              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1525              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1526              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1527              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1528              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1529              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1530              		.file 8 "/usr/include/newlib/sys/lock.h"
 1531              		.file 9 "/usr/include/newlib/sys/_types.h"
 1532              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1533              		.file 11 "/usr/include/newlib/sys/reent.h"
 1534              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1535              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1536              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1537              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1538              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1539              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1540              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1541              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 1542              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1543              		.file 21 "Inc/main.h"
ARM GAS  /tmp/cc5I5c8k.s 			page 44


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc5I5c8k.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc5I5c8k.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc5I5c8k.s:187    .text.MX_GPIO_Init:00000000000000f0 $d
     /tmp/cc5I5c8k.s:197    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/cc5I5c8k.s:203    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/cc5I5c8k.s:251    .text.MX_SPI1_Init:0000000000000030 $d
                            *COM*:0000000000000058 hspi1
     /tmp/cc5I5c8k.s:257    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc5I5c8k.s:263    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc5I5c8k.s:394    .text.MX_ADC1_Init:00000000000000b0 $d
                            *COM*:0000000000000030 hadc1
     /tmp/cc5I5c8k.s:401    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/cc5I5c8k.s:407    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/cc5I5c8k.s:485    .text.MX_CAN_Init:0000000000000054 $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 TxFaults
                            *COM*:0000000000000018 TxCar_state
     /tmp/cc5I5c8k.s:493    .text.updateADC:0000000000000000 $t
     /tmp/cc5I5c8k.s:500    .text.updateADC:0000000000000000 updateADC
     /tmp/cc5I5c8k.s:602    .text.updateADC:0000000000000074 $d
     /tmp/cc5I5c8k.s:608    .text.checkBTSF:0000000000000000 $t
     /tmp/cc5I5c8k.s:615    .text.checkBTSF:0000000000000000 checkBTSF
     /tmp/cc5I5c8k.s:658    .text.checkBTSF:000000000000002c $d
                            *COM*:0000000000000002 brakePressure_1
                            *COM*:0000000000000002 throttle_A
     /tmp/cc5I5c8k.s:672    .text.APPS_Diff:0000000000000000 $t
     /tmp/cc5I5c8k.s:679    .text.APPS_Diff:0000000000000000 APPS_Diff
     /tmp/cc5I5c8k.s:799    .text.APPS_Diff:00000000000000a0 $d
                            *COM*:0000000000000002 throttle_B
     /tmp/cc5I5c8k.s:811    .text.checkAPPS:0000000000000000 $t
     /tmp/cc5I5c8k.s:818    .text.checkAPPS:0000000000000000 checkAPPS
     /tmp/cc5I5c8k.s:884    .text.checkAPPS:000000000000004c $d
                            *COM*:0000000000000004 millisTimer
     /tmp/cc5I5c8k.s:891    .text.sendFaultMsg:0000000000000000 $t
     /tmp/cc5I5c8k.s:898    .text.sendFaultMsg:0000000000000000 sendFaultMsg
     /tmp/cc5I5c8k.s:936    .text.sendFaultMsg:0000000000000028 $d
                            *COM*:0000000000000001 bms
                            *COM*:0000000000000001 imd
                            *COM*:0000000000000001 bspd
                            *COM*:0000000000000001 apps
                            *COM*:0000000000000004 TxFaultsMailbox
     /tmp/cc5I5c8k.s:948    .text.sendCar_state:0000000000000000 $t
     /tmp/cc5I5c8k.s:955    .text.sendCar_state:0000000000000000 sendCar_state
     /tmp/cc5I5c8k.s:977    .text.sendCar_state:0000000000000010 $d
                            *COM*:0000000000000004 TxCar_stateMailbox
     /tmp/cc5I5c8k.s:985    .text.car_state_machine:0000000000000000 $t
     /tmp/cc5I5c8k.s:992    .text.car_state_machine:0000000000000000 car_state_machine
     /tmp/cc5I5c8k.s:1013   .text.car_state_machine:0000000000000010 $d
     /tmp/cc5I5c8k.s:1018   .text.readFaults:0000000000000000 $t
     /tmp/cc5I5c8k.s:1025   .text.readFaults:0000000000000000 readFaults
     /tmp/cc5I5c8k.s:1115   .text.readFaults:0000000000000074 $d
     /tmp/cc5I5c8k.s:1126   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc5I5c8k.s:1133   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc5I5c8k.s:1213   .text.main:0000000000000000 $t
     /tmp/cc5I5c8k.s:1220   .text.main:0000000000000000 main
ARM GAS  /tmp/cc5I5c8k.s 			page 45


     /tmp/cc5I5c8k.s:1405   .text.main:0000000000000110 $d
                            *COM*:0000000000000004 secTimer
                            *COM*:0000000000000004 sysTimer
     /tmp/cc5I5c8k.s:1418   .text.Error_Handler:0000000000000000 $t
     /tmp/cc5I5c8k.s:1425   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc5I5c8k.s:1487   .bss.sConfig:0000000000000000 sConfig
     /tmp/cc5I5c8k.s:1494   .data.TxFault_data:0000000000000000 TxFault_data
     /tmp/cc5I5c8k.s:1474   .bss.TxCar_state_data:0000000000000000 TxCar_state_data
     /tmp/cc5I5c8k.s:1480   .bss.hardFaultFlag:0000000000000000 hardFaultFlag
     /tmp/cc5I5c8k.s:1467   .bss.Prev_State:0000000000000000 Prev_State
     /tmp/cc5I5c8k.s:1508   .data.max_throttle:0000000000000000 max_throttle
                            *COM*:0000000000000002 brakePressure_2
                            *COM*:0000000000000002 steeringPos
                            *COM*:0000000000000002 brakePos
     /tmp/cc5I5c8k.s:1514   .rodata.brakeThreshold:0000000000000000 brakeThreshold
     /tmp/cc5I5c8k.s:1520   .rodata.throttleThreshold:0000000000000000 throttleThreshold
     /tmp/cc5I5c8k.s:1468   .bss.Prev_State:0000000000000000 $d
     /tmp/cc5I5c8k.s:1470   .bss.TxCar_state_data:0000000000000000 $d
     /tmp/cc5I5c8k.s:1477   .bss.hardFaultFlag:0000000000000000 $d
     /tmp/cc5I5c8k.s:1483   .bss.sConfig:0000000000000000 $d
     /tmp/cc5I5c8k.s:1490   .data.TxFault_data:0000000000000000 $d
     /tmp/cc5I5c8k.s:1504   .data.max_throttle:0000000000000000 $d
     /tmp/cc5I5c8k.s:1511   .rodata.brakeThreshold:0000000000000000 $d
     /tmp/cc5I5c8k.s:1517   .rodata.throttleThreshold:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_SPI_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
__aeabi_ui2d
__aeabi_i2d
__aeabi_dmul
__aeabi_dsub
__aeabi_dcmplt
__aeabi_dadd
__aeabi_ddiv
__aeabi_dcmpge
HAL_CAN_AddTxMessage
HAL_GPIO_ReadPin
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_CAN_Start

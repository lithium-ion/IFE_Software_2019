ARM GAS  /tmp/ccMMxLCl.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	MX_GPIO_Init:
  24              	.LFB72:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
ARM GAS  /tmp/ccMMxLCl.s 			page 2


  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** 
  40:Src/main.c    **** 
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE END Header */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  45:Src/main.c    **** #include "main.h"
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** 
  50:Src/main.c    **** 
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END Includes */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN PTD */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PTD */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN PD */
  61:Src/main.c    **** 
  62:Src/main.c    **** int checkBTSF();
  63:Src/main.c    **** int checkAPPS();
  64:Src/main.c    **** int APPS_Diff();
  65:Src/main.c    **** 
  66:Src/main.c    **** #define APPS_STDID 0x300;
  67:Src/main.c    **** #define BTSF_STDID 0x301;
  68:Src/main.c    **** #define FAULTS 0x0D0
  69:Src/main.c    **** #define PRECHARGE 0x0D1
  70:Src/main.c    **** #define ENABLE 0x0D2
  71:Src/main.c    **** 
  72:Src/main.c    **** const int throttleThreshold = 80;
  73:Src/main.c    **** const int brakeThreshold = 0; //80;
  74:Src/main.c    **** 
  75:Src/main.c    **** 
  76:Src/main.c    **** /* USER CODE END PD */
  77:Src/main.c    **** 
  78:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  79:Src/main.c    **** /* USER CODE BEGIN PM */
  80:Src/main.c    **** 
  81:Src/main.c    **** /* USER CODE END PM */
  82:Src/main.c    **** 
  83:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  84:Src/main.c    **** ADC_HandleTypeDef hadc1;
  85:Src/main.c    **** 
  86:Src/main.c    **** CAN_HandleTypeDef hcan;
  87:Src/main.c    **** SPI_HandleTypeDef hspi1;
  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE BEGIN PV */
  90:Src/main.c    **** 
ARM GAS  /tmp/ccMMxLCl.s 			page 3


  91:Src/main.c    **** uint16_t brakePos;
  92:Src/main.c    **** uint16_t steeringPos;
  93:Src/main.c    **** uint16_t brakePressure_1;
  94:Src/main.c    **** uint16_t brakePressure_2;
  95:Src/main.c    **** uint16_t throttle_A;
  96:Src/main.c    **** uint16_t throttle_B;
  97:Src/main.c    **** 
  98:Src/main.c    **** //need to figure out:
  99:Src/main.c    **** uint16_t max_throttle = 10;
 100:Src/main.c    **** 
 101:Src/main.c    **** int driving = 0;  		//boolean
 102:Src/main.c    **** int hardFaultFlag = 0;  //boolean
 103:Src/main.c    **** 
 104:Src/main.c    **** CAN_TxHeaderTypeDef TxHeader;
 105:Src/main.c    **** //CAN_RxHeaderTypedef RxHeader;
 106:Src/main.c    **** uint8_t TxData[8] = {0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55};
 107:Src/main.c    **** /*Set these values: 0xFF = Fault present
 108:Src/main.c    **** 					0x00 = No fault*/
 109:Src/main.c    **** //FAULTS
 110:Src/main.c    **** uint8_t bms;        //TxData[0]
 111:Src/main.c    **** uint8_t imd;		//TxData[1]
 112:Src/main.c    **** uint8_t bspd; 		//TxData[2]
 113:Src/main.c    **** uint8_t apps; 		//TxData[3]
 114:Src/main.c    **** //PRECHARGE
 115:Src/main.c    **** uint8_t charged;    //TxData[4] Precharge will be low if any hardfaults have been detected 
 116:Src/main.c    **** //ENABLE
 117:Src/main.c    **** uint8_t enable;		//TxData[5]
 118:Src/main.c    **** 
 119:Src/main.c    **** uint8_t RxData[8];
 120:Src/main.c    **** uint32_t TxMailbox;
 121:Src/main.c    **** 
 122:Src/main.c    **** //ADC_ChannelConfTypeDef sConfig = {0};
 123:Src/main.c    **** 
 124:Src/main.c    **** //For Timers
 125:Src/main.c    **** extern uint32_t millisTimer;
 126:Src/main.c    **** extern uint32_t secTimer;
 127:Src/main.c    **** extern uint32_t sysTimer;
 128:Src/main.c    **** 
 129:Src/main.c    **** ADC_ChannelConfTypeDef sConfig = {0};
 130:Src/main.c    **** /* USER CODE END PV */
 131:Src/main.c    **** 
 132:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 133:Src/main.c    **** void SystemClock_Config(void);
 134:Src/main.c    **** static void MX_GPIO_Init(void);
 135:Src/main.c    **** static void MX_SPI1_Init(void);
 136:Src/main.c    **** static void MX_ADC1_Init(void);
 137:Src/main.c    **** static void MX_CAN_Init(void);
 138:Src/main.c    **** /* USER CODE BEGIN PFP */
 139:Src/main.c    **** 
 140:Src/main.c    **** /* USER CODE END PFP */
 141:Src/main.c    **** 
 142:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 143:Src/main.c    **** /* USER CODE BEGIN 0 */
 144:Src/main.c    **** 
 145:Src/main.c    **** //int refTime = millis();
 146:Src/main.c    **** //int APPSFlag = 0; //boolean
 147:Src/main.c    **** 
ARM GAS  /tmp/ccMMxLCl.s 			page 4


 148:Src/main.c    **** /**
 149:Src/main.c    ****   * @brief  The application entry point.
 150:Src/main.c    ****   * @retval int
 151:Src/main.c    ****   */
 152:Src/main.c    **** int main(void)
 153:Src/main.c    **** {
 154:Src/main.c    ****   /* USER CODE BEGIN 1 */
 155:Src/main.c    **** 
 156:Src/main.c    **** 
 157:Src/main.c    ****   //For Timers
 158:Src/main.c    ****   millisTimer = 100000; //100 millis
 159:Src/main.c    ****   secTimer = 3000000; //3 seconds
 160:Src/main.c    ****   sysTimer = 500; //timer to send message every second
 161:Src/main.c    **** 
 162:Src/main.c    ****   /* USER CODE END 1 */
 163:Src/main.c    **** 
 164:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 165:Src/main.c    **** 
 166:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 167:Src/main.c    ****   HAL_Init();
 168:Src/main.c    **** 
 169:Src/main.c    ****   /* USER CODE BEGIN Init */
 170:Src/main.c    **** 
 171:Src/main.c    ****   // Update SystemCoreClock value
 172:Src/main.c    ****  // SystemCoreClockUpdate();
 173:Src/main.c    ****   // Configure the SysTick timer to overflow every 1 us
 174:Src/main.c    ****  // SysTick_Config(SystemCoreClock / 1000000);
 175:Src/main.c    **** 
 176:Src/main.c    ****   /* USER CODE END Init */
 177:Src/main.c    **** 
 178:Src/main.c    ****   /* Configure the system clock */
 179:Src/main.c    ****   SystemClock_Config();
 180:Src/main.c    **** 
 181:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 182:Src/main.c    **** 
 183:Src/main.c    ****   /* USER CODE END SysInit */
 184:Src/main.c    **** 
 185:Src/main.c    ****   /* Initialize all configured peripherals */
 186:Src/main.c    ****   MX_GPIO_Init();
 187:Src/main.c    ****   MX_SPI1_Init();
 188:Src/main.c    ****   MX_ADC1_Init();
 189:Src/main.c    ****   MX_CAN_Init();
 190:Src/main.c    ****   /* USER CODE BEGIN 2 */
 191:Src/main.c    ****   HAL_CAN_Start(&hcan);
 192:Src/main.c    **** 
 193:Src/main.c    ****   /* USER CODE END 2 */
 194:Src/main.c    **** 
 195:Src/main.c    ****   /* Infinite loop */
 196:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 197:Src/main.c    ****   
 198:Src/main.c    ****   while (1)
 199:Src/main.c    ****   {
 200:Src/main.c    **** 
 201:Src/main.c    ****   //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 202:Src/main.c    ****   //HAL_Delay(500);
 203:Src/main.c    **** 
 204:Src/main.c    **** 	readFaults();
ARM GAS  /tmp/ccMMxLCl.s 			page 5


 205:Src/main.c    **** 	resetTXData();
 206:Src/main.c    **** 	//TxHeader.StdId = 0x00;
 207:Src/main.c    **** 	//TxData[0] = 0x66;
 208:Src/main.c    **** 	//HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 209:Src/main.c    **** 	HAL_Delay(100);
 210:Src/main.c    **** 	//Check ENABLE_IN from driver switch and precharge /******Change '1' to 'charged'*****************
 211:Src/main.c    **** 	if(1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET){
 212:Src/main.c    **** 	  //RTD Sound
 213:Src/main.c    **** 	  if(!driving){
 214:Src/main.c    **** 
 215:Src/main.c    **** 		  //ADC for Brake pressure
 216:Src/main.c    **** 		  brakePressure_1 = updateADC(2);
 217:Src/main.c    **** 
 218:Src/main.c    **** 		  //if brake pressed, we are ready to drive 
 219:Src/main.c    **** 		  if(brakePressure_1 >= brakeThreshold){
 220:Src/main.c    **** 
 221:Src/main.c    **** 			//reset 3 second timer
 222:Src/main.c    **** 			secTimer = 300; //change to 3000 for 3 seconds 
 223:Src/main.c    **** 
 224:Src/main.c    **** 			//RTD Sound Enable
 225:Src/main.c    **** 			//Play sound for ~3 seconds 
 226:Src/main.c    **** 			while(secTimer > 0){
 227:Src/main.c    **** 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 228:Src/main.c    **** 			}
 229:Src/main.c    **** 			
 230:Src/main.c    **** 			//turn off sound
 231:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 232:Src/main.c    **** 
 233:Src/main.c    **** 			//Set RTD Enable
 234:Src/main.c    **** 			/*******Do we need to do this????*********/
 235:Src/main.c    **** 			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 236:Src/main.c    **** 
 237:Src/main.c    **** 			driving = 1;
 238:Src/main.c    **** 
 239:Src/main.c    **** 		  }
 240:Src/main.c    **** 	  }//end RTD sequence
 241:Src/main.c    **** 	  
 242:Src/main.c    **** 	  if (checkBTSF()){
 243:Src/main.c    **** 		//send CAN message
 244:Src/main.c    **** 		driving = 0;
 245:Src/main.c    **** 		//set low to stop the car
 246:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 247:Src/main.c    **** 		
 248:Src/main.c    **** 	  }
 249:Src/main.c    **** 	  if (checkAPPS()){
 250:Src/main.c    **** 		//send CAN message
 251:Src/main.c    **** 		driving = 0;
 252:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 253:Src/main.c    **** 	  }
 254:Src/main.c    **** 
 255:Src/main.c    **** 	}//end driving sequence if statement
 256:Src/main.c    **** 	
 257:Src/main.c    **** 	if (sysTimer == 0){
 258:Src/main.c    **** 		sendPrechargeMsg(); //0D1
 259:Src/main.c    **** 		sendFaultMsg(); //0D0
 260:Src/main.c    **** 		sendEnableMsg(); //0D2
 261:Src/main.c    **** 		sysTimer = 500;
ARM GAS  /tmp/ccMMxLCl.s 			page 6


 262:Src/main.c    **** 	}
 263:Src/main.c    ****     /* USER CODE END WHILE */
 264:Src/main.c    **** 
 265:Src/main.c    ****     /* USER CODE BEGIN 3 */
 266:Src/main.c    ****   }
 267:Src/main.c    ****   /* USER CODE END 3 */
 268:Src/main.c    **** }
 269:Src/main.c    **** 
 270:Src/main.c    **** /********************************************************************************/
 271:Src/main.c    **** //Checks for APPS errors, sends fault if there is one 
 272:Src/main.c    **** //Returns one if difference in throttleA/B is greater than 10% for 100 ms
 273:Src/main.c    **** //Returns zero if else
 274:Src/main.c    **** /********************************************************************************/
 275:Src/main.c    **** int checkAPPS(){
 276:Src/main.c    **** 
 277:Src/main.c    ****   throttle_A = updateADC(8); 
 278:Src/main.c    ****   throttle_B = updateADC(9); 
 279:Src/main.c    ****   //0-5000 based ?
 280:Src/main.c    **** 
 281:Src/main.c    ****   //Throttles Agree
 282:Src/main.c    ****   millisTimer = 1000;
 283:Src/main.c    ****   while(millisTimer > 0 && APPS_Diff()){
 284:Src/main.c    **** 	throttle_A = updateADC(8);
 285:Src/main.c    **** 	throttle_B = updateADC(9);
 286:Src/main.c    ****   } //stay in this loop while there is a 10% difference in throttles
 287:Src/main.c    **** 
 288:Src/main.c    ****   //APPS_EN Fault
 289:Src/main.c    ****   if(millisTimer == 0){ //hmmm needs to be changed
 290:Src/main.c    **** 	resetTXData();
 291:Src/main.c    ****     TxHeader.StdId = APPS_STDID; //sending CAN message
 292:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 293:Src/main.c    ****     return 1; //will set driving = 0;
 294:Src/main.c    ****   }
 295:Src/main.c    ****   return 0; //APPS is good
 296:Src/main.c    **** }
 297:Src/main.c    **** 
 298:Src/main.c    **** /********************************************************************************/
 299:Src/main.c    **** //Checks for BTSF errors, If the brake and throttle are pressed at the same time, above a certain t
 300:Src/main.c    **** //Returns one if fault was sensed and sent out
 301:Src/main.c    **** //zero if nothing is detected
 302:Src/main.c    **** /********************************************************************************/
 303:Src/main.c    **** int checkBTSF(){
 304:Src/main.c    ****   brakePressure_1 = updateADC(2);
 305:Src/main.c    ****   throttle_A = updateADC(8); 
 306:Src/main.c    **** 
 307:Src/main.c    ****   //0-5000 based
 308:Src/main.c    **** 
 309:Src/main.c    ****   if(brakePressure_1 > brakeThreshold && throttle_A > throttleThreshold){
 310:Src/main.c    **** 
 311:Src/main.c    ****     //sending CAN message
 312:Src/main.c    ****     resetTXData();
 313:Src/main.c    ****     TxHeader.StdId = BTSF_STDID;
 314:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 315:Src/main.c    ****     
 316:Src/main.c    **** 	return 1;
 317:Src/main.c    ****   }
 318:Src/main.c    ****   
ARM GAS  /tmp/ccMMxLCl.s 			page 7


 319:Src/main.c    ****   return 0;
 320:Src/main.c    **** }
 321:Src/main.c    **** 
 322:Src/main.c    **** /********************************************************************************/
 323:Src/main.c    **** // This function updates the ADC values for all positions/pressures
 324:Src/main.c    **** //
 325:Src/main.c    **** //
 326:Src/main.c    **** /********************************************************************************/
 327:Src/main.c    **** uint16_t updateADC(int channel){	
 328:Src/main.c    **** 	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 329:Src/main.c    ****   if (channel == 0) //Brake position 
 330:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_0;
 331:Src/main.c    ****   if (channel == 1) //steering position 
 332:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_1;
 333:Src/main.c    ****   if (channel == 2) //brake pressure 1
 334:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_2;
 335:Src/main.c    ****   if (channel == 3) //brake pressure 2
 336:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_3;
 337:Src/main.c    ****   if (channel == 8) //throttle A
 338:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 339:Src/main.c    ****   if (channel == 9) //throttle B 
 340:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_9;
 341:Src/main.c    **** 
 342:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 343:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 344:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 345:Src/main.c    **** 
 346:Src/main.c    ****   HAL_ADC_Start(&hadc1);
 347:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 348:Src/main.c    ****   return HAL_ADC_GetValue(&hadc1);
 349:Src/main.c    ****   //HAL_ADC_Stop(&hadc1);
 350:Src/main.c    **** 	//////////////////////////////////////////////////////////////
 351:Src/main.c    **** 	/*
 352:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 353:Src/main.c    **** 	
 354:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 355:Src/main.c    **** 	brakePos = HAL_ADC_GetValue(&hadc1);  //brakePos
 356:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 357:Src/main.c    **** 	steeringPos = HAL_ADC_GetValue(&hadc1);  //steeringPos
 358:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 359:Src/main.c    **** 	brakePressure_1 = HAL_ADC_GetValue(&hadc1);  //brakePressure_1
 360:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 361:Src/main.c    **** 	brakePressure_2 = HAL_ADC_GetValue(&hadc1);  //brakePressure_2
 362:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 363:Src/main.c    **** 	throttle_A = HAL_ADC_GetValue(&hadc1);  //throttle_A
 364:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 365:Src/main.c    **** 	throttle_B = HAL_ADC_GetValue(&hadc1);  //throttle_B
 366:Src/main.c    **** 	
 367:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 368:Src/main.c    **** 	*/
 369:Src/main.c    **** }
 370:Src/main.c    **** 
 371:Src/main.c    **** /********************************************************************************/
 372:Src/main.c    **** //Determines if the throttle percent difference is above 10%
 373:Src/main.c    **** //Returns: 1 if difference > 10%
 374:Src/main.c    **** //		   0 if everything is good 
 375:Src/main.c    **** /********************************************************************************/
ARM GAS  /tmp/ccMMxLCl.s 			page 8


 376:Src/main.c    **** int APPS_Diff(){
 377:Src/main.c    **** 
 378:Src/main.c    ****   double t_A = throttle_A;
 379:Src/main.c    ****   double t_B = throttle_B;
 380:Src/main.c    ****   
 381:Src/main.c    ****   //equalize throttles assuming 1mm diff out of 12.5mm from pots
 382:Src/main.c    ****   t_A -= (1/12.5)*max_throttle; 
 383:Src/main.c    **** 
 384:Src/main.c    ****   double numerator = t_A - t_B;
 385:Src/main.c    ****   
 386:Src/main.c    ****   //absolute value
 387:Src/main.c    ****   if(numerator < 0){
 388:Src/main.c    ****     numerator = -1*numerator;
 389:Src/main.c    ****   }
 390:Src/main.c    **** 
 391:Src/main.c    ****   double denominator = (t_A + t_B)/2;
 392:Src/main.c    **** 
 393:Src/main.c    ****   double difference = 100*numerator/denominator;
 394:Src/main.c    **** 
 395:Src/main.c    ****   if(difference >= 10){
 396:Src/main.c    ****     return 1;
 397:Src/main.c    ****   }
 398:Src/main.c    ****   return 0;
 399:Src/main.c    **** }
 400:Src/main.c    **** 
 401:Src/main.c    **** /* USER CODE END 0 */
 402:Src/main.c    **** 
 403:Src/main.c    **** 
 404:Src/main.c    **** /**
 405:Src/main.c    ****   * @brief System Clock Configuration
 406:Src/main.c    ****   * @retval None
 407:Src/main.c    ****   */
 408:Src/main.c    **** void SystemClock_Config(void)
 409:Src/main.c    **** {
 410:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 411:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 412:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 413:Src/main.c    **** 
 414:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 415:Src/main.c    ****   */
 416:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 417:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 418:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 419:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 420:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 421:Src/main.c    ****   {
 422:Src/main.c    ****     Error_Handler();
 423:Src/main.c    ****   }
 424:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 425:Src/main.c    ****   */
 426:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 427:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 428:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 429:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 430:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 431:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 432:Src/main.c    **** 
ARM GAS  /tmp/ccMMxLCl.s 			page 9


 433:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 434:Src/main.c    ****   {
 435:Src/main.c    ****     Error_Handler();
 436:Src/main.c    ****   }
 437:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 438:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 439:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 440:Src/main.c    ****   {
 441:Src/main.c    ****     Error_Handler();
 442:Src/main.c    ****   }
 443:Src/main.c    **** }
 444:Src/main.c    **** 
 445:Src/main.c    **** /**
 446:Src/main.c    ****   * @brief ADC1 Initialization Function
 447:Src/main.c    ****   * @param None
 448:Src/main.c    ****   * @retval None
 449:Src/main.c    ****   */
 450:Src/main.c    **** static void MX_ADC1_Init(void)
 451:Src/main.c    **** {
 452:Src/main.c    **** 
 453:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 454:Src/main.c    **** 
 455:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 456:Src/main.c    **** 
 457:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 458:Src/main.c    **** 
 459:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 460:Src/main.c    ****   /**Common config 
 461:Src/main.c    ****   */
 462:Src/main.c    ****   hadc1.Instance = ADC1;
 463:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE; //enable 
 464:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE; //enable 
 465:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 466:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 467:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 468:Src/main.c    ****   hadc1.Init.NbrOfConversion = 6;
 469:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 470:Src/main.c    ****   {
 471:Src/main.c    ****     Error_Handler();
 472:Src/main.c    ****   }
 473:Src/main.c    ****   /**Configure Regular Channel 
 474:Src/main.c    ****   */
 475:Src/main.c    ****   //Brake position
 476:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 477:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 478:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 479:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 480:Src/main.c    ****   {
 481:Src/main.c    ****     Error_Handler();
 482:Src/main.c    ****   }
 483:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 484:Src/main.c    **** 
 485:Src/main.c    ****   //Steering Position 
 486:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 487:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 488:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 489:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
ARM GAS  /tmp/ccMMxLCl.s 			page 10


 490:Src/main.c    ****     Error_Handler();
 491:Src/main.c    ****   }
 492:Src/main.c    ****   
 493:Src/main.c    ****   //Brake Pressure 1
 494:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_3;
 495:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 496:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 497:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 498:Src/main.c    ****     Error_Handler();
 499:Src/main.c    ****   }
 500:Src/main.c    ****   
 501:Src/main.c    ****   //Brake Pressure 2
 502:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 503:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 504:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 505:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 506:Src/main.c    ****     Error_Handler();
 507:Src/main.c    ****   }
 508:Src/main.c    ****   
 509:Src/main.c    ****   //ADC for throttle_A
 510:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_8;
 511:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 512:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 513:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 514:Src/main.c    ****     Error_Handler();
 515:Src/main.c    ****   }
 516:Src/main.c    ****   
 517:Src/main.c    ****   //ADC for throttle_B
 518:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 519:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 520:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 521:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 522:Src/main.c    ****     Error_Handler();
 523:Src/main.c    ****   }
 524:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 525:Src/main.c    **** }
 526:Src/main.c    **** 
 527:Src/main.c    **** /**
 528:Src/main.c    ****   * @brief CAN Initialization Function
 529:Src/main.c    ****   * @param None
 530:Src/main.c    ****   * @retval None
 531:Src/main.c    ****   */
 532:Src/main.c    **** static void MX_CAN_Init(void)
 533:Src/main.c    **** {
 534:Src/main.c    **** 
 535:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 536:Src/main.c    **** 
 537:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 538:Src/main.c    **** 
 539:Src/main.c    **** 
 540:Src/main.c    ****   hcan.Instance = CAN1;
 541:Src/main.c    ****   hcan.Init.Prescaler = 2;
 542:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 543:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 544:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 545:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 546:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
ARM GAS  /tmp/ccMMxLCl.s 			page 11


 547:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 548:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 549:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 550:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 551:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 552:Src/main.c    **** 
 553:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 554:Src/main.c    ****   {
 555:Src/main.c    ****     Error_Handler();
 556:Src/main.c    ****   }
 557:Src/main.c    ****   
 558:Src/main.c    ****     /* USER CODE BEGIN CAN_Init 1 */
 559:Src/main.c    ****  // HAL_CAN_Start(&hcan);
 560:Src/main.c    ****   TxHeader.StdId = 0x321;         // CAN standard ID
 561:Src/main.c    ****   TxHeader.ExtId = 0x01;          // CAN extended ID
 562:Src/main.c    ****   TxHeader.RTR = CAN_RTR_DATA;      // CAN frame type
 563:Src/main.c    ****   TxHeader.IDE = CAN_ID_STD;        // CAN ID type
 564:Src/main.c    ****   TxHeader.DLC = 8;             // CAN frame length in bytes
 565:Src/main.c    ****   TxHeader.TransmitGlobalTime = DISABLE;  // CAN timestamp in TxData[6] and TxData[7]
 566:Src/main.c    **** 
 567:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 568:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 569:Src/main.c    **** 
 570:Src/main.c    **** }
 571:Src/main.c    **** 
 572:Src/main.c    **** /**
 573:Src/main.c    ****   * @brief SPI1 Initialization Function
 574:Src/main.c    ****   * @param None
 575:Src/main.c    ****   * @retval None
 576:Src/main.c    ****   */
 577:Src/main.c    **** static void MX_SPI1_Init(void)
 578:Src/main.c    **** {
 579:Src/main.c    **** 
 580:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 581:Src/main.c    **** 
 582:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 583:Src/main.c    **** 
 584:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 585:Src/main.c    **** 
 586:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 587:Src/main.c    ****   /* SPI1 parameter configuration*/
 588:Src/main.c    ****   hspi1.Instance = SPI1;
 589:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 590:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 591:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 592:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 593:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 594:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 595:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 596:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 597:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 598:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 599:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 600:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 601:Src/main.c    ****   {
 602:Src/main.c    ****     Error_Handler();
 603:Src/main.c    ****   }
ARM GAS  /tmp/ccMMxLCl.s 			page 12


 604:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 605:Src/main.c    **** 
 606:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 607:Src/main.c    **** 
 608:Src/main.c    **** }
 609:Src/main.c    **** 
 610:Src/main.c    **** /**
 611:Src/main.c    ****   * @brief GPIO Initialization Function
 612:Src/main.c    ****   * @param None
 613:Src/main.c    ****   * @retval None
 614:Src/main.c    ****   */
 615:Src/main.c    **** static void MX_GPIO_Init(void)
 616:Src/main.c    **** {
  26              		.loc 1 616 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 28
  33              		.cfi_offset 4, -28
  34              		.cfi_offset 5, -24
  35              		.cfi_offset 6, -20
  36              		.cfi_offset 7, -16
  37              		.cfi_offset 8, -12
  38              		.cfi_offset 9, -8
  39              		.cfi_offset 14, -4
  40 0004 89B0     		sub	sp, sp, #36
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 64
 617:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 617 0
  44 0006 0024     		movs	r4, #0
  45 0008 0494     		str	r4, [sp, #16]
  46 000a 0594     		str	r4, [sp, #20]
  47 000c 0694     		str	r4, [sp, #24]
  48 000e 0794     		str	r4, [sp, #28]
  49              	.LBB2:
 618:Src/main.c    **** 
 619:Src/main.c    ****   /* GPIO Ports Clock Enable */
 620:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  50              		.loc 1 620 0
  51 0010 3F4B     		ldr	r3, .L3
  52 0012 9A69     		ldr	r2, [r3, #24]
  53 0014 42F01002 		orr	r2, r2, #16
  54 0018 9A61     		str	r2, [r3, #24]
  55 001a 9A69     		ldr	r2, [r3, #24]
  56 001c 02F01002 		and	r2, r2, #16
  57 0020 0092     		str	r2, [sp]
  58 0022 009A     		ldr	r2, [sp]
  59              	.LBE2:
  60              	.LBB3:
 621:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  61              		.loc 1 621 0
  62 0024 9A69     		ldr	r2, [r3, #24]
  63 0026 42F02002 		orr	r2, r2, #32
  64 002a 9A61     		str	r2, [r3, #24]
ARM GAS  /tmp/ccMMxLCl.s 			page 13


  65 002c 9A69     		ldr	r2, [r3, #24]
  66 002e 02F02002 		and	r2, r2, #32
  67 0032 0192     		str	r2, [sp, #4]
  68 0034 019A     		ldr	r2, [sp, #4]
  69              	.LBE3:
  70              	.LBB4:
 622:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  71              		.loc 1 622 0
  72 0036 9A69     		ldr	r2, [r3, #24]
  73 0038 42F00402 		orr	r2, r2, #4
  74 003c 9A61     		str	r2, [r3, #24]
  75 003e 9A69     		ldr	r2, [r3, #24]
  76 0040 02F00402 		and	r2, r2, #4
  77 0044 0292     		str	r2, [sp, #8]
  78 0046 029A     		ldr	r2, [sp, #8]
  79              	.LBE4:
  80              	.LBB5:
 623:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  81              		.loc 1 623 0
  82 0048 9A69     		ldr	r2, [r3, #24]
  83 004a 42F00802 		orr	r2, r2, #8
  84 004e 9A61     		str	r2, [r3, #24]
  85 0050 9B69     		ldr	r3, [r3, #24]
  86 0052 03F00803 		and	r3, r3, #8
  87 0056 0393     		str	r3, [sp, #12]
  88 0058 039B     		ldr	r3, [sp, #12]
  89              	.LBE5:
 624:Src/main.c    **** 
 625:Src/main.c    ****   /*Configure GPIO pin Output Level */
 626:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
  90              		.loc 1 626 0
  91 005a DFF8C480 		ldr	r8, .L3+16
  92 005e 4046     		mov	r0, r8
  93 0060 4FF40051 		mov	r1, #8192
  94 0064 2246     		mov	r2, r4
  95 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
  96              	.LVL0:
 627:Src/main.c    **** 
 628:Src/main.c    ****   /*Configure GPIO pin Output Level */
 629:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
  97              		.loc 1 629 0
  98 006a 2A4F     		ldr	r7, .L3+4
  99 006c 3846     		mov	r0, r7
 100 006e 42F23811 		movw	r1, #8504
 101 0072 2246     		mov	r2, r4
 102 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
 103              	.LVL1:
 630:Src/main.c    ****                           |GPIO_PIN_8, GPIO_PIN_RESET);
 631:Src/main.c    **** 
 632:Src/main.c    ****   /*Configure GPIO pin Output Level */
 633:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 104              		.loc 1 633 0
 105 0078 DFF8A890 		ldr	r9, .L3+20
 106 007c 4846     		mov	r0, r9
 107 007e 4FF48061 		mov	r1, #1024
 108 0082 2246     		mov	r2, r4
 109 0084 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccMMxLCl.s 			page 14


 110              	.LVL2:
 634:Src/main.c    **** 
 635:Src/main.c    ****   /*Configure GPIO pin : PC13 */
 636:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 111              		.loc 1 636 0
 112 0088 4FF40053 		mov	r3, #8192
 113 008c 0493     		str	r3, [sp, #16]
 637:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 114              		.loc 1 637 0
 115 008e 0125     		movs	r5, #1
 116 0090 0595     		str	r5, [sp, #20]
 638:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 117              		.loc 1 638 0
 118 0092 0694     		str	r4, [sp, #24]
 639:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 119              		.loc 1 639 0
 120 0094 0226     		movs	r6, #2
 121 0096 0796     		str	r6, [sp, #28]
 640:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 122              		.loc 1 640 0
 123 0098 4046     		mov	r0, r8
 124 009a 04A9     		add	r1, sp, #16
 125 009c FFF7FEFF 		bl	HAL_GPIO_Init
 126              	.LVL3:
 641:Src/main.c    **** 
 642:Src/main.c    ****   /*Configure GPIO pins : PC14 PC15 */
 643:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 127              		.loc 1 643 0
 128 00a0 4FF44043 		mov	r3, #49152
 129 00a4 0493     		str	r3, [sp, #16]
 644:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 130              		.loc 1 644 0
 131 00a6 0594     		str	r4, [sp, #20]
 645:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 132              		.loc 1 645 0
 133 00a8 0694     		str	r4, [sp, #24]
 646:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 134              		.loc 1 646 0
 135 00aa 4046     		mov	r0, r8
 136 00ac 04A9     		add	r1, sp, #16
 137 00ae FFF7FEFF 		bl	HAL_GPIO_Init
 138              	.LVL4:
 647:Src/main.c    **** 
 648:Src/main.c    ****   /*Configure GPIO pin : PD0 */
 649:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 139              		.loc 1 649 0
 140 00b2 0495     		str	r5, [sp, #16]
 650:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 141              		.loc 1 650 0
 142 00b4 0594     		str	r4, [sp, #20]
 651:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 143              		.loc 1 651 0
 144 00b6 0694     		str	r4, [sp, #24]
 652:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 145              		.loc 1 652 0
 146 00b8 1748     		ldr	r0, .L3+8
 147 00ba 04A9     		add	r1, sp, #16
ARM GAS  /tmp/ccMMxLCl.s 			page 15


 148 00bc FFF7FEFF 		bl	HAL_GPIO_Init
 149              	.LVL5:
 653:Src/main.c    **** 
 654:Src/main.c    ****   /*Configure GPIO pins : PB10 PB15 PB6 */
 655:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_6;
 150              		.loc 1 655 0
 151 00c0 48F24043 		movw	r3, #33856
 152 00c4 0493     		str	r3, [sp, #16]
 656:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 153              		.loc 1 656 0
 154 00c6 0594     		str	r4, [sp, #20]
 657:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 155              		.loc 1 657 0
 156 00c8 0694     		str	r4, [sp, #24]
 658:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 157              		.loc 1 658 0
 158 00ca 3846     		mov	r0, r7
 159 00cc 04A9     		add	r1, sp, #16
 160 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 161              	.LVL6:
 659:Src/main.c    **** 
 660:Src/main.c    ****   /*Configure GPIO pins : PB13 PB3 PB4 PB5 
 661:Src/main.c    ****                            PB8 */
 662:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 162              		.loc 1 662 0
 163 00d2 42F23813 		movw	r3, #8504
 164 00d6 0493     		str	r3, [sp, #16]
 663:Src/main.c    ****                           |GPIO_PIN_8;
 664:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 165              		.loc 1 664 0
 166 00d8 0595     		str	r5, [sp, #20]
 665:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 167              		.loc 1 665 0
 168 00da 0694     		str	r4, [sp, #24]
 666:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 169              		.loc 1 666 0
 170 00dc 0796     		str	r6, [sp, #28]
 667:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 171              		.loc 1 667 0
 172 00de 3846     		mov	r0, r7
 173 00e0 04A9     		add	r1, sp, #16
 174 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
 175              	.LVL7:
 668:Src/main.c    **** 
 669:Src/main.c    ****   /*Configure GPIO pin : PA10 */
 670:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 176              		.loc 1 670 0
 177 00e6 4FF48063 		mov	r3, #1024
 178 00ea 0493     		str	r3, [sp, #16]
 671:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 179              		.loc 1 671 0
 180 00ec 0595     		str	r5, [sp, #20]
 672:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 181              		.loc 1 672 0
 182 00ee 0694     		str	r4, [sp, #24]
 673:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 183              		.loc 1 673 0
ARM GAS  /tmp/ccMMxLCl.s 			page 16


 184 00f0 0796     		str	r6, [sp, #28]
 674:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 185              		.loc 1 674 0
 186 00f2 4846     		mov	r0, r9
 187 00f4 04A9     		add	r1, sp, #16
 188 00f6 FFF7FEFF 		bl	HAL_GPIO_Init
 189              	.LVL8:
 190              	.LBB6:
 675:Src/main.c    **** 
 676:Src/main.c    ****   /*Configure peripheral I/O remapping */
 677:Src/main.c    ****   __HAL_AFIO_REMAP_PD01_ENABLE();
 191              		.loc 1 677 0
 192 00fa 084A     		ldr	r2, .L3+12
 193 00fc 5368     		ldr	r3, [r2, #4]
 194              	.LVL9:
 195 00fe 43F0E063 		orr	r3, r3, #117440512
 196              	.LVL10:
 197 0102 43F40043 		orr	r3, r3, #32768
 198              	.LVL11:
 199 0106 5360     		str	r3, [r2, #4]
 200              	.LBE6:
 678:Src/main.c    **** 
 679:Src/main.c    **** }
 201              		.loc 1 679 0
 202 0108 09B0     		add	sp, sp, #36
 203              	.LCFI2:
 204              		.cfi_def_cfa_offset 28
 205              		@ sp needed
 206 010a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 207              	.L4:
 208 010e 00BF     		.align	2
 209              	.L3:
 210 0110 00100240 		.word	1073876992
 211 0114 000C0140 		.word	1073810432
 212 0118 00140140 		.word	1073812480
 213 011c 00000140 		.word	1073807360
 214 0120 00100140 		.word	1073811456
 215 0124 00080140 		.word	1073809408
 216              		.cfi_endproc
 217              	.LFE72:
 219              		.section	.text.MX_SPI1_Init,"ax",%progbits
 220              		.align	2
 221              		.thumb
 222              		.thumb_func
 224              	MX_SPI1_Init:
 225              	.LFB71:
 578:Src/main.c    **** 
 226              		.loc 1 578 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 08B5     		push	{r3, lr}
 231              	.LCFI3:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 3, -8
 234              		.cfi_offset 14, -4
 588:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
ARM GAS  /tmp/ccMMxLCl.s 			page 17


 235              		.loc 1 588 0
 236 0002 0B48     		ldr	r0, .L7
 237 0004 0B4B     		ldr	r3, .L7+4
 238 0006 0360     		str	r3, [r0]
 589:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 239              		.loc 1 589 0
 240 0008 4FF48273 		mov	r3, #260
 241 000c 4360     		str	r3, [r0, #4]
 590:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 242              		.loc 1 590 0
 243 000e 0023     		movs	r3, #0
 244 0010 8360     		str	r3, [r0, #8]
 591:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 245              		.loc 1 591 0
 246 0012 C360     		str	r3, [r0, #12]
 592:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 247              		.loc 1 592 0
 248 0014 0361     		str	r3, [r0, #16]
 593:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 249              		.loc 1 593 0
 250 0016 4361     		str	r3, [r0, #20]
 594:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 251              		.loc 1 594 0
 252 0018 4FF48022 		mov	r2, #262144
 253 001c 8261     		str	r2, [r0, #24]
 595:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 254              		.loc 1 595 0
 255 001e C361     		str	r3, [r0, #28]
 596:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 256              		.loc 1 596 0
 257 0020 0362     		str	r3, [r0, #32]
 597:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 258              		.loc 1 597 0
 259 0022 4362     		str	r3, [r0, #36]
 598:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 260              		.loc 1 598 0
 261 0024 8362     		str	r3, [r0, #40]
 599:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 262              		.loc 1 599 0
 263 0026 0A23     		movs	r3, #10
 264 0028 C362     		str	r3, [r0, #44]
 600:Src/main.c    ****   {
 265              		.loc 1 600 0
 266 002a FFF7FEFF 		bl	HAL_SPI_Init
 267              	.LVL12:
 268 002e 08BD     		pop	{r3, pc}
 269              	.L8:
 270              		.align	2
 271              	.L7:
 272 0030 00000000 		.word	hspi1
 273 0034 00300140 		.word	1073819648
 274              		.cfi_endproc
 275              	.LFE71:
 277              		.section	.text.MX_ADC1_Init,"ax",%progbits
 278              		.align	2
 279              		.thumb
 280              		.thumb_func
ARM GAS  /tmp/ccMMxLCl.s 			page 18


 282              	MX_ADC1_Init:
 283              	.LFB69:
 451:Src/main.c    **** 
 284              		.loc 1 451 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 289              	.LCFI4:
 290              		.cfi_def_cfa_offset 24
 291              		.cfi_offset 4, -24
 292              		.cfi_offset 5, -20
 293              		.cfi_offset 6, -16
 294              		.cfi_offset 7, -12
 295              		.cfi_offset 8, -8
 296              		.cfi_offset 14, -4
 462:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE; //enable 
 297              		.loc 1 462 0
 298 0004 2A4D     		ldr	r5, .L11
 299 0006 2B4B     		ldr	r3, .L11+4
 300 0008 2B60     		str	r3, [r5]
 463:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE; //enable 
 301              		.loc 1 463 0
 302 000a 0026     		movs	r6, #0
 303 000c AE60     		str	r6, [r5, #8]
 464:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 304              		.loc 1 464 0
 305 000e EE60     		str	r6, [r5, #12]
 465:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 306              		.loc 1 465 0
 307 0010 6E61     		str	r6, [r5, #20]
 466:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 308              		.loc 1 466 0
 309 0012 4FF46023 		mov	r3, #917504
 310 0016 EB61     		str	r3, [r5, #28]
 467:Src/main.c    ****   hadc1.Init.NbrOfConversion = 6;
 311              		.loc 1 467 0
 312 0018 6E60     		str	r6, [r5, #4]
 468:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 313              		.loc 1 468 0
 314 001a 0627     		movs	r7, #6
 315 001c 2F61     		str	r7, [r5, #16]
 469:Src/main.c    ****   {
 316              		.loc 1 469 0
 317 001e 2846     		mov	r0, r5
 318 0020 FFF7FEFF 		bl	HAL_ADC_Init
 319              	.LVL13:
 476:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 320              		.loc 1 476 0
 321 0024 244C     		ldr	r4, .L11+8
 322 0026 2660     		str	r6, [r4]
 477:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 323              		.loc 1 477 0
 324 0028 4FF00108 		mov	r8, #1
 325 002c C4F80480 		str	r8, [r4, #4]
 478:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 326              		.loc 1 478 0
ARM GAS  /tmp/ccMMxLCl.s 			page 19


 327 0030 A660     		str	r6, [r4, #8]
 479:Src/main.c    ****   {
 328              		.loc 1 479 0
 329 0032 2846     		mov	r0, r5
 330 0034 2146     		mov	r1, r4
 331 0036 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 332              	.LVL14:
 486:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 333              		.loc 1 486 0
 334 003a C4F80080 		str	r8, [r4]
 487:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 335              		.loc 1 487 0
 336 003e 0226     		movs	r6, #2
 337 0040 6660     		str	r6, [r4, #4]
 488:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 338              		.loc 1 488 0
 339 0042 2846     		mov	r0, r5
 340 0044 2146     		mov	r1, r4
 341 0046 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 342              	.LVL15:
 489:Src/main.c    ****     Error_Handler();
 343              		.loc 1 489 0
 344 004a 2846     		mov	r0, r5
 345 004c 2146     		mov	r1, r4
 346 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 347              	.LVL16:
 494:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 348              		.loc 1 494 0
 349 0052 0323     		movs	r3, #3
 350 0054 2360     		str	r3, [r4]
 495:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 351              		.loc 1 495 0
 352 0056 6360     		str	r3, [r4, #4]
 496:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 353              		.loc 1 496 0
 354 0058 2846     		mov	r0, r5
 355 005a 2146     		mov	r1, r4
 356 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 357              	.LVL17:
 497:Src/main.c    ****     Error_Handler();
 358              		.loc 1 497 0
 359 0060 2846     		mov	r0, r5
 360 0062 2146     		mov	r1, r4
 361 0064 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 362              	.LVL18:
 502:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 363              		.loc 1 502 0
 364 0068 2660     		str	r6, [r4]
 503:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 365              		.loc 1 503 0
 366 006a 0423     		movs	r3, #4
 367 006c 6360     		str	r3, [r4, #4]
 504:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 368              		.loc 1 504 0
 369 006e 2846     		mov	r0, r5
 370 0070 2146     		mov	r1, r4
 371 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
ARM GAS  /tmp/ccMMxLCl.s 			page 20


 372              	.LVL19:
 505:Src/main.c    ****     Error_Handler();
 373              		.loc 1 505 0
 374 0076 2846     		mov	r0, r5
 375 0078 2146     		mov	r1, r4
 376 007a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 377              	.LVL20:
 510:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 378              		.loc 1 510 0
 379 007e 0823     		movs	r3, #8
 380 0080 2360     		str	r3, [r4]
 511:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 381              		.loc 1 511 0
 382 0082 0523     		movs	r3, #5
 383 0084 6360     		str	r3, [r4, #4]
 512:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 384              		.loc 1 512 0
 385 0086 2846     		mov	r0, r5
 386 0088 2146     		mov	r1, r4
 387 008a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 388              	.LVL21:
 513:Src/main.c    ****     Error_Handler();
 389              		.loc 1 513 0
 390 008e 2846     		mov	r0, r5
 391 0090 2146     		mov	r1, r4
 392 0092 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 393              	.LVL22:
 518:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 394              		.loc 1 518 0
 395 0096 0923     		movs	r3, #9
 396 0098 2360     		str	r3, [r4]
 519:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 397              		.loc 1 519 0
 398 009a 6760     		str	r7, [r4, #4]
 520:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 399              		.loc 1 520 0
 400 009c 2846     		mov	r0, r5
 401 009e 2146     		mov	r1, r4
 402 00a0 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 403              	.LVL23:
 521:Src/main.c    ****     Error_Handler();
 404              		.loc 1 521 0
 405 00a4 2846     		mov	r0, r5
 406 00a6 2146     		mov	r1, r4
 407 00a8 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 408              	.LVL24:
 409 00ac BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 410              	.L12:
 411              		.align	2
 412              	.L11:
 413 00b0 00000000 		.word	hadc1
 414 00b4 00240140 		.word	1073816576
 415 00b8 00000000 		.word	.LANCHOR0
 416              		.cfi_endproc
 417              	.LFE69:
 419              		.section	.text.MX_CAN_Init,"ax",%progbits
 420              		.align	2
ARM GAS  /tmp/ccMMxLCl.s 			page 21


 421              		.thumb
 422              		.thumb_func
 424              	MX_CAN_Init:
 425              	.LFB70:
 533:Src/main.c    **** 
 426              		.loc 1 533 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430 0000 10B5     		push	{r4, lr}
 431              	.LCFI5:
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 4, -8
 434              		.cfi_offset 14, -4
 540:Src/main.c    ****   hcan.Init.Prescaler = 2;
 435              		.loc 1 540 0
 436 0002 1148     		ldr	r0, .L15
 437 0004 114B     		ldr	r3, .L15+4
 438 0006 0360     		str	r3, [r0]
 541:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 439              		.loc 1 541 0
 440 0008 0223     		movs	r3, #2
 441 000a 4360     		str	r3, [r0, #4]
 542:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 442              		.loc 1 542 0
 443 000c 0024     		movs	r4, #0
 444 000e 8460     		str	r4, [r0, #8]
 543:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 445              		.loc 1 543 0
 446 0010 C460     		str	r4, [r0, #12]
 544:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 447              		.loc 1 544 0
 448 0012 4FF42023 		mov	r3, #655360
 449 0016 0361     		str	r3, [r0, #16]
 545:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 450              		.loc 1 545 0
 451 0018 4FF44013 		mov	r3, #3145728
 452 001c 4361     		str	r3, [r0, #20]
 546:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 453              		.loc 1 546 0
 454 001e 0476     		strb	r4, [r0, #24]
 547:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 455              		.loc 1 547 0
 456 0020 4476     		strb	r4, [r0, #25]
 548:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 457              		.loc 1 548 0
 458 0022 8476     		strb	r4, [r0, #26]
 549:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 459              		.loc 1 549 0
 460 0024 C476     		strb	r4, [r0, #27]
 550:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 461              		.loc 1 550 0
 462 0026 0477     		strb	r4, [r0, #28]
 551:Src/main.c    **** 
 463              		.loc 1 551 0
 464 0028 4477     		strb	r4, [r0, #29]
 553:Src/main.c    ****   {
ARM GAS  /tmp/ccMMxLCl.s 			page 22


 465              		.loc 1 553 0
 466 002a FFF7FEFF 		bl	HAL_CAN_Init
 467              	.LVL25:
 560:Src/main.c    ****   TxHeader.ExtId = 0x01;          // CAN extended ID
 468              		.loc 1 560 0
 469 002e 084B     		ldr	r3, .L15+8
 470 0030 40F22132 		movw	r2, #801
 471 0034 1A60     		str	r2, [r3]
 561:Src/main.c    ****   TxHeader.RTR = CAN_RTR_DATA;      // CAN frame type
 472              		.loc 1 561 0
 473 0036 0122     		movs	r2, #1
 474 0038 5A60     		str	r2, [r3, #4]
 562:Src/main.c    ****   TxHeader.IDE = CAN_ID_STD;        // CAN ID type
 475              		.loc 1 562 0
 476 003a DC60     		str	r4, [r3, #12]
 563:Src/main.c    ****   TxHeader.DLC = 8;             // CAN frame length in bytes
 477              		.loc 1 563 0
 478 003c 9C60     		str	r4, [r3, #8]
 564:Src/main.c    ****   TxHeader.TransmitGlobalTime = DISABLE;  // CAN timestamp in TxData[6] and TxData[7]
 479              		.loc 1 564 0
 480 003e 0822     		movs	r2, #8
 481 0040 1A61     		str	r2, [r3, #16]
 565:Src/main.c    **** 
 482              		.loc 1 565 0
 483 0042 1C75     		strb	r4, [r3, #20]
 484 0044 10BD     		pop	{r4, pc}
 485              	.L16:
 486 0046 00BF     		.align	2
 487              	.L15:
 488 0048 00000000 		.word	hcan
 489 004c 00640040 		.word	1073767424
 490 0050 00000000 		.word	TxHeader
 491              		.cfi_endproc
 492              	.LFE70:
 494              		.section	.text.updateADC,"ax",%progbits
 495              		.align	2
 496              		.global	updateADC
 497              		.thumb
 498              		.thumb_func
 500              	updateADC:
 501              	.LFB66:
 327:Src/main.c    **** 	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 502              		.loc 1 327 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506              	.LVL26:
 507 0000 10B5     		push	{r4, lr}
 508              	.LCFI6:
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 4, -8
 511              		.cfi_offset 14, -4
 329:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_0;
 512              		.loc 1 329 0
 513 0002 0346     		mov	r3, r0
 514 0004 10B9     		cbnz	r0, .L18
 330:Src/main.c    ****   if (channel == 1) //steering position 
ARM GAS  /tmp/ccMMxLCl.s 			page 23


 515              		.loc 1 330 0
 516 0006 0021     		movs	r1, #0
 517 0008 174A     		ldr	r2, .L25
 518 000a 1160     		str	r1, [r2]
 519              	.L18:
 331:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_1;
 520              		.loc 1 331 0
 521 000c 012B     		cmp	r3, #1
 522 000e 02D1     		bne	.L19
 332:Src/main.c    ****   if (channel == 2) //brake pressure 1
 523              		.loc 1 332 0
 524 0010 0121     		movs	r1, #1
 525 0012 154A     		ldr	r2, .L25
 526 0014 1160     		str	r1, [r2]
 527              	.L19:
 333:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_2;
 528              		.loc 1 333 0
 529 0016 022B     		cmp	r3, #2
 530 0018 02D1     		bne	.L20
 334:Src/main.c    ****   if (channel == 3) //brake pressure 2
 531              		.loc 1 334 0
 532 001a 0221     		movs	r1, #2
 533 001c 124A     		ldr	r2, .L25
 534 001e 1160     		str	r1, [r2]
 535              	.L20:
 335:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_3;
 536              		.loc 1 335 0
 537 0020 032B     		cmp	r3, #3
 538 0022 02D1     		bne	.L21
 336:Src/main.c    ****   if (channel == 8) //throttle A
 539              		.loc 1 336 0
 540 0024 0321     		movs	r1, #3
 541 0026 104A     		ldr	r2, .L25
 542 0028 1160     		str	r1, [r2]
 543              	.L21:
 337:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 544              		.loc 1 337 0
 545 002a 082B     		cmp	r3, #8
 546 002c 02D1     		bne	.L22
 338:Src/main.c    ****   if (channel == 9) //throttle B 
 547              		.loc 1 338 0
 548 002e 0821     		movs	r1, #8
 549 0030 0D4A     		ldr	r2, .L25
 550 0032 1160     		str	r1, [r2]
 551              	.L22:
 339:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_9;
 552              		.loc 1 339 0
 553 0034 092B     		cmp	r3, #9
 554 0036 02D1     		bne	.L23
 340:Src/main.c    **** 
 555              		.loc 1 340 0
 556 0038 0922     		movs	r2, #9
 557 003a 0B4B     		ldr	r3, .L25
 558 003c 1A60     		str	r2, [r3]
 559              	.L23:
 342:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 560              		.loc 1 342 0
ARM GAS  /tmp/ccMMxLCl.s 			page 24


 561 003e 0A49     		ldr	r1, .L25
 562 0040 0123     		movs	r3, #1
 563 0042 4B60     		str	r3, [r1, #4]
 343:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 564              		.loc 1 343 0
 565 0044 8B60     		str	r3, [r1, #8]
 344:Src/main.c    **** 
 566              		.loc 1 344 0
 567 0046 094C     		ldr	r4, .L25+4
 568 0048 2046     		mov	r0, r4
 569              	.LVL27:
 570 004a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 571              	.LVL28:
 346:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 572              		.loc 1 346 0
 573 004e 2046     		mov	r0, r4
 574 0050 FFF7FEFF 		bl	HAL_ADC_Start
 575              	.LVL29:
 347:Src/main.c    ****   return HAL_ADC_GetValue(&hadc1);
 576              		.loc 1 347 0
 577 0054 2046     		mov	r0, r4
 578 0056 4FF47A71 		mov	r1, #1000
 579 005a FFF7FEFF 		bl	HAL_ADC_PollForConversion
 580              	.LVL30:
 348:Src/main.c    ****   //HAL_ADC_Stop(&hadc1);
 581              		.loc 1 348 0
 582 005e 2046     		mov	r0, r4
 583 0060 FFF7FEFF 		bl	HAL_ADC_GetValue
 584              	.LVL31:
 369:Src/main.c    **** 
 585              		.loc 1 369 0
 586 0064 80B2     		uxth	r0, r0
 587 0066 10BD     		pop	{r4, pc}
 588              	.L26:
 589              		.align	2
 590              	.L25:
 591 0068 00000000 		.word	.LANCHOR0
 592 006c 00000000 		.word	hadc1
 593              		.cfi_endproc
 594              	.LFE66:
 596              		.global	__aeabi_ui2d
 597              		.global	__aeabi_i2d
 598              		.global	__aeabi_dmul
 599              		.global	__aeabi_dsub
 600              		.global	__aeabi_dcmplt
 601              		.global	__aeabi_dadd
 602              		.global	__aeabi_ddiv
 603              		.global	__aeabi_dcmpge
 604              		.section	.text.APPS_Diff,"ax",%progbits
 605              		.align	2
 606              		.global	APPS_Diff
 607              		.thumb
 608              		.thumb_func
 610              	APPS_Diff:
 611              	.LFB67:
 376:Src/main.c    **** 
 612              		.loc 1 376 0
ARM GAS  /tmp/ccMMxLCl.s 			page 25


 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 617              	.LCFI7:
 618              		.cfi_def_cfa_offset 32
 619              		.cfi_offset 3, -32
 620              		.cfi_offset 4, -28
 621              		.cfi_offset 5, -24
 622              		.cfi_offset 6, -20
 623              		.cfi_offset 7, -16
 624              		.cfi_offset 8, -12
 625              		.cfi_offset 9, -8
 626              		.cfi_offset 14, -4
 378:Src/main.c    ****   double t_B = throttle_B;
 627              		.loc 1 378 0
 628 0004 284B     		ldr	r3, .L37+8
 629 0006 1888     		ldrh	r0, [r3]
 630 0008 FFF7FEFF 		bl	__aeabi_ui2d
 631              	.LVL32:
 632 000c 0446     		mov	r4, r0
 633 000e 0D46     		mov	r5, r1
 634              	.LVL33:
 379:Src/main.c    ****   
 635              		.loc 1 379 0
 636 0010 264B     		ldr	r3, .L37+12
 637 0012 1888     		ldrh	r0, [r3]
 638 0014 FFF7FEFF 		bl	__aeabi_ui2d
 639              	.LVL34:
 640 0018 0646     		mov	r6, r0
 641 001a 0F46     		mov	r7, r1
 642              	.LVL35:
 382:Src/main.c    **** 
 643              		.loc 1 382 0
 644 001c 244B     		ldr	r3, .L37+16
 645 001e 1888     		ldrh	r0, [r3]
 646 0020 FFF7FEFF 		bl	__aeabi_i2d
 647              	.LVL36:
 648 0024 1EA3     		adr	r3, .L37
 649 0026 D3E90023 		ldrd	r2, [r3]
 650 002a FFF7FEFF 		bl	__aeabi_dmul
 651              	.LVL37:
 652 002e 0246     		mov	r2, r0
 653 0030 0B46     		mov	r3, r1
 654 0032 2046     		mov	r0, r4
 655 0034 2946     		mov	r1, r5
 656 0036 FFF7FEFF 		bl	__aeabi_dsub
 657              	.LVL38:
 658 003a 8046     		mov	r8, r0
 659 003c 8946     		mov	r9, r1
 660              	.LVL39:
 384:Src/main.c    ****   
 661              		.loc 1 384 0
 662 003e 3246     		mov	r2, r6
 663 0040 3B46     		mov	r3, r7
 664 0042 FFF7FEFF 		bl	__aeabi_dsub
 665              	.LVL40:
ARM GAS  /tmp/ccMMxLCl.s 			page 26


 666 0046 0546     		mov	r5, r0
 667 0048 0C46     		mov	r4, r1
 668              	.LVL41:
 387:Src/main.c    ****     numerator = -1*numerator;
 669              		.loc 1 387 0
 670 004a 2846     		mov	r0, r5
 671 004c 2146     		mov	r1, r4
 672 004e 0022     		movs	r2, #0
 673 0050 0023     		movs	r3, #0
 674 0052 FFF7FEFF 		bl	__aeabi_dcmplt
 675              	.LVL42:
 676 0056 08B1     		cbz	r0, .L28
 388:Src/main.c    ****   }
 677              		.loc 1 388 0
 678 0058 04F10044 		add	r4, r4, #-2147483648
 679              	.LVL43:
 680              	.L28:
 391:Src/main.c    **** 
 681              		.loc 1 391 0
 682 005c 4046     		mov	r0, r8
 683 005e 4946     		mov	r1, r9
 684 0060 3246     		mov	r2, r6
 685 0062 3B46     		mov	r3, r7
 686 0064 FFF7FEFF 		bl	__aeabi_dadd
 687              	.LVL44:
 688 0068 0022     		movs	r2, #0
 689 006a 124B     		ldr	r3, .L37+20
 690 006c FFF7FEFF 		bl	__aeabi_dmul
 691              	.LVL45:
 692 0070 0646     		mov	r6, r0
 693              	.LVL46:
 694 0072 0F46     		mov	r7, r1
 695              	.LVL47:
 393:Src/main.c    **** 
 696              		.loc 1 393 0
 697 0074 2846     		mov	r0, r5
 698 0076 2146     		mov	r1, r4
 699 0078 0022     		movs	r2, #0
 700 007a 0F4B     		ldr	r3, .L37+24
 701 007c FFF7FEFF 		bl	__aeabi_dmul
 702              	.LVL48:
 703 0080 3246     		mov	r2, r6
 704 0082 3B46     		mov	r3, r7
 705 0084 FFF7FEFF 		bl	__aeabi_ddiv
 706              	.LVL49:
 395:Src/main.c    ****     return 1;
 707              		.loc 1 395 0
 708 0088 0022     		movs	r2, #0
 709 008a 0C4B     		ldr	r3, .L37+28
 710 008c FFF7FEFF 		bl	__aeabi_dcmpge
 711              	.LVL50:
 712 0090 10B1     		cbz	r0, .L35
 396:Src/main.c    ****   }
 713              		.loc 1 396 0
 714 0092 0120     		movs	r0, #1
 715 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 716              	.LVL51:
ARM GAS  /tmp/ccMMxLCl.s 			page 27


 717              	.L35:
 398:Src/main.c    **** }
 718              		.loc 1 398 0
 719 0098 0020     		movs	r0, #0
 399:Src/main.c    **** 
 720              		.loc 1 399 0
 721 009a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 722              	.LVL52:
 723              	.L38:
 724 009e 00BF     		.align	3
 725              	.L37:
 726 00a0 7B14AE47 		.word	1202590843
 727 00a4 E17AB43F 		.word	1068792545
 728 00a8 00000000 		.word	throttle_A
 729 00ac 00000000 		.word	throttle_B
 730 00b0 00000000 		.word	.LANCHOR1
 731 00b4 0000E03F 		.word	1071644672
 732 00b8 00005940 		.word	1079574528
 733 00bc 00002440 		.word	1076101120
 734              		.cfi_endproc
 735              	.LFE67:
 737              		.section	.text.SystemClock_Config,"ax",%progbits
 738              		.align	2
 739              		.global	SystemClock_Config
 740              		.thumb
 741              		.thumb_func
 743              	SystemClock_Config:
 744              	.LFB68:
 409:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 745              		.loc 1 409 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 80
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749 0000 30B5     		push	{r4, r5, lr}
 750              	.LCFI8:
 751              		.cfi_def_cfa_offset 12
 752              		.cfi_offset 4, -12
 753              		.cfi_offset 5, -8
 754              		.cfi_offset 14, -4
 755 0002 95B0     		sub	sp, sp, #84
 756              	.LCFI9:
 757              		.cfi_def_cfa_offset 96
 410:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 758              		.loc 1 410 0
 759 0004 0024     		movs	r4, #0
 760 0006 0B94     		str	r4, [sp, #44]
 761 0008 0C94     		str	r4, [sp, #48]
 762 000a 0D94     		str	r4, [sp, #52]
 763 000c 1094     		str	r4, [sp, #64]
 764 000e 1194     		str	r4, [sp, #68]
 765 0010 1294     		str	r4, [sp, #72]
 766 0012 1394     		str	r4, [sp, #76]
 411:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 767              		.loc 1 411 0
 768 0014 0594     		str	r4, [sp, #20]
 769 0016 0694     		str	r4, [sp, #24]
 770 0018 0794     		str	r4, [sp, #28]
ARM GAS  /tmp/ccMMxLCl.s 			page 28


 771 001a 0894     		str	r4, [sp, #32]
 772 001c 0994     		str	r4, [sp, #36]
 412:Src/main.c    **** 
 773              		.loc 1 412 0
 774 001e 0194     		str	r4, [sp, #4]
 775 0020 0294     		str	r4, [sp, #8]
 776 0022 0394     		str	r4, [sp, #12]
 777 0024 0494     		str	r4, [sp, #16]
 416:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 778              		.loc 1 416 0
 779 0026 0225     		movs	r5, #2
 780 0028 0A95     		str	r5, [sp, #40]
 417:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 781              		.loc 1 417 0
 782 002a 0123     		movs	r3, #1
 783 002c 0E93     		str	r3, [sp, #56]
 418:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 784              		.loc 1 418 0
 785 002e 1023     		movs	r3, #16
 786 0030 0F93     		str	r3, [sp, #60]
 420:Src/main.c    ****   {
 787              		.loc 1 420 0
 788 0032 0AA8     		add	r0, sp, #40
 789 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 790              	.LVL53:
 426:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 791              		.loc 1 426 0
 792 0038 0F23     		movs	r3, #15
 793 003a 0593     		str	r3, [sp, #20]
 428:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 794              		.loc 1 428 0
 795 003c 0694     		str	r4, [sp, #24]
 429:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 796              		.loc 1 429 0
 797 003e 0794     		str	r4, [sp, #28]
 430:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 798              		.loc 1 430 0
 799 0040 0894     		str	r4, [sp, #32]
 431:Src/main.c    **** 
 800              		.loc 1 431 0
 801 0042 0994     		str	r4, [sp, #36]
 433:Src/main.c    ****   {
 802              		.loc 1 433 0
 803 0044 05A8     		add	r0, sp, #20
 804 0046 2146     		mov	r1, r4
 805 0048 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 806              	.LVL54:
 437:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 807              		.loc 1 437 0
 808 004c 0195     		str	r5, [sp, #4]
 438:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 809              		.loc 1 438 0
 810 004e 0394     		str	r4, [sp, #12]
 439:Src/main.c    ****   {
 811              		.loc 1 439 0
 812 0050 01A8     		add	r0, sp, #4
 813 0052 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
ARM GAS  /tmp/ccMMxLCl.s 			page 29


 814              	.LVL55:
 443:Src/main.c    **** 
 815              		.loc 1 443 0
 816 0056 15B0     		add	sp, sp, #84
 817              	.LCFI10:
 818              		.cfi_def_cfa_offset 12
 819              		@ sp needed
 820 0058 30BD     		pop	{r4, r5, pc}
 821              		.cfi_endproc
 822              	.LFE68:
 824              		.section	.text.resetTXData,"ax",%progbits
 825              		.align	2
 826              		.global	resetTXData
 827              		.thumb
 828              		.thumb_func
 830              	resetTXData:
 831              	.LFB76:
 680:Src/main.c    **** 
 681:Src/main.c    **** /* USER CODE BEGIN 4 */
 682:Src/main.c    **** 
 683:Src/main.c    **** void sendFaultMsg(){
 684:Src/main.c    **** 	resetTXData();
 685:Src/main.c    **** 	TxHeader.StdId = FAULTS; // CAN FAULT ID
 686:Src/main.c    **** 	TxData[0] = bms;  //Set all the data (faults) to their current values
 687:Src/main.c    **** 	TxData[1] = imd;
 688:Src/main.c    **** 	TxData[2] = bspd;
 689:Src/main.c    **** 	TxData[3] = apps;
 690:Src/main.c    **** 	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 691:Src/main.c    **** }
 692:Src/main.c    **** 
 693:Src/main.c    **** void sendPrechargeMsg(){
 694:Src/main.c    **** 	resetTXData();
 695:Src/main.c    **** 	TxHeader.StdId = PRECHARGE;
 696:Src/main.c    **** 	TxData[0] = charged;
 697:Src/main.c    **** 	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 698:Src/main.c    **** }
 699:Src/main.c    **** 
 700:Src/main.c    **** void sendEnableMsg(){
 701:Src/main.c    **** 	resetTXData();
 702:Src/main.c    **** 	TxHeader.StdId = ENABLE;
 703:Src/main.c    **** 	TxData[0] = enable;
 704:Src/main.c    **** 	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 705:Src/main.c    **** }
 706:Src/main.c    **** 
 707:Src/main.c    **** void resetTXData(){
 832              		.loc 1 707 0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 0
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 836              		@ link register save eliminated.
 708:Src/main.c    **** 	TxData[0] = 0x00;
 837              		.loc 1 708 0
 838 0000 054B     		ldr	r3, .L42
 839 0002 0022     		movs	r2, #0
 840 0004 1A70     		strb	r2, [r3]
 709:Src/main.c    **** 	TxData[1] = 0x00;
 841              		.loc 1 709 0
ARM GAS  /tmp/ccMMxLCl.s 			page 30


 842 0006 5A70     		strb	r2, [r3, #1]
 710:Src/main.c    **** 	TxData[2] = 0x00;
 843              		.loc 1 710 0
 844 0008 9A70     		strb	r2, [r3, #2]
 711:Src/main.c    **** 	TxData[3] = 0x00;
 845              		.loc 1 711 0
 846 000a DA70     		strb	r2, [r3, #3]
 712:Src/main.c    **** 	TxData[4] = 0x00;
 847              		.loc 1 712 0
 848 000c 1A71     		strb	r2, [r3, #4]
 713:Src/main.c    **** 	TxData[5] = 0x00;
 849              		.loc 1 713 0
 850 000e 5A71     		strb	r2, [r3, #5]
 714:Src/main.c    **** 	TxData[6] = 0x00;
 851              		.loc 1 714 0
 852 0010 9A71     		strb	r2, [r3, #6]
 715:Src/main.c    **** 	TxData[7] = 0x00;
 853              		.loc 1 715 0
 854 0012 DA71     		strb	r2, [r3, #7]
 855 0014 7047     		bx	lr
 856              	.L43:
 857 0016 00BF     		.align	2
 858              	.L42:
 859 0018 00000000 		.word	.LANCHOR2
 860              		.cfi_endproc
 861              	.LFE76:
 863              		.section	.text.checkAPPS,"ax",%progbits
 864              		.align	2
 865              		.global	checkAPPS
 866              		.thumb
 867              		.thumb_func
 869              	checkAPPS:
 870              	.LFB64:
 275:Src/main.c    **** 
 871              		.loc 1 275 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 0
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875 0000 10B5     		push	{r4, lr}
 876              	.LCFI11:
 877              		.cfi_def_cfa_offset 8
 878              		.cfi_offset 4, -8
 879              		.cfi_offset 14, -4
 277:Src/main.c    ****   throttle_B = updateADC(9); 
 880              		.loc 1 277 0
 881 0002 0820     		movs	r0, #8
 882 0004 FFF7FEFF 		bl	updateADC
 883              	.LVL56:
 884 0008 164B     		ldr	r3, .L51
 885 000a 1880     		strh	r0, [r3]	@ movhi
 278:Src/main.c    ****   //0-5000 based ?
 886              		.loc 1 278 0
 887 000c 0920     		movs	r0, #9
 888 000e FFF7FEFF 		bl	updateADC
 889              	.LVL57:
 890 0012 154B     		ldr	r3, .L51+4
 891 0014 1880     		strh	r0, [r3]	@ movhi
ARM GAS  /tmp/ccMMxLCl.s 			page 31


 282:Src/main.c    ****   while(millisTimer > 0 && APPS_Diff()){
 892              		.loc 1 282 0
 893 0016 4FF47A72 		mov	r2, #1000
 894 001a 144B     		ldr	r3, .L51+8
 895 001c 1A60     		str	r2, [r3]
 283:Src/main.c    **** 	throttle_A = updateADC(8);
 896              		.loc 1 283 0
 897 001e 09E0     		b	.L45
 898              	.L47:
 284:Src/main.c    **** 	throttle_B = updateADC(9);
 899              		.loc 1 284 0
 900 0020 0820     		movs	r0, #8
 901 0022 FFF7FEFF 		bl	updateADC
 902              	.LVL58:
 903 0026 0F4B     		ldr	r3, .L51
 904 0028 1880     		strh	r0, [r3]	@ movhi
 285:Src/main.c    ****   } //stay in this loop while there is a 10% difference in throttles
 905              		.loc 1 285 0
 906 002a 0920     		movs	r0, #9
 907 002c FFF7FEFF 		bl	updateADC
 908              	.LVL59:
 909 0030 0D4B     		ldr	r3, .L51+4
 910 0032 1880     		strh	r0, [r3]	@ movhi
 911              	.L45:
 283:Src/main.c    **** 	throttle_A = updateADC(8);
 912              		.loc 1 283 0
 913 0034 0D4B     		ldr	r3, .L51+8
 914 0036 1C68     		ldr	r4, [r3]
 915 0038 1CB1     		cbz	r4, .L46
 283:Src/main.c    **** 	throttle_A = updateADC(8);
 916              		.loc 1 283 0 is_stmt 0 discriminator 1
 917 003a FFF7FEFF 		bl	APPS_Diff
 918              	.LVL60:
 919 003e 0028     		cmp	r0, #0
 920 0040 EED1     		bne	.L47
 921              	.L46:
 289:Src/main.c    **** 	resetTXData();
 922              		.loc 1 289 0 is_stmt 1
 923 0042 64B9     		cbnz	r4, .L49
 290:Src/main.c    ****     TxHeader.StdId = APPS_STDID; //sending CAN message
 924              		.loc 1 290 0
 925 0044 FFF7FEFF 		bl	resetTXData
 926              	.LVL61:
 291:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 927              		.loc 1 291 0
 928 0048 0949     		ldr	r1, .L51+12
 929 004a 4FF44073 		mov	r3, #768
 930 004e 0B60     		str	r3, [r1]
 292:Src/main.c    ****     return 1; //will set driving = 0;
 931              		.loc 1 292 0
 932 0050 0848     		ldr	r0, .L51+16
 933 0052 094A     		ldr	r2, .L51+20
 934 0054 094B     		ldr	r3, .L51+24
 935 0056 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 936              	.LVL62:
 293:Src/main.c    ****   }
 937              		.loc 1 293 0
ARM GAS  /tmp/ccMMxLCl.s 			page 32


 938 005a 0120     		movs	r0, #1
 939 005c 10BD     		pop	{r4, pc}
 940              	.L49:
 295:Src/main.c    **** }
 941              		.loc 1 295 0
 942 005e 0020     		movs	r0, #0
 296:Src/main.c    **** 
 943              		.loc 1 296 0
 944 0060 10BD     		pop	{r4, pc}
 945              	.L52:
 946 0062 00BF     		.align	2
 947              	.L51:
 948 0064 00000000 		.word	throttle_A
 949 0068 00000000 		.word	throttle_B
 950 006c 00000000 		.word	millisTimer
 951 0070 00000000 		.word	TxHeader
 952 0074 00000000 		.word	hcan
 953 0078 00000000 		.word	.LANCHOR2
 954 007c 00000000 		.word	TxMailbox
 955              		.cfi_endproc
 956              	.LFE64:
 958              		.section	.text.checkBTSF,"ax",%progbits
 959              		.align	2
 960              		.global	checkBTSF
 961              		.thumb
 962              		.thumb_func
 964              	checkBTSF:
 965              	.LFB65:
 303:Src/main.c    ****   brakePressure_1 = updateADC(2);
 966              		.loc 1 303 0
 967              		.cfi_startproc
 968              		@ args = 0, pretend = 0, frame = 0
 969              		@ frame_needed = 0, uses_anonymous_args = 0
 970 0000 10B5     		push	{r4, lr}
 971              	.LCFI12:
 972              		.cfi_def_cfa_offset 8
 973              		.cfi_offset 4, -8
 974              		.cfi_offset 14, -4
 304:Src/main.c    ****   throttle_A = updateADC(8); 
 975              		.loc 1 304 0
 976 0002 0220     		movs	r0, #2
 977 0004 FFF7FEFF 		bl	updateADC
 978              	.LVL63:
 979 0008 0D4C     		ldr	r4, .L58
 980 000a 2080     		strh	r0, [r4]	@ movhi
 305:Src/main.c    **** 
 981              		.loc 1 305 0
 982 000c 0820     		movs	r0, #8
 983 000e FFF7FEFF 		bl	updateADC
 984              	.LVL64:
 985 0012 0C4B     		ldr	r3, .L58+4
 986 0014 1880     		strh	r0, [r3]	@ movhi
 309:Src/main.c    **** 
 987              		.loc 1 309 0
 988 0016 2388     		ldrh	r3, [r4]
 989 0018 73B1     		cbz	r3, .L55
 309:Src/main.c    **** 
ARM GAS  /tmp/ccMMxLCl.s 			page 33


 990              		.loc 1 309 0 is_stmt 0 discriminator 1
 991 001a 5028     		cmp	r0, #80
 992 001c 0EDD     		ble	.L56
 312:Src/main.c    ****     TxHeader.StdId = BTSF_STDID;
 993              		.loc 1 312 0 is_stmt 1
 994 001e FFF7FEFF 		bl	resetTXData
 995              	.LVL65:
 313:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 996              		.loc 1 313 0
 997 0022 0949     		ldr	r1, .L58+8
 998 0024 40F20133 		movw	r3, #769
 999 0028 0B60     		str	r3, [r1]
 314:Src/main.c    ****     
 1000              		.loc 1 314 0
 1001 002a 0848     		ldr	r0, .L58+12
 1002 002c 084A     		ldr	r2, .L58+16
 1003 002e 094B     		ldr	r3, .L58+20
 1004 0030 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1005              	.LVL66:
 316:Src/main.c    ****   }
 1006              		.loc 1 316 0
 1007 0034 0120     		movs	r0, #1
 1008 0036 10BD     		pop	{r4, pc}
 1009              	.L55:
 319:Src/main.c    **** }
 1010              		.loc 1 319 0
 1011 0038 0020     		movs	r0, #0
 1012 003a 10BD     		pop	{r4, pc}
 1013              	.L56:
 1014 003c 0020     		movs	r0, #0
 320:Src/main.c    **** 
 1015              		.loc 1 320 0
 1016 003e 10BD     		pop	{r4, pc}
 1017              	.L59:
 1018              		.align	2
 1019              	.L58:
 1020 0040 00000000 		.word	brakePressure_1
 1021 0044 00000000 		.word	throttle_A
 1022 0048 00000000 		.word	TxHeader
 1023 004c 00000000 		.word	hcan
 1024 0050 00000000 		.word	.LANCHOR2
 1025 0054 00000000 		.word	TxMailbox
 1026              		.cfi_endproc
 1027              	.LFE65:
 1029              		.section	.text.sendFaultMsg,"ax",%progbits
 1030              		.align	2
 1031              		.global	sendFaultMsg
 1032              		.thumb
 1033              		.thumb_func
 1035              	sendFaultMsg:
 1036              	.LFB73:
 683:Src/main.c    **** 	resetTXData();
 1037              		.loc 1 683 0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccMMxLCl.s 			page 34


 1042              	.LCFI13:
 1043              		.cfi_def_cfa_offset 8
 1044              		.cfi_offset 3, -8
 1045              		.cfi_offset 14, -4
 684:Src/main.c    **** 	TxHeader.StdId = FAULTS; // CAN FAULT ID
 1046              		.loc 1 684 0
 1047 0002 FFF7FEFF 		bl	resetTXData
 1048              	.LVL67:
 685:Src/main.c    **** 	TxData[0] = bms;  //Set all the data (faults) to their current values
 1049              		.loc 1 685 0
 1050 0006 0A49     		ldr	r1, .L62
 1051 0008 D023     		movs	r3, #208
 1052 000a 0B60     		str	r3, [r1]
 686:Src/main.c    **** 	TxData[1] = imd;
 1053              		.loc 1 686 0
 1054 000c 094A     		ldr	r2, .L62+4
 1055 000e 0A4B     		ldr	r3, .L62+8
 1056 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1057 0012 1370     		strb	r3, [r2]
 687:Src/main.c    **** 	TxData[2] = bspd;
 1058              		.loc 1 687 0
 1059 0014 094B     		ldr	r3, .L62+12
 1060 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1061 0018 5370     		strb	r3, [r2, #1]
 688:Src/main.c    **** 	TxData[3] = apps;
 1062              		.loc 1 688 0
 1063 001a 094B     		ldr	r3, .L62+16
 1064 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1065 001e 9370     		strb	r3, [r2, #2]
 689:Src/main.c    **** 	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 1066              		.loc 1 689 0
 1067 0020 084B     		ldr	r3, .L62+20
 1068 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1069 0024 D370     		strb	r3, [r2, #3]
 690:Src/main.c    **** }
 1070              		.loc 1 690 0
 1071 0026 0848     		ldr	r0, .L62+24
 1072 0028 084B     		ldr	r3, .L62+28
 1073 002a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1074              	.LVL68:
 1075 002e 08BD     		pop	{r3, pc}
 1076              	.L63:
 1077              		.align	2
 1078              	.L62:
 1079 0030 00000000 		.word	TxHeader
 1080 0034 00000000 		.word	.LANCHOR2
 1081 0038 00000000 		.word	bms
 1082 003c 00000000 		.word	imd
 1083 0040 00000000 		.word	bspd
 1084 0044 00000000 		.word	apps
 1085 0048 00000000 		.word	hcan
 1086 004c 00000000 		.word	TxMailbox
 1087              		.cfi_endproc
 1088              	.LFE73:
 1090              		.section	.text.sendPrechargeMsg,"ax",%progbits
 1091              		.align	2
 1092              		.global	sendPrechargeMsg
ARM GAS  /tmp/ccMMxLCl.s 			page 35


 1093              		.thumb
 1094              		.thumb_func
 1096              	sendPrechargeMsg:
 1097              	.LFB74:
 693:Src/main.c    **** 	resetTXData();
 1098              		.loc 1 693 0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 0
 1101              		@ frame_needed = 0, uses_anonymous_args = 0
 1102 0000 08B5     		push	{r3, lr}
 1103              	.LCFI14:
 1104              		.cfi_def_cfa_offset 8
 1105              		.cfi_offset 3, -8
 1106              		.cfi_offset 14, -4
 694:Src/main.c    **** 	TxHeader.StdId = PRECHARGE;
 1107              		.loc 1 694 0
 1108 0002 FFF7FEFF 		bl	resetTXData
 1109              	.LVL69:
 695:Src/main.c    **** 	TxData[0] = charged;
 1110              		.loc 1 695 0
 1111 0006 0649     		ldr	r1, .L66
 1112 0008 D123     		movs	r3, #209
 1113 000a 0B60     		str	r3, [r1]
 696:Src/main.c    **** 	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 1114              		.loc 1 696 0
 1115 000c 054A     		ldr	r2, .L66+4
 1116 000e 064B     		ldr	r3, .L66+8
 1117 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1118 0012 1370     		strb	r3, [r2]
 697:Src/main.c    **** }
 1119              		.loc 1 697 0
 1120 0014 0548     		ldr	r0, .L66+12
 1121 0016 064B     		ldr	r3, .L66+16
 1122 0018 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1123              	.LVL70:
 1124 001c 08BD     		pop	{r3, pc}
 1125              	.L67:
 1126 001e 00BF     		.align	2
 1127              	.L66:
 1128 0020 00000000 		.word	TxHeader
 1129 0024 00000000 		.word	.LANCHOR2
 1130 0028 00000000 		.word	charged
 1131 002c 00000000 		.word	hcan
 1132 0030 00000000 		.word	TxMailbox
 1133              		.cfi_endproc
 1134              	.LFE74:
 1136              		.section	.text.sendEnableMsg,"ax",%progbits
 1137              		.align	2
 1138              		.global	sendEnableMsg
 1139              		.thumb
 1140              		.thumb_func
 1142              	sendEnableMsg:
 1143              	.LFB75:
 700:Src/main.c    **** 	resetTXData();
 1144              		.loc 1 700 0
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccMMxLCl.s 			page 36


 1147              		@ frame_needed = 0, uses_anonymous_args = 0
 1148 0000 08B5     		push	{r3, lr}
 1149              	.LCFI15:
 1150              		.cfi_def_cfa_offset 8
 1151              		.cfi_offset 3, -8
 1152              		.cfi_offset 14, -4
 701:Src/main.c    **** 	TxHeader.StdId = ENABLE;
 1153              		.loc 1 701 0
 1154 0002 FFF7FEFF 		bl	resetTXData
 1155              	.LVL71:
 702:Src/main.c    **** 	TxData[0] = enable;
 1156              		.loc 1 702 0
 1157 0006 0649     		ldr	r1, .L70
 1158 0008 D223     		movs	r3, #210
 1159 000a 0B60     		str	r3, [r1]
 703:Src/main.c    **** 	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 1160              		.loc 1 703 0
 1161 000c 054A     		ldr	r2, .L70+4
 1162 000e 064B     		ldr	r3, .L70+8
 1163 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1164 0012 1370     		strb	r3, [r2]
 704:Src/main.c    **** }
 1165              		.loc 1 704 0
 1166 0014 0548     		ldr	r0, .L70+12
 1167 0016 064B     		ldr	r3, .L70+16
 1168 0018 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1169              	.LVL72:
 1170 001c 08BD     		pop	{r3, pc}
 1171              	.L71:
 1172 001e 00BF     		.align	2
 1173              	.L70:
 1174 0020 00000000 		.word	TxHeader
 1175 0024 00000000 		.word	.LANCHOR2
 1176 0028 00000000 		.word	enable
 1177 002c 00000000 		.word	hcan
 1178 0030 00000000 		.word	TxMailbox
 1179              		.cfi_endproc
 1180              	.LFE75:
 1182              		.section	.text.readFaults,"ax",%progbits
 1183              		.align	2
 1184              		.global	readFaults
 1185              		.thumb
 1186              		.thumb_func
 1188              	readFaults:
 1189              	.LFB77:
 716:Src/main.c    **** }
 717:Src/main.c    **** 
 718:Src/main.c    **** void readFaults(){
 1190              		.loc 1 718 0
 1191              		.cfi_startproc
 1192              		@ args = 0, pretend = 0, frame = 0
 1193              		@ frame_needed = 0, uses_anonymous_args = 0
 1194 0000 08B5     		push	{r3, lr}
 1195              	.LCFI16:
 1196              		.cfi_def_cfa_offset 8
 1197              		.cfi_offset 3, -8
 1198              		.cfi_offset 14, -4
ARM GAS  /tmp/ccMMxLCl.s 			page 37


 719:Src/main.c    **** 	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) == GPIO_PIN_SET){
 1199              		.loc 1 719 0
 1200 0002 1E48     		ldr	r0, .L82
 1201 0004 0121     		movs	r1, #1
 1202 0006 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1203              	.LVL73:
 1204 000a 0128     		cmp	r0, #1
 1205 000c 05D1     		bne	.L73
 720:Src/main.c    **** 		bspd = 1;
 1206              		.loc 1 720 0
 1207 000e 0122     		movs	r2, #1
 1208 0010 1B4B     		ldr	r3, .L82+4
 1209 0012 1A70     		strb	r2, [r3]
 721:Src/main.c    ****     sendFaultMsg();
 1210              		.loc 1 721 0
 1211 0014 FFF7FEFF 		bl	sendFaultMsg
 1212              	.LVL74:
 1213 0018 02E0     		b	.L74
 1214              	.L73:
 722:Src/main.c    ****   }
 723:Src/main.c    **** 	else bspd = 0;
 1215              		.loc 1 723 0
 1216 001a 0022     		movs	r2, #0
 1217 001c 184B     		ldr	r3, .L82+4
 1218 001e 1A70     		strb	r2, [r3]
 1219              	.L74:
 724:Src/main.c    **** 	
 725:Src/main.c    **** 	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 1220              		.loc 1 725 0
 1221 0020 1848     		ldr	r0, .L82+8
 1222 0022 4021     		movs	r1, #64
 1223 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1224              	.LVL75:
 1225 0028 0128     		cmp	r0, #1
 1226 002a 03D1     		bne	.L75
 726:Src/main.c    **** 		charged = 1;
 1227              		.loc 1 726 0
 1228 002c 0122     		movs	r2, #1
 1229 002e 164B     		ldr	r3, .L82+12
 1230 0030 1A70     		strb	r2, [r3]
 1231 0032 02E0     		b	.L76
 1232              	.L75:
 727:Src/main.c    ****   }
 728:Src/main.c    **** 	else charged = 0;
 1233              		.loc 1 728 0
 1234 0034 0022     		movs	r2, #0
 1235 0036 144B     		ldr	r3, .L82+12
 1236 0038 1A70     		strb	r2, [r3]
 1237              	.L76:
 729:Src/main.c    **** 	
 730:Src/main.c    **** 	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_SET){
 1238              		.loc 1 730 0
 1239 003a 1448     		ldr	r0, .L82+16
 1240 003c 4FF48041 		mov	r1, #16384
 1241 0040 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1242              	.LVL76:
 1243 0044 0128     		cmp	r0, #1
ARM GAS  /tmp/ccMMxLCl.s 			page 38


 1244 0046 05D1     		bne	.L77
 731:Src/main.c    **** 		imd = 1;
 1245              		.loc 1 731 0
 1246 0048 0122     		movs	r2, #1
 1247 004a 114B     		ldr	r3, .L82+20
 1248 004c 1A70     		strb	r2, [r3]
 732:Src/main.c    ****     sendFaultMsg();
 1249              		.loc 1 732 0
 1250 004e FFF7FEFF 		bl	sendFaultMsg
 1251              	.LVL77:
 1252 0052 02E0     		b	.L78
 1253              	.L77:
 733:Src/main.c    ****   }
 734:Src/main.c    **** 	else imd = 0;
 1254              		.loc 1 734 0
 1255 0054 0022     		movs	r2, #0
 1256 0056 0E4B     		ldr	r3, .L82+20
 1257 0058 1A70     		strb	r2, [r3]
 1258              	.L78:
 735:Src/main.c    **** 	
 736:Src/main.c    **** 	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_SET){
 1259              		.loc 1 736 0
 1260 005a 0C48     		ldr	r0, .L82+16
 1261 005c 4FF40041 		mov	r1, #32768
 1262 0060 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1263              	.LVL78:
 1264 0064 0128     		cmp	r0, #1
 1265 0066 05D1     		bne	.L79
 737:Src/main.c    **** 		bms = 1;
 1266              		.loc 1 737 0
 1267 0068 0122     		movs	r2, #1
 1268 006a 0A4B     		ldr	r3, .L82+24
 1269 006c 1A70     		strb	r2, [r3]
 738:Src/main.c    ****     sendFaultMsg();
 1270              		.loc 1 738 0
 1271 006e FFF7FEFF 		bl	sendFaultMsg
 1272              	.LVL79:
 1273 0072 08BD     		pop	{r3, pc}
 1274              	.L79:
 739:Src/main.c    ****   }
 740:Src/main.c    **** 	else bms = 0;
 1275              		.loc 1 740 0
 1276 0074 0022     		movs	r2, #0
 1277 0076 074B     		ldr	r3, .L82+24
 1278 0078 1A70     		strb	r2, [r3]
 1279 007a 08BD     		pop	{r3, pc}
 1280              	.L83:
 1281              		.align	2
 1282              	.L82:
 1283 007c 00140140 		.word	1073812480
 1284 0080 00000000 		.word	bspd
 1285 0084 000C0140 		.word	1073810432
 1286 0088 00000000 		.word	charged
 1287 008c 00100140 		.word	1073811456
 1288 0090 00000000 		.word	imd
 1289 0094 00000000 		.word	bms
 1290              		.cfi_endproc
ARM GAS  /tmp/ccMMxLCl.s 			page 39


 1291              	.LFE77:
 1293              		.section	.text.main,"ax",%progbits
 1294              		.align	2
 1295              		.global	main
 1296              		.thumb
 1297              		.thumb_func
 1299              	main:
 1300              	.LFB63:
 153:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1301              		.loc 1 153 0
 1302              		.cfi_startproc
 1303              		@ Volatile: function does not return.
 1304              		@ args = 0, pretend = 0, frame = 0
 1305              		@ frame_needed = 0, uses_anonymous_args = 0
 1306 0000 08B5     		push	{r3, lr}
 1307              	.LCFI17:
 1308              		.cfi_def_cfa_offset 8
 1309              		.cfi_offset 3, -8
 1310              		.cfi_offset 14, -4
 158:Src/main.c    ****   secTimer = 3000000; //3 seconds
 1311              		.loc 1 158 0
 1312 0002 374A     		ldr	r2, .L93
 1313 0004 374B     		ldr	r3, .L93+4
 1314 0006 1A60     		str	r2, [r3]
 159:Src/main.c    ****   sysTimer = 500; //timer to send message every second
 1315              		.loc 1 159 0
 1316 0008 374A     		ldr	r2, .L93+8
 1317 000a 384B     		ldr	r3, .L93+12
 1318 000c 1A60     		str	r2, [r3]
 160:Src/main.c    **** 
 1319              		.loc 1 160 0
 1320 000e 4FF4FA72 		mov	r2, #500
 1321 0012 374B     		ldr	r3, .L93+16
 1322 0014 1A60     		str	r2, [r3]
 167:Src/main.c    **** 
 1323              		.loc 1 167 0
 1324 0016 FFF7FEFF 		bl	HAL_Init
 1325              	.LVL80:
 179:Src/main.c    **** 
 1326              		.loc 1 179 0
 1327 001a FFF7FEFF 		bl	SystemClock_Config
 1328              	.LVL81:
 186:Src/main.c    ****   MX_SPI1_Init();
 1329              		.loc 1 186 0
 1330 001e FFF7FEFF 		bl	MX_GPIO_Init
 1331              	.LVL82:
 187:Src/main.c    ****   MX_ADC1_Init();
 1332              		.loc 1 187 0
 1333 0022 FFF7FEFF 		bl	MX_SPI1_Init
 1334              	.LVL83:
 188:Src/main.c    ****   MX_CAN_Init();
 1335              		.loc 1 188 0
 1336 0026 FFF7FEFF 		bl	MX_ADC1_Init
 1337              	.LVL84:
 189:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1338              		.loc 1 189 0
 1339 002a FFF7FEFF 		bl	MX_CAN_Init
ARM GAS  /tmp/ccMMxLCl.s 			page 40


 1340              	.LVL85:
 191:Src/main.c    **** 
 1341              		.loc 1 191 0
 1342 002e 3148     		ldr	r0, .L93+20
 1343 0030 FFF7FEFF 		bl	HAL_CAN_Start
 1344              	.LVL86:
 1345              	.L90:
 204:Src/main.c    **** 	resetTXData();
 1346              		.loc 1 204 0
 1347 0034 FFF7FEFF 		bl	readFaults
 1348              	.LVL87:
 205:Src/main.c    **** 	//TxHeader.StdId = 0x00;
 1349              		.loc 1 205 0
 1350 0038 FFF7FEFF 		bl	resetTXData
 1351              	.LVL88:
 209:Src/main.c    **** 	//Check ENABLE_IN from driver switch and precharge /******Change '1' to 'charged'*****************
 1352              		.loc 1 209 0
 1353 003c 6420     		movs	r0, #100
 1354 003e FFF7FEFF 		bl	HAL_Delay
 1355              	.LVL89:
 211:Src/main.c    **** 	  //RTD Sound
 1356              		.loc 1 211 0
 1357 0042 2D48     		ldr	r0, .L93+24
 1358 0044 4FF40041 		mov	r1, #32768
 1359 0048 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1360              	.LVL90:
 1361 004c 0128     		cmp	r0, #1
 1362 004e 38D1     		bne	.L85
 213:Src/main.c    **** 
 1363              		.loc 1 213 0
 1364 0050 2A4B     		ldr	r3, .L93+28
 1365 0052 1B68     		ldr	r3, [r3]
 1366 0054 03BB     		cbnz	r3, .L86
 216:Src/main.c    **** 
 1367              		.loc 1 216 0
 1368 0056 0220     		movs	r0, #2
 1369 0058 FFF7FEFF 		bl	updateADC
 1370              	.LVL91:
 1371 005c 284B     		ldr	r3, .L93+32
 1372 005e 1880     		strh	r0, [r3]	@ movhi
 222:Src/main.c    **** 
 1373              		.loc 1 222 0
 1374 0060 4FF49672 		mov	r2, #300
 1375 0064 214B     		ldr	r3, .L93+12
 1376 0066 1A60     		str	r2, [r3]
 226:Src/main.c    **** 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 1377              		.loc 1 226 0
 1378 0068 04E0     		b	.L87
 1379              	.L88:
 227:Src/main.c    **** 			}
 1380              		.loc 1 227 0
 1381 006a 2348     		ldr	r0, .L93+24
 1382 006c 0821     		movs	r1, #8
 1383 006e 0122     		movs	r2, #1
 1384 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1385              	.LVL92:
 1386              	.L87:
ARM GAS  /tmp/ccMMxLCl.s 			page 41


 226:Src/main.c    **** 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 1387              		.loc 1 226 0
 1388 0074 1D4B     		ldr	r3, .L93+12
 1389 0076 1B68     		ldr	r3, [r3]
 1390 0078 002B     		cmp	r3, #0
 1391 007a F6D1     		bne	.L88
 231:Src/main.c    **** 
 1392              		.loc 1 231 0
 1393 007c 1E4C     		ldr	r4, .L93+24
 1394 007e 2046     		mov	r0, r4
 1395 0080 0821     		movs	r1, #8
 1396 0082 0022     		movs	r2, #0
 1397 0084 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1398              	.LVL93:
 235:Src/main.c    **** 
 1399              		.loc 1 235 0
 1400 0088 2046     		mov	r0, r4
 1401 008a 2021     		movs	r1, #32
 1402 008c 0122     		movs	r2, #1
 1403 008e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1404              	.LVL94:
 237:Src/main.c    **** 
 1405              		.loc 1 237 0
 1406 0092 0122     		movs	r2, #1
 1407 0094 194B     		ldr	r3, .L93+28
 1408 0096 1A60     		str	r2, [r3]
 1409              	.L86:
 242:Src/main.c    **** 		//send CAN message
 1410              		.loc 1 242 0
 1411 0098 FFF7FEFF 		bl	checkBTSF
 1412              	.LVL95:
 1413 009c 30B1     		cbz	r0, .L89
 244:Src/main.c    **** 		//set low to stop the car
 1414              		.loc 1 244 0
 1415 009e 0022     		movs	r2, #0
 1416 00a0 164B     		ldr	r3, .L93+28
 1417 00a2 1A60     		str	r2, [r3]
 246:Src/main.c    **** 		
 1418              		.loc 1 246 0
 1419 00a4 1448     		ldr	r0, .L93+24
 1420 00a6 1021     		movs	r1, #16
 1421 00a8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1422              	.LVL96:
 1423              	.L89:
 249:Src/main.c    **** 		//send CAN message
 1424              		.loc 1 249 0
 1425 00ac FFF7FEFF 		bl	checkAPPS
 1426              	.LVL97:
 1427 00b0 38B1     		cbz	r0, .L85
 251:Src/main.c    **** 		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 1428              		.loc 1 251 0
 1429 00b2 0022     		movs	r2, #0
 1430 00b4 114B     		ldr	r3, .L93+28
 1431 00b6 1A60     		str	r2, [r3]
 252:Src/main.c    **** 	  }
 1432              		.loc 1 252 0
 1433 00b8 0F48     		ldr	r0, .L93+24
ARM GAS  /tmp/ccMMxLCl.s 			page 42


 1434 00ba 4FF48071 		mov	r1, #256
 1435 00be FFF7FEFF 		bl	HAL_GPIO_WritePin
 1436              	.LVL98:
 1437              	.L85:
 257:Src/main.c    **** 		sendPrechargeMsg(); //0D1
 1438              		.loc 1 257 0
 1439 00c2 0B4B     		ldr	r3, .L93+16
 1440 00c4 1B68     		ldr	r3, [r3]
 1441 00c6 002B     		cmp	r3, #0
 1442 00c8 B4D1     		bne	.L90
 258:Src/main.c    **** 		sendFaultMsg(); //0D0
 1443              		.loc 1 258 0
 1444 00ca FFF7FEFF 		bl	sendPrechargeMsg
 1445              	.LVL99:
 259:Src/main.c    **** 		sendEnableMsg(); //0D2
 1446              		.loc 1 259 0
 1447 00ce FFF7FEFF 		bl	sendFaultMsg
 1448              	.LVL100:
 260:Src/main.c    **** 		sysTimer = 500;
 1449              		.loc 1 260 0
 1450 00d2 FFF7FEFF 		bl	sendEnableMsg
 1451              	.LVL101:
 261:Src/main.c    **** 	}
 1452              		.loc 1 261 0
 1453 00d6 4FF4FA72 		mov	r2, #500
 1454 00da 054B     		ldr	r3, .L93+16
 1455 00dc 1A60     		str	r2, [r3]
 1456 00de A9E7     		b	.L90
 1457              	.L94:
 1458              		.align	2
 1459              	.L93:
 1460 00e0 A0860100 		.word	100000
 1461 00e4 00000000 		.word	millisTimer
 1462 00e8 C0C62D00 		.word	3000000
 1463 00ec 00000000 		.word	secTimer
 1464 00f0 00000000 		.word	sysTimer
 1465 00f4 00000000 		.word	hcan
 1466 00f8 000C0140 		.word	1073810432
 1467 00fc 00000000 		.word	.LANCHOR3
 1468 0100 00000000 		.word	brakePressure_1
 1469              		.cfi_endproc
 1470              	.LFE63:
 1472              		.section	.text.Error_Handler,"ax",%progbits
 1473              		.align	2
 1474              		.global	Error_Handler
 1475              		.thumb
 1476              		.thumb_func
 1478              	Error_Handler:
 1479              	.LFB78:
 741:Src/main.c    **** 
 742:Src/main.c    **** 
 743:Src/main.c    **** }
 744:Src/main.c    **** 
 745:Src/main.c    **** /* USER CODE END 4 */
 746:Src/main.c    **** 
 747:Src/main.c    **** /**
 748:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
ARM GAS  /tmp/ccMMxLCl.s 			page 43


 749:Src/main.c    ****   * @retval None
 750:Src/main.c    ****   */
 751:Src/main.c    **** void Error_Handler(void)
 752:Src/main.c    **** {
 1480              		.loc 1 752 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 1484              		@ link register save eliminated.
 1485 0000 7047     		bx	lr
 1486              		.cfi_endproc
 1487              	.LFE78:
 1489              		.global	sConfig
 1490              		.comm	TxMailbox,4,4
 1491              		.comm	RxData,8,4
 1492              		.comm	enable,1,1
 1493              		.comm	charged,1,1
 1494              		.comm	apps,1,1
 1495              		.comm	bspd,1,1
 1496              		.comm	imd,1,1
 1497              		.comm	bms,1,1
 1498              		.global	TxData
 1499              		.comm	TxHeader,24,4
 1500              		.global	hardFaultFlag
 1501              		.global	driving
 1502              		.global	max_throttle
 1503              		.comm	throttle_B,2,2
 1504              		.comm	throttle_A,2,2
 1505              		.comm	brakePressure_2,2,2
 1506              		.comm	brakePressure_1,2,2
 1507              		.comm	steeringPos,2,2
 1508              		.comm	brakePos,2,2
 1509              		.comm	hspi1,88,4
 1510              		.comm	hcan,40,4
 1511              		.comm	hadc1,48,4
 1512              		.global	brakeThreshold
 1513              		.global	throttleThreshold
 1514              		.comm	sysTimer,4,4
 1515              		.comm	secTimer,4,4
 1516              		.comm	millisTimer,4,4
 1517 0002 00BF     		.section	.bss.driving,"aw",%nobits
 1518              		.align	2
 1519              		.set	.LANCHOR3,. + 0
 1522              	driving:
 1523 0000 00000000 		.space	4
 1524              		.section	.data.TxData,"aw",%progbits
 1525              		.align	2
 1526              		.set	.LANCHOR2,. + 0
 1529              	TxData:
 1530 0000 55       		.byte	85
 1531 0001 55       		.byte	85
 1532 0002 55       		.byte	85
 1533 0003 55       		.byte	85
 1534 0004 55       		.byte	85
 1535 0005 55       		.byte	85
 1536 0006 55       		.byte	85
 1537 0007 55       		.byte	85
ARM GAS  /tmp/ccMMxLCl.s 			page 44


 1538              		.section	.rodata.throttleThreshold,"a",%progbits
 1539              		.align	2
 1542              	throttleThreshold:
 1543 0000 50000000 		.word	80
 1544              		.section	.bss.sConfig,"aw",%nobits
 1545              		.align	2
 1546              		.set	.LANCHOR0,. + 0
 1549              	sConfig:
 1550 0000 00000000 		.space	12
 1550      00000000 
 1550      00000000 
 1551              		.section	.data.max_throttle,"aw",%progbits
 1552              		.align	1
 1553              		.set	.LANCHOR1,. + 0
 1556              	max_throttle:
 1557 0000 0A00     		.short	10
 1558              		.section	.rodata.brakeThreshold,"a",%progbits
 1559              		.align	2
 1562              	brakeThreshold:
 1563 0000 00000000 		.space	4
 1564              		.section	.bss.hardFaultFlag,"aw",%nobits
 1565              		.align	2
 1568              	hardFaultFlag:
 1569 0000 00000000 		.space	4
 1570              		.text
 1571              	.Letext0:
 1572              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1573              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1574              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1575              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1576              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1577              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1578              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1579              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1580              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1581              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1582              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1583              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 1584              		.file 14 "Drivers/CMSIS/Include/core_cm3.h"
 1585              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccMMxLCl.s 			page 45


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccMMxLCl.s:19     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccMMxLCl.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccMMxLCl.s:210    .text.MX_GPIO_Init:0000000000000110 $d
     /tmp/ccMMxLCl.s:220    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccMMxLCl.s:224    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccMMxLCl.s:272    .text.MX_SPI1_Init:0000000000000030 $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccMMxLCl.s:278    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccMMxLCl.s:282    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccMMxLCl.s:413    .text.MX_ADC1_Init:00000000000000b0 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccMMxLCl.s:420    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccMMxLCl.s:424    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccMMxLCl.s:488    .text.MX_CAN_Init:0000000000000048 $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 TxHeader
     /tmp/ccMMxLCl.s:495    .text.updateADC:0000000000000000 $t
     /tmp/ccMMxLCl.s:500    .text.updateADC:0000000000000000 updateADC
     /tmp/ccMMxLCl.s:591    .text.updateADC:0000000000000068 $d
     /tmp/ccMMxLCl.s:605    .text.APPS_Diff:0000000000000000 $t
     /tmp/ccMMxLCl.s:610    .text.APPS_Diff:0000000000000000 APPS_Diff
     /tmp/ccMMxLCl.s:726    .text.APPS_Diff:00000000000000a0 $d
                            *COM*:0000000000000002 throttle_A
                            *COM*:0000000000000002 throttle_B
     /tmp/ccMMxLCl.s:738    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccMMxLCl.s:743    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccMMxLCl.s:825    .text.resetTXData:0000000000000000 $t
     /tmp/ccMMxLCl.s:830    .text.resetTXData:0000000000000000 resetTXData
     /tmp/ccMMxLCl.s:859    .text.resetTXData:0000000000000018 $d
     /tmp/ccMMxLCl.s:864    .text.checkAPPS:0000000000000000 $t
     /tmp/ccMMxLCl.s:869    .text.checkAPPS:0000000000000000 checkAPPS
     /tmp/ccMMxLCl.s:948    .text.checkAPPS:0000000000000064 $d
                            *COM*:0000000000000004 millisTimer
                            *COM*:0000000000000004 TxMailbox
     /tmp/ccMMxLCl.s:959    .text.checkBTSF:0000000000000000 $t
     /tmp/ccMMxLCl.s:964    .text.checkBTSF:0000000000000000 checkBTSF
     /tmp/ccMMxLCl.s:1020   .text.checkBTSF:0000000000000040 $d
                            *COM*:0000000000000002 brakePressure_1
     /tmp/ccMMxLCl.s:1030   .text.sendFaultMsg:0000000000000000 $t
     /tmp/ccMMxLCl.s:1035   .text.sendFaultMsg:0000000000000000 sendFaultMsg
     /tmp/ccMMxLCl.s:1079   .text.sendFaultMsg:0000000000000030 $d
                            *COM*:0000000000000001 bms
                            *COM*:0000000000000001 imd
                            *COM*:0000000000000001 bspd
                            *COM*:0000000000000001 apps
     /tmp/ccMMxLCl.s:1091   .text.sendPrechargeMsg:0000000000000000 $t
     /tmp/ccMMxLCl.s:1096   .text.sendPrechargeMsg:0000000000000000 sendPrechargeMsg
     /tmp/ccMMxLCl.s:1128   .text.sendPrechargeMsg:0000000000000020 $d
                            *COM*:0000000000000001 charged
     /tmp/ccMMxLCl.s:1137   .text.sendEnableMsg:0000000000000000 $t
     /tmp/ccMMxLCl.s:1142   .text.sendEnableMsg:0000000000000000 sendEnableMsg
     /tmp/ccMMxLCl.s:1174   .text.sendEnableMsg:0000000000000020 $d
                            *COM*:0000000000000001 enable
     /tmp/ccMMxLCl.s:1183   .text.readFaults:0000000000000000 $t
     /tmp/ccMMxLCl.s:1188   .text.readFaults:0000000000000000 readFaults
ARM GAS  /tmp/ccMMxLCl.s 			page 46


     /tmp/ccMMxLCl.s:1283   .text.readFaults:000000000000007c $d
     /tmp/ccMMxLCl.s:1294   .text.main:0000000000000000 $t
     /tmp/ccMMxLCl.s:1299   .text.main:0000000000000000 main
     /tmp/ccMMxLCl.s:1460   .text.main:00000000000000e0 $d
                            *COM*:0000000000000004 secTimer
                            *COM*:0000000000000004 sysTimer
     /tmp/ccMMxLCl.s:1473   .text.Error_Handler:0000000000000000 $t
     /tmp/ccMMxLCl.s:1478   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccMMxLCl.s:1549   .bss.sConfig:0000000000000000 sConfig
                            *COM*:0000000000000008 RxData
     /tmp/ccMMxLCl.s:1529   .data.TxData:0000000000000000 TxData
     /tmp/ccMMxLCl.s:1568   .bss.hardFaultFlag:0000000000000000 hardFaultFlag
     /tmp/ccMMxLCl.s:1522   .bss.driving:0000000000000000 driving
     /tmp/ccMMxLCl.s:1556   .data.max_throttle:0000000000000000 max_throttle
                            *COM*:0000000000000002 brakePressure_2
                            *COM*:0000000000000002 steeringPos
                            *COM*:0000000000000002 brakePos
     /tmp/ccMMxLCl.s:1562   .rodata.brakeThreshold:0000000000000000 brakeThreshold
     /tmp/ccMMxLCl.s:1542   .rodata.throttleThreshold:0000000000000000 throttleThreshold
     /tmp/ccMMxLCl.s:1518   .bss.driving:0000000000000000 $d
     /tmp/ccMMxLCl.s:1525   .data.TxData:0000000000000000 $d
     /tmp/ccMMxLCl.s:1539   .rodata.throttleThreshold:0000000000000000 $d
     /tmp/ccMMxLCl.s:1545   .bss.sConfig:0000000000000000 $d
     /tmp/ccMMxLCl.s:1552   .data.max_throttle:0000000000000000 $d
     /tmp/ccMMxLCl.s:1559   .rodata.brakeThreshold:0000000000000000 $d
     /tmp/ccMMxLCl.s:1565   .bss.hardFaultFlag:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_SPI_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
__aeabi_ui2d
__aeabi_i2d
__aeabi_dmul
__aeabi_dsub
__aeabi_dcmplt
__aeabi_dadd
__aeabi_ddiv
__aeabi_dcmpge
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_CAN_AddTxMessage
HAL_GPIO_ReadPin
HAL_Init
HAL_CAN_Start
HAL_Delay

ARM GAS  /tmp/ccQTpTWP.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB77:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/ccQTpTWP.s 			page 2


  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** 
  40:Src/main.c    **** 
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE END Header */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  45:Src/main.c    **** #include "main.h"
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** #include "stdlib.h"
  50:Src/main.c    **** 
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END Includes */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  55:Src/main.c    **** /* USER CODE BEGIN PTD */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PTD */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN PD */
  61:Src/main.c    **** 
  62:Src/main.c    **** 
  63:Src/main.c    **** 
  64:Src/main.c    **** #define APPS_STDID        0x300
  65:Src/main.c    **** #define BTSF_STDID        0x301
  66:Src/main.c    **** #define FAULTS            0x0D0
  67:Src/main.c    **** // FAULT DEFS
  68:Src/main.c    ****   #define FAULT_ACTIVE    0xFF
  69:Src/main.c    ****   #define FAULT_INACTIVE  0x00
  70:Src/main.c    **** 
  71:Src/main.c    **** //FAULT DEGS
  72:Src/main.c    **** #define CAR_STATE         0x0D1
  73:Src/main.c    **** // CAR STATES
  74:Src/main.c    ****   #define LV_ON           0x01
  75:Src/main.c    ****   #define PRECHARGED      0x02
  76:Src/main.c    ****   #define ENABLE_FLIPPED  0x04
  77:Src/main.c    ****   #define RTDS_SOUND      0x08
  78:Src/main.c    ****   #define PWR_AVAILABLE   0x10 
  79:Src/main.c    ****   #define SOFT_FAULT      0x20
  80:Src/main.c    **** // CAR STATES
  81:Src/main.c    **** // 1 volt is 1241.21
  82:Src/main.c    **** //throttle A .66-3.2 scaled to .396-1.866
  83:Src/main.c    **** //throttle B .33-2.7 scaled to .198-1.62
  84:Src/main.c    **** // That means 5% from 0 is .4705 volts
  85:Src/main.c    **** const uint16_t ThrottleA_5 = 584;
  86:Src/main.c    **** // That means 25% from 0 is .7635 volts
  87:Src/main.c    **** const uint16_t ThrottleA_25 = 947;
  88:Src/main.c    **** const uint16_t brakeThreshold = 2606; //80; >> 3.5 volts on 5 v scale, 2.1 on 3.3v scale
  89:Src/main.c    **** const uint16_t RTD_Threshold = 2000; // NO idea for this
  90:Src/main.c    **** 
  91:Src/main.c    **** // APPS is .35 volts, so .21 volts scaled
ARM GAS  /tmp/ccQTpTWP.s 			page 3


  92:Src/main.c    **** const int APPS_difference = 260;
  93:Src/main.c    **** 
  94:Src/main.c    **** 
  95:Src/main.c    **** 
  96:Src/main.c    **** /* USER CODE END PD */
  97:Src/main.c    **** 
  98:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  99:Src/main.c    **** /* USER CODE BEGIN PM */
 100:Src/main.c    **** 
 101:Src/main.c    **** /* USER CODE END PM */
 102:Src/main.c    **** 
 103:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
 104:Src/main.c    **** ADC_HandleTypeDef hadc1;
 105:Src/main.c    **** 
 106:Src/main.c    **** CAN_HandleTypeDef hcan;
 107:Src/main.c    **** 
 108:Src/main.c    **** SPI_HandleTypeDef hspi1;
 109:Src/main.c    **** 
 110:Src/main.c    **** /* USER CODE BEGIN PV */
 111:Src/main.c    **** 
 112:Src/main.c    **** uint16_t brakePos;
 113:Src/main.c    **** uint16_t steeringPos;
 114:Src/main.c    **** uint16_t brakePressure_1;
 115:Src/main.c    **** uint16_t brakePressure_2;
 116:Src/main.c    **** uint16_t throttle_A;
 117:Src/main.c    **** uint16_t throttle_B;
 118:Src/main.c    **** 
 119:Src/main.c    **** 
 120:Src/main.c    **** //need to figure out:
 121:Src/main.c    **** uint16_t max_throttle = 10;
 122:Src/main.c    **** 
 123:Src/main.c    **** 
 124:Src/main.c    **** //STATE FLAGS
 125:Src/main.c    **** char Prev_State = 0x00; 		//boolean
 126:Src/main.c    **** int hardFaultFlag = 0;  //boolean
 127:Src/main.c    **** char BTSF_ACTIVE = 0x00;
 128:Src/main.c    **** 
 129:Src/main.c    **** // CAR STAT STATES FOR CAN
 130:Src/main.c    **** CAN_TxHeaderTypeDef TxCar_state;
 131:Src/main.c    **** uint8_t TxCar_state_data[1] = {0x00};
 132:Src/main.c    **** uint32_t TxCar_stateMailbox;
 133:Src/main.c    **** 
 134:Src/main.c    **** //CAN FAULT VARIABLES
 135:Src/main.c    **** CAN_TxHeaderTypeDef TxFaults;
 136:Src/main.c    **** uint8_t TxFault_data[4] = {0x55, 0x55, 0x55, 0x55};
 137:Src/main.c    **** /*Set these values: 0xFF = Fault present
 138:Src/main.c    ****                     0x00 = No fault*/
 139:Src/main.c    **** uint8_t bms;        //TxData[0]
 140:Src/main.c    **** uint8_t imd;        //TxData[1]
 141:Src/main.c    **** uint8_t bspd;       //TxData[2]
 142:Src/main.c    **** uint8_t apps;       //TxData[3]
 143:Src/main.c    **** uint32_t TxFaultsMailbox;
 144:Src/main.c    **** 
 145:Src/main.c    **** //For Timers
 146:Src/main.c    **** extern uint32_t millisTimer;
 147:Src/main.c    **** extern uint32_t secTimer;
 148:Src/main.c    **** extern uint32_t sysTimer;
ARM GAS  /tmp/ccQTpTWP.s 			page 4


 149:Src/main.c    **** 
 150:Src/main.c    **** ADC_ChannelConfTypeDef sConfig = {0};
 151:Src/main.c    **** /* USER CODE END PV */
 152:Src/main.c    **** 
 153:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 154:Src/main.c    **** void SystemClock_Config(void);
 155:Src/main.c    **** static void MX_GPIO_Init(void);
 156:Src/main.c    **** static void MX_SPI1_Init(void);
 157:Src/main.c    **** static void MX_ADC1_Init(void);
 158:Src/main.c    **** static void MX_CAN_Init(void);
 159:Src/main.c    **** /* USER CODE BEGIN PFP */
 160:Src/main.c    **** 
 161:Src/main.c    **** char checkBTSF();
 162:Src/main.c    **** char checkAPPS();
 163:Src/main.c    **** char APPS_Diff();
 164:Src/main.c    **** void sendFaultMsg();
 165:Src/main.c    **** void sendCar_state();
 166:Src/main.c    **** void readFaults();
 167:Src/main.c    **** void car_state_machine(char STATE);
 168:Src/main.c    **** uint16_t updateADC(int channel); 
 169:Src/main.c    **** /* USER CODE END PFP */
 170:Src/main.c    **** 
 171:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 172:Src/main.c    **** /* USER CODE BEGIN 0 */
 173:Src/main.c    **** 
 174:Src/main.c    **** //int refTime = millis();
 175:Src/main.c    **** //int APPSFlag = 0; //boolean
 176:Src/main.c    **** 
 177:Src/main.c    **** /**
 178:Src/main.c    ****   * @brief  The application entry point.
 179:Src/main.c    ****   * @retval int
 180:Src/main.c    ****   */
 181:Src/main.c    **** int main(void)
 182:Src/main.c    **** {
 183:Src/main.c    ****   /* USER CODE BEGIN 1 */
 184:Src/main.c    **** 
 185:Src/main.c    **** 
 186:Src/main.c    ****   //For Timers
 187:Src/main.c    ****   millisTimer = 100000; //100 millis
 188:Src/main.c    ****   secTimer = 3000000; //3 seconds
 189:Src/main.c    ****   sysTimer = 500; //timer to send message every second
 190:Src/main.c    **** 
 191:Src/main.c    ****   /* USER CODE END 1 */
 192:Src/main.c    **** 
 193:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 194:Src/main.c    **** 
 195:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 196:Src/main.c    ****   HAL_Init();
 197:Src/main.c    **** 
 198:Src/main.c    ****   /* USER CODE BEGIN Init */
 199:Src/main.c    **** 
 200:Src/main.c    ****   // Update SystemCoreClock value
 201:Src/main.c    ****  // SystemCoreClockUpdate();
 202:Src/main.c    ****   // Configure the SysTick timer to overflow every 1 us
 203:Src/main.c    ****  // SysTick_Config(SystemCoreClock / 1000000);
 204:Src/main.c    **** 
 205:Src/main.c    ****   /* USER CODE END Init */
ARM GAS  /tmp/ccQTpTWP.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    ****   /* Configure the system clock */
 208:Src/main.c    ****   SystemClock_Config();
 209:Src/main.c    **** 
 210:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 211:Src/main.c    **** 
 212:Src/main.c    ****   /* USER CODE END SysInit */
 213:Src/main.c    **** 
 214:Src/main.c    ****   /* Initialize all configured peripherals */
 215:Src/main.c    ****   MX_GPIO_Init();
 216:Src/main.c    ****   MX_SPI1_Init();
 217:Src/main.c    ****   MX_ADC1_Init();
 218:Src/main.c    ****   MX_CAN_Init();
 219:Src/main.c    ****   /* USER CODE BEGIN 2 */
 220:Src/main.c    ****   HAL_CAN_Start(&hcan);
 221:Src/main.c    **** 
 222:Src/main.c    ****   /* USER CODE END 2 */
 223:Src/main.c    **** 
 224:Src/main.c    ****   /* Infinite loop */
 225:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 226:Src/main.c    ****   
 227:Src/main.c    ****   while (1)
 228:Src/main.c    ****   {
 229:Src/main.c    ****     //READ FOR PRECHARGE
 230:Src/main.c    **** 	if(HAL_GPIO_ReadPin(GPIOB, PRECHARGE_COMPLETE_Pin) == GPIO_PIN_SET){
 231:Src/main.c    **** 	  car_state_machine(PRECHARGED);
 232:Src/main.c    **** 
 233:Src/main.c    ****       //READ FOR ENABLE
 234:Src/main.c    **** 	  if(HAL_GPIO_ReadPin(GPIOB,ENABLE_IN_Pin) == GPIO_PIN_RESET){
 235:Src/main.c    **** 		  car_state_machine(ENABLE_FLIPPED);
 236:Src/main.c    ****       //ADC for Brake pressure
 237:Src/main.c    **** 		  brakePressure_1 = updateADC(2);
 238:Src/main.c    **** 
 239:Src/main.c    **** 		  //SEE IF BRAKE IS PRESSED 
 240:Src/main.c    **** 		  if(brakePressure_1 >= brakeThreshold){
 241:Src/main.c    **** 			//set 3 second timer
 242:Src/main.c    **** 			 if(TxCar_state_data[0] == ENABLE_FLIPPED) {
 243:Src/main.c    ****         secTimer = 3000; //change to 3000 for 3 seconds
 244:Src/main.c    ****         car_state_machine(RTDS_SOUND);
 245:Src/main.c    ****         HAL_GPIO_WritePin(GPIOB, RTD_EN_Pin | RTDS_EN_Pin | BTSF_EN_Pin | APPS_EN_Pin, GPIO_PIN_SET
 246:Src/main.c    ****         } 
 247:Src/main.c    **** 			//RTD Sound Enable Play sound for 2.5 seconds 
 248:Src/main.c    ****       }
 249:Src/main.c    **** 			
 250:Src/main.c    **** 			// IF OUR TIMER IS OVER FINALLY //we also stop timer if we started it from RTDS state or Soft fa
 251:Src/main.c    ****         if((secTimer == 0) && (TxCar_state_data[0] & 0x38)){
 252:Src/main.c    **** 			    HAL_GPIO_WritePin(GPIOB, RTDS_EN_Pin, GPIO_PIN_RESET);
 253:Src/main.c    ****           //SeT pwr
 254:Src/main.c    ****           car_state_machine(PWR_AVAILABLE);
 255:Src/main.c    **** 
 256:Src/main.c    ****         }// rtds buzzer stop
 257:Src/main.c    **** 	  }//END OF RTD SEQUENCE
 258:Src/main.c    ****   } // of start up sequence
 259:Src/main.c    **** 	  
 260:Src/main.c    ****     // SEQUENCE FOR CHECKING SOFT FAULTS
 261:Src/main.c    ****     if(TxCar_state_data[0] >= RTDS_SOUND){
 262:Src/main.c    **** 	  if (checkBTSF() || checkAPPS()){
ARM GAS  /tmp/ccQTpTWP.s 			page 6


 263:Src/main.c    **** 		  HAL_GPIO_WritePin(GPIOB,BTSF_EN_Pin | APPS_EN_Pin,GPIO_PIN_RESET);
 264:Src/main.c    ****       TxCar_state_data[0] = SOFT_FAULT;
 265:Src/main.c    ****     }
 266:Src/main.c    ****     else if(TxCar_state_data[0] == SOFT_FAULT) {
 267:Src/main.c    ****         TxCar_state_data[0] = PWR_AVAILABLE;
 268:Src/main.c    ****         HAL_GPIO_WritePin(GPIOB, BTSF_EN_Pin|APPS_EN_Pin ,GPIO_PIN_SET);
 269:Src/main.c    ****     }
 270:Src/main.c    ****   }
 271:Src/main.c    ****     readFaults();
 272:Src/main.c    **** 	 
 273:Src/main.c    **** 	if (sysTimer == 0){
 274:Src/main.c    **** 		sendFaultMsg();
 275:Src/main.c    **** 		sendCar_state();
 276:Src/main.c    **** 		sysTimer = 500;
 277:Src/main.c    **** 	}
 278:Src/main.c    ****     /* USER CODE END WHILE */
 279:Src/main.c    **** 
 280:Src/main.c    ****     /* USER CODE BEGIN 3 */
 281:Src/main.c    ****   }
 282:Src/main.c    ****   /* USER CODE END 3 */
 283:Src/main.c    **** }
 284:Src/main.c    **** 
 285:Src/main.c    **** /********************************************************************************/
 286:Src/main.c    **** //Checks for APPS errors, sends fault if there is one 
 287:Src/main.c    **** //Returns one if difference in throttleA/B is greater than 10% for 100 ms
 288:Src/main.c    **** //Returns zero if else
 289:Src/main.c    **** /********************************************************************************/
 290:Src/main.c    **** char checkAPPS(){
 291:Src/main.c    **** 
 292:Src/main.c    ****   throttle_A = updateADC(8); 
 293:Src/main.c    ****   throttle_B = updateADC(9); 
 294:Src/main.c    ****   //0-5000 based ?
 295:Src/main.c    **** 
 296:Src/main.c    ****   //Throttles Agree
 297:Src/main.c    ****   millisTimer = 1000;
 298:Src/main.c    ****   while(millisTimer > 0 && APPS_Diff()){
 299:Src/main.c    **** 	throttle_A = updateADC(8);
 300:Src/main.c    **** 	throttle_B = updateADC(9);
 301:Src/main.c    ****   } //stay in this loop while there is a 10% difference in throttles
 302:Src/main.c    **** 
 303:Src/main.c    ****   //APPS_EN Fault
 304:Src/main.c    ****   if(millisTimer == 0){ //hmmm needs to be changed
 305:Src/main.c    ****     return 1; //will set driving = 0;
 306:Src/main.c    ****   }
 307:Src/main.c    ****   return 0; //APPS is good
 308:Src/main.c    **** }
 309:Src/main.c    **** 
 310:Src/main.c    **** /********************************************************************************/
 311:Src/main.c    **** //Checks for BTSF errors, If the brake and throttle are pressed at the same time, above a certain t
 312:Src/main.c    **** //Returns one if fault was sensed and sent out
 313:Src/main.c    **** //zero if nothing is detected
 314:Src/main.c    **** /********************************************************************************/
 315:Src/main.c    **** char checkBTSF(){
 316:Src/main.c    ****   brakePressure_1 = updateADC(2);
 317:Src/main.c    ****   throttle_A = updateADC(8); 
 318:Src/main.c    **** 
 319:Src/main.c    ****   //0-5000 based
ARM GAS  /tmp/ccQTpTWP.s 			page 7


 320:Src/main.c    ****   if(BTSF_ACTIVE)
 321:Src/main.c    ****   {
 322:Src/main.c    ****     if(throttle_A <= ThrottleA_5)
 323:Src/main.c    ****     {
 324:Src/main.c    ****       BTSF_ACTIVE = 0x00;
 325:Src/main.c    ****       return 0;
 326:Src/main.c    ****     }
 327:Src/main.c    ****     return 1;
 328:Src/main.c    ****   }
 329:Src/main.c    **** 
 330:Src/main.c    ****   if((brakePressure_1 > brakeThreshold) && (throttle_A > ThrottleA_25)){
 331:Src/main.c    **** 	     BTSF_ACTIVE = 0xFF;
 332:Src/main.c    ****        return 1;
 333:Src/main.c    ****   }
 334:Src/main.c    ****   
 335:Src/main.c    ****   return 0;
 336:Src/main.c    **** }
 337:Src/main.c    **** 
 338:Src/main.c    **** /********************************************************************************/
 339:Src/main.c    **** // This function updates the ADC values for all positions/pressures
 340:Src/main.c    **** //
 341:Src/main.c    **** //
 342:Src/main.c    **** /********************************************************************************/
 343:Src/main.c    **** uint16_t updateADC(int channel){	
 344:Src/main.c    **** 	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 345:Src/main.c    ****   if (channel == 0) //Brake position 
 346:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_0;
 347:Src/main.c    ****   if (channel == 1) //steering position 
 348:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_1;
 349:Src/main.c    ****   if (channel == 2) //brake pressure 1
 350:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_2;
 351:Src/main.c    ****   if (channel == 3) //brake pressure 2
 352:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_3;
 353:Src/main.c    ****   if (channel == 8) //throttle A
 354:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 355:Src/main.c    ****   if (channel == 9) //throttle B 
 356:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_9;
 357:Src/main.c    **** 
 358:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 359:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 360:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 361:Src/main.c    **** 
 362:Src/main.c    ****   HAL_ADC_Start(&hadc1);
 363:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 364:Src/main.c    ****   return HAL_ADC_GetValue(&hadc1);
 365:Src/main.c    ****   //HAL_ADC_Stop(&hadc1);
 366:Src/main.c    **** 	//////////////////////////////////////////////////////////////
 367:Src/main.c    **** 	/*
 368:Src/main.c    **** 	HAL_ADC_Start(&hadc1);
 369:Src/main.c    **** 	
 370:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 371:Src/main.c    **** 	brakePos = HAL_ADC_GetValue(&hadc1);  //brakePos
 372:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 373:Src/main.c    **** 	steeringPos = HAL_ADC_GetValue(&hadc1);  //steeringPos
 374:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 375:Src/main.c    **** 	brakePressure_1 = HAL_ADC_GetValue(&hadc1);  //brakePressure_1
 376:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
ARM GAS  /tmp/ccQTpTWP.s 			page 8


 377:Src/main.c    **** 	brakePressure_2 = HAL_ADC_GetValue(&hadc1);  //brakePressure_2
 378:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 379:Src/main.c    **** 	throttle_A = HAL_ADC_GetValue(&hadc1);  //throttle_A
 380:Src/main.c    **** 	HAL_ADC_PollForConversion(&hadc1, 1000);
 381:Src/main.c    **** 	throttle_B = HAL_ADC_GetValue(&hadc1);  //throttle_B
 382:Src/main.c    **** 	
 383:Src/main.c    **** 	HAL_ADC_Stop(&hadc1);
 384:Src/main.c    **** 	*/
 385:Src/main.c    **** }
 386:Src/main.c    **** 
 387:Src/main.c    **** /********************************************************************************/
 388:Src/main.c    **** //Determines if the throttle percent difference is above 10%
 389:Src/main.c    **** //Returns: 1 if difference > 10%
 390:Src/main.c    **** //		   0 if everything is good 
 391:Src/main.c    **** /********************************************************************************/
 392:Src/main.c    **** char APPS_Diff(){
 393:Src/main.c    **** 
 394:Src/main.c    **** //0.66 3.11
 395:Src/main.c    **** //0.32 2.77
 396:Src/main.c    ****   int t_A = (int)throttle_A;
 397:Src/main.c    ****   int t_B = (int)throttle_B;
 398:Src/main.c    **** 
 399:Src/main.c    ****   if(abs(t_A-t_B) > APPS_difference)
 400:Src/main.c    ****     return 1;
 401:Src/main.c    ****   else
 402:Src/main.c    ****     return 0;
 403:Src/main.c    ****   
 404:Src/main.c    ****   //equalize throttles assuming 1mm diff out of 12.5mm from pots
 405:Src/main.c    ****  /* t_A -= (1/12.5)*max_throttle; 
 406:Src/main.c    **** 
 407:Src/main.c    ****   double numerator = t_A - t_B;
 408:Src/main.c    ****   
 409:Src/main.c    ****   //absolute value
 410:Src/main.c    ****   if(numerator < 0){
 411:Src/main.c    ****     numerator = -1*numerator;
 412:Src/main.c    ****   }
 413:Src/main.c    **** 
 414:Src/main.c    ****   double denominator = (t_A + t_B)/2;
 415:Src/main.c    **** 
 416:Src/main.c    ****   double difference = 100*numerator/denominator;
 417:Src/main.c    **** 
 418:Src/main.c    ****   if(difference >= 10){
 419:Src/main.c    ****     return 1;
 420:Src/main.c    ****   }
 421:Src/main.c    ****   return 0;*/
 422:Src/main.c    **** 
 423:Src/main.c    **** 
 424:Src/main.c    **** }
 425:Src/main.c    **** void sendFaultMsg(){
 426:Src/main.c    ****   TxFault_data[0] = bms;  //Set all the data (faults) to their current values
 427:Src/main.c    ****   TxFault_data[1] = imd;
 428:Src/main.c    ****   TxFault_data[2] = bspd;
 429:Src/main.c    ****   TxFault_data[3] = apps;
 430:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxFaults, TxFault_data, &TxFaultsMailbox);
 431:Src/main.c    **** }
 432:Src/main.c    **** 
 433:Src/main.c    **** void sendCar_state(){
ARM GAS  /tmp/ccQTpTWP.s 			page 9


 434:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxCar_state,TxCar_state_data, &TxCar_stateMailbox);
 435:Src/main.c    **** }
 436:Src/main.c    **** 
 437:Src/main.c    **** void car_state_machine(char STATE)
 438:Src/main.c    **** {
 439:Src/main.c    ****   if(STATE > TxCar_state_data[0])
 440:Src/main.c    ****   {
 441:Src/main.c    ****     TxCar_state_data[0] = STATE;
 442:Src/main.c    ****   }
 443:Src/main.c    **** }
 444:Src/main.c    **** 
 445:Src/main.c    **** void readFaults(){
 446:Src/main.c    ****   if (HAL_GPIO_ReadPin(GPIOD, FAULT_BSPD_STATUS_Pin) == GPIO_PIN_RESET)
 447:Src/main.c    ****     bspd = FAULT_ACTIVE;
 448:Src/main.c    ****   else bspd = FAULT_INACTIVE;
 449:Src/main.c    ****   
 450:Src/main.c    ****   if (HAL_GPIO_ReadPin(GPIOC, FAULT_IMD_STATUS_Pin) == GPIO_PIN_RESET)
 451:Src/main.c    ****     imd = FAULT_ACTIVE;
 452:Src/main.c    ****   else imd = FAULT_INACTIVE;
 453:Src/main.c    ****   
 454:Src/main.c    ****   if (HAL_GPIO_ReadPin(GPIOC, FAULT_BMS_STATUS_Pin) == GPIO_PIN_RESET)
 455:Src/main.c    ****     bms = FAULT_ACTIVE;
 456:Src/main.c    ****   else bms = FAULT_INACTIVE;
 457:Src/main.c    **** 
 458:Src/main.c    ****   if(bms || imd || bspd){
 459:Src/main.c    ****     TxCar_state_data[0] = LV_ON;
 460:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, RTD_EN_Pin | RTDS_EN_Pin, GPIO_PIN_RESET);
 461:Src/main.c    ****   }
 462:Src/main.c    **** 
 463:Src/main.c    **** }
 464:Src/main.c    **** 
 465:Src/main.c    **** /* USER CODE END 0 */
 466:Src/main.c    **** 
 467:Src/main.c    **** 
 468:Src/main.c    **** 
 469:Src/main.c    **** /**
 470:Src/main.c    ****   * @brief System Clock Configuration
 471:Src/main.c    ****   * @retval None
 472:Src/main.c    ****   */
 473:Src/main.c    **** void SystemClock_Config(void)
 474:Src/main.c    **** {
 475:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 476:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 477:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 478:Src/main.c    **** 
 479:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 480:Src/main.c    ****   */
 481:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 482:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 483:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 484:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 485:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 486:Src/main.c    ****   {
 487:Src/main.c    ****     Error_Handler();
 488:Src/main.c    ****   }
 489:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 490:Src/main.c    ****   */
ARM GAS  /tmp/ccQTpTWP.s 			page 10


 491:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 492:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 493:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 494:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 495:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 496:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 497:Src/main.c    **** 
 498:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 499:Src/main.c    ****   {
 500:Src/main.c    ****     Error_Handler();
 501:Src/main.c    ****   }
 502:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 503:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 504:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 505:Src/main.c    ****   {
 506:Src/main.c    ****     Error_Handler();
 507:Src/main.c    ****   }
 508:Src/main.c    **** }
 509:Src/main.c    **** 
 510:Src/main.c    **** /**
 511:Src/main.c    ****   * @brief ADC1 Initialization Function
 512:Src/main.c    ****   * @param None
 513:Src/main.c    ****   * @retval None
 514:Src/main.c    ****   */
 515:Src/main.c    **** static void MX_ADC1_Init(void)
 516:Src/main.c    **** {
 517:Src/main.c    **** 
 518:Src/main.c    ****    /* USER CODE BEGIN ADC1_Init 0 */
 519:Src/main.c    **** 
 520:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 521:Src/main.c    **** 
 522:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 523:Src/main.c    **** 
 524:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 525:Src/main.c    ****   /**Common config 
 526:Src/main.c    ****   */
 527:Src/main.c    ****   hadc1.Instance = ADC1;
 528:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE; //enable 
 529:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE; //enable 
 530:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 531:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 532:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 533:Src/main.c    ****   hadc1.Init.NbrOfConversion = 6;
 534:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 535:Src/main.c    ****   {
 536:Src/main.c    ****     Error_Handler();
 537:Src/main.c    ****   }
 538:Src/main.c    ****   /**Configure Regular Channel 
 539:Src/main.c    ****   */
 540:Src/main.c    ****   //Brake position
 541:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 542:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 543:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 544:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 545:Src/main.c    ****   {
 546:Src/main.c    ****     Error_Handler();
 547:Src/main.c    ****   }
ARM GAS  /tmp/ccQTpTWP.s 			page 11


 548:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 549:Src/main.c    **** 
 550:Src/main.c    ****   //Steering Position 
 551:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 552:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 553:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 554:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 555:Src/main.c    ****     Error_Handler();
 556:Src/main.c    ****   }
 557:Src/main.c    ****   
 558:Src/main.c    ****   //Brake Pressure 1
 559:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_3;
 560:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 561:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 562:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 563:Src/main.c    ****     Error_Handler();
 564:Src/main.c    ****   }
 565:Src/main.c    ****   
 566:Src/main.c    ****   //Brake Pressure 2
 567:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 568:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 569:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 570:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 571:Src/main.c    ****     Error_Handler();
 572:Src/main.c    ****   }
 573:Src/main.c    ****   
 574:Src/main.c    ****   //ADC for throttle_A
 575:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_8;
 576:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 577:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 578:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 579:Src/main.c    ****     Error_Handler();
 580:Src/main.c    ****   }
 581:Src/main.c    ****   
 582:Src/main.c    ****   //ADC for throttle_B
 583:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_9;
 584:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 585:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 586:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 587:Src/main.c    ****     Error_Handler();
 588:Src/main.c    ****   }
 589:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 590:Src/main.c    **** 
 591:Src/main.c    **** }
 592:Src/main.c    **** 
 593:Src/main.c    **** /**
 594:Src/main.c    ****   * @brief CAN Initialization Function
 595:Src/main.c    ****   * @param None
 596:Src/main.c    ****   * @retval None
 597:Src/main.c    ****   */
 598:Src/main.c    **** static void MX_CAN_Init(void)
 599:Src/main.c    **** {
 600:Src/main.c    **** 
 601:Src/main.c    ****  /* USER CODE BEGIN CAN_Init 0 */
 602:Src/main.c    **** 
 603:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 604:Src/main.c    **** 
ARM GAS  /tmp/ccQTpTWP.s 			page 12


 605:Src/main.c    **** 
 606:Src/main.c    ****   hcan.Instance = CAN1;
 607:Src/main.c    ****   hcan.Init.Prescaler = 2;
 608:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 609:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 610:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 611:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 612:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 613:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 614:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 615:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 616:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 617:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 618:Src/main.c    **** 
 619:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 620:Src/main.c    ****   {
 621:Src/main.c    ****     Error_Handler();
 622:Src/main.c    ****   }
 623:Src/main.c    ****   
 624:Src/main.c    ****     /* USER CODE BEGIN CAN_Init 1 */
 625:Src/main.c    ****  // HAL_CAN_Start(&hcan);
 626:Src/main.c    ****   TxFaults.StdId = FAULTS;         // CAN standard ID
 627:Src/main.c    ****   TxFaults.ExtId = 0x01;          // CAN extended ID
 628:Src/main.c    ****   TxFaults.RTR = CAN_RTR_DATA;      // CAN frame type
 629:Src/main.c    ****   TxFaults.IDE = CAN_ID_STD;        // CAN ID type
 630:Src/main.c    ****   TxFaults.DLC = 8;             // CAN frame length in bytes
 631:Src/main.c    ****   TxFaults.TransmitGlobalTime = DISABLE;  // CAN timestamp in TxData[6] and TxData[7]
 632:Src/main.c    **** 
 633:Src/main.c    ****   TxCar_state.StdId = CAR_STATE;         // CAN standard ID
 634:Src/main.c    ****   TxCar_state.ExtId = 0x01;          // CAN extended ID
 635:Src/main.c    ****   TxCar_state.RTR = CAN_RTR_DATA;      // CAN frame type
 636:Src/main.c    ****   TxCar_state.IDE = CAN_ID_STD;        // CAN ID type
 637:Src/main.c    ****   TxCar_state.DLC = 1;             // CAN frame length in bytes
 638:Src/main.c    ****   TxCar_state.TransmitGlobalTime = DISABLE;
 639:Src/main.c    **** 
 640:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 641:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 642:Src/main.c    **** 
 643:Src/main.c    **** }
 644:Src/main.c    **** 
 645:Src/main.c    **** /**
 646:Src/main.c    ****   * @brief SPI1 Initialization Function
 647:Src/main.c    ****   * @param None
 648:Src/main.c    ****   * @retval None
 649:Src/main.c    ****   */
 650:Src/main.c    **** static void MX_SPI1_Init(void)
 651:Src/main.c    **** {
 652:Src/main.c    **** 
 653:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 654:Src/main.c    **** 
 655:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 656:Src/main.c    **** 
 657:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 658:Src/main.c    **** 
 659:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 660:Src/main.c    ****   /* SPI1 parameter configuration*/
 661:Src/main.c    ****   hspi1.Instance = SPI1;
ARM GAS  /tmp/ccQTpTWP.s 			page 13


 662:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 663:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 664:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 665:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 666:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 667:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 668:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 669:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 670:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 671:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 672:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 673:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 674:Src/main.c    ****   {
 675:Src/main.c    ****     Error_Handler();
 676:Src/main.c    ****   }
 677:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 678:Src/main.c    **** 
 679:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 680:Src/main.c    **** 
 681:Src/main.c    **** }
 682:Src/main.c    **** 
 683:Src/main.c    **** /**
 684:Src/main.c    ****   * @brief GPIO Initialization Function
 685:Src/main.c    ****   * @param None
 686:Src/main.c    ****   * @retval None
 687:Src/main.c    ****   */
 688:Src/main.c    **** static void MX_GPIO_Init(void)
 689:Src/main.c    **** {
  25              		.loc 1 689 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38 0004 88B0     		sub	sp, sp, #32
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 690:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 690 0
  42 0006 0024     		movs	r4, #0
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
  47              	.LBB2:
 691:Src/main.c    **** 
 692:Src/main.c    ****   /* GPIO Ports Clock Enable */
 693:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 693 0
  49 0010 374B     		ldr	r3, .L3
ARM GAS  /tmp/ccQTpTWP.s 			page 14


  50 0012 9A69     		ldr	r2, [r3, #24]
  51 0014 42F01002 		orr	r2, r2, #16
  52 0018 9A61     		str	r2, [r3, #24]
  53 001a 9A69     		ldr	r2, [r3, #24]
  54 001c 02F01002 		and	r2, r2, #16
  55 0020 0092     		str	r2, [sp]
  56 0022 009A     		ldr	r2, [sp]
  57              	.LBE2:
  58              	.LBB3:
 694:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  59              		.loc 1 694 0
  60 0024 9A69     		ldr	r2, [r3, #24]
  61 0026 42F02002 		orr	r2, r2, #32
  62 002a 9A61     		str	r2, [r3, #24]
  63 002c 9A69     		ldr	r2, [r3, #24]
  64 002e 02F02002 		and	r2, r2, #32
  65 0032 0192     		str	r2, [sp, #4]
  66 0034 019A     		ldr	r2, [sp, #4]
  67              	.LBE3:
  68              	.LBB4:
 695:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  69              		.loc 1 695 0
  70 0036 9A69     		ldr	r2, [r3, #24]
  71 0038 42F00402 		orr	r2, r2, #4
  72 003c 9A61     		str	r2, [r3, #24]
  73 003e 9A69     		ldr	r2, [r3, #24]
  74 0040 02F00402 		and	r2, r2, #4
  75 0044 0292     		str	r2, [sp, #8]
  76 0046 029A     		ldr	r2, [sp, #8]
  77              	.LBE4:
  78              	.LBB5:
 696:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  79              		.loc 1 696 0
  80 0048 9A69     		ldr	r2, [r3, #24]
  81 004a 42F00802 		orr	r2, r2, #8
  82 004e 9A61     		str	r2, [r3, #24]
  83 0050 9B69     		ldr	r3, [r3, #24]
  84 0052 03F00803 		and	r3, r3, #8
  85 0056 0393     		str	r3, [sp, #12]
  86 0058 039B     		ldr	r3, [sp, #12]
  87              	.LBE5:
 697:Src/main.c    **** 
 698:Src/main.c    ****   /*Configure GPIO pin Output Level */
 699:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin|APPS_EN_Pin|RTD_EN_Pin 
  88              		.loc 1 699 0
  89 005a 264E     		ldr	r6, .L3+4
  90 005c 2246     		mov	r2, r4
  91 005e 42F23811 		movw	r1, #8504
  92 0062 3046     		mov	r0, r6
  93 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  94              	.LVL0:
 700:Src/main.c    ****                           |BTSF_EN_Pin, GPIO_PIN_RESET);
 701:Src/main.c    **** 
 702:Src/main.c    ****   /*Configure GPIO pin Output Level */
 703:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
  95              		.loc 1 703 0
  96 0068 234F     		ldr	r7, .L3+8
ARM GAS  /tmp/ccQTpTWP.s 			page 15


  97 006a 2246     		mov	r2, r4
  98 006c 4FF48061 		mov	r1, #1024
  99 0070 3846     		mov	r0, r7
 100 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL1:
 704:Src/main.c    **** 
 705:Src/main.c    ****   /*Configure GPIO pins : FAULT_IMD_STATUS_Pin FAULT_BMS_STATUS_Pin */
 706:Src/main.c    ****   GPIO_InitStruct.Pin = FAULT_IMD_STATUS_Pin|FAULT_BMS_STATUS_Pin;
 102              		.loc 1 706 0
 103 0076 4FF44043 		mov	r3, #49152
 104 007a 0493     		str	r3, [sp, #16]
 707:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 105              		.loc 1 707 0
 106 007c 0594     		str	r4, [sp, #20]
 708:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 107              		.loc 1 708 0
 108 007e 0694     		str	r4, [sp, #24]
 709:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 109              		.loc 1 709 0
 110 0080 04A9     		add	r1, sp, #16
 111 0082 1E48     		ldr	r0, .L3+12
 112 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 113              	.LVL2:
 710:Src/main.c    **** 
 711:Src/main.c    ****   /*Configure GPIO pin : FAULT_BSPD_STATUS_Pin */
 712:Src/main.c    ****   GPIO_InitStruct.Pin = FAULT_BSPD_STATUS_Pin;
 114              		.loc 1 712 0
 115 0088 0125     		movs	r5, #1
 116 008a 0495     		str	r5, [sp, #16]
 713:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 117              		.loc 1 713 0
 118 008c 0594     		str	r4, [sp, #20]
 714:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 119              		.loc 1 714 0
 120 008e 0694     		str	r4, [sp, #24]
 715:Src/main.c    ****   HAL_GPIO_Init(FAULT_BSPD_STATUS_GPIO_Port, &GPIO_InitStruct);
 121              		.loc 1 715 0
 122 0090 04A9     		add	r1, sp, #16
 123 0092 1B48     		ldr	r0, .L3+16
 124 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 125              	.LVL3:
 716:Src/main.c    **** 
 717:Src/main.c    ****   /*Configure GPIO pins : HV_CONNECTED_Pin ENABLE_IN_Pin PRECHARGE_COMPLETE_Pin */
 718:Src/main.c    ****   GPIO_InitStruct.Pin = HV_CONNECTED_Pin|ENABLE_IN_Pin|PRECHARGE_COMPLETE_Pin;
 126              		.loc 1 718 0
 127 0098 48F24043 		movw	r3, #33856
 128 009c 0493     		str	r3, [sp, #16]
 719:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 129              		.loc 1 719 0
 130 009e 0594     		str	r4, [sp, #20]
 720:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 131              		.loc 1 720 0
 132 00a0 0694     		str	r4, [sp, #24]
 721:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 133              		.loc 1 721 0
 134 00a2 04A9     		add	r1, sp, #16
 135 00a4 3046     		mov	r0, r6
ARM GAS  /tmp/ccQTpTWP.s 			page 16


 136 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 137              	.LVL4:
 722:Src/main.c    **** 
 723:Src/main.c    ****   /*Configure GPIO pins : BRAKE_LIGHT_EN_Pin RTDS_EN_Pin APPS_EN_Pin RTD_EN_Pin 
 724:Src/main.c    ****                            BTSF_EN_Pin */
 725:Src/main.c    ****   GPIO_InitStruct.Pin = BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin|APPS_EN_Pin|RTD_EN_Pin 
 138              		.loc 1 725 0
 139 00aa 42F23813 		movw	r3, #8504
 140 00ae 0493     		str	r3, [sp, #16]
 726:Src/main.c    ****                           |BTSF_EN_Pin;
 727:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 141              		.loc 1 727 0
 142 00b0 0595     		str	r5, [sp, #20]
 728:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 143              		.loc 1 728 0
 144 00b2 0694     		str	r4, [sp, #24]
 729:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 145              		.loc 1 729 0
 146 00b4 4FF00208 		mov	r8, #2
 147 00b8 CDF81C80 		str	r8, [sp, #28]
 730:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 148              		.loc 1 730 0
 149 00bc 04A9     		add	r1, sp, #16
 150 00be 3046     		mov	r0, r6
 151 00c0 FFF7FEFF 		bl	HAL_GPIO_Init
 152              	.LVL5:
 731:Src/main.c    **** 
 732:Src/main.c    ****   /*Configure GPIO pin : PA10 */
 733:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 153              		.loc 1 733 0
 154 00c4 4FF48063 		mov	r3, #1024
 155 00c8 0493     		str	r3, [sp, #16]
 734:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 156              		.loc 1 734 0
 157 00ca 0595     		str	r5, [sp, #20]
 735:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 158              		.loc 1 735 0
 159 00cc 0694     		str	r4, [sp, #24]
 736:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 160              		.loc 1 736 0
 161 00ce CDF81C80 		str	r8, [sp, #28]
 737:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 162              		.loc 1 737 0
 163 00d2 04A9     		add	r1, sp, #16
 164 00d4 3846     		mov	r0, r7
 165 00d6 FFF7FEFF 		bl	HAL_GPIO_Init
 166              	.LVL6:
 167              	.LBB6:
 738:Src/main.c    **** 
 739:Src/main.c    ****   /*Configure peripheral I/O remapping */
 740:Src/main.c    ****   __HAL_AFIO_REMAP_PD01_ENABLE();
 168              		.loc 1 740 0
 169 00da 0A4A     		ldr	r2, .L3+20
 170 00dc 5368     		ldr	r3, [r2, #4]
 171              	.LVL7:
 172 00de 43F0E063 		orr	r3, r3, #117440512
 173              	.LVL8:
ARM GAS  /tmp/ccQTpTWP.s 			page 17


 174 00e2 43F40043 		orr	r3, r3, #32768
 175              	.LVL9:
 176 00e6 5360     		str	r3, [r2, #4]
 177              	.LBE6:
 741:Src/main.c    **** 
 742:Src/main.c    **** }
 178              		.loc 1 742 0
 179 00e8 08B0     		add	sp, sp, #32
 180              	.LCFI2:
 181              		.cfi_def_cfa_offset 24
 182              		@ sp needed
 183 00ea BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 184              	.L4:
 185 00ee 00BF     		.align	2
 186              	.L3:
 187 00f0 00100240 		.word	1073876992
 188 00f4 000C0140 		.word	1073810432
 189 00f8 00080140 		.word	1073809408
 190 00fc 00100140 		.word	1073811456
 191 0100 00140140 		.word	1073812480
 192 0104 00000140 		.word	1073807360
 193              		.cfi_endproc
 194              	.LFE77:
 196              		.section	.text.MX_SPI1_Init,"ax",%progbits
 197              		.align	1
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu softvfp
 203              	MX_SPI1_Init:
 204              	.LFB76:
 651:Src/main.c    **** 
 205              		.loc 1 651 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209 0000 08B5     		push	{r3, lr}
 210              	.LCFI3:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 3, -8
 213              		.cfi_offset 14, -4
 661:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 214              		.loc 1 661 0
 215 0002 0B48     		ldr	r0, .L7
 216 0004 0B4B     		ldr	r3, .L7+4
 217 0006 0360     		str	r3, [r0]
 662:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 218              		.loc 1 662 0
 219 0008 4FF48273 		mov	r3, #260
 220 000c 4360     		str	r3, [r0, #4]
 663:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 221              		.loc 1 663 0
 222 000e 0023     		movs	r3, #0
 223 0010 8360     		str	r3, [r0, #8]
 664:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 224              		.loc 1 664 0
 225 0012 C360     		str	r3, [r0, #12]
ARM GAS  /tmp/ccQTpTWP.s 			page 18


 665:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 226              		.loc 1 665 0
 227 0014 0361     		str	r3, [r0, #16]
 666:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 228              		.loc 1 666 0
 229 0016 4361     		str	r3, [r0, #20]
 667:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 230              		.loc 1 667 0
 231 0018 4FF48022 		mov	r2, #262144
 232 001c 8261     		str	r2, [r0, #24]
 668:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 233              		.loc 1 668 0
 234 001e C361     		str	r3, [r0, #28]
 669:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 235              		.loc 1 669 0
 236 0020 0362     		str	r3, [r0, #32]
 670:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 237              		.loc 1 670 0
 238 0022 4362     		str	r3, [r0, #36]
 671:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 239              		.loc 1 671 0
 240 0024 8362     		str	r3, [r0, #40]
 672:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 241              		.loc 1 672 0
 242 0026 0A23     		movs	r3, #10
 243 0028 C362     		str	r3, [r0, #44]
 673:Src/main.c    ****   {
 244              		.loc 1 673 0
 245 002a FFF7FEFF 		bl	HAL_SPI_Init
 246              	.LVL10:
 247 002e 08BD     		pop	{r3, pc}
 248              	.L8:
 249              		.align	2
 250              	.L7:
 251 0030 00000000 		.word	hspi1
 252 0034 00300140 		.word	1073819648
 253              		.cfi_endproc
 254              	.LFE76:
 256              		.section	.text.MX_ADC1_Init,"ax",%progbits
 257              		.align	1
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 261              		.fpu softvfp
 263              	MX_ADC1_Init:
 264              	.LFB74:
 516:Src/main.c    **** 
 265              		.loc 1 516 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 270              	.LCFI4:
 271              		.cfi_def_cfa_offset 24
 272              		.cfi_offset 4, -24
 273              		.cfi_offset 5, -20
 274              		.cfi_offset 6, -16
ARM GAS  /tmp/ccQTpTWP.s 			page 19


 275              		.cfi_offset 7, -12
 276              		.cfi_offset 8, -8
 277              		.cfi_offset 14, -4
 527:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE; //enable 
 278              		.loc 1 527 0
 279 0004 2A4D     		ldr	r5, .L11
 280 0006 2B4B     		ldr	r3, .L11+4
 281 0008 2B60     		str	r3, [r5]
 528:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE; //enable 
 282              		.loc 1 528 0
 283 000a 0026     		movs	r6, #0
 284 000c AE60     		str	r6, [r5, #8]
 529:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 285              		.loc 1 529 0
 286 000e EE60     		str	r6, [r5, #12]
 530:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 287              		.loc 1 530 0
 288 0010 6E61     		str	r6, [r5, #20]
 531:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 289              		.loc 1 531 0
 290 0012 4FF46023 		mov	r3, #917504
 291 0016 EB61     		str	r3, [r5, #28]
 532:Src/main.c    ****   hadc1.Init.NbrOfConversion = 6;
 292              		.loc 1 532 0
 293 0018 6E60     		str	r6, [r5, #4]
 533:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 294              		.loc 1 533 0
 295 001a 0627     		movs	r7, #6
 296 001c 2F61     		str	r7, [r5, #16]
 534:Src/main.c    ****   {
 297              		.loc 1 534 0
 298 001e 2846     		mov	r0, r5
 299 0020 FFF7FEFF 		bl	HAL_ADC_Init
 300              	.LVL11:
 541:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 301              		.loc 1 541 0
 302 0024 244C     		ldr	r4, .L11+8
 303 0026 2660     		str	r6, [r4]
 542:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 304              		.loc 1 542 0
 305 0028 4FF00108 		mov	r8, #1
 306 002c C4F80480 		str	r8, [r4, #4]
 543:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 307              		.loc 1 543 0
 308 0030 A660     		str	r6, [r4, #8]
 544:Src/main.c    ****   {
 309              		.loc 1 544 0
 310 0032 2146     		mov	r1, r4
 311 0034 2846     		mov	r0, r5
 312 0036 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 313              	.LVL12:
 551:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 314              		.loc 1 551 0
 315 003a C4F80080 		str	r8, [r4]
 552:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 316              		.loc 1 552 0
 317 003e 0226     		movs	r6, #2
ARM GAS  /tmp/ccQTpTWP.s 			page 20


 318 0040 6660     		str	r6, [r4, #4]
 553:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 319              		.loc 1 553 0
 320 0042 2146     		mov	r1, r4
 321 0044 2846     		mov	r0, r5
 322 0046 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 323              	.LVL13:
 554:Src/main.c    ****     Error_Handler();
 324              		.loc 1 554 0
 325 004a 2146     		mov	r1, r4
 326 004c 2846     		mov	r0, r5
 327 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 328              	.LVL14:
 559:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 329              		.loc 1 559 0
 330 0052 0323     		movs	r3, #3
 331 0054 2360     		str	r3, [r4]
 560:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 332              		.loc 1 560 0
 333 0056 6360     		str	r3, [r4, #4]
 561:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 334              		.loc 1 561 0
 335 0058 2146     		mov	r1, r4
 336 005a 2846     		mov	r0, r5
 337 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 338              	.LVL15:
 562:Src/main.c    ****     Error_Handler();
 339              		.loc 1 562 0
 340 0060 2146     		mov	r1, r4
 341 0062 2846     		mov	r0, r5
 342 0064 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 343              	.LVL16:
 567:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 344              		.loc 1 567 0
 345 0068 2660     		str	r6, [r4]
 568:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 346              		.loc 1 568 0
 347 006a 0423     		movs	r3, #4
 348 006c 6360     		str	r3, [r4, #4]
 569:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 349              		.loc 1 569 0
 350 006e 2146     		mov	r1, r4
 351 0070 2846     		mov	r0, r5
 352 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 353              	.LVL17:
 570:Src/main.c    ****     Error_Handler();
 354              		.loc 1 570 0
 355 0076 2146     		mov	r1, r4
 356 0078 2846     		mov	r0, r5
 357 007a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 358              	.LVL18:
 575:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 359              		.loc 1 575 0
 360 007e 0823     		movs	r3, #8
 361 0080 2360     		str	r3, [r4]
 576:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 362              		.loc 1 576 0
ARM GAS  /tmp/ccQTpTWP.s 			page 21


 363 0082 0523     		movs	r3, #5
 364 0084 6360     		str	r3, [r4, #4]
 577:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 365              		.loc 1 577 0
 366 0086 2146     		mov	r1, r4
 367 0088 2846     		mov	r0, r5
 368 008a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 369              	.LVL19:
 578:Src/main.c    ****     Error_Handler();
 370              		.loc 1 578 0
 371 008e 2146     		mov	r1, r4
 372 0090 2846     		mov	r0, r5
 373 0092 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 374              	.LVL20:
 583:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 375              		.loc 1 583 0
 376 0096 0923     		movs	r3, #9
 377 0098 2360     		str	r3, [r4]
 584:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 378              		.loc 1 584 0
 379 009a 6760     		str	r7, [r4, #4]
 585:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 380              		.loc 1 585 0
 381 009c 2146     		mov	r1, r4
 382 009e 2846     		mov	r0, r5
 383 00a0 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 384              	.LVL21:
 586:Src/main.c    ****     Error_Handler();
 385              		.loc 1 586 0
 386 00a4 2146     		mov	r1, r4
 387 00a6 2846     		mov	r0, r5
 388 00a8 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 389              	.LVL22:
 390 00ac BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 391              	.L12:
 392              		.align	2
 393              	.L11:
 394 00b0 00000000 		.word	hadc1
 395 00b4 00240140 		.word	1073816576
 396 00b8 00000000 		.word	.LANCHOR0
 397              		.cfi_endproc
 398              	.LFE74:
 400              		.section	.text.MX_CAN_Init,"ax",%progbits
 401              		.align	1
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 405              		.fpu softvfp
 407              	MX_CAN_Init:
 408              	.LFB75:
 599:Src/main.c    **** 
 409              		.loc 1 599 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413 0000 10B5     		push	{r4, lr}
 414              	.LCFI5:
ARM GAS  /tmp/ccQTpTWP.s 			page 22


 415              		.cfi_def_cfa_offset 8
 416              		.cfi_offset 4, -8
 417              		.cfi_offset 14, -4
 606:Src/main.c    ****   hcan.Init.Prescaler = 2;
 418              		.loc 1 606 0
 419 0002 1448     		ldr	r0, .L15
 420 0004 144B     		ldr	r3, .L15+4
 421 0006 0360     		str	r3, [r0]
 607:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 422              		.loc 1 607 0
 423 0008 0223     		movs	r3, #2
 424 000a 4360     		str	r3, [r0, #4]
 608:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 425              		.loc 1 608 0
 426 000c 0024     		movs	r4, #0
 427 000e 8460     		str	r4, [r0, #8]
 609:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 428              		.loc 1 609 0
 429 0010 C460     		str	r4, [r0, #12]
 610:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 430              		.loc 1 610 0
 431 0012 4FF42023 		mov	r3, #655360
 432 0016 0361     		str	r3, [r0, #16]
 611:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 433              		.loc 1 611 0
 434 0018 4FF44013 		mov	r3, #3145728
 435 001c 4361     		str	r3, [r0, #20]
 612:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 436              		.loc 1 612 0
 437 001e 0476     		strb	r4, [r0, #24]
 613:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 438              		.loc 1 613 0
 439 0020 4476     		strb	r4, [r0, #25]
 614:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 440              		.loc 1 614 0
 441 0022 8476     		strb	r4, [r0, #26]
 615:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 442              		.loc 1 615 0
 443 0024 C476     		strb	r4, [r0, #27]
 616:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 444              		.loc 1 616 0
 445 0026 0477     		strb	r4, [r0, #28]
 617:Src/main.c    **** 
 446              		.loc 1 617 0
 447 0028 4477     		strb	r4, [r0, #29]
 619:Src/main.c    ****   {
 448              		.loc 1 619 0
 449 002a FFF7FEFF 		bl	HAL_CAN_Init
 450              	.LVL23:
 626:Src/main.c    ****   TxFaults.ExtId = 0x01;          // CAN extended ID
 451              		.loc 1 626 0
 452 002e 0B4B     		ldr	r3, .L15+8
 453 0030 D022     		movs	r2, #208
 454 0032 1A60     		str	r2, [r3]
 627:Src/main.c    ****   TxFaults.RTR = CAN_RTR_DATA;      // CAN frame type
 455              		.loc 1 627 0
 456 0034 0122     		movs	r2, #1
ARM GAS  /tmp/ccQTpTWP.s 			page 23


 457 0036 5A60     		str	r2, [r3, #4]
 628:Src/main.c    ****   TxFaults.IDE = CAN_ID_STD;        // CAN ID type
 458              		.loc 1 628 0
 459 0038 DC60     		str	r4, [r3, #12]
 629:Src/main.c    ****   TxFaults.DLC = 8;             // CAN frame length in bytes
 460              		.loc 1 629 0
 461 003a 9C60     		str	r4, [r3, #8]
 630:Src/main.c    ****   TxFaults.TransmitGlobalTime = DISABLE;  // CAN timestamp in TxData[6] and TxData[7]
 462              		.loc 1 630 0
 463 003c 0821     		movs	r1, #8
 464 003e 1961     		str	r1, [r3, #16]
 631:Src/main.c    **** 
 465              		.loc 1 631 0
 466 0040 1C75     		strb	r4, [r3, #20]
 633:Src/main.c    ****   TxCar_state.ExtId = 0x01;          // CAN extended ID
 467              		.loc 1 633 0
 468 0042 074B     		ldr	r3, .L15+12
 469 0044 D121     		movs	r1, #209
 470 0046 1960     		str	r1, [r3]
 634:Src/main.c    ****   TxCar_state.RTR = CAN_RTR_DATA;      // CAN frame type
 471              		.loc 1 634 0
 472 0048 5A60     		str	r2, [r3, #4]
 635:Src/main.c    ****   TxCar_state.IDE = CAN_ID_STD;        // CAN ID type
 473              		.loc 1 635 0
 474 004a DC60     		str	r4, [r3, #12]
 636:Src/main.c    ****   TxCar_state.DLC = 1;             // CAN frame length in bytes
 475              		.loc 1 636 0
 476 004c 9C60     		str	r4, [r3, #8]
 637:Src/main.c    ****   TxCar_state.TransmitGlobalTime = DISABLE;
 477              		.loc 1 637 0
 478 004e 1A61     		str	r2, [r3, #16]
 638:Src/main.c    **** 
 479              		.loc 1 638 0
 480 0050 1C75     		strb	r4, [r3, #20]
 481 0052 10BD     		pop	{r4, pc}
 482              	.L16:
 483              		.align	2
 484              	.L15:
 485 0054 00000000 		.word	hcan
 486 0058 00640040 		.word	1073767424
 487 005c 00000000 		.word	TxFaults
 488 0060 00000000 		.word	TxCar_state
 489              		.cfi_endproc
 490              	.LFE75:
 492              		.section	.text.updateADC,"ax",%progbits
 493              		.align	1
 494              		.global	updateADC
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 498              		.fpu softvfp
 500              	updateADC:
 501              	.LFB67:
 343:Src/main.c    **** 	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 502              		.loc 1 343 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccQTpTWP.s 			page 24


 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506              	.LVL24:
 507 0000 10B5     		push	{r4, lr}
 508              	.LCFI6:
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 4, -8
 511              		.cfi_offset 14, -4
 345:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_0;
 512              		.loc 1 345 0
 513 0002 0346     		mov	r3, r0
 514 0004 10B9     		cbnz	r0, .L18
 346:Src/main.c    ****   if (channel == 1) //steering position 
 515              		.loc 1 346 0
 516 0006 0021     		movs	r1, #0
 517 0008 1A4A     		ldr	r2, .L30
 518 000a 1160     		str	r1, [r2]
 519              	.L18:
 347:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_1;
 520              		.loc 1 347 0
 521 000c 012B     		cmp	r3, #1
 522 000e 1CD0     		beq	.L25
 523              	.L19:
 349:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_2;
 524              		.loc 1 349 0
 525 0010 022B     		cmp	r3, #2
 526 0012 1ED0     		beq	.L26
 527              	.L20:
 351:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_3;
 528              		.loc 1 351 0
 529 0014 032B     		cmp	r3, #3
 530 0016 20D0     		beq	.L27
 531              	.L21:
 353:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 532              		.loc 1 353 0
 533 0018 082B     		cmp	r3, #8
 534 001a 22D0     		beq	.L28
 535              	.L22:
 355:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_9;
 536              		.loc 1 355 0
 537 001c 092B     		cmp	r3, #9
 538 001e 24D0     		beq	.L29
 539              	.L23:
 358:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 540              		.loc 1 358 0
 541 0020 1449     		ldr	r1, .L30
 542 0022 0123     		movs	r3, #1
 543 0024 4B60     		str	r3, [r1, #4]
 359:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 544              		.loc 1 359 0
 545 0026 8B60     		str	r3, [r1, #8]
 360:Src/main.c    **** 
 546              		.loc 1 360 0
 547 0028 134C     		ldr	r4, .L30+4
 548 002a 2046     		mov	r0, r4
 549              	.LVL25:
 550 002c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 551              	.LVL26:
ARM GAS  /tmp/ccQTpTWP.s 			page 25


 362:Src/main.c    ****   HAL_ADC_PollForConversion(&hadc1, 1000);
 552              		.loc 1 362 0
 553 0030 2046     		mov	r0, r4
 554 0032 FFF7FEFF 		bl	HAL_ADC_Start
 555              	.LVL27:
 363:Src/main.c    ****   return HAL_ADC_GetValue(&hadc1);
 556              		.loc 1 363 0
 557 0036 4FF47A71 		mov	r1, #1000
 558 003a 2046     		mov	r0, r4
 559 003c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 560              	.LVL28:
 364:Src/main.c    ****   //HAL_ADC_Stop(&hadc1);
 561              		.loc 1 364 0
 562 0040 2046     		mov	r0, r4
 563 0042 FFF7FEFF 		bl	HAL_ADC_GetValue
 564              	.LVL29:
 385:Src/main.c    **** 
 565              		.loc 1 385 0
 566 0046 80B2     		uxth	r0, r0
 567 0048 10BD     		pop	{r4, pc}
 568              	.LVL30:
 569              	.L25:
 348:Src/main.c    ****   if (channel == 2) //brake pressure 1
 570              		.loc 1 348 0
 571 004a 0121     		movs	r1, #1
 572 004c 094A     		ldr	r2, .L30
 573 004e 1160     		str	r1, [r2]
 574 0050 DEE7     		b	.L19
 575              	.L26:
 350:Src/main.c    ****   if (channel == 3) //brake pressure 2
 576              		.loc 1 350 0
 577 0052 0221     		movs	r1, #2
 578 0054 074A     		ldr	r2, .L30
 579 0056 1160     		str	r1, [r2]
 580 0058 DCE7     		b	.L20
 581              	.L27:
 352:Src/main.c    ****   if (channel == 8) //throttle A
 582              		.loc 1 352 0
 583 005a 0321     		movs	r1, #3
 584 005c 054A     		ldr	r2, .L30
 585 005e 1160     		str	r1, [r2]
 586 0060 DAE7     		b	.L21
 587              	.L28:
 354:Src/main.c    ****   if (channel == 9) //throttle B 
 588              		.loc 1 354 0
 589 0062 0821     		movs	r1, #8
 590 0064 034A     		ldr	r2, .L30
 591 0066 1160     		str	r1, [r2]
 592 0068 D8E7     		b	.L22
 593              	.L29:
 356:Src/main.c    **** 
 594              		.loc 1 356 0
 595 006a 0922     		movs	r2, #9
 596 006c 014B     		ldr	r3, .L30
 597 006e 1A60     		str	r2, [r3]
 598 0070 D6E7     		b	.L23
 599              	.L31:
ARM GAS  /tmp/ccQTpTWP.s 			page 26


 600 0072 00BF     		.align	2
 601              	.L30:
 602 0074 00000000 		.word	.LANCHOR0
 603 0078 00000000 		.word	hadc1
 604              		.cfi_endproc
 605              	.LFE67:
 607              		.section	.text.checkBTSF,"ax",%progbits
 608              		.align	1
 609              		.global	checkBTSF
 610              		.syntax unified
 611              		.thumb
 612              		.thumb_func
 613              		.fpu softvfp
 615              	checkBTSF:
 616              	.LFB66:
 315:Src/main.c    ****   brakePressure_1 = updateADC(2);
 617              		.loc 1 315 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621 0000 08B5     		push	{r3, lr}
 622              	.LCFI7:
 623              		.cfi_def_cfa_offset 8
 624              		.cfi_offset 3, -8
 625              		.cfi_offset 14, -4
 316:Src/main.c    ****   throttle_A = updateADC(8); 
 626              		.loc 1 316 0
 627 0002 0220     		movs	r0, #2
 628 0004 FFF7FEFF 		bl	updateADC
 629              	.LVL31:
 630 0008 104B     		ldr	r3, .L37
 631 000a 1880     		strh	r0, [r3]	@ movhi
 317:Src/main.c    **** 
 632              		.loc 1 317 0
 633 000c 0820     		movs	r0, #8
 634 000e FFF7FEFF 		bl	updateADC
 635              	.LVL32:
 636 0012 0346     		mov	r3, r0
 637 0014 0E4A     		ldr	r2, .L37+4
 638 0016 1080     		strh	r0, [r2]	@ movhi
 320:Src/main.c    ****   {
 639              		.loc 1 320 0
 640 0018 0E4A     		ldr	r2, .L37+8
 641 001a 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 642 001c 28B1     		cbz	r0, .L33
 322:Src/main.c    ****     {
 643              		.loc 1 322 0
 644 001e B3F5127F 		cmp	r3, #584
 645 0022 10D8     		bhi	.L35
 324:Src/main.c    ****       return 0;
 646              		.loc 1 324 0
 647 0024 0020     		movs	r0, #0
 648 0026 1070     		strb	r0, [r2]
 325:Src/main.c    ****     }
 649              		.loc 1 325 0
 650 0028 08BD     		pop	{r3, pc}
 651              	.L33:
ARM GAS  /tmp/ccQTpTWP.s 			page 27


 330:Src/main.c    **** 	     BTSF_ACTIVE = 0xFF;
 652              		.loc 1 330 0
 653 002a 084A     		ldr	r2, .L37
 654 002c 1188     		ldrh	r1, [r2]
 655 002e 40F62E22 		movw	r2, #2606
 656 0032 9142     		cmp	r1, r2
 657 0034 08D9     		bls	.L34
 330:Src/main.c    **** 	     BTSF_ACTIVE = 0xFF;
 658              		.loc 1 330 0 is_stmt 0 discriminator 1
 659 0036 B3F56D7F 		cmp	r3, #948
 660 003a 05D3     		bcc	.L34
 331:Src/main.c    ****        return 1;
 661              		.loc 1 331 0 is_stmt 1
 662 003c FF22     		movs	r2, #255
 663 003e 054B     		ldr	r3, .L37+8
 664 0040 1A70     		strb	r2, [r3]
 332:Src/main.c    ****   }
 665              		.loc 1 332 0
 666 0042 0120     		movs	r0, #1
 667 0044 08BD     		pop	{r3, pc}
 668              	.L35:
 327:Src/main.c    ****   }
 669              		.loc 1 327 0
 670 0046 0120     		movs	r0, #1
 671              	.L34:
 336:Src/main.c    **** 
 672              		.loc 1 336 0
 673 0048 08BD     		pop	{r3, pc}
 674              	.L38:
 675 004a 00BF     		.align	2
 676              	.L37:
 677 004c 00000000 		.word	brakePressure_1
 678 0050 00000000 		.word	throttle_A
 679 0054 00000000 		.word	.LANCHOR1
 680              		.cfi_endproc
 681              	.LFE66:
 683              		.section	.text.APPS_Diff,"ax",%progbits
 684              		.align	1
 685              		.global	APPS_Diff
 686              		.syntax unified
 687              		.thumb
 688              		.thumb_func
 689              		.fpu softvfp
 691              	APPS_Diff:
 692              	.LFB68:
 392:Src/main.c    **** 
 693              		.loc 1 392 0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              		@ link register save eliminated.
 396:Src/main.c    ****   int t_B = (int)throttle_B;
 698              		.loc 1 396 0
 699 0000 074B     		ldr	r3, .L43
 700 0002 1B88     		ldrh	r3, [r3]
 701              	.LVL33:
 397:Src/main.c    **** 
ARM GAS  /tmp/ccQTpTWP.s 			page 28


 702              		.loc 1 397 0
 703 0004 074A     		ldr	r2, .L43+4
 704 0006 1288     		ldrh	r2, [r2]
 705              	.LVL34:
 399:Src/main.c    ****     return 1;
 706              		.loc 1 399 0
 707 0008 9B1A     		subs	r3, r3, r2
 708              	.LVL35:
 709 000a 002B     		cmp	r3, #0
 710 000c B8BF     		it	lt
 711 000e 5B42     		rsblt	r3, r3, #0
 712 0010 B3F5827F 		cmp	r3, #260
 713 0014 01DC     		bgt	.L42
 402:Src/main.c    ****   
 714              		.loc 1 402 0
 715 0016 0020     		movs	r0, #0
 424:Src/main.c    **** void sendFaultMsg(){
 716              		.loc 1 424 0
 717 0018 7047     		bx	lr
 718              	.L42:
 400:Src/main.c    ****   else
 719              		.loc 1 400 0
 720 001a 0120     		movs	r0, #1
 721 001c 7047     		bx	lr
 722              	.L44:
 723 001e 00BF     		.align	2
 724              	.L43:
 725 0020 00000000 		.word	throttle_A
 726 0024 00000000 		.word	throttle_B
 727              		.cfi_endproc
 728              	.LFE68:
 730              		.section	.text.checkAPPS,"ax",%progbits
 731              		.align	1
 732              		.global	checkAPPS
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu softvfp
 738              	checkAPPS:
 739              	.LFB65:
 290:Src/main.c    **** 
 740              		.loc 1 290 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744 0000 10B5     		push	{r4, lr}
 745              	.LCFI8:
 746              		.cfi_def_cfa_offset 8
 747              		.cfi_offset 4, -8
 748              		.cfi_offset 14, -4
 292:Src/main.c    ****   throttle_B = updateADC(9); 
 749              		.loc 1 292 0
 750 0002 0820     		movs	r0, #8
 751 0004 FFF7FEFF 		bl	updateADC
 752              	.LVL36:
 753 0008 104B     		ldr	r3, .L53
 754 000a 1880     		strh	r0, [r3]	@ movhi
ARM GAS  /tmp/ccQTpTWP.s 			page 29


 293:Src/main.c    ****   //0-5000 based ?
 755              		.loc 1 293 0
 756 000c 0920     		movs	r0, #9
 757 000e FFF7FEFF 		bl	updateADC
 758              	.LVL37:
 759 0012 0F4B     		ldr	r3, .L53+4
 760 0014 1880     		strh	r0, [r3]	@ movhi
 297:Src/main.c    ****   while(millisTimer > 0 && APPS_Diff()){
 761              		.loc 1 297 0
 762 0016 4FF47A72 		mov	r2, #1000
 763 001a 0E4B     		ldr	r3, .L53+8
 764 001c 1A60     		str	r2, [r3]
 298:Src/main.c    **** 	throttle_A = updateADC(8);
 765              		.loc 1 298 0
 766 001e 09E0     		b	.L46
 767              	.L48:
 299:Src/main.c    **** 	throttle_B = updateADC(9);
 768              		.loc 1 299 0
 769 0020 0820     		movs	r0, #8
 770 0022 FFF7FEFF 		bl	updateADC
 771              	.LVL38:
 772 0026 094B     		ldr	r3, .L53
 773 0028 1880     		strh	r0, [r3]	@ movhi
 300:Src/main.c    ****   } //stay in this loop while there is a 10% difference in throttles
 774              		.loc 1 300 0
 775 002a 0920     		movs	r0, #9
 776 002c FFF7FEFF 		bl	updateADC
 777              	.LVL39:
 778 0030 074B     		ldr	r3, .L53+4
 779 0032 1880     		strh	r0, [r3]	@ movhi
 780              	.L46:
 298:Src/main.c    **** 	throttle_A = updateADC(8);
 781              		.loc 1 298 0
 782 0034 074B     		ldr	r3, .L53+8
 783 0036 1C68     		ldr	r4, [r3]
 784 0038 1CB1     		cbz	r4, .L47
 298:Src/main.c    **** 	throttle_A = updateADC(8);
 785              		.loc 1 298 0 is_stmt 0 discriminator 1
 786 003a FFF7FEFF 		bl	APPS_Diff
 787              	.LVL40:
 788 003e 0028     		cmp	r0, #0
 789 0040 EED1     		bne	.L48
 790              	.L47:
 304:Src/main.c    ****     return 1; //will set driving = 0;
 791              		.loc 1 304 0 is_stmt 1
 792 0042 0CB1     		cbz	r4, .L52
 307:Src/main.c    **** }
 793              		.loc 1 307 0
 794 0044 0020     		movs	r0, #0
 308:Src/main.c    **** 
 795              		.loc 1 308 0
 796 0046 10BD     		pop	{r4, pc}
 797              	.L52:
 305:Src/main.c    ****   }
 798              		.loc 1 305 0
 799 0048 0120     		movs	r0, #1
 800 004a 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccQTpTWP.s 			page 30


 801              	.L54:
 802              		.align	2
 803              	.L53:
 804 004c 00000000 		.word	throttle_A
 805 0050 00000000 		.word	throttle_B
 806 0054 00000000 		.word	millisTimer
 807              		.cfi_endproc
 808              	.LFE65:
 810              		.section	.text.sendFaultMsg,"ax",%progbits
 811              		.align	1
 812              		.global	sendFaultMsg
 813              		.syntax unified
 814              		.thumb
 815              		.thumb_func
 816              		.fpu softvfp
 818              	sendFaultMsg:
 819              	.LFB69:
 425:Src/main.c    ****   TxFault_data[0] = bms;  //Set all the data (faults) to their current values
 820              		.loc 1 425 0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824 0000 08B5     		push	{r3, lr}
 825              	.LCFI9:
 826              		.cfi_def_cfa_offset 8
 827              		.cfi_offset 3, -8
 828              		.cfi_offset 14, -4
 426:Src/main.c    ****   TxFault_data[1] = imd;
 829              		.loc 1 426 0
 830 0002 094A     		ldr	r2, .L57
 831 0004 094B     		ldr	r3, .L57+4
 832 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 833 0008 1370     		strb	r3, [r2]
 427:Src/main.c    ****   TxFault_data[2] = bspd;
 834              		.loc 1 427 0
 835 000a 094B     		ldr	r3, .L57+8
 836 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 837 000e 5370     		strb	r3, [r2, #1]
 428:Src/main.c    ****   TxFault_data[3] = apps;
 838              		.loc 1 428 0
 839 0010 084B     		ldr	r3, .L57+12
 840 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 841 0014 9370     		strb	r3, [r2, #2]
 429:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxFaults, TxFault_data, &TxFaultsMailbox);
 842              		.loc 1 429 0
 843 0016 084B     		ldr	r3, .L57+16
 844 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 845 001a D370     		strb	r3, [r2, #3]
 430:Src/main.c    **** }
 846              		.loc 1 430 0
 847 001c 074B     		ldr	r3, .L57+20
 848 001e 0849     		ldr	r1, .L57+24
 849 0020 0848     		ldr	r0, .L57+28
 850 0022 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 851              	.LVL41:
 852 0026 08BD     		pop	{r3, pc}
 853              	.L58:
ARM GAS  /tmp/ccQTpTWP.s 			page 31


 854              		.align	2
 855              	.L57:
 856 0028 00000000 		.word	.LANCHOR2
 857 002c 00000000 		.word	bms
 858 0030 00000000 		.word	imd
 859 0034 00000000 		.word	bspd
 860 0038 00000000 		.word	apps
 861 003c 00000000 		.word	TxFaultsMailbox
 862 0040 00000000 		.word	TxFaults
 863 0044 00000000 		.word	hcan
 864              		.cfi_endproc
 865              	.LFE69:
 867              		.section	.text.sendCar_state,"ax",%progbits
 868              		.align	1
 869              		.global	sendCar_state
 870              		.syntax unified
 871              		.thumb
 872              		.thumb_func
 873              		.fpu softvfp
 875              	sendCar_state:
 876              	.LFB70:
 433:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxCar_state,TxCar_state_data, &TxCar_stateMailbox);
 877              		.loc 1 433 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 0
 880              		@ frame_needed = 0, uses_anonymous_args = 0
 881 0000 08B5     		push	{r3, lr}
 882              	.LCFI10:
 883              		.cfi_def_cfa_offset 8
 884              		.cfi_offset 3, -8
 885              		.cfi_offset 14, -4
 434:Src/main.c    **** }
 886              		.loc 1 434 0
 887 0002 034B     		ldr	r3, .L61
 888 0004 034A     		ldr	r2, .L61+4
 889 0006 0449     		ldr	r1, .L61+8
 890 0008 0448     		ldr	r0, .L61+12
 891 000a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 892              	.LVL42:
 893 000e 08BD     		pop	{r3, pc}
 894              	.L62:
 895              		.align	2
 896              	.L61:
 897 0010 00000000 		.word	TxCar_stateMailbox
 898 0014 00000000 		.word	.LANCHOR3
 899 0018 00000000 		.word	TxCar_state
 900 001c 00000000 		.word	hcan
 901              		.cfi_endproc
 902              	.LFE70:
 904              		.section	.text.car_state_machine,"ax",%progbits
 905              		.align	1
 906              		.global	car_state_machine
 907              		.syntax unified
 908              		.thumb
 909              		.thumb_func
 910              		.fpu softvfp
 912              	car_state_machine:
ARM GAS  /tmp/ccQTpTWP.s 			page 32


 913              	.LFB71:
 438:Src/main.c    ****   if(STATE > TxCar_state_data[0])
 914              		.loc 1 438 0
 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 0
 917              		@ frame_needed = 0, uses_anonymous_args = 0
 918              		@ link register save eliminated.
 919              	.LVL43:
 439:Src/main.c    ****   {
 920              		.loc 1 439 0
 921 0000 034B     		ldr	r3, .L65
 922 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 923 0004 8342     		cmp	r3, r0
 924 0006 01D2     		bcs	.L63
 441:Src/main.c    ****   }
 925              		.loc 1 441 0
 926 0008 014B     		ldr	r3, .L65
 927 000a 1870     		strb	r0, [r3]
 928              	.L63:
 929 000c 7047     		bx	lr
 930              	.L66:
 931 000e 00BF     		.align	2
 932              	.L65:
 933 0010 00000000 		.word	.LANCHOR3
 934              		.cfi_endproc
 935              	.LFE71:
 937              		.section	.text.readFaults,"ax",%progbits
 938              		.align	1
 939              		.global	readFaults
 940              		.syntax unified
 941              		.thumb
 942              		.thumb_func
 943              		.fpu softvfp
 945              	readFaults:
 946              	.LFB72:
 445:Src/main.c    ****   if (HAL_GPIO_ReadPin(GPIOD, FAULT_BSPD_STATUS_Pin) == GPIO_PIN_RESET)
 947              		.loc 1 445 0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 0
 950              		@ frame_needed = 0, uses_anonymous_args = 0
 951 0000 08B5     		push	{r3, lr}
 952              	.LCFI11:
 953              		.cfi_def_cfa_offset 8
 954              		.cfi_offset 3, -8
 955              		.cfi_offset 14, -4
 446:Src/main.c    ****     bspd = FAULT_ACTIVE;
 956              		.loc 1 446 0
 957 0002 0121     		movs	r1, #1
 958 0004 1B48     		ldr	r0, .L77
 959 0006 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 960              	.LVL44:
 961 000a 30BB     		cbnz	r0, .L68
 447:Src/main.c    ****   else bspd = FAULT_INACTIVE;
 962              		.loc 1 447 0
 963 000c FF22     		movs	r2, #255
 964 000e 1A4B     		ldr	r3, .L77+4
 965 0010 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccQTpTWP.s 			page 33


 966              	.L69:
 450:Src/main.c    ****     imd = FAULT_ACTIVE;
 967              		.loc 1 450 0
 968 0012 4FF48041 		mov	r1, #16384
 969 0016 1948     		ldr	r0, .L77+8
 970 0018 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 971              	.LVL45:
 972 001c 08BB     		cbnz	r0, .L70
 451:Src/main.c    ****   else imd = FAULT_INACTIVE;
 973              		.loc 1 451 0
 974 001e FF22     		movs	r2, #255
 975 0020 174B     		ldr	r3, .L77+12
 976 0022 1A70     		strb	r2, [r3]
 977              	.L71:
 454:Src/main.c    ****     bms = FAULT_ACTIVE;
 978              		.loc 1 454 0
 979 0024 4FF40041 		mov	r1, #32768
 980 0028 1448     		ldr	r0, .L77+8
 981 002a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 982              	.LVL46:
 983 002e E0B9     		cbnz	r0, .L72
 455:Src/main.c    ****   else bms = FAULT_INACTIVE;
 984              		.loc 1 455 0
 985 0030 FF22     		movs	r2, #255
 986 0032 144B     		ldr	r3, .L77+16
 987 0034 1A70     		strb	r2, [r3]
 988              	.L73:
 458:Src/main.c    ****     TxCar_state_data[0] = LV_ON;
 989              		.loc 1 458 0
 990 0036 134B     		ldr	r3, .L77+16
 991 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 992 003a 2BB9     		cbnz	r3, .L74
 458:Src/main.c    ****     TxCar_state_data[0] = LV_ON;
 993              		.loc 1 458 0 is_stmt 0 discriminator 1
 994 003c 104B     		ldr	r3, .L77+12
 995 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 996 0040 13B9     		cbnz	r3, .L74
 458:Src/main.c    ****     TxCar_state_data[0] = LV_ON;
 997              		.loc 1 458 0 discriminator 2
 998 0042 0D4B     		ldr	r3, .L77+4
 999 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1000 0046 3BB1     		cbz	r3, .L67
 1001              	.L74:
 459:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, RTD_EN_Pin | RTDS_EN_Pin, GPIO_PIN_RESET);
 1002              		.loc 1 459 0 is_stmt 1
 1003 0048 0122     		movs	r2, #1
 1004 004a 0F4B     		ldr	r3, .L77+20
 1005 004c 1A70     		strb	r2, [r3]
 460:Src/main.c    ****   }
 1006              		.loc 1 460 0
 1007 004e 0022     		movs	r2, #0
 1008 0050 2821     		movs	r1, #40
 1009 0052 0E48     		ldr	r0, .L77+24
 1010 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1011              	.LVL47:
 1012              	.L67:
 1013 0058 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccQTpTWP.s 			page 34


 1014              	.L68:
 448:Src/main.c    ****   
 1015              		.loc 1 448 0
 1016 005a 0022     		movs	r2, #0
 1017 005c 064B     		ldr	r3, .L77+4
 1018 005e 1A70     		strb	r2, [r3]
 1019 0060 D7E7     		b	.L69
 1020              	.L70:
 452:Src/main.c    ****   
 1021              		.loc 1 452 0
 1022 0062 0022     		movs	r2, #0
 1023 0064 064B     		ldr	r3, .L77+12
 1024 0066 1A70     		strb	r2, [r3]
 1025 0068 DCE7     		b	.L71
 1026              	.L72:
 456:Src/main.c    **** 
 1027              		.loc 1 456 0
 1028 006a 0022     		movs	r2, #0
 1029 006c 054B     		ldr	r3, .L77+16
 1030 006e 1A70     		strb	r2, [r3]
 1031 0070 E1E7     		b	.L73
 1032              	.L78:
 1033 0072 00BF     		.align	2
 1034              	.L77:
 1035 0074 00140140 		.word	1073812480
 1036 0078 00000000 		.word	bspd
 1037 007c 00100140 		.word	1073811456
 1038 0080 00000000 		.word	imd
 1039 0084 00000000 		.word	bms
 1040 0088 00000000 		.word	.LANCHOR3
 1041 008c 000C0140 		.word	1073810432
 1042              		.cfi_endproc
 1043              	.LFE72:
 1045              		.section	.text.SystemClock_Config,"ax",%progbits
 1046              		.align	1
 1047              		.global	SystemClock_Config
 1048              		.syntax unified
 1049              		.thumb
 1050              		.thumb_func
 1051              		.fpu softvfp
 1053              	SystemClock_Config:
 1054              	.LFB73:
 474:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1055              		.loc 1 474 0
 1056              		.cfi_startproc
 1057              		@ args = 0, pretend = 0, frame = 80
 1058              		@ frame_needed = 0, uses_anonymous_args = 0
 1059 0000 30B5     		push	{r4, r5, lr}
 1060              	.LCFI12:
 1061              		.cfi_def_cfa_offset 12
 1062              		.cfi_offset 4, -12
 1063              		.cfi_offset 5, -8
 1064              		.cfi_offset 14, -4
 1065 0002 95B0     		sub	sp, sp, #84
 1066              	.LCFI13:
 1067              		.cfi_def_cfa_offset 96
 475:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
ARM GAS  /tmp/ccQTpTWP.s 			page 35


 1068              		.loc 1 475 0
 1069 0004 2822     		movs	r2, #40
 1070 0006 0021     		movs	r1, #0
 1071 0008 0DEB0200 		add	r0, sp, r2
 1072 000c FFF7FEFF 		bl	memset
 1073              	.LVL48:
 476:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1074              		.loc 1 476 0
 1075 0010 0024     		movs	r4, #0
 1076 0012 0594     		str	r4, [sp, #20]
 1077 0014 0694     		str	r4, [sp, #24]
 1078 0016 0794     		str	r4, [sp, #28]
 1079 0018 0894     		str	r4, [sp, #32]
 1080 001a 0994     		str	r4, [sp, #36]
 477:Src/main.c    **** 
 1081              		.loc 1 477 0
 1082 001c 0194     		str	r4, [sp, #4]
 1083 001e 0294     		str	r4, [sp, #8]
 1084 0020 0394     		str	r4, [sp, #12]
 1085 0022 0494     		str	r4, [sp, #16]
 481:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1086              		.loc 1 481 0
 1087 0024 0225     		movs	r5, #2
 1088 0026 0A95     		str	r5, [sp, #40]
 482:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1089              		.loc 1 482 0
 1090 0028 0123     		movs	r3, #1
 1091 002a 0E93     		str	r3, [sp, #56]
 483:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1092              		.loc 1 483 0
 1093 002c 1023     		movs	r3, #16
 1094 002e 0F93     		str	r3, [sp, #60]
 485:Src/main.c    ****   {
 1095              		.loc 1 485 0
 1096 0030 0AA8     		add	r0, sp, #40
 1097 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1098              	.LVL49:
 491:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1099              		.loc 1 491 0
 1100 0036 0F23     		movs	r3, #15
 1101 0038 0593     		str	r3, [sp, #20]
 493:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1102              		.loc 1 493 0
 1103 003a 0694     		str	r4, [sp, #24]
 494:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1104              		.loc 1 494 0
 1105 003c 0794     		str	r4, [sp, #28]
 495:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1106              		.loc 1 495 0
 1107 003e 0894     		str	r4, [sp, #32]
 496:Src/main.c    **** 
 1108              		.loc 1 496 0
 1109 0040 0994     		str	r4, [sp, #36]
 498:Src/main.c    ****   {
 1110              		.loc 1 498 0
 1111 0042 2146     		mov	r1, r4
 1112 0044 05A8     		add	r0, sp, #20
ARM GAS  /tmp/ccQTpTWP.s 			page 36


 1113 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1114              	.LVL50:
 502:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 1115              		.loc 1 502 0
 1116 004a 0195     		str	r5, [sp, #4]
 503:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1117              		.loc 1 503 0
 1118 004c 0394     		str	r4, [sp, #12]
 504:Src/main.c    ****   {
 1119              		.loc 1 504 0
 1120 004e 01A8     		add	r0, sp, #4
 1121 0050 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1122              	.LVL51:
 508:Src/main.c    **** 
 1123              		.loc 1 508 0
 1124 0054 15B0     		add	sp, sp, #84
 1125              	.LCFI14:
 1126              		.cfi_def_cfa_offset 12
 1127              		@ sp needed
 1128 0056 30BD     		pop	{r4, r5, pc}
 1129              		.cfi_endproc
 1130              	.LFE73:
 1132              		.section	.text.main,"ax",%progbits
 1133              		.align	1
 1134              		.global	main
 1135              		.syntax unified
 1136              		.thumb
 1137              		.thumb_func
 1138              		.fpu softvfp
 1140              	main:
 1141              	.LFB64:
 182:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1142              		.loc 1 182 0
 1143              		.cfi_startproc
 1144              		@ Volatile: function does not return.
 1145              		@ args = 0, pretend = 0, frame = 0
 1146              		@ frame_needed = 0, uses_anonymous_args = 0
 1147 0000 08B5     		push	{r3, lr}
 1148              	.LCFI15:
 1149              		.cfi_def_cfa_offset 8
 1150              		.cfi_offset 3, -8
 1151              		.cfi_offset 14, -4
 187:Src/main.c    ****   secTimer = 3000000; //3 seconds
 1152              		.loc 1 187 0
 1153 0002 454A     		ldr	r2, .L93
 1154 0004 454B     		ldr	r3, .L93+4
 1155 0006 1A60     		str	r2, [r3]
 188:Src/main.c    ****   sysTimer = 500; //timer to send message every second
 1156              		.loc 1 188 0
 1157 0008 454A     		ldr	r2, .L93+8
 1158 000a 464B     		ldr	r3, .L93+12
 1159 000c 1A60     		str	r2, [r3]
 189:Src/main.c    **** 
 1160              		.loc 1 189 0
 1161 000e 4FF4FA72 		mov	r2, #500
 1162 0012 454B     		ldr	r3, .L93+16
 1163 0014 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccQTpTWP.s 			page 37


 196:Src/main.c    **** 
 1164              		.loc 1 196 0
 1165 0016 FFF7FEFF 		bl	HAL_Init
 1166              	.LVL52:
 208:Src/main.c    **** 
 1167              		.loc 1 208 0
 1168 001a FFF7FEFF 		bl	SystemClock_Config
 1169              	.LVL53:
 215:Src/main.c    ****   MX_SPI1_Init();
 1170              		.loc 1 215 0
 1171 001e FFF7FEFF 		bl	MX_GPIO_Init
 1172              	.LVL54:
 216:Src/main.c    ****   MX_ADC1_Init();
 1173              		.loc 1 216 0
 1174 0022 FFF7FEFF 		bl	MX_SPI1_Init
 1175              	.LVL55:
 217:Src/main.c    ****   MX_CAN_Init();
 1176              		.loc 1 217 0
 1177 0026 FFF7FEFF 		bl	MX_ADC1_Init
 1178              	.LVL56:
 218:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1179              		.loc 1 218 0
 1180 002a FFF7FEFF 		bl	MX_CAN_Init
 1181              	.LVL57:
 220:Src/main.c    **** 
 1182              		.loc 1 220 0
 1183 002e 3F48     		ldr	r0, .L93+20
 1184 0030 FFF7FEFF 		bl	HAL_CAN_Start
 1185              	.LVL58:
 1186 0034 46E0     		b	.L87
 1187              	.L92:
 231:Src/main.c    **** 
 1188              		.loc 1 231 0
 1189 0036 0220     		movs	r0, #2
 1190 0038 FFF7FEFF 		bl	car_state_machine
 1191              	.LVL59:
 234:Src/main.c    **** 		  car_state_machine(ENABLE_FLIPPED);
 1192              		.loc 1 234 0
 1193 003c 4FF40041 		mov	r1, #32768
 1194 0040 3B48     		ldr	r0, .L93+24
 1195 0042 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1196              	.LVL60:
 1197 0046 0028     		cmp	r0, #0
 1198 0048 42D1     		bne	.L82
 235:Src/main.c    ****       //ADC for Brake pressure
 1199              		.loc 1 235 0
 1200 004a 0420     		movs	r0, #4
 1201 004c FFF7FEFF 		bl	car_state_machine
 1202              	.LVL61:
 237:Src/main.c    **** 
 1203              		.loc 1 237 0
 1204 0050 0220     		movs	r0, #2
 1205 0052 FFF7FEFF 		bl	updateADC
 1206              	.LVL62:
 1207 0056 374B     		ldr	r3, .L93+28
 1208 0058 1880     		strh	r0, [r3]	@ movhi
 240:Src/main.c    **** 			//set 3 second timer
ARM GAS  /tmp/ccQTpTWP.s 			page 38


 1209              		.loc 1 240 0
 1210 005a 40F62D23 		movw	r3, #2605
 1211 005e 9842     		cmp	r0, r3
 1212 0060 03D9     		bls	.L83
 242:Src/main.c    ****         secTimer = 3000; //change to 3000 for 3 seconds
 1213              		.loc 1 242 0
 1214 0062 354B     		ldr	r3, .L93+32
 1215 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1216 0066 042B     		cmp	r3, #4
 1217 0068 10D0     		beq	.L90
 1218              	.L83:
 251:Src/main.c    **** 			    HAL_GPIO_WritePin(GPIOB, RTDS_EN_Pin, GPIO_PIN_RESET);
 1219              		.loc 1 251 0
 1220 006a 2E4B     		ldr	r3, .L93+12
 1221 006c 1B68     		ldr	r3, [r3]
 1222 006e 7BBB     		cbnz	r3, .L82
 251:Src/main.c    **** 			    HAL_GPIO_WritePin(GPIOB, RTDS_EN_Pin, GPIO_PIN_RESET);
 1223              		.loc 1 251 0 is_stmt 0 discriminator 1
 1224 0070 314B     		ldr	r3, .L93+32
 1225 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1226 0074 13F0380F 		tst	r3, #56
 1227 0078 2AD0     		beq	.L82
 252:Src/main.c    ****           //SeT pwr
 1228              		.loc 1 252 0 is_stmt 1
 1229 007a 0022     		movs	r2, #0
 1230 007c 0821     		movs	r1, #8
 1231 007e 2C48     		ldr	r0, .L93+24
 1232 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1233              	.LVL63:
 254:Src/main.c    **** 
 1234              		.loc 1 254 0
 1235 0084 1020     		movs	r0, #16
 1236 0086 FFF7FEFF 		bl	car_state_machine
 1237              	.LVL64:
 1238 008a 21E0     		b	.L82
 1239              	.L90:
 243:Src/main.c    ****         car_state_machine(RTDS_SOUND);
 1240              		.loc 1 243 0
 1241 008c 40F6B832 		movw	r2, #3000
 1242 0090 244B     		ldr	r3, .L93+12
 1243 0092 1A60     		str	r2, [r3]
 244:Src/main.c    ****         HAL_GPIO_WritePin(GPIOB, RTD_EN_Pin | RTDS_EN_Pin | BTSF_EN_Pin | APPS_EN_Pin, GPIO_PIN_SET
 1244              		.loc 1 244 0
 1245 0094 0820     		movs	r0, #8
 1246 0096 FFF7FEFF 		bl	car_state_machine
 1247              	.LVL65:
 245:Src/main.c    ****         } 
 1248              		.loc 1 245 0
 1249 009a 0122     		movs	r2, #1
 1250 009c 4FF49C71 		mov	r1, #312
 1251 00a0 2348     		ldr	r0, .L93+24
 1252 00a2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1253              	.LVL66:
 1254 00a6 E0E7     		b	.L83
 1255              	.L85:
 263:Src/main.c    ****       TxCar_state_data[0] = SOFT_FAULT;
 1256              		.loc 1 263 0
ARM GAS  /tmp/ccQTpTWP.s 			page 39


 1257 00a8 0022     		movs	r2, #0
 1258 00aa 4FF48871 		mov	r1, #272
 1259 00ae 2048     		ldr	r0, .L93+24
 1260 00b0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1261              	.LVL67:
 264:Src/main.c    ****     }
 1262              		.loc 1 264 0
 1263 00b4 2022     		movs	r2, #32
 1264 00b6 204B     		ldr	r3, .L93+32
 1265 00b8 1A70     		strb	r2, [r3]
 1266              	.L84:
 271:Src/main.c    **** 	 
 1267              		.loc 1 271 0
 1268 00ba FFF7FEFF 		bl	readFaults
 1269              	.LVL68:
 273:Src/main.c    **** 		sendFaultMsg();
 1270              		.loc 1 273 0
 1271 00be 1A4B     		ldr	r3, .L93+16
 1272 00c0 1B68     		ldr	r3, [r3]
 1273 00c2 FBB1     		cbz	r3, .L91
 1274              	.L87:
 230:Src/main.c    **** 	  car_state_machine(PRECHARGED);
 1275              		.loc 1 230 0
 1276 00c4 4021     		movs	r1, #64
 1277 00c6 1A48     		ldr	r0, .L93+24
 1278 00c8 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1279              	.LVL69:
 1280 00cc 0128     		cmp	r0, #1
 1281 00ce B2D0     		beq	.L92
 1282              	.L82:
 261:Src/main.c    **** 	  if (checkBTSF() || checkAPPS()){
 1283              		.loc 1 261 0
 1284 00d0 194B     		ldr	r3, .L93+32
 1285 00d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1286 00d4 072B     		cmp	r3, #7
 1287 00d6 F0D9     		bls	.L84
 262:Src/main.c    **** 		  HAL_GPIO_WritePin(GPIOB,BTSF_EN_Pin | APPS_EN_Pin,GPIO_PIN_RESET);
 1288              		.loc 1 262 0
 1289 00d8 FFF7FEFF 		bl	checkBTSF
 1290              	.LVL70:
 1291 00dc 0028     		cmp	r0, #0
 1292 00de E3D1     		bne	.L85
 262:Src/main.c    **** 		  HAL_GPIO_WritePin(GPIOB,BTSF_EN_Pin | APPS_EN_Pin,GPIO_PIN_RESET);
 1293              		.loc 1 262 0 is_stmt 0 discriminator 1
 1294 00e0 FFF7FEFF 		bl	checkAPPS
 1295              	.LVL71:
 1296 00e4 0028     		cmp	r0, #0
 1297 00e6 DFD1     		bne	.L85
 266:Src/main.c    ****         TxCar_state_data[0] = PWR_AVAILABLE;
 1298              		.loc 1 266 0 is_stmt 1
 1299 00e8 134B     		ldr	r3, .L93+32
 1300 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1301 00ec 202B     		cmp	r3, #32
 1302 00ee E4D1     		bne	.L84
 267:Src/main.c    ****         HAL_GPIO_WritePin(GPIOB, BTSF_EN_Pin|APPS_EN_Pin ,GPIO_PIN_SET);
 1303              		.loc 1 267 0
 1304 00f0 1022     		movs	r2, #16
ARM GAS  /tmp/ccQTpTWP.s 			page 40


 1305 00f2 114B     		ldr	r3, .L93+32
 1306 00f4 1A70     		strb	r2, [r3]
 268:Src/main.c    ****     }
 1307              		.loc 1 268 0
 1308 00f6 0122     		movs	r2, #1
 1309 00f8 4FF48871 		mov	r1, #272
 1310 00fc 0C48     		ldr	r0, .L93+24
 1311 00fe FFF7FEFF 		bl	HAL_GPIO_WritePin
 1312              	.LVL72:
 1313 0102 DAE7     		b	.L84
 1314              	.L91:
 274:Src/main.c    **** 		sendCar_state();
 1315              		.loc 1 274 0
 1316 0104 FFF7FEFF 		bl	sendFaultMsg
 1317              	.LVL73:
 275:Src/main.c    **** 		sysTimer = 500;
 1318              		.loc 1 275 0
 1319 0108 FFF7FEFF 		bl	sendCar_state
 1320              	.LVL74:
 276:Src/main.c    **** 	}
 1321              		.loc 1 276 0
 1322 010c 4FF4FA72 		mov	r2, #500
 1323 0110 054B     		ldr	r3, .L93+16
 1324 0112 1A60     		str	r2, [r3]
 1325 0114 D6E7     		b	.L87
 1326              	.L94:
 1327 0116 00BF     		.align	2
 1328              	.L93:
 1329 0118 A0860100 		.word	100000
 1330 011c 00000000 		.word	millisTimer
 1331 0120 C0C62D00 		.word	3000000
 1332 0124 00000000 		.word	secTimer
 1333 0128 00000000 		.word	sysTimer
 1334 012c 00000000 		.word	hcan
 1335 0130 000C0140 		.word	1073810432
 1336 0134 00000000 		.word	brakePressure_1
 1337 0138 00000000 		.word	.LANCHOR3
 1338              		.cfi_endproc
 1339              	.LFE64:
 1341              		.section	.text.Error_Handler,"ax",%progbits
 1342              		.align	1
 1343              		.global	Error_Handler
 1344              		.syntax unified
 1345              		.thumb
 1346              		.thumb_func
 1347              		.fpu softvfp
 1349              	Error_Handler:
 1350              	.LFB78:
 743:Src/main.c    **** 
 744:Src/main.c    **** /* USER CODE BEGIN 4 */
 745:Src/main.c    **** 
 746:Src/main.c    **** 
 747:Src/main.c    **** /* USER CODE END 4 */
 748:Src/main.c    **** 
 749:Src/main.c    **** /**
 750:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 751:Src/main.c    ****   * @retval None
ARM GAS  /tmp/ccQTpTWP.s 			page 41


 752:Src/main.c    ****   */
 753:Src/main.c    **** void Error_Handler(void)
 754:Src/main.c    **** {
 1351              		.loc 1 754 0
 1352              		.cfi_startproc
 1353              		@ args = 0, pretend = 0, frame = 0
 1354              		@ frame_needed = 0, uses_anonymous_args = 0
 1355              		@ link register save eliminated.
 1356 0000 7047     		bx	lr
 1357              		.cfi_endproc
 1358              	.LFE78:
 1360              		.global	sConfig
 1361              		.comm	TxFaultsMailbox,4,4
 1362              		.comm	apps,1,1
 1363              		.comm	bspd,1,1
 1364              		.comm	imd,1,1
 1365              		.comm	bms,1,1
 1366              		.global	TxFault_data
 1367              		.comm	TxFaults,24,4
 1368              		.comm	TxCar_stateMailbox,4,4
 1369              		.global	TxCar_state_data
 1370              		.comm	TxCar_state,24,4
 1371              		.global	BTSF_ACTIVE
 1372              		.global	hardFaultFlag
 1373              		.global	Prev_State
 1374              		.global	max_throttle
 1375              		.comm	throttle_B,2,2
 1376              		.comm	throttle_A,2,2
 1377              		.comm	brakePressure_2,2,2
 1378              		.comm	brakePressure_1,2,2
 1379              		.comm	steeringPos,2,2
 1380              		.comm	brakePos,2,2
 1381              		.comm	hspi1,88,4
 1382              		.comm	hcan,40,4
 1383              		.comm	hadc1,48,4
 1384              		.global	APPS_difference
 1385              		.global	RTD_Threshold
 1386              		.global	brakeThreshold
 1387              		.global	ThrottleA_25
 1388              		.global	ThrottleA_5
 1389              		.comm	sysTimer,4,4
 1390              		.comm	secTimer,4,4
 1391              		.comm	millisTimer,4,4
 1392              		.section	.bss.BTSF_ACTIVE,"aw",%nobits
 1393              		.set	.LANCHOR1,. + 0
 1396              	BTSF_ACTIVE:
 1397 0000 00       		.space	1
 1398              		.section	.bss.Prev_State,"aw",%nobits
 1401              	Prev_State:
 1402 0000 00       		.space	1
 1403              		.section	.bss.TxCar_state_data,"aw",%nobits
 1404              		.align	2
 1405              		.set	.LANCHOR3,. + 0
 1408              	TxCar_state_data:
 1409 0000 00       		.space	1
 1410              		.section	.bss.hardFaultFlag,"aw",%nobits
 1411              		.align	2
ARM GAS  /tmp/ccQTpTWP.s 			page 42


 1414              	hardFaultFlag:
 1415 0000 00000000 		.space	4
 1416              		.section	.bss.sConfig,"aw",%nobits
 1417              		.align	2
 1418              		.set	.LANCHOR0,. + 0
 1421              	sConfig:
 1422 0000 00000000 		.space	12
 1422      00000000 
 1422      00000000 
 1423              		.section	.data.TxFault_data,"aw",%progbits
 1424              		.align	2
 1425              		.set	.LANCHOR2,. + 0
 1428              	TxFault_data:
 1429 0000 55       		.byte	85
 1430 0001 55       		.byte	85
 1431 0002 55       		.byte	85
 1432 0003 55       		.byte	85
 1433              		.section	.data.max_throttle,"aw",%progbits
 1434              		.align	1
 1437              	max_throttle:
 1438 0000 0A00     		.short	10
 1439              		.section	.rodata.APPS_difference,"a",%progbits
 1440              		.align	2
 1443              	APPS_difference:
 1444 0000 04010000 		.word	260
 1445              		.section	.rodata.RTD_Threshold,"a",%progbits
 1446              		.align	1
 1449              	RTD_Threshold:
 1450 0000 D007     		.short	2000
 1451              		.section	.rodata.ThrottleA_25,"a",%progbits
 1452              		.align	1
 1455              	ThrottleA_25:
 1456 0000 B303     		.short	947
 1457              		.section	.rodata.ThrottleA_5,"a",%progbits
 1458              		.align	1
 1461              	ThrottleA_5:
 1462 0000 4802     		.short	584
 1463              		.section	.rodata.brakeThreshold,"a",%progbits
 1464              		.align	1
 1467              	brakeThreshold:
 1468 0000 2E0A     		.short	2606
 1469              		.text
 1470              	.Letext0:
 1471              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1472              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1473              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1474              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1475              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1476              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1477              		.file 8 "/usr/include/newlib/sys/lock.h"
 1478              		.file 9 "/usr/include/newlib/sys/_types.h"
 1479              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1480              		.file 11 "/usr/include/newlib/sys/reent.h"
 1481              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1482              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1483              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1484              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
ARM GAS  /tmp/ccQTpTWP.s 			page 43


 1485              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1486              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1487              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1488              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 1489              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1490              		.file 21 "Inc/main.h"
 1491              		.file 22 "/usr/include/newlib/stdlib.h"
ARM GAS  /tmp/ccQTpTWP.s 			page 44


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccQTpTWP.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccQTpTWP.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccQTpTWP.s:187    .text.MX_GPIO_Init:00000000000000f0 $d
     /tmp/ccQTpTWP.s:197    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccQTpTWP.s:203    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccQTpTWP.s:251    .text.MX_SPI1_Init:0000000000000030 $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccQTpTWP.s:257    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccQTpTWP.s:263    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccQTpTWP.s:394    .text.MX_ADC1_Init:00000000000000b0 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccQTpTWP.s:401    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccQTpTWP.s:407    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccQTpTWP.s:485    .text.MX_CAN_Init:0000000000000054 $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 TxFaults
                            *COM*:0000000000000018 TxCar_state
     /tmp/ccQTpTWP.s:493    .text.updateADC:0000000000000000 $t
     /tmp/ccQTpTWP.s:500    .text.updateADC:0000000000000000 updateADC
     /tmp/ccQTpTWP.s:602    .text.updateADC:0000000000000074 $d
     /tmp/ccQTpTWP.s:608    .text.checkBTSF:0000000000000000 $t
     /tmp/ccQTpTWP.s:615    .text.checkBTSF:0000000000000000 checkBTSF
     /tmp/ccQTpTWP.s:677    .text.checkBTSF:000000000000004c $d
                            *COM*:0000000000000002 brakePressure_1
                            *COM*:0000000000000002 throttle_A
     /tmp/ccQTpTWP.s:684    .text.APPS_Diff:0000000000000000 $t
     /tmp/ccQTpTWP.s:691    .text.APPS_Diff:0000000000000000 APPS_Diff
     /tmp/ccQTpTWP.s:725    .text.APPS_Diff:0000000000000020 $d
                            *COM*:0000000000000002 throttle_B
     /tmp/ccQTpTWP.s:731    .text.checkAPPS:0000000000000000 $t
     /tmp/ccQTpTWP.s:738    .text.checkAPPS:0000000000000000 checkAPPS
     /tmp/ccQTpTWP.s:804    .text.checkAPPS:000000000000004c $d
                            *COM*:0000000000000004 millisTimer
     /tmp/ccQTpTWP.s:811    .text.sendFaultMsg:0000000000000000 $t
     /tmp/ccQTpTWP.s:818    .text.sendFaultMsg:0000000000000000 sendFaultMsg
     /tmp/ccQTpTWP.s:856    .text.sendFaultMsg:0000000000000028 $d
                            *COM*:0000000000000001 bms
                            *COM*:0000000000000001 imd
                            *COM*:0000000000000001 bspd
                            *COM*:0000000000000001 apps
                            *COM*:0000000000000004 TxFaultsMailbox
     /tmp/ccQTpTWP.s:868    .text.sendCar_state:0000000000000000 $t
     /tmp/ccQTpTWP.s:875    .text.sendCar_state:0000000000000000 sendCar_state
     /tmp/ccQTpTWP.s:897    .text.sendCar_state:0000000000000010 $d
                            *COM*:0000000000000004 TxCar_stateMailbox
     /tmp/ccQTpTWP.s:905    .text.car_state_machine:0000000000000000 $t
     /tmp/ccQTpTWP.s:912    .text.car_state_machine:0000000000000000 car_state_machine
     /tmp/ccQTpTWP.s:933    .text.car_state_machine:0000000000000010 $d
     /tmp/ccQTpTWP.s:938    .text.readFaults:0000000000000000 $t
     /tmp/ccQTpTWP.s:945    .text.readFaults:0000000000000000 readFaults
     /tmp/ccQTpTWP.s:1035   .text.readFaults:0000000000000074 $d
     /tmp/ccQTpTWP.s:1046   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccQTpTWP.s:1053   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccQTpTWP.s:1133   .text.main:0000000000000000 $t
     /tmp/ccQTpTWP.s:1140   .text.main:0000000000000000 main
ARM GAS  /tmp/ccQTpTWP.s 			page 45


     /tmp/ccQTpTWP.s:1329   .text.main:0000000000000118 $d
                            *COM*:0000000000000004 secTimer
                            *COM*:0000000000000004 sysTimer
     /tmp/ccQTpTWP.s:1342   .text.Error_Handler:0000000000000000 $t
     /tmp/ccQTpTWP.s:1349   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccQTpTWP.s:1421   .bss.sConfig:0000000000000000 sConfig
     /tmp/ccQTpTWP.s:1428   .data.TxFault_data:0000000000000000 TxFault_data
     /tmp/ccQTpTWP.s:1408   .bss.TxCar_state_data:0000000000000000 TxCar_state_data
     /tmp/ccQTpTWP.s:1396   .bss.BTSF_ACTIVE:0000000000000000 BTSF_ACTIVE
     /tmp/ccQTpTWP.s:1414   .bss.hardFaultFlag:0000000000000000 hardFaultFlag
     /tmp/ccQTpTWP.s:1401   .bss.Prev_State:0000000000000000 Prev_State
     /tmp/ccQTpTWP.s:1437   .data.max_throttle:0000000000000000 max_throttle
                            *COM*:0000000000000002 brakePressure_2
                            *COM*:0000000000000002 steeringPos
                            *COM*:0000000000000002 brakePos
     /tmp/ccQTpTWP.s:1443   .rodata.APPS_difference:0000000000000000 APPS_difference
     /tmp/ccQTpTWP.s:1449   .rodata.RTD_Threshold:0000000000000000 RTD_Threshold
     /tmp/ccQTpTWP.s:1467   .rodata.brakeThreshold:0000000000000000 brakeThreshold
     /tmp/ccQTpTWP.s:1455   .rodata.ThrottleA_25:0000000000000000 ThrottleA_25
     /tmp/ccQTpTWP.s:1461   .rodata.ThrottleA_5:0000000000000000 ThrottleA_5
     /tmp/ccQTpTWP.s:1397   .bss.BTSF_ACTIVE:0000000000000000 $d
     /tmp/ccQTpTWP.s:1402   .bss.Prev_State:0000000000000000 $d
     /tmp/ccQTpTWP.s:1404   .bss.TxCar_state_data:0000000000000000 $d
     /tmp/ccQTpTWP.s:1411   .bss.hardFaultFlag:0000000000000000 $d
     /tmp/ccQTpTWP.s:1417   .bss.sConfig:0000000000000000 $d
     /tmp/ccQTpTWP.s:1424   .data.TxFault_data:0000000000000000 $d
     /tmp/ccQTpTWP.s:1434   .data.max_throttle:0000000000000000 $d
     /tmp/ccQTpTWP.s:1440   .rodata.APPS_difference:0000000000000000 $d
     /tmp/ccQTpTWP.s:1446   .rodata.RTD_Threshold:0000000000000000 $d
     /tmp/ccQTpTWP.s:1452   .rodata.ThrottleA_25:0000000000000000 $d
     /tmp/ccQTpTWP.s:1458   .rodata.ThrottleA_5:0000000000000000 $d
     /tmp/ccQTpTWP.s:1464   .rodata.brakeThreshold:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_SPI_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_CAN_AddTxMessage
HAL_GPIO_ReadPin
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_CAN_Start

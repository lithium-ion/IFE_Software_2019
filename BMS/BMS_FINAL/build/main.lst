ARM GAS  /tmp/cc2C1RGN.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB72:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "LTC6811.h"
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/cc2C1RGN.s 			page 2


  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** #define CELLVAL_ID      0x007
  37:Src/main.c    **** #define BMSSTAT_ID      0x008
  38:Src/main.c    **** #define BMSVINF_ID      0x009
  39:Src/main.c    **** #define BMSTINF_ID      0x00A
  40:Src/main.c    **** #define PACKSTAT_ID     0x00B
  41:Src/main.c    **** #define CHARGER_ID      0x1806E5F4
  42:Src/main.c    **** /* USER CODE END PD */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE END PM */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  50:Src/main.c    **** ADC_HandleTypeDef hadc1;
  51:Src/main.c    **** 
  52:Src/main.c    **** CAN_HandleTypeDef hcan;
  53:Src/main.c    **** 
  54:Src/main.c    **** SPI_HandleTypeDef hspi1;
  55:Src/main.c    **** 
  56:Src/main.c    **** TIM_HandleTypeDef htim2;
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE BEGIN PV */
  59:Src/main.c    **** CommandCodeTypedef      CommandCode;
  60:Src/main.c    **** BMSconfigStructTypedef  BMSconfig;
  61:Src/main.c    **** 
  62:Src/main.c    **** CAN_TxHeaderTypeDef     TxHeader;
  63:Src/main.c    **** CAN_RxHeaderTypeDef     RxHeader;
  64:Src/main.c    **** uint8_t                 TxData[8];
  65:Src/main.c    **** uint8_t                 RxData[8];
  66:Src/main.c    **** uint32_t                TxMailbox;
  67:Src/main.c    **** 
  68:Src/main.c    **** CAN_TxHeaderTypeDef     ChargerTxHeader;
  69:Src/main.c    **** uint8_t                 ChargerTxData[8];
  70:Src/main.c    **** 
  71:Src/main.c    **** uint8_t                 CELLVAL_DATA[6];
  72:Src/main.c    **** uint8_t                 BMSSTAT_DATA[6];
  73:Src/main.c    **** 
  74:Src/main.c    **** uint16_t                minimum;
  75:Src/main.c    **** uint32_t                sumOfCells;
  76:Src/main.c    **** uint8_t                 chargeRate = 2;
  77:Src/main.c    **** 
  78:Src/main.c    **** /* USER CODE END PV */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  81:Src/main.c    **** void SystemClock_Config(void);
  82:Src/main.c    **** static void MX_GPIO_Init(void);
  83:Src/main.c    **** static void MX_ADC1_Init(void);
  84:Src/main.c    **** static void MX_CAN_Init(void);
  85:Src/main.c    **** static void MX_SPI1_Init(void);
  86:Src/main.c    **** static void MX_TIM2_Init(void);
  87:Src/main.c    **** /* USER CODE BEGIN PFP */
  88:Src/main.c    **** bool FAULT_check(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6], uint8_t bmsStatus[6]);
  89:Src/main.c    **** void setDischarge(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6], bool cellDischarge[12][8], bo
  90:Src/main.c    **** void checkDischarge(BMSconfigStructTypedef cfg, bool fullDischarge[12][8], uint8_t bmsData[96][6]);
  91:Src/main.c    **** uint16_t balancingThreshold(BMSconfigStructTypedef cfg);
ARM GAS  /tmp/cc2C1RGN.s 			page 3


  92:Src/main.c    **** void setChargerTxData(BMSconfigStructTypedef cfg);
  93:Src/main.c    **** void CELLVAL_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]);
  94:Src/main.c    **** void BMSVINF_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]);
  95:Src/main.c    **** void BMSTINF_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]);
  96:Src/main.c    **** void BMSSTAT_message(BMSconfigStructTypedef cfg, uint8_t bmsStatus[6]);
  97:Src/main.c    **** void PACKSTAT_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]);
  98:Src/main.c    **** /* USER CODE END PFP */
  99:Src/main.c    **** 
 100:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 101:Src/main.c    **** /* USER CODE BEGIN 0 */
 102:Src/main.c    **** 
 103:Src/main.c    **** /* USER CODE END 0 */
 104:Src/main.c    **** 
 105:Src/main.c    **** /**
 106:Src/main.c    ****   * @brief  The application entry point.
 107:Src/main.c    ****   * @retval int
 108:Src/main.c    ****   */
 109:Src/main.c    **** int main(void)
 110:Src/main.c    **** {
 111:Src/main.c    ****   /* USER CODE BEGIN 1 */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* USER CODE END 1 */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 118:Src/main.c    ****   HAL_Init();
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* USER CODE BEGIN Init */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE END Init */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* Configure the system clock */
 125:Src/main.c    ****   SystemClock_Config();
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* USER CODE END SysInit */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* Initialize all configured peripherals */
 132:Src/main.c    ****   MX_GPIO_Init();
 133:Src/main.c    ****   MX_ADC1_Init();
 134:Src/main.c    ****   MX_CAN_Init();
 135:Src/main.c    ****   //MX_SPI1_Init();
 136:Src/main.c    ****   MX_TIM2_Init();
 137:Src/main.c    ****   /* USER CODE BEGIN 2 */
 138:Src/main.c    **** 
 139:Src/main.c    ****   SPI_Init();
 140:Src/main.c    ****   initPECTable();
 141:Src/main.c    ****   loadConfig(&BMSconfig);
 142:Src/main.c    **** 
 143:Src/main.c    ****   uint8_t BMS_DATA[96][6];
 144:Src/main.c    ****   uint8_t BMS_STATUS[6];
 145:Src/main.c    ****   bool discharge[12][8];
 146:Src/main.c    ****   bool full_discharge[12][8];
 147:Src/main.c    **** 
 148:Src/main.c    ****   bool AIR = 0;
ARM GAS  /tmp/cc2C1RGN.s 			page 4


 149:Src/main.c    ****   bool CHARGE_EN = 0;
 150:Src/main.c    ****   bool BMS_FAULT = 0;
 151:Src/main.c    **** 
 152:Src/main.c    ****   /* USER CODE END 2 */
 153:Src/main.c    **** 
 154:Src/main.c    ****   /* Infinite loop */
 155:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 156:Src/main.c    ****   while (1)
 157:Src/main.c    ****   {
 158:Src/main.c    ****     /* USER CODE END WHILE */
 159:Src/main.c    **** 
 160:Src/main.c    ****     /* USER CODE BEGIN 3 */
 161:Src/main.c    **** 
 162:Src/main.c    ****     //reset config registers
 163:Src/main.c    ****     writeConfigAll(BMSconfig);
 164:Src/main.c    **** 
 165:Src/main.c    ****     //wait 100ms
 166:Src/main.c    ****     HAL_Delay(100);
 167:Src/main.c    **** 
 168:Src/main.c    ****     //read all cell voltages, send BMSVINF message
 169:Src/main.c    ****     readAllCellVoltages(BMSconfig, BMS_DATA);
 170:Src/main.c    ****     BMSVINF_message(BMSconfig, BMS_DATA);
 171:Src/main.c    **** 
 172:Src/main.c    ****     //read all cell temps, send BMSTINF message
 173:Src/main.c    ****     readAllCellTemps(BMSconfig, BMS_DATA);
 174:Src/main.c    ****     BMSTINF_message(BMSconfig, BMS_DATA);
 175:Src/main.c    **** 
 176:Src/main.c    ****     //check for faults (cell DC, cell OV, cell UV, cell OT, cell TDC, invalid PEC, no charger comm)
 177:Src/main.c    ****     checkAllCellConnections(BMSconfig, BMS_DATA);
 178:Src/main.c    ****     BMS_FAULT = FAULT_check(BMSconfig, BMS_DATA, BMS_STATUS);
 179:Src/main.c    **** 
 180:Src/main.c    ****     //if AIR and CHARGE_EN are low, pack is charging
 181:Src/main.c    ****     AIR = HAL_GPIO_ReadPin(GPIOB, AIR_Pin);
 182:Src/main.c    ****     CHARGE_EN = HAL_GPIO_ReadPin(GPIOB, CHARGE_EN_Pin);
 183:Src/main.c    **** 
 184:Src/main.c    ****     if ((AIR == 0) && (CHARGE_EN == 0)) {
 185:Src/main.c    **** 
 186:Src/main.c    ****       if (chargeRate != 0)
 187:Src/main.c    ****         setDischarge(BMSconfig, BMS_DATA, discharge, BMS_FAULT, full_discharge);
 188:Src/main.c    ****       
 189:Src/main.c    ****       setChargerTxData(BMSconfig);
 190:Src/main.c    **** 
 191:Src/main.c    ****       if (chargeRate != 0) {
 192:Src/main.c    ****         dischargeCellGroups(BMSconfig, discharge);
 193:Src/main.c    ****         HAL_Delay(BMSconfig.dischargeTime);
 194:Src/main.c    ****       }
 195:Src/main.c    ****       else {
 196:Src/main.c    ****         checkDischarge(BMSconfig, full_discharge, BMS_DATA);
 197:Src/main.c    ****         dischargeCellGroups(BMSconfig, full_discharge);
 198:Src/main.c    ****         HAL_Delay(BMSconfig.dischargeTime);
 199:Src/main.c    ****       }
 200:Src/main.c    ****     }
 201:Src/main.c    **** 
 202:Src/main.c    ****     //send remaining CAN messages
 203:Src/main.c    ****     CELLVAL_message(BMSconfig, BMS_DATA);
 204:Src/main.c    ****     BMSSTAT_message(BMSconfig, BMS_STATUS);
 205:Src/main.c    ****     PACKSTAT_message(BMSconfig, BMS_DATA);
ARM GAS  /tmp/cc2C1RGN.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    ****   }
 208:Src/main.c    ****   /* USER CODE END 3 */
 209:Src/main.c    **** }
 210:Src/main.c    **** 
 211:Src/main.c    **** /**
 212:Src/main.c    ****   * @brief System Clock Configuration
 213:Src/main.c    ****   * @retval None
 214:Src/main.c    ****   */
 215:Src/main.c    **** void SystemClock_Config(void)
 216:Src/main.c    **** {
 217:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 218:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 219:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 220:Src/main.c    **** 
 221:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 222:Src/main.c    ****   */
 223:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 224:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 225:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 226:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 227:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 228:Src/main.c    ****   {
 229:Src/main.c    ****     Error_Handler();
 230:Src/main.c    ****   }
 231:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 232:Src/main.c    ****   */
 233:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 234:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 235:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 236:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 237:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 238:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 239:Src/main.c    **** 
 240:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 241:Src/main.c    ****   {
 242:Src/main.c    ****     Error_Handler();
 243:Src/main.c    ****   }
 244:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 245:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 246:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 247:Src/main.c    ****   {
 248:Src/main.c    ****     Error_Handler();
 249:Src/main.c    ****   }
 250:Src/main.c    **** }
 251:Src/main.c    **** 
 252:Src/main.c    **** /**
 253:Src/main.c    ****   * @brief ADC1 Initialization Function
 254:Src/main.c    ****   * @param None
 255:Src/main.c    ****   * @retval None
 256:Src/main.c    ****   */
 257:Src/main.c    **** static void MX_ADC1_Init(void)
 258:Src/main.c    **** {
 259:Src/main.c    **** 
 260:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 261:Src/main.c    **** 
 262:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
ARM GAS  /tmp/cc2C1RGN.s 			page 6


 263:Src/main.c    **** 
 264:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 265:Src/main.c    **** 
 266:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 267:Src/main.c    **** 
 268:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 269:Src/main.c    ****   /** Common config 
 270:Src/main.c    ****   */
 271:Src/main.c    ****   hadc1.Instance = ADC1;
 272:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 273:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 274:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 275:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 276:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 277:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 278:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 279:Src/main.c    ****   {
 280:Src/main.c    ****     Error_Handler();
 281:Src/main.c    ****   }
 282:Src/main.c    ****   /** Configure Regular Channel 
 283:Src/main.c    ****   */
 284:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_8;
 285:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 286:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 287:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 288:Src/main.c    ****   {
 289:Src/main.c    ****     Error_Handler();
 290:Src/main.c    ****   }
 291:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 292:Src/main.c    **** 
 293:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 294:Src/main.c    **** 
 295:Src/main.c    **** }
 296:Src/main.c    **** 
 297:Src/main.c    **** /**
 298:Src/main.c    ****   * @brief CAN Initialization Function
 299:Src/main.c    ****   * @param None
 300:Src/main.c    ****   * @retval None
 301:Src/main.c    ****   */
 302:Src/main.c    **** static void MX_CAN_Init(void)
 303:Src/main.c    **** {
 304:Src/main.c    **** 
 305:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 306:Src/main.c    **** 
 307:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 308:Src/main.c    **** 
 309:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 310:Src/main.c    ****   CAN_FilterTypeDef     sFilterConfig;
 311:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 312:Src/main.c    ****   hcan.Instance = CAN1;
 313:Src/main.c    ****   hcan.Init.Prescaler = 1; //500kbit/s
 314:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 315:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 316:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 317:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 318:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 319:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
ARM GAS  /tmp/cc2C1RGN.s 			page 7


 320:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 321:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 322:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 323:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 324:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 325:Src/main.c    ****   {
 326:Src/main.c    ****     Error_Handler();
 327:Src/main.c    ****   }
 328:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 */
 329:Src/main.c    ****   TxHeader.StdId = 0x321; 				// CAN standard ID
 330:Src/main.c    **** 	TxHeader.ExtId = 0x01; 					// CAN extended ID
 331:Src/main.c    **** 	TxHeader.RTR = CAN_RTR_DATA; 			// CAN frame type
 332:Src/main.c    **** 	TxHeader.IDE = CAN_ID_STD; 				// CAN ID type
 333:Src/main.c    **** 	TxHeader.DLC = 8; 						// CAN frame length in bytes
 334:Src/main.c    **** 	TxHeader.TransmitGlobalTime = DISABLE;	// CAN timestamp in TxData[6] and TxData[7]
 335:Src/main.c    **** 
 336:Src/main.c    **** 	ChargerTxHeader.ExtId = CHARGER_ID; 					// CAN extended ID
 337:Src/main.c    **** 	ChargerTxHeader.RTR = CAN_RTR_DATA; 			// CAN frame type
 338:Src/main.c    **** 	ChargerTxHeader.IDE = CAN_ID_EXT; 				// CAN ID type
 339:Src/main.c    **** 	ChargerTxHeader.DLC = 8; 						// CAN frame length in bytes
 340:Src/main.c    **** 	ChargerTxHeader.TransmitGlobalTime = DISABLE;	// CAN timestamp in TxData[6] and TxData[7]
 341:Src/main.c    **** 
 342:Src/main.c    **** 	sFilterConfig.FilterBank = 0;							// filter number (0-13)
 343:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode		
 344:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;		
 345:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 346:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 347:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 348:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 349:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 350:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 351:Src/main.c    **** 	
 352:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 353:Src/main.c    **** 
 354:Src/main.c    ****   HAL_CAN_Start(&hcan);
 355:Src/main.c    **** 
 356:Src/main.c    ****   HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 357:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 358:Src/main.c    **** 
 359:Src/main.c    **** }
 360:Src/main.c    **** 
 361:Src/main.c    **** /**
 362:Src/main.c    ****   * @brief SPI1 Initialization Function
 363:Src/main.c    ****   * @param None
 364:Src/main.c    ****   * @retval None
 365:Src/main.c    ****   */
 366:Src/main.c    **** static void MX_SPI1_Init(void)
 367:Src/main.c    **** {
 368:Src/main.c    **** 
 369:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 370:Src/main.c    **** 
 371:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 372:Src/main.c    **** 
 373:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 374:Src/main.c    **** 
 375:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 376:Src/main.c    ****   /* SPI1 parameter configuration*/
ARM GAS  /tmp/cc2C1RGN.s 			page 8


 377:Src/main.c    ****   hspi1.Instance = SPI1;
 378:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 379:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 380:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 381:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 382:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 383:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 384:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 385:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 386:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 387:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 388:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 389:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 390:Src/main.c    ****   {
 391:Src/main.c    ****     Error_Handler();
 392:Src/main.c    ****   }
 393:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 394:Src/main.c    **** 
 395:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 396:Src/main.c    **** 
 397:Src/main.c    **** }
 398:Src/main.c    **** 
 399:Src/main.c    **** /**
 400:Src/main.c    ****   * @brief TIM2 Initialization Function
 401:Src/main.c    ****   * @param None
 402:Src/main.c    ****   * @retval None
 403:Src/main.c    ****   */
 404:Src/main.c    **** static void MX_TIM2_Init(void)
 405:Src/main.c    **** {
 406:Src/main.c    **** 
 407:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 408:Src/main.c    **** 
 409:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 410:Src/main.c    **** 
 411:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 412:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 413:Src/main.c    **** 
 414:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 415:Src/main.c    **** 
 416:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 417:Src/main.c    ****   htim2.Instance = TIM2;
 418:Src/main.c    ****   htim2.Init.Prescaler = 8000;
 419:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 420:Src/main.c    ****   htim2.Init.Period = 65535;
 421:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 422:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 423:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 424:Src/main.c    ****   {
 425:Src/main.c    ****     Error_Handler();
 426:Src/main.c    ****   }
 427:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 428:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 429:Src/main.c    ****   {
 430:Src/main.c    ****     Error_Handler();
 431:Src/main.c    ****   }
 432:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 433:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/cc2C1RGN.s 			page 9


 434:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 435:Src/main.c    ****   {
 436:Src/main.c    ****     Error_Handler();
 437:Src/main.c    ****   }
 438:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 439:Src/main.c    ****   HAL_TIM_Base_Start(&htim2);
 440:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 441:Src/main.c    **** 
 442:Src/main.c    **** }
 443:Src/main.c    **** 
 444:Src/main.c    **** /**
 445:Src/main.c    ****   * @brief GPIO Initialization Function
 446:Src/main.c    ****   * @param None
 447:Src/main.c    ****   * @retval None
 448:Src/main.c    ****   */
 449:Src/main.c    **** static void MX_GPIO_Init(void)
 450:Src/main.c    **** {
  25              		.loc 1 450 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 28
  32              		.cfi_offset 4, -28
  33              		.cfi_offset 5, -24
  34              		.cfi_offset 6, -20
  35              		.cfi_offset 7, -16
  36              		.cfi_offset 8, -12
  37              		.cfi_offset 9, -8
  38              		.cfi_offset 14, -4
  39 0004 89B0     		sub	sp, sp, #36
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 64
 451:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 451 0
  43 0006 0024     		movs	r4, #0
  44 0008 0494     		str	r4, [sp, #16]
  45 000a 0594     		str	r4, [sp, #20]
  46 000c 0694     		str	r4, [sp, #24]
  47 000e 0794     		str	r4, [sp, #28]
  48              	.LBB2:
 452:Src/main.c    **** 
 453:Src/main.c    ****   /* GPIO Ports Clock Enable */
 454:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 454 0
  50 0010 334B     		ldr	r3, .L3
  51 0012 9A69     		ldr	r2, [r3, #24]
  52 0014 42F01002 		orr	r2, r2, #16
  53 0018 9A61     		str	r2, [r3, #24]
  54 001a 9A69     		ldr	r2, [r3, #24]
  55 001c 02F01002 		and	r2, r2, #16
  56 0020 0092     		str	r2, [sp]
  57 0022 009A     		ldr	r2, [sp]
  58              	.LBE2:
  59              	.LBB3:
 455:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
ARM GAS  /tmp/cc2C1RGN.s 			page 10


  60              		.loc 1 455 0
  61 0024 9A69     		ldr	r2, [r3, #24]
  62 0026 42F02002 		orr	r2, r2, #32
  63 002a 9A61     		str	r2, [r3, #24]
  64 002c 9A69     		ldr	r2, [r3, #24]
  65 002e 02F02002 		and	r2, r2, #32
  66 0032 0192     		str	r2, [sp, #4]
  67 0034 019A     		ldr	r2, [sp, #4]
  68              	.LBE3:
  69              	.LBB4:
 456:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  70              		.loc 1 456 0
  71 0036 9A69     		ldr	r2, [r3, #24]
  72 0038 42F00402 		orr	r2, r2, #4
  73 003c 9A61     		str	r2, [r3, #24]
  74 003e 9A69     		ldr	r2, [r3, #24]
  75 0040 02F00402 		and	r2, r2, #4
  76 0044 0292     		str	r2, [sp, #8]
  77 0046 029A     		ldr	r2, [sp, #8]
  78              	.LBE4:
  79              	.LBB5:
 457:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  80              		.loc 1 457 0
  81 0048 9A69     		ldr	r2, [r3, #24]
  82 004a 42F00802 		orr	r2, r2, #8
  83 004e 9A61     		str	r2, [r3, #24]
  84 0050 9B69     		ldr	r3, [r3, #24]
  85 0052 03F00803 		and	r3, r3, #8
  86 0056 0393     		str	r3, [sp, #12]
  87 0058 039B     		ldr	r3, [sp, #12]
  88              	.LBE5:
 458:Src/main.c    **** 
 459:Src/main.c    ****   /*Configure GPIO pin Output Level */
 460:Src/main.c    ****   HAL_GPIO_WritePin(DEBUG_GPIO_Port, DEBUG_Pin, GPIO_PIN_SET);
  89              		.loc 1 460 0
  90 005a DFF88C90 		ldr	r9, .L3+8
  91 005e 0122     		movs	r2, #1
  92 0060 4FF40051 		mov	r1, #8192
  93 0064 4846     		mov	r0, r9
  94 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
  95              	.LVL0:
 461:Src/main.c    **** 
 462:Src/main.c    ****   /*Configure GPIO pin Output Level */
 463:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, BMS_CS_Pin|TRIGGER_Pin, GPIO_PIN_RESET);
  96              		.loc 1 463 0
  97 006a DFF88080 		ldr	r8, .L3+12
  98 006e 2246     		mov	r2, r4
  99 0070 4FF48871 		mov	r1, #272
 100 0074 4046     		mov	r0, r8
 101 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 102              	.LVL1:
 464:Src/main.c    **** 
 465:Src/main.c    ****   /*Configure GPIO pin Output Level */
 466:Src/main.c    ****   HAL_GPIO_WritePin(BMS_FLT_GPIO_Port, BMS_FLT_Pin, GPIO_PIN_RESET);
 103              		.loc 1 466 0
 104 007a 1A4D     		ldr	r5, .L3+4
 105 007c 2246     		mov	r2, r4
ARM GAS  /tmp/cc2C1RGN.s 			page 11


 106 007e 4FF40071 		mov	r1, #512
 107 0082 2846     		mov	r0, r5
 108 0084 FFF7FEFF 		bl	HAL_GPIO_WritePin
 109              	.LVL2:
 467:Src/main.c    **** 
 468:Src/main.c    ****   /*Configure GPIO pin : DEBUG_Pin */
 469:Src/main.c    ****   GPIO_InitStruct.Pin = DEBUG_Pin;
 110              		.loc 1 469 0
 111 0088 4FF40053 		mov	r3, #8192
 112 008c 0493     		str	r3, [sp, #16]
 470:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 113              		.loc 1 470 0
 114 008e 0127     		movs	r7, #1
 115 0090 0597     		str	r7, [sp, #20]
 471:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 116              		.loc 1 471 0
 117 0092 0694     		str	r4, [sp, #24]
 472:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 118              		.loc 1 472 0
 119 0094 0226     		movs	r6, #2
 120 0096 0796     		str	r6, [sp, #28]
 473:Src/main.c    ****   HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 121              		.loc 1 473 0
 122 0098 04A9     		add	r1, sp, #16
 123 009a 4846     		mov	r0, r9
 124 009c FFF7FEFF 		bl	HAL_GPIO_Init
 125              	.LVL3:
 474:Src/main.c    **** 
 475:Src/main.c    ****   /*Configure GPIO pins : BMS_CS_Pin TRIGGER_Pin */
 476:Src/main.c    ****   GPIO_InitStruct.Pin = BMS_CS_Pin|TRIGGER_Pin;
 126              		.loc 1 476 0
 127 00a0 4FF48873 		mov	r3, #272
 128 00a4 0493     		str	r3, [sp, #16]
 477:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 129              		.loc 1 477 0
 130 00a6 0597     		str	r7, [sp, #20]
 478:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 131              		.loc 1 478 0
 132 00a8 0694     		str	r4, [sp, #24]
 479:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 133              		.loc 1 479 0
 134 00aa 0796     		str	r6, [sp, #28]
 480:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 135              		.loc 1 480 0
 136 00ac 04A9     		add	r1, sp, #16
 137 00ae 4046     		mov	r0, r8
 138 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 139              	.LVL4:
 481:Src/main.c    **** 
 482:Src/main.c    ****   /*Configure GPIO pins : CHARGE_EN_Pin AIR_Pin */
 483:Src/main.c    ****   GPIO_InitStruct.Pin = CHARGE_EN_Pin|AIR_Pin;
 140              		.loc 1 483 0
 141 00b4 2823     		movs	r3, #40
 142 00b6 0493     		str	r3, [sp, #16]
 484:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 143              		.loc 1 484 0
 144 00b8 0594     		str	r4, [sp, #20]
ARM GAS  /tmp/cc2C1RGN.s 			page 12


 485:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 485 0
 146 00ba 0694     		str	r4, [sp, #24]
 486:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 147              		.loc 1 486 0
 148 00bc 04A9     		add	r1, sp, #16
 149 00be 2846     		mov	r0, r5
 150 00c0 FFF7FEFF 		bl	HAL_GPIO_Init
 151              	.LVL5:
 487:Src/main.c    **** 
 488:Src/main.c    ****   /*Configure GPIO pin : BMS_FLT_Pin */
 489:Src/main.c    ****   GPIO_InitStruct.Pin = BMS_FLT_Pin;
 152              		.loc 1 489 0
 153 00c4 4FF40073 		mov	r3, #512
 154 00c8 0493     		str	r3, [sp, #16]
 490:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 155              		.loc 1 490 0
 156 00ca 0597     		str	r7, [sp, #20]
 491:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 157              		.loc 1 491 0
 158 00cc 0694     		str	r4, [sp, #24]
 492:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 159              		.loc 1 492 0
 160 00ce 0796     		str	r6, [sp, #28]
 493:Src/main.c    ****   HAL_GPIO_Init(BMS_FLT_GPIO_Port, &GPIO_InitStruct);
 161              		.loc 1 493 0
 162 00d0 04A9     		add	r1, sp, #16
 163 00d2 2846     		mov	r0, r5
 164 00d4 FFF7FEFF 		bl	HAL_GPIO_Init
 165              	.LVL6:
 494:Src/main.c    **** 
 495:Src/main.c    **** }
 166              		.loc 1 495 0
 167 00d8 09B0     		add	sp, sp, #36
 168              	.LCFI2:
 169              		.cfi_def_cfa_offset 28
 170              		@ sp needed
 171 00da BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 172              	.L4:
 173 00de 00BF     		.align	2
 174              	.L3:
 175 00e0 00100240 		.word	1073876992
 176 00e4 000C0140 		.word	1073810432
 177 00e8 00100140 		.word	1073811456
 178 00ec 00080140 		.word	1073809408
 179              		.cfi_endproc
 180              	.LFE72:
 182              		.section	.text.MX_ADC1_Init,"ax",%progbits
 183              		.align	1
 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu softvfp
 189              	MX_ADC1_Init:
 190              	.LFB68:
 258:Src/main.c    **** 
 191              		.loc 1 258 0
ARM GAS  /tmp/cc2C1RGN.s 			page 13


 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 16
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195 0000 70B5     		push	{r4, r5, r6, lr}
 196              	.LCFI3:
 197              		.cfi_def_cfa_offset 16
 198              		.cfi_offset 4, -16
 199              		.cfi_offset 5, -12
 200              		.cfi_offset 6, -8
 201              		.cfi_offset 14, -4
 202 0002 84B0     		sub	sp, sp, #16
 203              	.LCFI4:
 204              		.cfi_def_cfa_offset 32
 264:Src/main.c    **** 
 205              		.loc 1 264 0
 206 0004 0025     		movs	r5, #0
 207 0006 0195     		str	r5, [sp, #4]
 208 0008 0295     		str	r5, [sp, #8]
 209 000a 0395     		str	r5, [sp, #12]
 271:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 210              		.loc 1 271 0
 211 000c 0C4C     		ldr	r4, .L7
 212 000e 0D4B     		ldr	r3, .L7+4
 213 0010 2360     		str	r3, [r4]
 272:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 214              		.loc 1 272 0
 215 0012 A560     		str	r5, [r4, #8]
 273:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 216              		.loc 1 273 0
 217 0014 E560     		str	r5, [r4, #12]
 274:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 218              		.loc 1 274 0
 219 0016 6561     		str	r5, [r4, #20]
 275:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 220              		.loc 1 275 0
 221 0018 4FF46023 		mov	r3, #917504
 222 001c E361     		str	r3, [r4, #28]
 276:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 223              		.loc 1 276 0
 224 001e 6560     		str	r5, [r4, #4]
 277:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 225              		.loc 1 277 0
 226 0020 0126     		movs	r6, #1
 227 0022 2661     		str	r6, [r4, #16]
 278:Src/main.c    ****   {
 228              		.loc 1 278 0
 229 0024 2046     		mov	r0, r4
 230 0026 FFF7FEFF 		bl	HAL_ADC_Init
 231              	.LVL7:
 284:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 232              		.loc 1 284 0
 233 002a 0823     		movs	r3, #8
 234 002c 0193     		str	r3, [sp, #4]
 285:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 235              		.loc 1 285 0
 236 002e 0296     		str	r6, [sp, #8]
 286:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/cc2C1RGN.s 			page 14


 237              		.loc 1 286 0
 238 0030 0395     		str	r5, [sp, #12]
 287:Src/main.c    ****   {
 239              		.loc 1 287 0
 240 0032 01A9     		add	r1, sp, #4
 241 0034 2046     		mov	r0, r4
 242 0036 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 243              	.LVL8:
 295:Src/main.c    **** 
 244              		.loc 1 295 0
 245 003a 04B0     		add	sp, sp, #16
 246              	.LCFI5:
 247              		.cfi_def_cfa_offset 16
 248              		@ sp needed
 249 003c 70BD     		pop	{r4, r5, r6, pc}
 250              	.L8:
 251 003e 00BF     		.align	2
 252              	.L7:
 253 0040 00000000 		.word	hadc1
 254 0044 00240140 		.word	1073816576
 255              		.cfi_endproc
 256              	.LFE68:
 258              		.section	.text.MX_CAN_Init,"ax",%progbits
 259              		.align	1
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 263              		.fpu softvfp
 265              	MX_CAN_Init:
 266              	.LFB69:
 303:Src/main.c    **** 
 267              		.loc 1 303 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 40
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271 0000 70B5     		push	{r4, r5, r6, lr}
 272              	.LCFI6:
 273              		.cfi_def_cfa_offset 16
 274              		.cfi_offset 4, -16
 275              		.cfi_offset 5, -12
 276              		.cfi_offset 6, -8
 277              		.cfi_offset 14, -4
 278 0002 8AB0     		sub	sp, sp, #40
 279              	.LCFI7:
 280              		.cfi_def_cfa_offset 56
 312:Src/main.c    ****   hcan.Init.Prescaler = 1; //500kbit/s
 281              		.loc 1 312 0
 282 0004 204D     		ldr	r5, .L11
 283 0006 214B     		ldr	r3, .L11+4
 284 0008 2B60     		str	r3, [r5]
 313:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 285              		.loc 1 313 0
 286 000a 0126     		movs	r6, #1
 287 000c 6E60     		str	r6, [r5, #4]
 314:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 288              		.loc 1 314 0
 289 000e 0024     		movs	r4, #0
ARM GAS  /tmp/cc2C1RGN.s 			page 15


 290 0010 AC60     		str	r4, [r5, #8]
 315:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 291              		.loc 1 315 0
 292 0012 4FF08073 		mov	r3, #16777216
 293 0016 EB60     		str	r3, [r5, #12]
 316:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 294              		.loc 1 316 0
 295 0018 4FF44023 		mov	r3, #786432
 296 001c 2B61     		str	r3, [r5, #16]
 317:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 297              		.loc 1 317 0
 298 001e 4FF48013 		mov	r3, #1048576
 299 0022 6B61     		str	r3, [r5, #20]
 318:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 300              		.loc 1 318 0
 301 0024 2C76     		strb	r4, [r5, #24]
 319:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 302              		.loc 1 319 0
 303 0026 6C76     		strb	r4, [r5, #25]
 320:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 304              		.loc 1 320 0
 305 0028 AC76     		strb	r4, [r5, #26]
 321:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 306              		.loc 1 321 0
 307 002a EC76     		strb	r4, [r5, #27]
 322:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 308              		.loc 1 322 0
 309 002c 2C77     		strb	r4, [r5, #28]
 323:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 310              		.loc 1 323 0
 311 002e 6C77     		strb	r4, [r5, #29]
 324:Src/main.c    ****   {
 312              		.loc 1 324 0
 313 0030 2846     		mov	r0, r5
 314 0032 FFF7FEFF 		bl	HAL_CAN_Init
 315              	.LVL9:
 329:Src/main.c    **** 	TxHeader.ExtId = 0x01; 					// CAN extended ID
 316              		.loc 1 329 0
 317 0036 164B     		ldr	r3, .L11+8
 318 0038 40F22132 		movw	r2, #801
 319 003c 1A60     		str	r2, [r3]
 330:Src/main.c    **** 	TxHeader.RTR = CAN_RTR_DATA; 			// CAN frame type
 320              		.loc 1 330 0
 321 003e 5E60     		str	r6, [r3, #4]
 331:Src/main.c    **** 	TxHeader.IDE = CAN_ID_STD; 				// CAN ID type
 322              		.loc 1 331 0
 323 0040 DC60     		str	r4, [r3, #12]
 332:Src/main.c    **** 	TxHeader.DLC = 8; 						// CAN frame length in bytes
 324              		.loc 1 332 0
 325 0042 9C60     		str	r4, [r3, #8]
 333:Src/main.c    **** 	TxHeader.TransmitGlobalTime = DISABLE;	// CAN timestamp in TxData[6] and TxData[7]
 326              		.loc 1 333 0
 327 0044 0822     		movs	r2, #8
 328 0046 1A61     		str	r2, [r3, #16]
 334:Src/main.c    **** 
 329              		.loc 1 334 0
 330 0048 1C75     		strb	r4, [r3, #20]
ARM GAS  /tmp/cc2C1RGN.s 			page 16


 336:Src/main.c    **** 	ChargerTxHeader.RTR = CAN_RTR_DATA; 			// CAN frame type
 331              		.loc 1 336 0
 332 004a 124B     		ldr	r3, .L11+12
 333 004c 1249     		ldr	r1, .L11+16
 334 004e 5960     		str	r1, [r3, #4]
 337:Src/main.c    **** 	ChargerTxHeader.IDE = CAN_ID_EXT; 				// CAN ID type
 335              		.loc 1 337 0
 336 0050 DC60     		str	r4, [r3, #12]
 338:Src/main.c    **** 	ChargerTxHeader.DLC = 8; 						// CAN frame length in bytes
 337              		.loc 1 338 0
 338 0052 0421     		movs	r1, #4
 339 0054 9960     		str	r1, [r3, #8]
 339:Src/main.c    **** 	ChargerTxHeader.TransmitGlobalTime = DISABLE;	// CAN timestamp in TxData[6] and TxData[7]
 340              		.loc 1 339 0
 341 0056 1A61     		str	r2, [r3, #16]
 340:Src/main.c    **** 
 342              		.loc 1 340 0
 343 0058 1C75     		strb	r4, [r3, #20]
 342:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode		
 344              		.loc 1 342 0
 345 005a 0594     		str	r4, [sp, #20]
 343:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;		
 346              		.loc 1 343 0
 347 005c 0694     		str	r4, [sp, #24]
 344:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 348              		.loc 1 344 0
 349 005e 0796     		str	r6, [sp, #28]
 345:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 350              		.loc 1 345 0
 351 0060 0094     		str	r4, [sp]
 346:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 352              		.loc 1 346 0
 353 0062 0194     		str	r4, [sp, #4]
 347:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 354              		.loc 1 347 0
 355 0064 0294     		str	r4, [sp, #8]
 348:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 356              		.loc 1 348 0
 357 0066 0394     		str	r4, [sp, #12]
 349:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 358              		.loc 1 349 0
 359 0068 0494     		str	r4, [sp, #16]
 350:Src/main.c    **** 	
 360              		.loc 1 350 0
 361 006a 0896     		str	r6, [sp, #32]
 352:Src/main.c    **** 
 362              		.loc 1 352 0
 363 006c 6946     		mov	r1, sp
 364 006e 2846     		mov	r0, r5
 365 0070 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 366              	.LVL10:
 354:Src/main.c    **** 
 367              		.loc 1 354 0
 368 0074 2846     		mov	r0, r5
 369 0076 FFF7FEFF 		bl	HAL_CAN_Start
 370              	.LVL11:
 356:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
ARM GAS  /tmp/cc2C1RGN.s 			page 17


 371              		.loc 1 356 0
 372 007a 0221     		movs	r1, #2
 373 007c 2846     		mov	r0, r5
 374 007e FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 375              	.LVL12:
 359:Src/main.c    **** 
 376              		.loc 1 359 0
 377 0082 0AB0     		add	sp, sp, #40
 378              	.LCFI8:
 379              		.cfi_def_cfa_offset 16
 380              		@ sp needed
 381 0084 70BD     		pop	{r4, r5, r6, pc}
 382              	.L12:
 383 0086 00BF     		.align	2
 384              	.L11:
 385 0088 00000000 		.word	hcan
 386 008c 00640040 		.word	1073767424
 387 0090 00000000 		.word	TxHeader
 388 0094 00000000 		.word	ChargerTxHeader
 389 0098 F4E50618 		.word	403105268
 390              		.cfi_endproc
 391              	.LFE69:
 393              		.section	.text.MX_TIM2_Init,"ax",%progbits
 394              		.align	1
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 398              		.fpu softvfp
 400              	MX_TIM2_Init:
 401              	.LFB71:
 405:Src/main.c    **** 
 402              		.loc 1 405 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 24
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406 0000 30B5     		push	{r4, r5, lr}
 407              	.LCFI9:
 408              		.cfi_def_cfa_offset 12
 409              		.cfi_offset 4, -12
 410              		.cfi_offset 5, -8
 411              		.cfi_offset 14, -4
 412 0002 87B0     		sub	sp, sp, #28
 413              	.LCFI10:
 414              		.cfi_def_cfa_offset 40
 411:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 415              		.loc 1 411 0
 416 0004 0024     		movs	r4, #0
 417 0006 0294     		str	r4, [sp, #8]
 418 0008 0394     		str	r4, [sp, #12]
 419 000a 0494     		str	r4, [sp, #16]
 420 000c 0594     		str	r4, [sp, #20]
 412:Src/main.c    **** 
 421              		.loc 1 412 0
 422 000e 0094     		str	r4, [sp]
 423 0010 0194     		str	r4, [sp, #4]
 417:Src/main.c    ****   htim2.Init.Prescaler = 8000;
 424              		.loc 1 417 0
ARM GAS  /tmp/cc2C1RGN.s 			page 18


 425 0012 114D     		ldr	r5, .L15
 426 0014 4FF08043 		mov	r3, #1073741824
 427 0018 2B60     		str	r3, [r5]
 418:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 428              		.loc 1 418 0
 429 001a 4FF4FA53 		mov	r3, #8000
 430 001e 6B60     		str	r3, [r5, #4]
 419:Src/main.c    ****   htim2.Init.Period = 65535;
 431              		.loc 1 419 0
 432 0020 AC60     		str	r4, [r5, #8]
 420:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 433              		.loc 1 420 0
 434 0022 4FF6FF73 		movw	r3, #65535
 435 0026 EB60     		str	r3, [r5, #12]
 421:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 436              		.loc 1 421 0
 437 0028 2C61     		str	r4, [r5, #16]
 422:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 438              		.loc 1 422 0
 439 002a AC61     		str	r4, [r5, #24]
 423:Src/main.c    ****   {
 440              		.loc 1 423 0
 441 002c 2846     		mov	r0, r5
 442 002e FFF7FEFF 		bl	HAL_TIM_Base_Init
 443              	.LVL13:
 427:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 444              		.loc 1 427 0
 445 0032 4FF48053 		mov	r3, #4096
 446 0036 0293     		str	r3, [sp, #8]
 428:Src/main.c    ****   {
 447              		.loc 1 428 0
 448 0038 02A9     		add	r1, sp, #8
 449 003a 2846     		mov	r0, r5
 450 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 451              	.LVL14:
 432:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 452              		.loc 1 432 0
 453 0040 0094     		str	r4, [sp]
 433:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 454              		.loc 1 433 0
 455 0042 0194     		str	r4, [sp, #4]
 434:Src/main.c    ****   {
 456              		.loc 1 434 0
 457 0044 6946     		mov	r1, sp
 458 0046 2846     		mov	r0, r5
 459 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 460              	.LVL15:
 439:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 461              		.loc 1 439 0
 462 004c 2846     		mov	r0, r5
 463 004e FFF7FEFF 		bl	HAL_TIM_Base_Start
 464              	.LVL16:
 442:Src/main.c    **** 
 465              		.loc 1 442 0
 466 0052 07B0     		add	sp, sp, #28
 467              	.LCFI11:
 468              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cc2C1RGN.s 			page 19


 469              		@ sp needed
 470 0054 30BD     		pop	{r4, r5, pc}
 471              	.L16:
 472 0056 00BF     		.align	2
 473              	.L15:
 474 0058 00000000 		.word	htim2
 475              		.cfi_endproc
 476              	.LFE71:
 478              		.section	.text.SystemClock_Config,"ax",%progbits
 479              		.align	1
 480              		.global	SystemClock_Config
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu softvfp
 486              	SystemClock_Config:
 487              	.LFB67:
 216:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 488              		.loc 1 216 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 80
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492 0000 30B5     		push	{r4, r5, lr}
 493              	.LCFI12:
 494              		.cfi_def_cfa_offset 12
 495              		.cfi_offset 4, -12
 496              		.cfi_offset 5, -8
 497              		.cfi_offset 14, -4
 498 0002 95B0     		sub	sp, sp, #84
 499              	.LCFI13:
 500              		.cfi_def_cfa_offset 96
 217:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 501              		.loc 1 217 0
 502 0004 2422     		movs	r2, #36
 503 0006 0021     		movs	r1, #0
 504 0008 0BA8     		add	r0, sp, #44
 505 000a FFF7FEFF 		bl	memset
 506              	.LVL17:
 218:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 507              		.loc 1 218 0
 508 000e 0024     		movs	r4, #0
 509 0010 0594     		str	r4, [sp, #20]
 510 0012 0694     		str	r4, [sp, #24]
 511 0014 0794     		str	r4, [sp, #28]
 512 0016 0894     		str	r4, [sp, #32]
 513 0018 0994     		str	r4, [sp, #36]
 219:Src/main.c    **** 
 514              		.loc 1 219 0
 515 001a 0194     		str	r4, [sp, #4]
 516 001c 0294     		str	r4, [sp, #8]
 517 001e 0394     		str	r4, [sp, #12]
 518 0020 0494     		str	r4, [sp, #16]
 223:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 519              		.loc 1 223 0
 520 0022 0225     		movs	r5, #2
 521 0024 0A95     		str	r5, [sp, #40]
 224:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
ARM GAS  /tmp/cc2C1RGN.s 			page 20


 522              		.loc 1 224 0
 523 0026 0123     		movs	r3, #1
 524 0028 0E93     		str	r3, [sp, #56]
 225:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 525              		.loc 1 225 0
 526 002a 1023     		movs	r3, #16
 527 002c 0F93     		str	r3, [sp, #60]
 227:Src/main.c    ****   {
 528              		.loc 1 227 0
 529 002e 0AA8     		add	r0, sp, #40
 530 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 531              	.LVL18:
 233:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 532              		.loc 1 233 0
 533 0034 0F23     		movs	r3, #15
 534 0036 0593     		str	r3, [sp, #20]
 235:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 535              		.loc 1 235 0
 536 0038 0694     		str	r4, [sp, #24]
 236:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 537              		.loc 1 236 0
 538 003a 0794     		str	r4, [sp, #28]
 237:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 539              		.loc 1 237 0
 540 003c 0894     		str	r4, [sp, #32]
 238:Src/main.c    **** 
 541              		.loc 1 238 0
 542 003e 0994     		str	r4, [sp, #36]
 240:Src/main.c    ****   {
 543              		.loc 1 240 0
 544 0040 2146     		mov	r1, r4
 545 0042 05A8     		add	r0, sp, #20
 546 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 547              	.LVL19:
 244:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 548              		.loc 1 244 0
 549 0048 0195     		str	r5, [sp, #4]
 245:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 550              		.loc 1 245 0
 551 004a 0394     		str	r4, [sp, #12]
 246:Src/main.c    ****   {
 552              		.loc 1 246 0
 553 004c 01A8     		add	r0, sp, #4
 554 004e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 555              	.LVL20:
 250:Src/main.c    **** 
 556              		.loc 1 250 0
 557 0052 15B0     		add	sp, sp, #84
 558              	.LCFI14:
 559              		.cfi_def_cfa_offset 12
 560              		@ sp needed
 561 0054 30BD     		pop	{r4, r5, pc}
 562              		.cfi_endproc
 563              	.LFE67:
 565              		.section	.text.FAULT_check,"ax",%progbits
 566              		.align	1
 567              		.global	FAULT_check
ARM GAS  /tmp/cc2C1RGN.s 			page 21


 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 571              		.fpu softvfp
 573              	FAULT_check:
 574              	.LFB73:
 496:Src/main.c    **** 
 497:Src/main.c    **** /* USER CODE BEGIN 4 */
 498:Src/main.c    **** 
 499:Src/main.c    **** /*void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
 500:Src/main.c    **** {
 501:Src/main.c    ****   HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 502:Src/main.c    **** 
 503:Src/main.c    ****   uint16_t ID = RxHeader.StdId;
 504:Src/main.c    ****   uint32_t ExtID = RxHeader.ExtId;
 505:Src/main.c    **** 
 506:Src/main.c    ****   //TESTING
 507:Src/main.c    ****   if (ID == 0x123) {
 508:Src/main.c    **** 
 509:Src/main.c    ****     //HAL_GPIO_TogglePin(GPIOC, DEBUG_Pin);
 510:Src/main.c    ****     voltageState = RxData[0];
 511:Src/main.c    ****   }
 512:Src/main.c    ****   //TESTING
 513:Src/main.c    **** 
 514:Src/main.c    ****   if (ExtID == CHARGER_ID) {
 515:Src/main.c    ****     TIM2->CNT = 0; // reset timer
 516:Src/main.c    ****     HAL_TIM_Base_Start(&htim2);
 517:Src/main.c    ****     RxHeader.ExtId = 0;
 518:Src/main.c    ****     //HAL_GPIO_TogglePin(GPIOC, DEBUG_Pin);
 519:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, DEBUG_Pin, GPIO_PIN_SET);
 520:Src/main.c    ****   }
 521:Src/main.c    **** }*/
 522:Src/main.c    **** 
 523:Src/main.c    **** bool FAULT_check(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6], uint8_t bmsStatus[6]) {
 575              		.loc 1 523 0
 576              		.cfi_startproc
 577              		@ args = 104, pretend = 16, frame = 0
 578              		@ frame_needed = 1, uses_anonymous_args = 0
 579              	.LVL21:
 580 0000 84B0     		sub	sp, sp, #16
 581              	.LCFI15:
 582              		.cfi_def_cfa_offset 16
 583 0002 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 584              	.LCFI16:
 585              		.cfi_def_cfa_offset 48
 586              		.cfi_offset 3, -48
 587              		.cfi_offset 4, -44
 588              		.cfi_offset 5, -40
 589              		.cfi_offset 6, -36
 590              		.cfi_offset 7, -32
 591              		.cfi_offset 8, -28
 592              		.cfi_offset 9, -24
 593              		.cfi_offset 14, -20
 594 0006 00AF     		add	r7, sp, #0
 595              	.LCFI17:
 596              		.cfi_def_cfa_register 7
 597 0008 07F12004 		add	r4, r7, #32
ARM GAS  /tmp/cc2C1RGN.s 			page 22


 598 000c 84E80F00 		stm	r4, {r0, r1, r2, r3}
 599 0010 D7F88060 		ldr	r6, [r7, #128]
 600 0014 D7F88420 		ldr	r2, [r7, #132]
 601              	.LVL22:
 524:Src/main.c    **** 
 525:Src/main.c    ****   bool BMS_FAULT = false;
 526:Src/main.c    ****   uint16_t cellVoltage;
 527:Src/main.c    ****   bool cellConnection;
 528:Src/main.c    ****   bool dataValid;
 529:Src/main.c    ****   bool OT_fault;
 530:Src/main.c    ****   bool DC_fault;
 531:Src/main.c    ****   uint8_t board;
 532:Src/main.c    ****   uint8_t error_count[cfg.numOfICs];
 602              		.loc 1 532 0
 603 0018 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 604              	.LVL23:
 605 001c 0733     		adds	r3, r3, #7
 606              	.LVL24:
 607 001e 03F4FC73 		and	r3, r3, #504
 608              	.LVL25:
 609 0022 ADEB030D 		sub	sp, sp, r3
 610 0026 6D46     		mov	r5, sp
 611              	.LVL26:
 533:Src/main.c    **** 
 534:Src/main.c    ****   bmsStatus[0] = 0;
 612              		.loc 1 534 0
 613 0028 0024     		movs	r4, #0
 614              	.LVL27:
 615 002a 1470     		strb	r4, [r2]
 616              	.LVL28:
 617              	.LBB6:
 535:Src/main.c    **** 
 536:Src/main.c    ****   for (uint8_t cell = 0; cell < 96; cell++) {
 618              		.loc 1 536 0
 619 002c 2346     		mov	r3, r4
 620 002e 06E0     		b	.L20
 621              	.LVL29:
 622              	.L26:
 537:Src/main.c    **** 
 538:Src/main.c    ****     cellVoltage = 0;
 539:Src/main.c    ****     cellVoltage = (uint16_t) (bmsData[cell][2]);
 540:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 541:Src/main.c    **** 		cellVoltage += (uint16_t) (bmsData[cell][3]);
 542:Src/main.c    **** 
 543:Src/main.c    ****     cellConnection = (bool) (bmsData[cell][1] & 0x01);
 544:Src/main.c    ****     dataValid = (bool) ((bmsData[cell][1] & 0x02) >> 1);
 545:Src/main.c    ****     OT_fault = (bool) ((bmsData[cell][1] & 0x10) >> 4);
 546:Src/main.c    ****     DC_fault = (bool) ((bmsData[cell][1] & 0x08) >> 3);
 547:Src/main.c    **** 
 548:Src/main.c    ****     //OV fault
 549:Src/main.c    ****     if (cellVoltage > cfg.OV_threshold) {
 550:Src/main.c    ****       BMS_FAULT = true;
 551:Src/main.c    ****       bmsStatus[0] |= 0x01; //fault byte
 552:Src/main.c    ****       bmsStatus[1] = cell + 1; //OV cell number
 553:Src/main.c    ****     }
 554:Src/main.c    **** 
 555:Src/main.c    ****     //UV fault
ARM GAS  /tmp/cc2C1RGN.s 			page 23


 556:Src/main.c    ****     if (cellVoltage < cfg.UV_threshold) {
 557:Src/main.c    ****       BMS_FAULT = true;
 558:Src/main.c    ****       bmsStatus[0] |= 0x02; //fault byte
 559:Src/main.c    ****       bmsStatus[2] = cell + 1; //UV cell number
 560:Src/main.c    ****     }
 561:Src/main.c    **** 
 562:Src/main.c    ****     //Cell DC fault
 563:Src/main.c    ****     if (cellConnection == 0) {
 564:Src/main.c    ****       BMS_FAULT = true;
 565:Src/main.c    ****       bmsStatus[0] |= 0x80; //fault byte
 566:Src/main.c    ****       bmsStatus[4] = cell + 1; //DC cell number
 567:Src/main.c    ****     }
 568:Src/main.c    **** 
 569:Src/main.c    ****     //OT fault
 570:Src/main.c    ****     if (OT_fault == 1) {
 571:Src/main.c    ****       BMS_FAULT = true;
 572:Src/main.c    ****       bmsStatus[0] |= 0x04; //fault byte
 573:Src/main.c    ****       bmsStatus[3] = cell + 1; //OT cell number
 574:Src/main.c    ****     }
 575:Src/main.c    **** 
 576:Src/main.c    ****     //Temp DC fault
 577:Src/main.c    ****     if (DC_fault == 1) {
 578:Src/main.c    ****       BMS_FAULT = true;
 579:Src/main.c    ****       bmsStatus[0] |= 0x10;
 580:Src/main.c    ****       bmsStatus[5] = cell + 1;
 581:Src/main.c    ****     }
 582:Src/main.c    **** 
 583:Src/main.c    ****     board = cell % cfg.numOfCellsPerIC;
 584:Src/main.c    **** 
 585:Src/main.c    ****     //Board DC fault
 586:Src/main.c    ****     if (dataValid == 0) {
 587:Src/main.c    ****       error_count[board]++;
 588:Src/main.c    **** 
 589:Src/main.c    ****       //if data is invalid for a board, every cell will report invalid
 590:Src/main.c    ****       if (error_count[board] > (cfg.numOfCellsPerIC * cfg.invalidPECcount)) {
 591:Src/main.c    ****         BMS_FAULT = true;
 592:Src/main.c    ****         bmsStatus[0] |= 0x20;
 593:Src/main.c    ****       }
 594:Src/main.c    ****     }
 595:Src/main.c    ****     if (dataValid == 1) {
 623              		.loc 1 595 0
 624 0030 BCF1000F 		cmp	ip, #0
 625 0034 01D0     		beq	.L27
 596:Src/main.c    ****       error_count[board] = 0;
 626              		.loc 1 596 0
 627 0036 0020     		movs	r0, #0
 628 0038 6854     		strb	r0, [r5, r1]
 629              	.L27:
 536:Src/main.c    **** 
 630              		.loc 1 536 0 discriminator 2
 631 003a 0133     		adds	r3, r3, #1
 632              	.LVL30:
 633 003c DBB2     		uxtb	r3, r3
 634              	.LVL31:
 635              	.L20:
 536:Src/main.c    **** 
 636              		.loc 1 536 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/cc2C1RGN.s 			page 24


 637 003e 5F2B     		cmp	r3, #95
 638 0040 62D8     		bhi	.L32
 639              	.LVL32:
 539:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 640              		.loc 1 539 0 is_stmt 1
 641 0042 03EB4300 		add	r0, r3, r3, lsl #1
 642 0046 4100     		lsls	r1, r0, #1
 643 0048 3144     		add	r1, r1, r6
 644 004a 91F802C0 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 645              	.LVL33:
 541:Src/main.c    **** 
 646              		.loc 1 541 0
 647 004e C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 648 0050 00EB0C20 		add	r0, r0, ip, lsl #8
 649 0054 80B2     		uxth	r0, r0
 650              	.LVL34:
 543:Src/main.c    ****     dataValid = (bool) ((bmsData[cell][1] & 0x02) >> 1);
 651              		.loc 1 543 0
 652 0056 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 653 0058 01F00108 		and	r8, r1, #1
 654              	.LVL35:
 655 005c 01F0020C 		and	ip, r1, #2
 656              	.LVL36:
 657 0060 01F0100E 		and	lr, r1, #16
 658              	.LVL37:
 659 0064 01F00801 		and	r1, r1, #8
 660              	.LVL38:
 549:Src/main.c    ****       BMS_FAULT = true;
 661              		.loc 1 549 0
 662 0068 B7F84690 		ldrh	r9, [r7, #70]
 663 006c 8145     		cmp	r9, r0
 664 006e 06D2     		bcs	.L21
 665              	.LVL39:
 551:Src/main.c    ****       bmsStatus[1] = cell + 1; //OV cell number
 666              		.loc 1 551 0
 667 0070 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 668 0072 44F00104 		orr	r4, r4, #1
 669 0076 1470     		strb	r4, [r2]
 552:Src/main.c    ****     }
 670              		.loc 1 552 0
 671 0078 5C1C     		adds	r4, r3, #1
 672 007a 5470     		strb	r4, [r2, #1]
 550:Src/main.c    ****       bmsStatus[0] |= 0x01; //fault byte
 673              		.loc 1 550 0
 674 007c 0124     		movs	r4, #1
 675              	.LVL40:
 676              	.L21:
 556:Src/main.c    ****       BMS_FAULT = true;
 677              		.loc 1 556 0
 678 007e B7F84890 		ldrh	r9, [r7, #72]
 679 0082 8145     		cmp	r9, r0
 680 0084 06D9     		bls	.L22
 681              	.LVL41:
 558:Src/main.c    ****       bmsStatus[2] = cell + 1; //UV cell number
 682              		.loc 1 558 0
 683 0086 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 684              	.LVL42:
ARM GAS  /tmp/cc2C1RGN.s 			page 25


 685 0088 40F00200 		orr	r0, r0, #2
 686 008c 1070     		strb	r0, [r2]
 559:Src/main.c    ****     }
 687              		.loc 1 559 0
 688 008e 581C     		adds	r0, r3, #1
 689 0090 9070     		strb	r0, [r2, #2]
 557:Src/main.c    ****       bmsStatus[0] |= 0x02; //fault byte
 690              		.loc 1 557 0
 691 0092 0124     		movs	r4, #1
 692              	.LVL43:
 693              	.L22:
 563:Src/main.c    ****       BMS_FAULT = true;
 694              		.loc 1 563 0
 695 0094 B8F1000F 		cmp	r8, #0
 696 0098 06D1     		bne	.L23
 697              	.LVL44:
 565:Src/main.c    ****       bmsStatus[4] = cell + 1; //DC cell number
 698              		.loc 1 565 0
 699 009a 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 700 009c 60F07F00 		orn	r0, r0, #127
 701 00a0 1070     		strb	r0, [r2]
 566:Src/main.c    ****     }
 702              		.loc 1 566 0
 703 00a2 581C     		adds	r0, r3, #1
 704 00a4 1071     		strb	r0, [r2, #4]
 564:Src/main.c    ****       bmsStatus[0] |= 0x80; //fault byte
 705              		.loc 1 564 0
 706 00a6 0124     		movs	r4, #1
 707              	.LVL45:
 708              	.L23:
 570:Src/main.c    ****       BMS_FAULT = true;
 709              		.loc 1 570 0
 710 00a8 BEF1000F 		cmp	lr, #0
 711 00ac 06D0     		beq	.L24
 712              	.LVL46:
 572:Src/main.c    ****       bmsStatus[3] = cell + 1; //OT cell number
 713              		.loc 1 572 0
 714 00ae 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 715 00b0 40F00400 		orr	r0, r0, #4
 716 00b4 1070     		strb	r0, [r2]
 573:Src/main.c    ****     }
 717              		.loc 1 573 0
 718 00b6 581C     		adds	r0, r3, #1
 719 00b8 D070     		strb	r0, [r2, #3]
 571:Src/main.c    ****       bmsStatus[0] |= 0x04; //fault byte
 720              		.loc 1 571 0
 721 00ba 0124     		movs	r4, #1
 722              	.LVL47:
 723              	.L24:
 577:Src/main.c    ****       BMS_FAULT = true;
 724              		.loc 1 577 0
 725 00bc 31B1     		cbz	r1, .L25
 726              	.LVL48:
 579:Src/main.c    ****       bmsStatus[5] = cell + 1;
 727              		.loc 1 579 0
 728 00be 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 729              	.LVL49:
ARM GAS  /tmp/cc2C1RGN.s 			page 26


 730 00c0 41F01001 		orr	r1, r1, #16
 731 00c4 1170     		strb	r1, [r2]
 580:Src/main.c    ****     }
 732              		.loc 1 580 0
 733 00c6 591C     		adds	r1, r3, #1
 734 00c8 5171     		strb	r1, [r2, #5]
 578:Src/main.c    ****       bmsStatus[0] |= 0x10;
 735              		.loc 1 578 0
 736 00ca 0124     		movs	r4, #1
 737              	.LVL50:
 738              	.L25:
 583:Src/main.c    **** 
 739              		.loc 1 583 0
 740 00cc 97F84200 		ldrb	r0, [r7, #66]	@ zero_extendqisi2
 741 00d0 B3FBF0F1 		udiv	r1, r3, r0
 742 00d4 00FB1131 		mls	r1, r0, r1, r3
 743 00d8 C9B2     		uxtb	r1, r1
 744              	.LVL51:
 586:Src/main.c    ****       error_count[board]++;
 745              		.loc 1 586 0
 746 00da BCF1000F 		cmp	ip, #0
 747 00de A7D1     		bne	.L26
 587:Src/main.c    **** 
 748              		.loc 1 587 0
 749 00e0 15F801E0 		ldrb	lr, [r5, r1]	@ zero_extendqisi2
 750              	.LVL52:
 751 00e4 0EF1010E 		add	lr, lr, #1
 752 00e8 5FFA8EFE 		uxtb	lr, lr
 753 00ec 05F801E0 		strb	lr, [r5, r1]
 590:Src/main.c    ****         BMS_FAULT = true;
 754              		.loc 1 590 0
 755 00f0 97F85280 		ldrb	r8, [r7, #82]	@ zero_extendqisi2
 756              	.LVL53:
 757 00f4 08FB00F0 		mul	r0, r8, r0
 758 00f8 8645     		cmp	lr, r0
 759 00fa 99DD     		ble	.L26
 760              	.LVL54:
 592:Src/main.c    ****       }
 761              		.loc 1 592 0
 762 00fc 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 763 00fe 40F02000 		orr	r0, r0, #32
 764 0102 1070     		strb	r0, [r2]
 591:Src/main.c    ****         bmsStatus[0] |= 0x20;
 765              		.loc 1 591 0
 766 0104 0124     		movs	r4, #1
 767 0106 93E7     		b	.L26
 768              	.LVL55:
 769              	.L32:
 770              	.LBE6:
 597:Src/main.c    ****     }
 598:Src/main.c    **** 
 599:Src/main.c    ****     //Charger comm fault
 600:Src/main.c    ****     /*count = TIM2->CNT;
 601:Src/main.c    **** 
 602:Src/main.c    ****     if (count > 20000) {
 603:Src/main.c    ****       BMS_FAULT = true;
 604:Src/main.c    ****       HAL_TIM_Base_Stop(&htim2);
ARM GAS  /tmp/cc2C1RGN.s 			page 27


 605:Src/main.c    ****     }*/
 606:Src/main.c    ****   }
 607:Src/main.c    **** 
 608:Src/main.c    ****   if (BMS_FAULT == false)
 771              		.loc 1 608 0
 772 0108 34B1     		cbz	r4, .L33
 773              	.LVL56:
 774              	.L29:
 609:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, BMS_FLT_Pin, GPIO_PIN_RESET);
 610:Src/main.c    ****   if (BMS_FAULT == true)
 775              		.loc 1 610 0
 776 010a 64B9     		cbnz	r4, .L34
 777              	.L30:
 611:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, BMS_FLT_Pin, GPIO_PIN_SET);
 612:Src/main.c    ****   
 613:Src/main.c    ****   return BMS_FAULT;
 614:Src/main.c    **** }
 778              		.loc 1 614 0
 779 010c 2046     		mov	r0, r4
 780 010e BD46     		mov	sp, r7
 781              	.LCFI18:
 782              		.cfi_remember_state
 783              		.cfi_def_cfa_register 13
 784              		@ sp needed
 785 0110 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 786              	.LCFI19:
 787              		.cfi_restore 14
 788              		.cfi_restore 9
 789              		.cfi_restore 8
 790              		.cfi_restore 7
 791              		.cfi_restore 6
 792              		.cfi_restore 5
 793              		.cfi_restore 4
 794              		.cfi_restore 3
 795              		.cfi_def_cfa_offset 16
 796              	.LVL57:
 797 0114 04B0     		add	sp, sp, #16
 798              	.LCFI20:
 799              		.cfi_def_cfa_offset 0
 800 0116 7047     		bx	lr
 801              	.LVL58:
 802              	.L33:
 803              	.LCFI21:
 804              		.cfi_restore_state
 609:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, BMS_FLT_Pin, GPIO_PIN_RESET);
 805              		.loc 1 609 0
 806 0118 0022     		movs	r2, #0
 807 011a 4FF40071 		mov	r1, #512
 808 011e 0548     		ldr	r0, .L35
 809 0120 FFF7FEFF 		bl	HAL_GPIO_WritePin
 810              	.LVL59:
 811 0124 F1E7     		b	.L29
 812              	.L34:
 611:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, BMS_FLT_Pin, GPIO_PIN_SET);
 813              		.loc 1 611 0
 814 0126 0122     		movs	r2, #1
 815 0128 4FF40071 		mov	r1, #512
ARM GAS  /tmp/cc2C1RGN.s 			page 28


 816 012c 0148     		ldr	r0, .L35
 817 012e FFF7FEFF 		bl	HAL_GPIO_WritePin
 818              	.LVL60:
 819 0132 EBE7     		b	.L30
 820              	.L36:
 821              		.align	2
 822              	.L35:
 823 0134 000C0140 		.word	1073810432
 824              		.cfi_endproc
 825              	.LFE73:
 827              		.global	__aeabi_i2f
 828              		.global	__aeabi_fdiv
 829              		.global	__aeabi_f2uiz
 830              		.section	.text.balancingThreshold,"ax",%progbits
 831              		.align	1
 832              		.global	balancingThreshold
 833              		.syntax unified
 834              		.thumb
 835              		.thumb_func
 836              		.fpu softvfp
 838              	balancingThreshold:
 839              	.LFB75:
 615:Src/main.c    **** 
 616:Src/main.c    **** void setDischarge(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6], bool cellDischarge[12][8], bo
 617:Src/main.c    **** 
 618:Src/main.c    ****   uint16_t threshold;
 619:Src/main.c    ****   uint16_t cellVoltage;
 620:Src/main.c    ****   uint8_t board;
 621:Src/main.c    ****   uint8_t cell;
 622:Src/main.c    **** 	chargeRate = 2; // initialize the charging current to normal operation
 623:Src/main.c    **** 
 624:Src/main.c    ****   // if there is any type of fault, stop charging
 625:Src/main.c    ****   if (bmsFault) {
 626:Src/main.c    ****     chargeRate = 0;
 627:Src/main.c    ****     //return 0;
 628:Src/main.c    ****   }
 629:Src/main.c    **** 
 630:Src/main.c    ****   for (uint8_t i = 0; i < 96; i++) {
 631:Src/main.c    **** 
 632:Src/main.c    ****     cellVoltage = 0;
 633:Src/main.c    ****     cellVoltage = (uint16_t) (bmsData[i][2]);
 634:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 635:Src/main.c    **** 		cellVoltage += (uint16_t) (bmsData[i][3]);
 636:Src/main.c    **** 
 637:Src/main.c    ****     board = i / cfg.numOfCellsPerIC;
 638:Src/main.c    ****     cell = i % cfg.numOfCellsPerIC;
 639:Src/main.c    **** 
 640:Src/main.c    ****     bmsData[i][1] &= 0x5F; //charging state = 2
 641:Src/main.c    **** 
 642:Src/main.c    ****     // if any cell voltage is much greater than the minimum (>200mV), stop charging and discharge t
 643:Src/main.c    ****     if (cellVoltage > (minimum + cfg.max_difference)) {
 644:Src/main.c    ****       chargeRate = 0;
 645:Src/main.c    ****       fullDischarge[board][cell] = 1;
 646:Src/main.c    ****       bmsData[i][1] &= 0x7F; //charging state = 3
 647:Src/main.c    ****     }
 648:Src/main.c    ****     // if any cell voltage is greater than some absolute threshold (4.18V), stop charging and disch
 649:Src/main.c    ****     // could discharge to a fixed value (4.15V) instead
ARM GAS  /tmp/cc2C1RGN.s 			page 29


 650:Src/main.c    ****     if (cellVoltage > cfg.stopCharge_threshold) {
 651:Src/main.c    ****       chargeRate = 0;
 652:Src/main.c    ****       fullDischarge[board][cell] = 1;
 653:Src/main.c    ****       bmsData[i][1] &= 0x9F; //charging state = 4
 654:Src/main.c    ****     }
 655:Src/main.c    **** 
 656:Src/main.c    ****     // if still charging AND cells above ~3V
 657:Src/main.c    ****     if ((chargeRate != 0) && (minimum > 3000)) {
 658:Src/main.c    **** 
 659:Src/main.c    ****       // if any cell is above some absolute threshold, charge slower 
 660:Src/main.c    ****       if (cellVoltage > cfg.slowCharge_threshold)
 661:Src/main.c    ****         chargeRate = 1;
 662:Src/main.c    **** 
 663:Src/main.c    ****       // determine the relative balancing threshold based on minimum voltage
 664:Src/main.c    ****       threshold = balancingThreshold(cfg);
 665:Src/main.c    **** 
 666:Src/main.c    ****       if (cellVoltage > (minimum + threshold)) {
 667:Src/main.c    ****         cellDischarge[board][cell] = 1;
 668:Src/main.c    ****         bmsData[i][1] &= 0x2F; //charging state = 1
 669:Src/main.c    ****       }
 670:Src/main.c    ****       else {
 671:Src/main.c    ****         cellDischarge[board][cell] = 0;
 672:Src/main.c    ****         bmsData[i][1] &= 0x1F; //charging state = 0
 673:Src/main.c    ****       }
 674:Src/main.c    ****     }
 675:Src/main.c    **** 	}
 676:Src/main.c    **** }
 677:Src/main.c    **** 
 678:Src/main.c    **** uint16_t balancingThreshold(BMSconfigStructTypedef cfg) {
 840              		.loc 1 678 0
 841              		.cfi_startproc
 842              		@ args = 96, pretend = 16, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844 0000 84B0     		sub	sp, sp, #16
 845              	.LCFI22:
 846              		.cfi_def_cfa_offset 16
 847 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 848              	.LCFI23:
 849              		.cfi_def_cfa_offset 40
 850              		.cfi_offset 3, -40
 851              		.cfi_offset 4, -36
 852              		.cfi_offset 5, -32
 853              		.cfi_offset 6, -28
 854              		.cfi_offset 7, -24
 855              		.cfi_offset 14, -20
 856 0004 06AC     		add	r4, sp, #24
 857 0006 84E80F00 		stm	r4, {r0, r1, r2, r3}
 679:Src/main.c    **** 
 680:Src/main.c    ****   if (minimum > cfg.start_scaling) {
 858              		.loc 1 680 0
 859 000a BDF84E60 		ldrh	r6, [sp, #78]
 860 000e 124B     		ldr	r3, .L42
 861 0010 1C88     		ldrh	r4, [r3]
 862 0012 A642     		cmp	r6, r4
 863 0014 05D3     		bcc	.L41
 681:Src/main.c    ****     // min1 = 4.1V   threshold1 = 50mV
 682:Src/main.c    ****     // min2 = 4.16V  threshold2 = 10mV
ARM GAS  /tmp/cc2C1RGN.s 			page 30


 683:Src/main.c    **** 
 684:Src/main.c    ****     // m = (threshold2 - threshold1) / (min2 - min1)
 685:Src/main.c    ****     // linear = m * (minimum - min1) + threshold1
 686:Src/main.c    **** 
 687:Src/main.c    ****     float m;
 688:Src/main.c    ****     uint16_t linear;
 689:Src/main.c    **** 
 690:Src/main.c    ****     //  ()
 691:Src/main.c    ****     m = ((float) (cfg.scale_to - cfg.balancing_difference)) / (cfg.stop_scaling - cfg.start_scaling
 692:Src/main.c    ****     linear = (uint16_t) m * (minimum - cfg.start_scaling) + cfg.balancing_difference;
 693:Src/main.c    **** 
 694:Src/main.c    ****     return linear;
 695:Src/main.c    **** 
 696:Src/main.c    ****   }
 697:Src/main.c    ****   if (minimum <= cfg.start_scaling)
 698:Src/main.c    ****     return cfg.balancing_difference; 
 864              		.loc 1 698 0
 865 0016 BDF84800 		ldrh	r0, [sp, #72]
 866              	.L39:
 699:Src/main.c    **** 
 700:Src/main.c    ****   return 0;
 701:Src/main.c    **** 
 702:Src/main.c    **** }
 867              		.loc 1 702 0
 868 001a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 869              	.LCFI24:
 870              		.cfi_remember_state
 871              		.cfi_restore 14
 872              		.cfi_restore 7
 873              		.cfi_restore 6
 874              		.cfi_restore 5
 875              		.cfi_restore 4
 876              		.cfi_restore 3
 877              		.cfi_def_cfa_offset 16
 878 001e 04B0     		add	sp, sp, #16
 879              	.LCFI25:
 880              		.cfi_def_cfa_offset 0
 881 0020 7047     		bx	lr
 882              	.L41:
 883              	.LCFI26:
 884              		.cfi_restore_state
 885              	.LBB7:
 691:Src/main.c    ****     linear = (uint16_t) m * (minimum - cfg.start_scaling) + cfg.balancing_difference;
 886              		.loc 1 691 0
 887 0022 BDF85200 		ldrh	r0, [sp, #82]
 888 0026 BDF84850 		ldrh	r5, [sp, #72]
 889 002a 401B     		subs	r0, r0, r5
 890 002c FFF7FEFF 		bl	__aeabi_i2f
 891              	.LVL61:
 892 0030 0746     		mov	r7, r0
 893 0032 BDF85000 		ldrh	r0, [sp, #80]
 894 0036 801B     		subs	r0, r0, r6
 895 0038 FFF7FEFF 		bl	__aeabi_i2f
 896              	.LVL62:
 897 003c 0146     		mov	r1, r0
 898 003e 3846     		mov	r0, r7
 899 0040 FFF7FEFF 		bl	__aeabi_fdiv
ARM GAS  /tmp/cc2C1RGN.s 			page 31


 900              	.LVL63:
 692:Src/main.c    **** 
 901              		.loc 1 692 0
 902 0044 FFF7FEFF 		bl	__aeabi_f2uiz
 903              	.LVL64:
 904 0048 80B2     		uxth	r0, r0
 905 004a A41B     		subs	r4, r4, r6
 906 004c 04FB00F0 		mul	r0, r4, r0
 907 0050 80B2     		uxth	r0, r0
 908 0052 2844     		add	r0, r0, r5
 909 0054 80B2     		uxth	r0, r0
 910              	.LVL65:
 694:Src/main.c    **** 
 911              		.loc 1 694 0
 912 0056 E0E7     		b	.L39
 913              	.L43:
 914              		.align	2
 915              	.L42:
 916 0058 00000000 		.word	minimum
 917              	.LBE7:
 918              		.cfi_endproc
 919              	.LFE75:
 921              		.section	.text.setDischarge,"ax",%progbits
 922              		.align	1
 923              		.global	setDischarge
 924              		.syntax unified
 925              		.thumb
 926              		.thumb_func
 927              		.fpu softvfp
 929              	setDischarge:
 930              	.LFB74:
 616:Src/main.c    **** 
 931              		.loc 1 616 0
 932              		.cfi_startproc
 933              		@ args = 112, pretend = 16, frame = 0
 934              		@ frame_needed = 0, uses_anonymous_args = 0
 935              	.LVL66:
 936 0000 84B0     		sub	sp, sp, #16
 937              	.LCFI27:
 938              		.cfi_def_cfa_offset 16
 939 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 940              	.LCFI28:
 941              		.cfi_def_cfa_offset 52
 942              		.cfi_offset 4, -52
 943              		.cfi_offset 5, -48
 944              		.cfi_offset 6, -44
 945              		.cfi_offset 7, -40
 946              		.cfi_offset 8, -36
 947              		.cfi_offset 9, -32
 948              		.cfi_offset 10, -28
 949              		.cfi_offset 11, -24
 950              		.cfi_offset 14, -20
 951 0006 95B0     		sub	sp, sp, #84
 952              	.LCFI29:
 953              		.cfi_def_cfa_offset 136
 954 0008 1EAC     		add	r4, sp, #120
 955 000a 84E80F00 		stm	r4, {r0, r1, r2, r3}
ARM GAS  /tmp/cc2C1RGN.s 			page 32


 956 000e DDF8D8A0 		ldr	r10, [sp, #216]
 957 0012 9DF8E030 		ldrb	r3, [sp, #224]	@ zero_extendqisi2
 958 0016 DDF8E4B0 		ldr	fp, [sp, #228]
 622:Src/main.c    **** 
 959              		.loc 1 622 0
 960 001a 3E4A     		ldr	r2, .L55
 961 001c 0221     		movs	r1, #2
 962 001e 1170     		strb	r1, [r2]
 625:Src/main.c    ****     chargeRate = 0;
 963              		.loc 1 625 0
 964 0020 13B1     		cbz	r3, .L45
 626:Src/main.c    ****     //return 0;
 965              		.loc 1 626 0
 966 0022 1346     		mov	r3, r2
 967 0024 0022     		movs	r2, #0
 968 0026 1A70     		strb	r2, [r3]
 969              	.L45:
 616:Src/main.c    **** 
 970              		.loc 1 616 0 discriminator 1
 971 0028 0027     		movs	r7, #0
 972 002a 0BE0     		b	.L46
 973              	.LVL67:
 974              	.L51:
 975              	.LBB8:
 671:Src/main.c    ****         bmsData[i][1] &= 0x1F; //charging state = 0
 976              		.loc 1 671 0
 977 002c 379B     		ldr	r3, [sp, #220]
 978 002e 03EBC808 		add	r8, r3, r8, lsl #3
 979              	.LVL68:
 980 0032 0023     		movs	r3, #0
 981 0034 08F80630 		strb	r3, [r8, r6]
 672:Src/main.c    ****       }
 982              		.loc 1 672 0
 983 0038 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 984 003a 03F01F03 		and	r3, r3, #31
 985 003e 6370     		strb	r3, [r4, #1]
 986              	.L49:
 630:Src/main.c    **** 
 987              		.loc 1 630 0 discriminator 2
 988 0040 0137     		adds	r7, r7, #1
 989              	.LVL69:
 990 0042 FFB2     		uxtb	r7, r7
 991              	.LVL70:
 992              	.L46:
 630:Src/main.c    **** 
 993              		.loc 1 630 0 is_stmt 0 discriminator 1
 994 0044 5F2F     		cmp	r7, #95
 995 0046 5FD8     		bhi	.L54
 996              	.LVL71:
 633:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 997              		.loc 1 633 0 is_stmt 1
 998 0048 07EB4703 		add	r3, r7, r7, lsl #1
 999 004c 5C00     		lsls	r4, r3, #1
 1000 004e 5444     		add	r4, r4, r10
 1001 0050 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1002              	.LVL72:
 635:Src/main.c    **** 
ARM GAS  /tmp/cc2C1RGN.s 			page 33


 1003              		.loc 1 635 0
 1004 0052 E578     		ldrb	r5, [r4, #3]	@ zero_extendqisi2
 1005 0054 05EB0325 		add	r5, r5, r3, lsl #8
 1006 0058 ADB2     		uxth	r5, r5
 1007              	.LVL73:
 637:Src/main.c    ****     cell = i % cfg.numOfCellsPerIC;
 1008              		.loc 1 637 0
 1009 005a 9DF89A30 		ldrb	r3, [sp, #154]	@ zero_extendqisi2
 1010 005e B7FBF3F6 		udiv	r6, r7, r3
 1011 0062 5FFA86F8 		uxtb	r8, r6
 1012              	.LVL74:
 638:Src/main.c    **** 
 1013              		.loc 1 638 0
 1014 0066 03FB1676 		mls	r6, r3, r6, r7
 1015 006a F6B2     		uxtb	r6, r6
 1016              	.LVL75:
 640:Src/main.c    **** 
 1017              		.loc 1 640 0
 1018 006c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1019 006e 03F05F03 		and	r3, r3, #95
 1020 0072 6370     		strb	r3, [r4, #1]
 643:Src/main.c    ****       chargeRate = 0;
 1021              		.loc 1 643 0
 1022 0074 BDF8A620 		ldrh	r2, [sp, #166]
 1023 0078 274B     		ldr	r3, .L55+4
 1024 007a 1B88     		ldrh	r3, [r3]
 1025 007c 1344     		add	r3, r3, r2
 1026 007e 9D42     		cmp	r5, r3
 1027 0080 0ADD     		ble	.L47
 644:Src/main.c    ****       fullDischarge[board][cell] = 1;
 1028              		.loc 1 644 0
 1029 0082 244B     		ldr	r3, .L55
 1030 0084 0022     		movs	r2, #0
 1031 0086 1A70     		strb	r2, [r3]
 645:Src/main.c    ****       bmsData[i][1] &= 0x7F; //charging state = 3
 1032              		.loc 1 645 0
 1033 0088 0BEBC803 		add	r3, fp, r8, lsl #3
 1034 008c 0122     		movs	r2, #1
 1035 008e 9A55     		strb	r2, [r3, r6]
 646:Src/main.c    ****     }
 1036              		.loc 1 646 0
 1037 0090 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1038 0092 03F07F03 		and	r3, r3, #127
 1039 0096 6370     		strb	r3, [r4, #1]
 1040              	.L47:
 650:Src/main.c    ****       chargeRate = 0;
 1041              		.loc 1 650 0
 1042 0098 BDF8A430 		ldrh	r3, [sp, #164]
 1043 009c AB42     		cmp	r3, r5
 1044 009e 0AD2     		bcs	.L48
 651:Src/main.c    ****       fullDischarge[board][cell] = 1;
 1045              		.loc 1 651 0
 1046 00a0 1C4B     		ldr	r3, .L55
 1047 00a2 0022     		movs	r2, #0
 1048 00a4 1A70     		strb	r2, [r3]
 652:Src/main.c    ****       bmsData[i][1] &= 0x9F; //charging state = 4
 1049              		.loc 1 652 0
ARM GAS  /tmp/cc2C1RGN.s 			page 34


 1050 00a6 0BEBC803 		add	r3, fp, r8, lsl #3
 1051 00aa 0122     		movs	r2, #1
 1052 00ac 9A55     		strb	r2, [r3, r6]
 653:Src/main.c    ****     }
 1053              		.loc 1 653 0
 1054 00ae 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1055 00b0 23F06003 		bic	r3, r3, #96
 1056 00b4 6370     		strb	r3, [r4, #1]
 1057              	.L48:
 657:Src/main.c    **** 
 1058              		.loc 1 657 0
 1059 00b6 174B     		ldr	r3, .L55
 1060 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1061 00ba 002B     		cmp	r3, #0
 1062 00bc C0D0     		beq	.L49
 657:Src/main.c    **** 
 1063              		.loc 1 657 0 is_stmt 0 discriminator 1
 1064 00be 164B     		ldr	r3, .L55+4
 1065 00c0 B3F80090 		ldrh	r9, [r3]
 1066 00c4 40F6B833 		movw	r3, #3000
 1067 00c8 9945     		cmp	r9, r3
 1068 00ca B9D9     		bls	.L49
 660:Src/main.c    ****         chargeRate = 1;
 1069              		.loc 1 660 0 is_stmt 1
 1070 00cc BDF8A230 		ldrh	r3, [sp, #162]
 1071 00d0 AB42     		cmp	r3, r5
 1072 00d2 02D2     		bcs	.L50
 661:Src/main.c    **** 
 1073              		.loc 1 661 0
 1074 00d4 0F4B     		ldr	r3, .L55
 1075 00d6 0122     		movs	r2, #1
 1076 00d8 1A70     		strb	r2, [r3]
 1077              	.L50:
 664:Src/main.c    **** 
 1078              		.loc 1 664 0
 1079 00da 4E22     		movs	r2, #78
 1080 00dc 22A9     		add	r1, sp, #136
 1081 00de 6846     		mov	r0, sp
 1082 00e0 FFF7FEFF 		bl	memcpy
 1083              	.LVL76:
 1084 00e4 1EAB     		add	r3, sp, #120
 1085 00e6 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1086 00e8 FFF7FEFF 		bl	balancingThreshold
 1087              	.LVL77:
 666:Src/main.c    ****         cellDischarge[board][cell] = 1;
 1088              		.loc 1 666 0
 1089 00ec 4844     		add	r0, r0, r9
 1090              	.LVL78:
 1091 00ee 8542     		cmp	r5, r0
 1092 00f0 9CDD     		ble	.L51
 667:Src/main.c    ****         bmsData[i][1] &= 0x2F; //charging state = 1
 1093              		.loc 1 667 0
 1094 00f2 379B     		ldr	r3, [sp, #220]
 1095 00f4 03EBC808 		add	r8, r3, r8, lsl #3
 1096              	.LVL79:
 1097 00f8 0123     		movs	r3, #1
 1098 00fa 08F80630 		strb	r3, [r8, r6]
ARM GAS  /tmp/cc2C1RGN.s 			page 35


 668:Src/main.c    ****       }
 1099              		.loc 1 668 0
 1100 00fe 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1101 0100 03F02F03 		and	r3, r3, #47
 1102 0104 6370     		strb	r3, [r4, #1]
 1103 0106 9BE7     		b	.L49
 1104              	.LVL80:
 1105              	.L54:
 1106              	.LBE8:
 676:Src/main.c    **** 
 1107              		.loc 1 676 0
 1108 0108 15B0     		add	sp, sp, #84
 1109              	.LCFI30:
 1110              		.cfi_def_cfa_offset 52
 1111              		@ sp needed
 1112 010a BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1113              	.LCFI31:
 1114              		.cfi_restore 14
 1115              		.cfi_restore 11
 1116              		.cfi_restore 10
 1117              		.cfi_restore 9
 1118              		.cfi_restore 8
 1119              		.cfi_restore 7
 1120              		.cfi_restore 6
 1121              		.cfi_restore 5
 1122              		.cfi_restore 4
 1123              		.cfi_def_cfa_offset 16
 1124              	.LVL81:
 1125 010e 04B0     		add	sp, sp, #16
 1126              	.LCFI32:
 1127              		.cfi_def_cfa_offset 0
 1128 0110 7047     		bx	lr
 1129              	.L56:
 1130 0112 00BF     		.align	2
 1131              	.L55:
 1132 0114 00000000 		.word	.LANCHOR0
 1133 0118 00000000 		.word	minimum
 1134              		.cfi_endproc
 1135              	.LFE74:
 1137              		.section	.text.checkDischarge,"ax",%progbits
 1138              		.align	1
 1139              		.global	checkDischarge
 1140              		.syntax unified
 1141              		.thumb
 1142              		.thumb_func
 1143              		.fpu softvfp
 1145              	checkDischarge:
 1146              	.LFB76:
 703:Src/main.c    **** 
 704:Src/main.c    **** void checkDischarge(BMSconfigStructTypedef cfg, bool fullDischarge[12][8], uint8_t bmsData[96][6]) 
 1147              		.loc 1 704 0
 1148              		.cfi_startproc
 1149              		@ args = 104, pretend = 16, frame = 0
 1150              		@ frame_needed = 0, uses_anonymous_args = 0
 1151              		@ link register save eliminated.
 1152              	.LVL82:
 1153 0000 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/cc2C1RGN.s 			page 36


 1154              	.LCFI33:
 1155              		.cfi_def_cfa_offset 16
 1156 0002 F0B4     		push	{r4, r5, r6, r7}
 1157              	.LCFI34:
 1158              		.cfi_def_cfa_offset 32
 1159              		.cfi_offset 4, -32
 1160              		.cfi_offset 5, -28
 1161              		.cfi_offset 6, -24
 1162              		.cfi_offset 7, -20
 1163 0004 04AC     		add	r4, sp, #16
 1164 0006 84E80F00 		stm	r4, {r0, r1, r2, r3}
 1165 000a DDF870C0 		ldr	ip, [sp, #112]
 1166 000e 1D9F     		ldr	r7, [sp, #116]
 1167              	.LVL83:
 1168              	.LBB9:
 705:Src/main.c    **** 
 706:Src/main.c    ****   uint8_t sum = 0;
 707:Src/main.c    ****   uint16_t cellVoltage;
 708:Src/main.c    ****   uint8_t board;
 709:Src/main.c    ****   uint8_t cell;
 710:Src/main.c    **** 
 711:Src/main.c    ****   for (uint8_t i = 0; i < 96; i++) {
 1169              		.loc 1 711 0
 1170 0010 0023     		movs	r3, #0
 1171              	.LBE9:
 706:Src/main.c    ****   uint16_t cellVoltage;
 1172              		.loc 1 706 0
 1173 0012 1E46     		mov	r6, r3
 1174              	.LBB10:
 1175              		.loc 1 711 0
 1176 0014 03E0     		b	.L58
 1177              	.LVL84:
 1178              	.L60:
 712:Src/main.c    **** 
 713:Src/main.c    ****     cellVoltage = 0;
 714:Src/main.c    ****     cellVoltage = (uint16_t) (bmsData[i][2]);
 715:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 716:Src/main.c    **** 		cellVoltage += (uint16_t) (bmsData[i][3]);
 717:Src/main.c    **** 
 718:Src/main.c    ****     board = i / cfg.numOfCellsPerIC;
 719:Src/main.c    ****     cell = i % cfg.numOfCellsPerIC;
 720:Src/main.c    **** 
 721:Src/main.c    ****     if (fullDischarge[board][cell] == 1) {
 722:Src/main.c    ****       if (cellVoltage <= minimum) {
 723:Src/main.c    ****         fullDischarge[board][cell] = 0;
 724:Src/main.c    ****         bmsData[i][1] &= 0x5F; //reset charging state to 2
 725:Src/main.c    ****       }
 726:Src/main.c    ****       else
 727:Src/main.c    ****         sum += 1;
 1179              		.loc 1 727 0
 1180 0016 0136     		adds	r6, r6, #1
 1181              	.LVL85:
 1182 0018 F6B2     		uxtb	r6, r6
 1183              	.LVL86:
 1184              	.L59:
 711:Src/main.c    **** 
 1185              		.loc 1 711 0 discriminator 2
ARM GAS  /tmp/cc2C1RGN.s 			page 37


 1186 001a 0133     		adds	r3, r3, #1
 1187              	.LVL87:
 1188 001c DBB2     		uxtb	r3, r3
 1189              	.LVL88:
 1190              	.L58:
 711:Src/main.c    **** 
 1191              		.loc 1 711 0 is_stmt 0 discriminator 1
 1192 001e 5F2B     		cmp	r3, #95
 1193 0020 20D8     		bhi	.L64
 1194              	.LVL89:
 714:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 1195              		.loc 1 714 0 is_stmt 1
 1196 0022 03EB4302 		add	r2, r3, r3, lsl #1
 1197 0026 5100     		lsls	r1, r2, #1
 1198 0028 3944     		add	r1, r1, r7
 1199 002a 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
 1200              	.LVL90:
 716:Src/main.c    **** 
 1201              		.loc 1 716 0
 1202 002c CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 1203 002e 02EB0022 		add	r2, r2, r0, lsl #8
 1204 0032 94B2     		uxth	r4, r2
 1205              	.LVL91:
 718:Src/main.c    ****     cell = i % cfg.numOfCellsPerIC;
 1206              		.loc 1 718 0
 1207 0034 9DF83250 		ldrb	r5, [sp, #50]	@ zero_extendqisi2
 1208 0038 B3FBF5F2 		udiv	r2, r3, r5
 1209 003c D0B2     		uxtb	r0, r2
 1210              	.LVL92:
 719:Src/main.c    **** 
 1211              		.loc 1 719 0
 1212 003e 05FB1232 		mls	r2, r5, r2, r3
 1213 0042 D2B2     		uxtb	r2, r2
 1214              	.LVL93:
 721:Src/main.c    ****       if (cellVoltage <= minimum) {
 1215              		.loc 1 721 0
 1216 0044 0CEBC000 		add	r0, ip, r0, lsl #3
 1217              	.LVL94:
 1218 0048 855C     		ldrb	r5, [r0, r2]	@ zero_extendqisi2
 1219              	.LVL95:
 1220 004a 002D     		cmp	r5, #0
 1221 004c E5D0     		beq	.L59
 722:Src/main.c    ****         fullDischarge[board][cell] = 0;
 1222              		.loc 1 722 0
 1223 004e 094D     		ldr	r5, .L65
 1224 0050 2D88     		ldrh	r5, [r5]
 1225 0052 A542     		cmp	r5, r4
 1226 0054 DFD3     		bcc	.L60
 723:Src/main.c    ****         bmsData[i][1] &= 0x5F; //reset charging state to 2
 1227              		.loc 1 723 0
 1228 0056 0024     		movs	r4, #0
 1229              	.LVL96:
 1230 0058 8454     		strb	r4, [r0, r2]
 1231              	.LVL97:
 724:Src/main.c    ****       }
 1232              		.loc 1 724 0
 1233 005a 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
ARM GAS  /tmp/cc2C1RGN.s 			page 38


 1234              	.LVL98:
 1235 005c 02F05F02 		and	r2, r2, #95
 1236 0060 4A70     		strb	r2, [r1, #1]
 1237 0062 DAE7     		b	.L59
 1238              	.LVL99:
 1239              	.L64:
 1240              	.LBE10:
 728:Src/main.c    ****     }
 729:Src/main.c    ****   }
 730:Src/main.c    **** 
 731:Src/main.c    ****   if (sum == 0)
 1241              		.loc 1 731 0
 1242 0064 16B9     		cbnz	r6, .L57
 732:Src/main.c    ****     chargeRate = 2;
 1243              		.loc 1 732 0
 1244 0066 044B     		ldr	r3, .L65+4
 1245              	.LVL100:
 1246 0068 0222     		movs	r2, #2
 1247 006a 1A70     		strb	r2, [r3]
 1248              	.L57:
 733:Src/main.c    **** 
 734:Src/main.c    **** }
 1249              		.loc 1 734 0
 1250 006c F0BC     		pop	{r4, r5, r6, r7}
 1251              	.LCFI35:
 1252              		.cfi_restore 7
 1253              		.cfi_restore 6
 1254              		.cfi_restore 5
 1255              		.cfi_restore 4
 1256              		.cfi_def_cfa_offset 16
 1257              	.LVL101:
 1258 006e 04B0     		add	sp, sp, #16
 1259              	.LCFI36:
 1260              		.cfi_def_cfa_offset 0
 1261 0070 7047     		bx	lr
 1262              	.L66:
 1263 0072 00BF     		.align	2
 1264              	.L65:
 1265 0074 00000000 		.word	minimum
 1266 0078 00000000 		.word	.LANCHOR0
 1267              		.cfi_endproc
 1268              	.LFE76:
 1270              		.section	.text.setChargerTxData,"ax",%progbits
 1271              		.align	1
 1272              		.global	setChargerTxData
 1273              		.syntax unified
 1274              		.thumb
 1275              		.thumb_func
 1276              		.fpu softvfp
 1278              	setChargerTxData:
 1279              	.LFB77:
 735:Src/main.c    **** 
 736:Src/main.c    **** void setChargerTxData(BMSconfigStructTypedef cfg) {
 1280              		.loc 1 736 0
 1281              		.cfi_startproc
 1282              		@ args = 96, pretend = 16, frame = 0
 1283              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc2C1RGN.s 			page 39


 1284 0000 84B0     		sub	sp, sp, #16
 1285              	.LCFI37:
 1286              		.cfi_def_cfa_offset 16
 1287 0002 08B5     		push	{r3, lr}
 1288              	.LCFI38:
 1289              		.cfi_def_cfa_offset 24
 1290              		.cfi_offset 3, -24
 1291              		.cfi_offset 14, -20
 1292 0004 0DF1080C 		add	ip, sp, #8
 1293 0008 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 737:Src/main.c    **** 
 738:Src/main.c    **** 	/* voltage data (hex value of desired voltage (V) times 10)*/
 739:Src/main.c    **** 	ChargerTxData[0] = (uint8_t)(cfg.chargerVoltage >> 8);
 1294              		.loc 1 739 0
 1295 000c BDF84820 		ldrh	r2, [sp, #72]
 1296 0010 110A     		lsrs	r1, r2, #8
 1297 0012 154B     		ldr	r3, .L74
 1298 0014 1970     		strb	r1, [r3]
 740:Src/main.c    **** 	ChargerTxData[1] = (uint8_t)cfg.chargerVoltage;
 1299              		.loc 1 740 0
 1300 0016 5A70     		strb	r2, [r3, #1]
 741:Src/main.c    **** 
 742:Src/main.c    **** 	/* set the current data (hex value of desired current (A) times 10) */
 743:Src/main.c    **** 	switch (chargeRate) {
 1301              		.loc 1 743 0
 1302 0018 144B     		ldr	r3, .L74+4
 1303 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1304 001c 012B     		cmp	r3, #1
 1305 001e 06D0     		beq	.L69
 1306 0020 022B     		cmp	r3, #2
 1307 0022 19D0     		beq	.L70
 744:Src/main.c    **** 		case 1:
 745:Src/main.c    **** 			/* lower current */
 746:Src/main.c    **** 			ChargerTxData[2] = (uint8_t)(cfg.lowerCurrent >> 8);
 747:Src/main.c    **** 			ChargerTxData[3] = (uint8_t)cfg.lowerCurrent;
 748:Src/main.c    **** 			break;
 749:Src/main.c    **** 
 750:Src/main.c    **** 		case 2:
 751:Src/main.c    **** 			/* normal current */
 752:Src/main.c    **** 			ChargerTxData[2] = (uint8_t)(cfg.normalCurrent >> 8);
 753:Src/main.c    **** 			ChargerTxData[3] = (uint8_t)cfg.normalCurrent;
 754:Src/main.c    **** 			break;
 755:Src/main.c    **** 
 756:Src/main.c    **** 		default:
 757:Src/main.c    **** 			/* no current */
 758:Src/main.c    **** 			ChargerTxData[2] = 0x00;
 1308              		.loc 1 758 0
 1309 0024 104B     		ldr	r3, .L74
 1310 0026 0022     		movs	r2, #0
 1311 0028 9A70     		strb	r2, [r3, #2]
 759:Src/main.c    **** 			ChargerTxData[3] = 0x00;
 1312              		.loc 1 759 0
 1313 002a DA70     		strb	r2, [r3, #3]
 1314 002c 05E0     		b	.L71
 1315              	.L69:
 746:Src/main.c    **** 			ChargerTxData[3] = (uint8_t)cfg.lowerCurrent;
 1316              		.loc 1 746 0
ARM GAS  /tmp/cc2C1RGN.s 			page 40


 1317 002e BDF84620 		ldrh	r2, [sp, #70]
 1318 0032 110A     		lsrs	r1, r2, #8
 1319 0034 0C4B     		ldr	r3, .L74
 1320 0036 9970     		strb	r1, [r3, #2]
 747:Src/main.c    **** 			break;
 1321              		.loc 1 747 0
 1322 0038 DA70     		strb	r2, [r3, #3]
 1323              	.L71:
 760:Src/main.c    **** 	}
 761:Src/main.c    **** 
 762:Src/main.c    **** 	/* these data bytes are not used */
 763:Src/main.c    **** 	ChargerTxData[4] = 0x00;
 1324              		.loc 1 763 0
 1325 003a 0B4A     		ldr	r2, .L74
 1326 003c 0023     		movs	r3, #0
 1327 003e 1371     		strb	r3, [r2, #4]
 764:Src/main.c    **** 	ChargerTxData[5] = 0x00;
 1328              		.loc 1 764 0
 1329 0040 5371     		strb	r3, [r2, #5]
 765:Src/main.c    **** 	ChargerTxData[6] = 0x00;
 1330              		.loc 1 765 0
 1331 0042 9371     		strb	r3, [r2, #6]
 766:Src/main.c    **** 	ChargerTxData[7] = 0x00;
 1332              		.loc 1 766 0
 1333 0044 D371     		strb	r3, [r2, #7]
 767:Src/main.c    **** 
 768:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &ChargerTxHeader, ChargerTxData, &TxMailbox);
 1334              		.loc 1 768 0
 1335 0046 0A4B     		ldr	r3, .L74+8
 1336 0048 0A49     		ldr	r1, .L74+12
 1337 004a 0B48     		ldr	r0, .L74+16
 1338 004c FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1339              	.LVL102:
 769:Src/main.c    **** }
 1340              		.loc 1 769 0
 1341 0050 BDE80840 		pop	{r3, lr}
 1342              	.LCFI39:
 1343              		.cfi_remember_state
 1344              		.cfi_restore 14
 1345              		.cfi_restore 3
 1346              		.cfi_def_cfa_offset 16
 1347 0054 04B0     		add	sp, sp, #16
 1348              	.LCFI40:
 1349              		.cfi_def_cfa_offset 0
 1350 0056 7047     		bx	lr
 1351              	.L70:
 1352              	.LCFI41:
 1353              		.cfi_restore_state
 752:Src/main.c    **** 			ChargerTxData[3] = (uint8_t)cfg.normalCurrent;
 1354              		.loc 1 752 0
 1355 0058 BDF84420 		ldrh	r2, [sp, #68]
 1356 005c 110A     		lsrs	r1, r2, #8
 1357 005e 024B     		ldr	r3, .L74
 1358 0060 9970     		strb	r1, [r3, #2]
 753:Src/main.c    **** 			break;
 1359              		.loc 1 753 0
 1360 0062 DA70     		strb	r2, [r3, #3]
ARM GAS  /tmp/cc2C1RGN.s 			page 41


 754:Src/main.c    **** 
 1361              		.loc 1 754 0
 1362 0064 E9E7     		b	.L71
 1363              	.L75:
 1364 0066 00BF     		.align	2
 1365              	.L74:
 1366 0068 00000000 		.word	ChargerTxData
 1367 006c 00000000 		.word	.LANCHOR0
 1368 0070 00000000 		.word	TxMailbox
 1369 0074 00000000 		.word	ChargerTxHeader
 1370 0078 00000000 		.word	hcan
 1371              		.cfi_endproc
 1372              	.LFE77:
 1374              		.section	.text.CELLVAL_message,"ax",%progbits
 1375              		.align	1
 1376              		.global	CELLVAL_message
 1377              		.syntax unified
 1378              		.thumb
 1379              		.thumb_func
 1380              		.fpu softvfp
 1382              	CELLVAL_message:
 1383              	.LFB78:
 770:Src/main.c    **** 
 771:Src/main.c    **** void CELLVAL_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]) {
 1384              		.loc 1 771 0
 1385              		.cfi_startproc
 1386              		@ args = 100, pretend = 16, frame = 0
 1387              		@ frame_needed = 0, uses_anonymous_args = 0
 1388              	.LVL103:
 1389 0000 84B0     		sub	sp, sp, #16
 1390              	.LCFI42:
 1391              		.cfi_def_cfa_offset 16
 1392 0002 38B5     		push	{r3, r4, r5, lr}
 1393              	.LCFI43:
 1394              		.cfi_def_cfa_offset 32
 1395              		.cfi_offset 3, -32
 1396              		.cfi_offset 4, -28
 1397              		.cfi_offset 5, -24
 1398              		.cfi_offset 14, -20
 1399 0004 04AC     		add	r4, sp, #16
 1400 0006 84E80F00 		stm	r4, {r0, r1, r2, r3}
 1401 000a 1C9D     		ldr	r5, [sp, #112]
 772:Src/main.c    **** 	
 773:Src/main.c    ****   TxHeader.StdId = CELLVAL_ID;
 1402              		.loc 1 773 0
 1403 000c 134B     		ldr	r3, .L80
 1404 000e 0722     		movs	r2, #7
 1405 0010 1A60     		str	r2, [r3]
 774:Src/main.c    ****   TxHeader.DLC = 6;
 1406              		.loc 1 774 0
 1407 0012 0622     		movs	r2, #6
 1408 0014 1A61     		str	r2, [r3, #16]
 1409              	.LVL104:
 1410              	.LBB11:
 775:Src/main.c    **** 
 776:Src/main.c    ****   for (uint8_t cell = 0; cell < 96; cell++) {
 1411              		.loc 1 776 0
ARM GAS  /tmp/cc2C1RGN.s 			page 42


 1412 0016 0024     		movs	r4, #0
 1413 0018 1AE0     		b	.L77
 1414              	.LVL105:
 1415              	.L78:
 777:Src/main.c    ****     CELLVAL_DATA[0] = bmsData[cell][0];
 1416              		.loc 1 777 0 discriminator 3
 1417 001a 04EB4403 		add	r3, r4, r4, lsl #1
 1418 001e 5A00     		lsls	r2, r3, #1
 1419 0020 AB18     		adds	r3, r5, r2
 1420 0022 A95C     		ldrb	r1, [r5, r2]	@ zero_extendqisi2
 1421 0024 0E4A     		ldr	r2, .L80+4
 1422 0026 1170     		strb	r1, [r2]
 778:Src/main.c    ****     CELLVAL_DATA[1] = bmsData[cell][1];
 1423              		.loc 1 778 0 discriminator 3
 1424 0028 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 1425 002a 5170     		strb	r1, [r2, #1]
 779:Src/main.c    ****     CELLVAL_DATA[2] = bmsData[cell][2];
 1426              		.loc 1 779 0 discriminator 3
 1427 002c 9978     		ldrb	r1, [r3, #2]	@ zero_extendqisi2
 1428 002e 9170     		strb	r1, [r2, #2]
 780:Src/main.c    ****     CELLVAL_DATA[3] = bmsData[cell][3];
 1429              		.loc 1 780 0 discriminator 3
 1430 0030 D978     		ldrb	r1, [r3, #3]	@ zero_extendqisi2
 1431 0032 D170     		strb	r1, [r2, #3]
 781:Src/main.c    ****     CELLVAL_DATA[4] = bmsData[cell][4];
 1432              		.loc 1 781 0 discriminator 3
 1433 0034 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
 1434 0036 1171     		strb	r1, [r2, #4]
 782:Src/main.c    ****     CELLVAL_DATA[5] = bmsData[cell][5];
 1435              		.loc 1 782 0 discriminator 3
 1436 0038 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1437 003a 5371     		strb	r3, [r2, #5]
 783:Src/main.c    **** 
 784:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &TxHeader, CELLVAL_DATA, &TxMailbox);
 1438              		.loc 1 784 0 discriminator 3
 1439 003c 094B     		ldr	r3, .L80+8
 1440 003e 0749     		ldr	r1, .L80
 1441 0040 0948     		ldr	r0, .L80+12
 1442 0042 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1443              	.LVL106:
 785:Src/main.c    ****     HAL_Delay(10);
 1444              		.loc 1 785 0 discriminator 3
 1445 0046 0A20     		movs	r0, #10
 1446 0048 FFF7FEFF 		bl	HAL_Delay
 1447              	.LVL107:
 776:Src/main.c    ****     CELLVAL_DATA[0] = bmsData[cell][0];
 1448              		.loc 1 776 0 discriminator 3
 1449 004c 0134     		adds	r4, r4, #1
 1450              	.LVL108:
 1451 004e E4B2     		uxtb	r4, r4
 1452              	.LVL109:
 1453              	.L77:
 776:Src/main.c    ****     CELLVAL_DATA[0] = bmsData[cell][0];
 1454              		.loc 1 776 0 is_stmt 0 discriminator 1
 1455 0050 5F2C     		cmp	r4, #95
 1456 0052 E2D9     		bls	.L78
 1457              	.LBE11:
ARM GAS  /tmp/cc2C1RGN.s 			page 43


 786:Src/main.c    **** 
 787:Src/main.c    ****   }
 788:Src/main.c    **** }
 1458              		.loc 1 788 0 is_stmt 1
 1459 0054 BDE83840 		pop	{r3, r4, r5, lr}
 1460              	.LCFI44:
 1461              		.cfi_restore 14
 1462              		.cfi_restore 5
 1463              		.cfi_restore 4
 1464              		.cfi_restore 3
 1465              		.cfi_def_cfa_offset 16
 1466              	.LVL110:
 1467 0058 04B0     		add	sp, sp, #16
 1468              	.LCFI45:
 1469              		.cfi_def_cfa_offset 0
 1470 005a 7047     		bx	lr
 1471              	.L81:
 1472              		.align	2
 1473              	.L80:
 1474 005c 00000000 		.word	TxHeader
 1475 0060 00000000 		.word	CELLVAL_DATA
 1476 0064 00000000 		.word	TxMailbox
 1477 0068 00000000 		.word	hcan
 1478              		.cfi_endproc
 1479              	.LFE78:
 1481              		.section	.text.BMSSTAT_message,"ax",%progbits
 1482              		.align	1
 1483              		.global	BMSSTAT_message
 1484              		.syntax unified
 1485              		.thumb
 1486              		.thumb_func
 1487              		.fpu softvfp
 1489              	BMSSTAT_message:
 1490              	.LFB79:
 789:Src/main.c    **** 
 790:Src/main.c    **** void BMSSTAT_message(BMSconfigStructTypedef cfg, uint8_t bmsStatus[6]) {
 1491              		.loc 1 790 0
 1492              		.cfi_startproc
 1493              		@ args = 100, pretend = 16, frame = 0
 1494              		@ frame_needed = 0, uses_anonymous_args = 0
 1495              	.LVL111:
 1496 0000 84B0     		sub	sp, sp, #16
 1497              	.LCFI46:
 1498              		.cfi_def_cfa_offset 16
 1499 0002 08B5     		push	{r3, lr}
 1500              	.LCFI47:
 1501              		.cfi_def_cfa_offset 24
 1502              		.cfi_offset 3, -24
 1503              		.cfi_offset 14, -20
 1504 0004 0DF1080C 		add	ip, sp, #8
 1505 0008 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 791:Src/main.c    **** 
 792:Src/main.c    ****   TxHeader.StdId = BMSSTAT_ID;
 1506              		.loc 1 792 0
 1507 000c 0649     		ldr	r1, .L84
 1508 000e 0823     		movs	r3, #8
 1509 0010 0B60     		str	r3, [r1]
ARM GAS  /tmp/cc2C1RGN.s 			page 44


 793:Src/main.c    ****   TxHeader.DLC = 6;
 1510              		.loc 1 793 0
 1511 0012 0623     		movs	r3, #6
 1512 0014 0B61     		str	r3, [r1, #16]
 794:Src/main.c    **** 
 795:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxHeader, bmsStatus, &TxMailbox);
 1513              		.loc 1 795 0
 1514 0016 054B     		ldr	r3, .L84+4
 1515 0018 1A9A     		ldr	r2, [sp, #104]
 1516 001a 0548     		ldr	r0, .L84+8
 1517 001c FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1518              	.LVL112:
 796:Src/main.c    **** }
 1519              		.loc 1 796 0
 1520 0020 BDE80840 		pop	{r3, lr}
 1521              	.LCFI48:
 1522              		.cfi_restore 14
 1523              		.cfi_restore 3
 1524              		.cfi_def_cfa_offset 16
 1525 0024 04B0     		add	sp, sp, #16
 1526              	.LCFI49:
 1527              		.cfi_def_cfa_offset 0
 1528 0026 7047     		bx	lr
 1529              	.L85:
 1530              		.align	2
 1531              	.L84:
 1532 0028 00000000 		.word	TxHeader
 1533 002c 00000000 		.word	TxMailbox
 1534 0030 00000000 		.word	hcan
 1535              		.cfi_endproc
 1536              	.LFE79:
 1538              		.section	.text.BMSVINF_message,"ax",%progbits
 1539              		.align	1
 1540              		.global	BMSVINF_message
 1541              		.syntax unified
 1542              		.thumb
 1543              		.thumb_func
 1544              		.fpu softvfp
 1546              	BMSVINF_message:
 1547              	.LFB80:
 797:Src/main.c    **** 
 798:Src/main.c    **** void BMSVINF_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]) {
 1548              		.loc 1 798 0
 1549              		.cfi_startproc
 1550              		@ args = 100, pretend = 16, frame = 8
 1551              		@ frame_needed = 0, uses_anonymous_args = 0
 1552              	.LVL113:
 1553 0000 84B0     		sub	sp, sp, #16
 1554              	.LCFI50:
 1555              		.cfi_def_cfa_offset 16
 1556 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 1557              	.LCFI51:
 1558              		.cfi_def_cfa_offset 36
 1559              		.cfi_offset 4, -36
 1560              		.cfi_offset 5, -32
 1561              		.cfi_offset 6, -28
 1562              		.cfi_offset 7, -24
ARM GAS  /tmp/cc2C1RGN.s 			page 45


 1563              		.cfi_offset 14, -20
 1564 0004 83B0     		sub	sp, sp, #12
 1565              	.LCFI52:
 1566              		.cfi_def_cfa_offset 48
 1567 0006 08AE     		add	r6, sp, #32
 1568 0008 86E80F00 		stm	r6, {r0, r1, r2, r3}
 1569 000c DDF880C0 		ldr	ip, [sp, #128]
 1570              	.LVL114:
 1571              	.LBB12:
 799:Src/main.c    **** 
 800:Src/main.c    ****   uint16_t cellVoltage;
 801:Src/main.c    ****   uint16_t minV = 0xFFFF;
 802:Src/main.c    ****   uint8_t minCell;
 803:Src/main.c    ****   uint16_t maxV = 0x0000;
 804:Src/main.c    ****   uint8_t maxCell;
 805:Src/main.c    ****   uint16_t averageV;
 806:Src/main.c    ****   uint32_t sum = 0;
 807:Src/main.c    **** 
 808:Src/main.c    ****   for (uint8_t cell = 0; cell < 96; cell++) {
 1572              		.loc 1 808 0
 1573 0010 0022     		movs	r2, #0
 1574              	.LBE12:
 806:Src/main.c    **** 
 1575              		.loc 1 806 0
 1576 0012 1046     		mov	r0, r2
 803:Src/main.c    ****   uint8_t maxCell;
 1577              		.loc 1 803 0
 1578 0014 1746     		mov	r7, r2
 801:Src/main.c    ****   uint8_t minCell;
 1579              		.loc 1 801 0
 1580 0016 4FF6FF76 		movw	r6, #65535
 1581              	.LBB13:
 1582              		.loc 1 808 0
 1583 001a 02E0     		b	.L87
 1584              	.LVL115:
 1585              	.L89:
 809:Src/main.c    **** 
 810:Src/main.c    ****     cellVoltage = 0;
 811:Src/main.c    ****     cellVoltage = (uint16_t) (bmsData[cell][2]);
 812:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 813:Src/main.c    **** 		cellVoltage += (uint16_t) (bmsData[cell][3]);
 814:Src/main.c    **** 
 815:Src/main.c    ****     if (cellVoltage < minV) {
 816:Src/main.c    ****       minV = cellVoltage;
 817:Src/main.c    ****       minCell = cell + 1;
 818:Src/main.c    ****     }
 819:Src/main.c    **** 
 820:Src/main.c    ****     if (cellVoltage > maxV) {
 821:Src/main.c    ****       maxV = cellVoltage;
 822:Src/main.c    ****       maxCell = cell + 1;
 823:Src/main.c    ****     }
 824:Src/main.c    **** 
 825:Src/main.c    ****     sum += cellVoltage;
 1586              		.loc 1 825 0 discriminator 2
 1587 001c 1844     		add	r0, r0, r3
 1588              	.LVL116:
 808:Src/main.c    **** 
ARM GAS  /tmp/cc2C1RGN.s 			page 46


 1589              		.loc 1 808 0 discriminator 2
 1590 001e 0132     		adds	r2, r2, #1
 1591              	.LVL117:
 1592 0020 D2B2     		uxtb	r2, r2
 1593              	.LVL118:
 1594              	.L87:
 808:Src/main.c    **** 
 1595              		.loc 1 808 0 is_stmt 0 discriminator 1
 1596 0022 5F2A     		cmp	r2, #95
 1597 0024 14D8     		bhi	.L92
 1598              	.LVL119:
 811:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 1599              		.loc 1 811 0 is_stmt 1
 1600 0026 02EB4203 		add	r3, r2, r2, lsl #1
 1601 002a 5900     		lsls	r1, r3, #1
 1602 002c 6144     		add	r1, r1, ip
 1603 002e 91F802E0 		ldrb	lr, [r1, #2]	@ zero_extendqisi2
 1604              	.LVL120:
 813:Src/main.c    **** 
 1605              		.loc 1 813 0
 1606 0032 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 1607 0034 03EB0E23 		add	r3, r3, lr, lsl #8
 1608 0038 9BB2     		uxth	r3, r3
 1609              	.LVL121:
 815:Src/main.c    ****       minV = cellVoltage;
 1610              		.loc 1 815 0
 1611 003a 9E42     		cmp	r6, r3
 1612 003c 02D9     		bls	.L88
 1613              	.LVL122:
 817:Src/main.c    ****     }
 1614              		.loc 1 817 0
 1615 003e 541C     		adds	r4, r2, #1
 1616              	.LVL123:
 1617 0040 E4B2     		uxtb	r4, r4
 1618              	.LVL124:
 816:Src/main.c    ****       minCell = cell + 1;
 1619              		.loc 1 816 0
 1620 0042 1E46     		mov	r6, r3
 1621              	.LVL125:
 1622              	.L88:
 820:Src/main.c    ****       maxV = cellVoltage;
 1623              		.loc 1 820 0
 1624 0044 9F42     		cmp	r7, r3
 1625 0046 E9D2     		bcs	.L89
 1626              	.LVL126:
 822:Src/main.c    ****     }
 1627              		.loc 1 822 0
 1628 0048 551C     		adds	r5, r2, #1
 1629              	.LVL127:
 1630 004a EDB2     		uxtb	r5, r5
 1631              	.LVL128:
 821:Src/main.c    ****       maxCell = cell + 1;
 1632              		.loc 1 821 0
 1633 004c 1F46     		mov	r7, r3
 1634 004e E5E7     		b	.L89
 1635              	.LVL129:
 1636              	.L92:
ARM GAS  /tmp/cc2C1RGN.s 			page 47


 1637              	.LBE13:
 826:Src/main.c    ****   }
 827:Src/main.c    **** 
 828:Src/main.c    ****   sumOfCells = sum;
 1638              		.loc 1 828 0
 1639 0050 174B     		ldr	r3, .L93
 1640 0052 1860     		str	r0, [r3]
 829:Src/main.c    ****   minimum = minV;
 1641              		.loc 1 829 0
 1642 0054 174B     		ldr	r3, .L93+4
 1643 0056 1E80     		strh	r6, [r3]	@ movhi
 830:Src/main.c    ****   averageV = (uint16_t) (sum / (cfg.numOfICs * cfg.numOfCellsPerIC));
 1644              		.loc 1 830 0
 1645 0058 9DF82020 		ldrb	r2, [sp, #32]	@ zero_extendqisi2
 1646              	.LVL130:
 1647 005c 9DF84230 		ldrb	r3, [sp, #66]	@ zero_extendqisi2
 1648 0060 03FB02F3 		mul	r3, r3, r2
 1649 0064 B0FBF3F3 		udiv	r3, r0, r3
 1650              	.LVL131:
 831:Src/main.c    **** 
 832:Src/main.c    ****   TxHeader.StdId = BMSVINF_ID;
 1651              		.loc 1 832 0
 1652 0068 1349     		ldr	r1, .L93+8
 1653 006a 0922     		movs	r2, #9
 1654 006c 0A60     		str	r2, [r1]
 833:Src/main.c    ****   TxHeader.DLC = 8;
 1655              		.loc 1 833 0
 1656 006e 0822     		movs	r2, #8
 1657 0070 0A61     		str	r2, [r1, #16]
 834:Src/main.c    ****   uint8_t BMSVINF_DATA[8];
 835:Src/main.c    **** 
 836:Src/main.c    ****   BMSVINF_DATA[0] = (uint8_t) ((maxV >> 8) & 0xFF);
 1658              		.loc 1 836 0
 1659 0072 27FA02F2 		lsr	r2, r7, r2
 1660 0076 8DF80020 		strb	r2, [sp]
 837:Src/main.c    ****   BMSVINF_DATA[1] = (uint8_t) (maxV & 0xFF);
 1661              		.loc 1 837 0
 1662 007a 8DF80170 		strb	r7, [sp, #1]
 838:Src/main.c    ****   BMSVINF_DATA[2] = maxCell;
 1663              		.loc 1 838 0
 1664 007e 8DF80250 		strb	r5, [sp, #2]
 839:Src/main.c    ****   BMSVINF_DATA[3] = (uint8_t) ((minV >> 8) & 0xFF);
 1665              		.loc 1 839 0
 1666 0082 320A     		lsrs	r2, r6, #8
 1667 0084 8DF80320 		strb	r2, [sp, #3]
 840:Src/main.c    ****   BMSVINF_DATA[4] = (uint8_t) (minV & 0xFF);
 1668              		.loc 1 840 0
 1669 0088 8DF80460 		strb	r6, [sp, #4]
 841:Src/main.c    ****   BMSVINF_DATA[5] = minCell;
 1670              		.loc 1 841 0
 1671 008c 8DF80540 		strb	r4, [sp, #5]
 842:Src/main.c    ****   BMSVINF_DATA[6] = (uint8_t) ((averageV >> 8) & 0xFF);
 1672              		.loc 1 842 0
 1673 0090 C3F30722 		ubfx	r2, r3, #8, #8
 1674 0094 8DF80620 		strb	r2, [sp, #6]
 843:Src/main.c    ****   BMSVINF_DATA[7] = (uint8_t) (averageV & 0xFF);
 1675              		.loc 1 843 0
ARM GAS  /tmp/cc2C1RGN.s 			page 48


 1676 0098 8DF80730 		strb	r3, [sp, #7]
 844:Src/main.c    **** 
 845:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxHeader, BMSVINF_DATA, &TxMailbox);
 1677              		.loc 1 845 0
 1678 009c 074B     		ldr	r3, .L93+12
 1679              	.LVL132:
 1680 009e 6A46     		mov	r2, sp
 1681 00a0 0748     		ldr	r0, .L93+16
 1682              	.LVL133:
 1683 00a2 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1684              	.LVL134:
 846:Src/main.c    **** 
 847:Src/main.c    **** }
 1685              		.loc 1 847 0
 1686 00a6 03B0     		add	sp, sp, #12
 1687              	.LCFI53:
 1688              		.cfi_def_cfa_offset 36
 1689              		@ sp needed
 1690 00a8 BDE8F040 		pop	{r4, r5, r6, r7, lr}
 1691              	.LCFI54:
 1692              		.cfi_restore 14
 1693              		.cfi_restore 7
 1694              		.cfi_restore 6
 1695              		.cfi_restore 5
 1696              		.cfi_restore 4
 1697              		.cfi_def_cfa_offset 16
 1698              	.LVL135:
 1699 00ac 04B0     		add	sp, sp, #16
 1700              	.LCFI55:
 1701              		.cfi_def_cfa_offset 0
 1702 00ae 7047     		bx	lr
 1703              	.L94:
 1704              		.align	2
 1705              	.L93:
 1706 00b0 00000000 		.word	sumOfCells
 1707 00b4 00000000 		.word	minimum
 1708 00b8 00000000 		.word	TxHeader
 1709 00bc 00000000 		.word	TxMailbox
 1710 00c0 00000000 		.word	hcan
 1711              		.cfi_endproc
 1712              	.LFE80:
 1714              		.section	.text.BMSTINF_message,"ax",%progbits
 1715              		.align	1
 1716              		.global	BMSTINF_message
 1717              		.syntax unified
 1718              		.thumb
 1719              		.thumb_func
 1720              		.fpu softvfp
 1722              	BMSTINF_message:
 1723              	.LFB81:
 848:Src/main.c    **** 
 849:Src/main.c    **** void BMSTINF_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]) {
 1724              		.loc 1 849 0
 1725              		.cfi_startproc
 1726              		@ args = 100, pretend = 16, frame = 8
 1727              		@ frame_needed = 0, uses_anonymous_args = 0
 1728              	.LVL136:
ARM GAS  /tmp/cc2C1RGN.s 			page 49


 1729 0000 84B0     		sub	sp, sp, #16
 1730              	.LCFI56:
 1731              		.cfi_def_cfa_offset 16
 1732 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 1733              	.LCFI57:
 1734              		.cfi_def_cfa_offset 36
 1735              		.cfi_offset 4, -36
 1736              		.cfi_offset 5, -32
 1737              		.cfi_offset 6, -28
 1738              		.cfi_offset 7, -24
 1739              		.cfi_offset 14, -20
 1740 0004 83B0     		sub	sp, sp, #12
 1741              	.LCFI58:
 1742              		.cfi_def_cfa_offset 48
 1743 0006 08AE     		add	r6, sp, #32
 1744 0008 86E80F00 		stm	r6, {r0, r1, r2, r3}
 1745 000c DDF880C0 		ldr	ip, [sp, #128]
 1746              	.LVL137:
 1747              	.LBB14:
 850:Src/main.c    **** 
 851:Src/main.c    ****   uint16_t cellTemp;
 852:Src/main.c    ****   uint16_t minT = 0xFFFF;
 853:Src/main.c    ****   uint8_t minCell;
 854:Src/main.c    ****   uint16_t maxT = 0x0000;
 855:Src/main.c    ****   uint8_t maxCell;
 856:Src/main.c    ****   uint16_t averageT;
 857:Src/main.c    ****   uint32_t sum = 0;
 858:Src/main.c    **** 
 859:Src/main.c    ****   for (uint8_t cell = 0; cell < 96; cell++) {
 1748              		.loc 1 859 0
 1749 0010 0022     		movs	r2, #0
 1750              	.LBE14:
 857:Src/main.c    **** 
 1751              		.loc 1 857 0
 1752 0012 1046     		mov	r0, r2
 854:Src/main.c    ****   uint8_t maxCell;
 1753              		.loc 1 854 0
 1754 0014 1746     		mov	r7, r2
 852:Src/main.c    ****   uint8_t minCell;
 1755              		.loc 1 852 0
 1756 0016 4FF6FF76 		movw	r6, #65535
 1757              	.LBB15:
 1758              		.loc 1 859 0
 1759 001a 02E0     		b	.L96
 1760              	.LVL138:
 1761              	.L98:
 860:Src/main.c    **** 
 861:Src/main.c    ****     cellTemp = 0;
 862:Src/main.c    ****     cellTemp = (uint16_t) (bmsData[cell][4]);
 863:Src/main.c    ****     cellTemp = cellTemp << 8;
 864:Src/main.c    **** 		cellTemp += (uint16_t) (bmsData[cell][5]);
 865:Src/main.c    **** 
 866:Src/main.c    ****     if (cellTemp < minT) {
 867:Src/main.c    ****       minT = cellTemp;
 868:Src/main.c    ****       minCell = cell + 1;
 869:Src/main.c    ****     }
 870:Src/main.c    **** 
ARM GAS  /tmp/cc2C1RGN.s 			page 50


 871:Src/main.c    ****     if (cellTemp > maxT) {
 872:Src/main.c    ****       maxT = cellTemp;
 873:Src/main.c    ****       maxCell = cell + 1;
 874:Src/main.c    ****     }
 875:Src/main.c    **** 
 876:Src/main.c    ****     sum += cellTemp;
 1762              		.loc 1 876 0 discriminator 2
 1763 001c 1844     		add	r0, r0, r3
 1764              	.LVL139:
 859:Src/main.c    **** 
 1765              		.loc 1 859 0 discriminator 2
 1766 001e 0132     		adds	r2, r2, #1
 1767              	.LVL140:
 1768 0020 D2B2     		uxtb	r2, r2
 1769              	.LVL141:
 1770              	.L96:
 859:Src/main.c    **** 
 1771              		.loc 1 859 0 is_stmt 0 discriminator 1
 1772 0022 5F2A     		cmp	r2, #95
 1773 0024 14D8     		bhi	.L101
 1774              	.LVL142:
 862:Src/main.c    ****     cellTemp = cellTemp << 8;
 1775              		.loc 1 862 0 is_stmt 1
 1776 0026 02EB4203 		add	r3, r2, r2, lsl #1
 1777 002a 5900     		lsls	r1, r3, #1
 1778 002c 6144     		add	r1, r1, ip
 1779 002e 91F804E0 		ldrb	lr, [r1, #4]	@ zero_extendqisi2
 1780              	.LVL143:
 864:Src/main.c    **** 
 1781              		.loc 1 864 0
 1782 0032 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 1783 0034 03EB0E23 		add	r3, r3, lr, lsl #8
 1784 0038 9BB2     		uxth	r3, r3
 1785              	.LVL144:
 866:Src/main.c    ****       minT = cellTemp;
 1786              		.loc 1 866 0
 1787 003a 9E42     		cmp	r6, r3
 1788 003c 02D9     		bls	.L97
 1789              	.LVL145:
 868:Src/main.c    ****     }
 1790              		.loc 1 868 0
 1791 003e 541C     		adds	r4, r2, #1
 1792              	.LVL146:
 1793 0040 E4B2     		uxtb	r4, r4
 1794              	.LVL147:
 867:Src/main.c    ****       minCell = cell + 1;
 1795              		.loc 1 867 0
 1796 0042 1E46     		mov	r6, r3
 1797              	.LVL148:
 1798              	.L97:
 871:Src/main.c    ****       maxT = cellTemp;
 1799              		.loc 1 871 0
 1800 0044 9F42     		cmp	r7, r3
 1801 0046 E9D2     		bcs	.L98
 1802              	.LVL149:
 873:Src/main.c    ****     }
 1803              		.loc 1 873 0
ARM GAS  /tmp/cc2C1RGN.s 			page 51


 1804 0048 551C     		adds	r5, r2, #1
 1805              	.LVL150:
 1806 004a EDB2     		uxtb	r5, r5
 1807              	.LVL151:
 872:Src/main.c    ****       maxCell = cell + 1;
 1808              		.loc 1 872 0
 1809 004c 1F46     		mov	r7, r3
 1810 004e E5E7     		b	.L98
 1811              	.LVL152:
 1812              	.L101:
 1813              	.LBE15:
 877:Src/main.c    ****   }
 878:Src/main.c    **** 
 879:Src/main.c    ****   averageT = (uint16_t) (sum / (cfg.numOfICs * cfg.numOfTempPerIC));
 1814              		.loc 1 879 0
 1815 0050 9DF82020 		ldrb	r2, [sp, #32]	@ zero_extendqisi2
 1816              	.LVL153:
 1817 0054 9DF84330 		ldrb	r3, [sp, #67]	@ zero_extendqisi2
 1818 0058 03FB02F3 		mul	r3, r3, r2
 1819 005c B0FBF3F3 		udiv	r3, r0, r3
 1820              	.LVL154:
 880:Src/main.c    **** 
 881:Src/main.c    ****   TxHeader.StdId = BMSTINF_ID;
 1821              		.loc 1 881 0
 1822 0060 1149     		ldr	r1, .L102
 1823 0062 0A22     		movs	r2, #10
 1824 0064 0A60     		str	r2, [r1]
 882:Src/main.c    ****   TxHeader.DLC = 8;
 1825              		.loc 1 882 0
 1826 0066 0822     		movs	r2, #8
 1827 0068 0A61     		str	r2, [r1, #16]
 883:Src/main.c    ****   uint8_t BMSTINF_DATA[8];
 884:Src/main.c    **** 
 885:Src/main.c    ****   BMSTINF_DATA[0] = (uint8_t) ((maxT >> 8) & 0xFF);
 1828              		.loc 1 885 0
 1829 006a 27FA02F2 		lsr	r2, r7, r2
 1830 006e 8DF80020 		strb	r2, [sp]
 886:Src/main.c    ****   BMSTINF_DATA[1] = (uint8_t) (maxT & 0xFF);
 1831              		.loc 1 886 0
 1832 0072 8DF80170 		strb	r7, [sp, #1]
 887:Src/main.c    ****   BMSTINF_DATA[2] = maxCell;
 1833              		.loc 1 887 0
 1834 0076 8DF80250 		strb	r5, [sp, #2]
 888:Src/main.c    ****   BMSTINF_DATA[3] = (uint8_t) ((minT >> 8) & 0xFF);
 1835              		.loc 1 888 0
 1836 007a 320A     		lsrs	r2, r6, #8
 1837 007c 8DF80320 		strb	r2, [sp, #3]
 889:Src/main.c    ****   BMSTINF_DATA[4] = (uint8_t) (minT & 0xFF);
 1838              		.loc 1 889 0
 1839 0080 8DF80460 		strb	r6, [sp, #4]
 890:Src/main.c    ****   BMSTINF_DATA[5] = minCell;
 1840              		.loc 1 890 0
 1841 0084 8DF80540 		strb	r4, [sp, #5]
 891:Src/main.c    ****   BMSTINF_DATA[6] = (uint8_t) ((averageT >> 8) & 0xFF);
 1842              		.loc 1 891 0
 1843 0088 C3F30722 		ubfx	r2, r3, #8, #8
 1844 008c 8DF80620 		strb	r2, [sp, #6]
ARM GAS  /tmp/cc2C1RGN.s 			page 52


 892:Src/main.c    ****   BMSTINF_DATA[7] = (uint8_t) (averageT & 0xFF);
 1845              		.loc 1 892 0
 1846 0090 8DF80730 		strb	r3, [sp, #7]
 893:Src/main.c    **** 
 894:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxHeader, BMSTINF_DATA, &TxMailbox);  
 1847              		.loc 1 894 0
 1848 0094 054B     		ldr	r3, .L102+4
 1849              	.LVL155:
 1850 0096 6A46     		mov	r2, sp
 1851 0098 0548     		ldr	r0, .L102+8
 1852              	.LVL156:
 1853 009a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1854              	.LVL157:
 895:Src/main.c    **** 
 896:Src/main.c    **** };
 1855              		.loc 1 896 0
 1856 009e 03B0     		add	sp, sp, #12
 1857              	.LCFI59:
 1858              		.cfi_def_cfa_offset 36
 1859              		@ sp needed
 1860 00a0 BDE8F040 		pop	{r4, r5, r6, r7, lr}
 1861              	.LCFI60:
 1862              		.cfi_restore 14
 1863              		.cfi_restore 7
 1864              		.cfi_restore 6
 1865              		.cfi_restore 5
 1866              		.cfi_restore 4
 1867              		.cfi_def_cfa_offset 16
 1868              	.LVL158:
 1869 00a4 04B0     		add	sp, sp, #16
 1870              	.LCFI61:
 1871              		.cfi_def_cfa_offset 0
 1872 00a6 7047     		bx	lr
 1873              	.L103:
 1874              		.align	2
 1875              	.L102:
 1876 00a8 00000000 		.word	TxHeader
 1877 00ac 00000000 		.word	TxMailbox
 1878 00b0 00000000 		.word	hcan
 1879              		.cfi_endproc
 1880              	.LFE81:
 1882              		.section	.text.main,"ax",%progbits
 1883              		.align	1
 1884              		.global	main
 1885              		.syntax unified
 1886              		.thumb
 1887              		.thumb_func
 1888              		.fpu softvfp
 1890              	main:
 1891              	.LFB66:
 110:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1892              		.loc 1 110 0
 1893              		.cfi_startproc
 1894              		@ args = 0, pretend = 0, frame = 776
 1895              		@ frame_needed = 0, uses_anonymous_args = 0
 1896 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1897              	.LCFI62:
ARM GAS  /tmp/cc2C1RGN.s 			page 53


 1898              		.cfi_def_cfa_offset 36
 1899              		.cfi_offset 4, -36
 1900              		.cfi_offset 5, -32
 1901              		.cfi_offset 6, -28
 1902              		.cfi_offset 7, -24
 1903              		.cfi_offset 8, -20
 1904              		.cfi_offset 9, -16
 1905              		.cfi_offset 10, -12
 1906              		.cfi_offset 11, -8
 1907              		.cfi_offset 14, -4
 1908 0004 ADF55B7D 		sub	sp, sp, #876
 1909              	.LCFI63:
 1910              		.cfi_def_cfa_offset 912
 118:Src/main.c    **** 
 1911              		.loc 1 118 0
 1912 0008 FFF7FEFF 		bl	HAL_Init
 1913              	.LVL159:
 125:Src/main.c    **** 
 1914              		.loc 1 125 0
 1915 000c FFF7FEFF 		bl	SystemClock_Config
 1916              	.LVL160:
 132:Src/main.c    ****   MX_ADC1_Init();
 1917              		.loc 1 132 0
 1918 0010 FFF7FEFF 		bl	MX_GPIO_Init
 1919              	.LVL161:
 133:Src/main.c    ****   MX_CAN_Init();
 1920              		.loc 1 133 0
 1921 0014 FFF7FEFF 		bl	MX_ADC1_Init
 1922              	.LVL162:
 134:Src/main.c    ****   //MX_SPI1_Init();
 1923              		.loc 1 134 0
 1924 0018 FFF7FEFF 		bl	MX_CAN_Init
 1925              	.LVL163:
 136:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1926              		.loc 1 136 0
 1927 001c FFF7FEFF 		bl	MX_TIM2_Init
 1928              	.LVL164:
 139:Src/main.c    ****   initPECTable();
 1929              		.loc 1 139 0
 1930 0020 FFF7FEFF 		bl	SPI_Init
 1931              	.LVL165:
 140:Src/main.c    ****   loadConfig(&BMSconfig);
 1932              		.loc 1 140 0
 1933 0024 FFF7FEFF 		bl	initPECTable
 1934              	.LVL166:
 141:Src/main.c    **** 
 1935              		.loc 1 141 0
 1936 0028 A648     		ldr	r0, .L111
 1937 002a FFF7FEFF 		bl	loadConfig
 1938              	.LVL167:
 1939 002e 73E0     		b	.L108
 1940              	.LVL168:
 1941              	.L110:
 187:Src/main.c    ****       
 1942              		.loc 1 187 0
 1943 0030 A449     		ldr	r1, .L111
 1944 0032 18AB     		add	r3, sp, #96
ARM GAS  /tmp/cc2C1RGN.s 			page 54


 1945 0034 1793     		str	r3, [sp, #92]
 1946 0036 1696     		str	r6, [sp, #88]
 1947 0038 30AB     		add	r3, sp, #192
 1948 003a 1593     		str	r3, [sp, #84]
 1949 003c 4AAB     		add	r3, sp, #296
 1950 003e 1493     		str	r3, [sp, #80]
 1951 0040 0F68     		ldr	r7, [r1]	@ unaligned
 1952 0042 4E68     		ldr	r6, [r1, #4]	@ unaligned
 1953              	.LVL169:
 1954 0044 8D68     		ldr	r5, [r1, #8]	@ unaligned
 1955              	.LVL170:
 1956 0046 CC68     		ldr	r4, [r1, #12]	@ unaligned
 1957 0048 4E22     		movs	r2, #78
 1958 004a 1031     		adds	r1, r1, #16
 1959 004c 6846     		mov	r0, sp
 1960              	.LVL171:
 1961 004e FFF7FEFF 		bl	memcpy
 1962              	.LVL172:
 1963 0052 3846     		mov	r0, r7
 1964 0054 3146     		mov	r1, r6
 1965 0056 2A46     		mov	r2, r5
 1966 0058 2346     		mov	r3, r4
 1967 005a FFF7FEFF 		bl	setDischarge
 1968              	.LVL173:
 1969 005e 03E1     		b	.L106
 1970              	.L107:
 196:Src/main.c    ****         dischargeCellGroups(BMSconfig, full_discharge);
 1971              		.loc 1 196 0
 1972 0060 984C     		ldr	r4, .L111
 1973 0062 4AAB     		add	r3, sp, #296
 1974 0064 1593     		str	r3, [sp, #84]
 1975 0066 18AF     		add	r7, sp, #96
 1976 0068 1497     		str	r7, [sp, #80]
 1977 006a D4F800B0 		ldr	fp, [r4]	@ unaligned
 1978 006e D4F804A0 		ldr	r10, [r4, #4]	@ unaligned
 1979 0072 D4F80890 		ldr	r9, [r4, #8]	@ unaligned
 1980 0076 D4F80C80 		ldr	r8, [r4, #12]	@ unaligned
 1981 007a 04F11005 		add	r5, r4, #16
 1982 007e 4E26     		movs	r6, #78
 1983 0080 3246     		mov	r2, r6
 1984 0082 2946     		mov	r1, r5
 1985 0084 6846     		mov	r0, sp
 1986 0086 FFF7FEFF 		bl	memcpy
 1987              	.LVL174:
 1988 008a 5846     		mov	r0, fp
 1989 008c 5146     		mov	r1, r10
 1990 008e 4A46     		mov	r2, r9
 1991 0090 4346     		mov	r3, r8
 1992 0092 FFF7FEFF 		bl	checkDischarge
 1993              	.LVL175:
 197:Src/main.c    ****         HAL_Delay(BMSconfig.dischargeTime);
 1994              		.loc 1 197 0
 1995 0096 1497     		str	r7, [sp, #80]
 1996 0098 D4F800A0 		ldr	r10, [r4]	@ unaligned
 1997 009c D4F80490 		ldr	r9, [r4, #4]	@ unaligned
 1998 00a0 D4F80880 		ldr	r8, [r4, #8]	@ unaligned
 1999 00a4 E768     		ldr	r7, [r4, #12]	@ unaligned
ARM GAS  /tmp/cc2C1RGN.s 			page 55


 2000 00a6 3246     		mov	r2, r6
 2001 00a8 2946     		mov	r1, r5
 2002 00aa 6846     		mov	r0, sp
 2003 00ac FFF7FEFF 		bl	memcpy
 2004              	.LVL176:
 2005 00b0 5046     		mov	r0, r10
 2006 00b2 4946     		mov	r1, r9
 2007 00b4 4246     		mov	r2, r8
 2008 00b6 3B46     		mov	r3, r7
 2009 00b8 FFF7FEFF 		bl	dischargeCellGroups
 2010              	.LVL177:
 198:Src/main.c    ****       }
 2011              		.loc 1 198 0
 2012 00bc A08E     		ldrh	r0, [r4, #52]
 2013 00be FFF7FEFF 		bl	HAL_Delay
 2014              	.LVL178:
 2015              	.L105:
 203:Src/main.c    ****     BMSSTAT_message(BMSconfig, BMS_STATUS);
 2016              		.loc 1 203 0
 2017 00c2 804C     		ldr	r4, .L111
 2018 00c4 4AAB     		add	r3, sp, #296
 2019 00c6 1493     		str	r3, [sp, #80]
 2020 00c8 D4F800A0 		ldr	r10, [r4]	@ unaligned
 2021 00cc D4F80490 		ldr	r9, [r4, #4]	@ unaligned
 2022 00d0 D4F80880 		ldr	r8, [r4, #8]	@ unaligned
 2023 00d4 E768     		ldr	r7, [r4, #12]	@ unaligned
 2024 00d6 04F11005 		add	r5, r4, #16
 2025 00da 4E26     		movs	r6, #78
 2026 00dc 3246     		mov	r2, r6
 2027 00de 2946     		mov	r1, r5
 2028 00e0 6846     		mov	r0, sp
 2029 00e2 FFF7FEFF 		bl	memcpy
 2030              	.LVL179:
 2031 00e6 5046     		mov	r0, r10
 2032 00e8 4946     		mov	r1, r9
 2033 00ea 4246     		mov	r2, r8
 2034 00ec 3B46     		mov	r3, r7
 2035 00ee FFF7FEFF 		bl	CELLVAL_message
 2036              	.LVL180:
 204:Src/main.c    ****     PACKSTAT_message(BMSconfig, BMS_DATA);
 2037              		.loc 1 204 0
 2038 00f2 48AB     		add	r3, sp, #288
 2039 00f4 1493     		str	r3, [sp, #80]
 2040 00f6 D4F80090 		ldr	r9, [r4]	@ unaligned
 2041 00fa D4F80480 		ldr	r8, [r4, #4]	@ unaligned
 2042 00fe A768     		ldr	r7, [r4, #8]	@ unaligned
 2043 0100 E468     		ldr	r4, [r4, #12]	@ unaligned
 2044 0102 3246     		mov	r2, r6
 2045 0104 2946     		mov	r1, r5
 2046 0106 6846     		mov	r0, sp
 2047 0108 FFF7FEFF 		bl	memcpy
 2048              	.LVL181:
 2049 010c 4846     		mov	r0, r9
 2050 010e 4146     		mov	r1, r8
 2051 0110 3A46     		mov	r2, r7
 2052 0112 2346     		mov	r3, r4
 2053 0114 FFF7FEFF 		bl	BMSSTAT_message
ARM GAS  /tmp/cc2C1RGN.s 			page 56


 2054              	.LVL182:
 2055              	.L108:
 163:Src/main.c    **** 
 2056              		.loc 1 163 0
 2057 0118 6A4C     		ldr	r4, .L111
 2058 011a D4F800A0 		ldr	r10, [r4]	@ unaligned
 2059 011e D4F80490 		ldr	r9, [r4, #4]	@ unaligned
 2060 0122 D4F80880 		ldr	r8, [r4, #8]	@ unaligned
 2061 0126 E768     		ldr	r7, [r4, #12]	@ unaligned
 2062 0128 04F11005 		add	r5, r4, #16
 2063 012c 4E26     		movs	r6, #78
 2064 012e 3246     		mov	r2, r6
 2065 0130 2946     		mov	r1, r5
 2066 0132 6846     		mov	r0, sp
 2067 0134 FFF7FEFF 		bl	memcpy
 2068              	.LVL183:
 2069 0138 5046     		mov	r0, r10
 2070 013a 4946     		mov	r1, r9
 2071 013c 4246     		mov	r2, r8
 2072 013e 3B46     		mov	r3, r7
 2073 0140 FFF7FEFF 		bl	writeConfigAll
 2074              	.LVL184:
 166:Src/main.c    **** 
 2075              		.loc 1 166 0
 2076 0144 6420     		movs	r0, #100
 2077 0146 FFF7FEFF 		bl	HAL_Delay
 2078              	.LVL185:
 169:Src/main.c    ****     BMSVINF_message(BMSconfig, BMS_DATA);
 2079              		.loc 1 169 0
 2080 014a 4AAF     		add	r7, sp, #296
 2081 014c 1497     		str	r7, [sp, #80]
 2082 014e D4F800B0 		ldr	fp, [r4]	@ unaligned
 2083 0152 D4F804A0 		ldr	r10, [r4, #4]	@ unaligned
 2084 0156 D4F80890 		ldr	r9, [r4, #8]	@ unaligned
 2085 015a D4F80C80 		ldr	r8, [r4, #12]	@ unaligned
 2086 015e 3246     		mov	r2, r6
 2087 0160 2946     		mov	r1, r5
 2088 0162 6846     		mov	r0, sp
 2089 0164 FFF7FEFF 		bl	memcpy
 2090              	.LVL186:
 2091 0168 5846     		mov	r0, fp
 2092 016a 5146     		mov	r1, r10
 2093 016c 4A46     		mov	r2, r9
 2094 016e 4346     		mov	r3, r8
 2095 0170 FFF7FEFF 		bl	readAllCellVoltages
 2096              	.LVL187:
 170:Src/main.c    **** 
 2097              		.loc 1 170 0
 2098 0174 1497     		str	r7, [sp, #80]
 2099 0176 D4F800B0 		ldr	fp, [r4]	@ unaligned
 2100 017a D4F804A0 		ldr	r10, [r4, #4]	@ unaligned
 2101 017e D4F80890 		ldr	r9, [r4, #8]	@ unaligned
 2102 0182 D4F80C80 		ldr	r8, [r4, #12]	@ unaligned
 2103 0186 3246     		mov	r2, r6
 2104 0188 2946     		mov	r1, r5
 2105 018a 6846     		mov	r0, sp
 2106 018c FFF7FEFF 		bl	memcpy
ARM GAS  /tmp/cc2C1RGN.s 			page 57


 2107              	.LVL188:
 2108 0190 5846     		mov	r0, fp
 2109 0192 5146     		mov	r1, r10
 2110 0194 4A46     		mov	r2, r9
 2111 0196 4346     		mov	r3, r8
 2112 0198 FFF7FEFF 		bl	BMSVINF_message
 2113              	.LVL189:
 173:Src/main.c    ****     BMSTINF_message(BMSconfig, BMS_DATA);
 2114              		.loc 1 173 0
 2115 019c 1497     		str	r7, [sp, #80]
 2116 019e D4F800B0 		ldr	fp, [r4]	@ unaligned
 2117 01a2 D4F804A0 		ldr	r10, [r4, #4]	@ unaligned
 2118 01a6 D4F80890 		ldr	r9, [r4, #8]	@ unaligned
 2119 01aa D4F80C80 		ldr	r8, [r4, #12]	@ unaligned
 2120 01ae 3246     		mov	r2, r6
 2121 01b0 2946     		mov	r1, r5
 2122 01b2 6846     		mov	r0, sp
 2123 01b4 FFF7FEFF 		bl	memcpy
 2124              	.LVL190:
 2125 01b8 5846     		mov	r0, fp
 2126 01ba 5146     		mov	r1, r10
 2127 01bc 4A46     		mov	r2, r9
 2128 01be 4346     		mov	r3, r8
 2129 01c0 FFF7FEFF 		bl	readAllCellTemps
 2130              	.LVL191:
 174:Src/main.c    **** 
 2131              		.loc 1 174 0
 2132 01c4 1497     		str	r7, [sp, #80]
 2133 01c6 D4F800B0 		ldr	fp, [r4]	@ unaligned
 2134 01ca D4F804A0 		ldr	r10, [r4, #4]	@ unaligned
 2135 01ce D4F80890 		ldr	r9, [r4, #8]	@ unaligned
 2136 01d2 D4F80C80 		ldr	r8, [r4, #12]	@ unaligned
 2137 01d6 3246     		mov	r2, r6
 2138 01d8 2946     		mov	r1, r5
 2139 01da 6846     		mov	r0, sp
 2140 01dc FFF7FEFF 		bl	memcpy
 2141              	.LVL192:
 2142 01e0 5846     		mov	r0, fp
 2143 01e2 5146     		mov	r1, r10
 2144 01e4 4A46     		mov	r2, r9
 2145 01e6 4346     		mov	r3, r8
 2146 01e8 FFF7FEFF 		bl	BMSTINF_message
 2147              	.LVL193:
 177:Src/main.c    ****     BMS_FAULT = FAULT_check(BMSconfig, BMS_DATA, BMS_STATUS);
 2148              		.loc 1 177 0
 2149 01ec 1497     		str	r7, [sp, #80]
 2150 01ee D4F800B0 		ldr	fp, [r4]	@ unaligned
 2151 01f2 D4F804A0 		ldr	r10, [r4, #4]	@ unaligned
 2152 01f6 D4F80890 		ldr	r9, [r4, #8]	@ unaligned
 2153 01fa D4F80C80 		ldr	r8, [r4, #12]	@ unaligned
 2154 01fe 3246     		mov	r2, r6
 2155 0200 2946     		mov	r1, r5
 2156 0202 6846     		mov	r0, sp
 2157 0204 FFF7FEFF 		bl	memcpy
 2158              	.LVL194:
 2159 0208 5846     		mov	r0, fp
 2160 020a 5146     		mov	r1, r10
ARM GAS  /tmp/cc2C1RGN.s 			page 58


 2161 020c 4A46     		mov	r2, r9
 2162 020e 4346     		mov	r3, r8
 2163 0210 FFF7FEFF 		bl	checkAllCellConnections
 2164              	.LVL195:
 178:Src/main.c    **** 
 2165              		.loc 1 178 0
 2166 0214 48AB     		add	r3, sp, #288
 2167 0216 1593     		str	r3, [sp, #84]
 2168 0218 1497     		str	r7, [sp, #80]
 2169 021a D4F80090 		ldr	r9, [r4]	@ unaligned
 2170 021e D4F80480 		ldr	r8, [r4, #4]	@ unaligned
 2171 0222 A768     		ldr	r7, [r4, #8]	@ unaligned
 2172 0224 E468     		ldr	r4, [r4, #12]	@ unaligned
 2173 0226 3246     		mov	r2, r6
 2174 0228 2946     		mov	r1, r5
 2175 022a 6846     		mov	r0, sp
 2176 022c FFF7FEFF 		bl	memcpy
 2177              	.LVL196:
 2178 0230 4846     		mov	r0, r9
 2179 0232 4146     		mov	r1, r8
 2180 0234 3A46     		mov	r2, r7
 2181 0236 2346     		mov	r3, r4
 2182 0238 FFF7FEFF 		bl	FAULT_check
 2183              	.LVL197:
 2184 023c 0646     		mov	r6, r0
 2185              	.LVL198:
 181:Src/main.c    ****     CHARGE_EN = HAL_GPIO_ReadPin(GPIOB, CHARGE_EN_Pin);
 2186              		.loc 1 181 0
 2187 023e 224C     		ldr	r4, .L111+4
 2188 0240 2021     		movs	r1, #32
 2189 0242 2046     		mov	r0, r4
 2190 0244 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2191              	.LVL199:
 2192 0248 0546     		mov	r5, r0
 2193              	.LVL200:
 182:Src/main.c    **** 
 2194              		.loc 1 182 0
 2195 024a 0821     		movs	r1, #8
 2196 024c 2046     		mov	r0, r4
 2197 024e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2198              	.LVL201:
 184:Src/main.c    **** 
 2199              		.loc 1 184 0
 2200 0252 002D     		cmp	r5, #0
 2201 0254 7FF435AF 		bne	.L105
 184:Src/main.c    **** 
 2202              		.loc 1 184 0 is_stmt 0 discriminator 1
 2203 0258 0028     		cmp	r0, #0
 2204 025a 7FF432AF 		bne	.L105
 186:Src/main.c    ****         setDischarge(BMSconfig, BMS_DATA, discharge, BMS_FAULT, full_discharge);
 2205              		.loc 1 186 0 is_stmt 1
 2206 025e 1B4B     		ldr	r3, .L111+8
 2207 0260 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2208 0262 002B     		cmp	r3, #0
 2209 0264 7FF4E4AE 		bne	.L110
 2210              	.LVL202:
 2211              	.L106:
ARM GAS  /tmp/cc2C1RGN.s 			page 59


 189:Src/main.c    **** 
 2212              		.loc 1 189 0
 2213 0268 1649     		ldr	r1, .L111
 2214 026a 0F68     		ldr	r7, [r1]	@ unaligned
 2215 026c 4E68     		ldr	r6, [r1, #4]	@ unaligned
 2216 026e 8D68     		ldr	r5, [r1, #8]	@ unaligned
 2217 0270 CC68     		ldr	r4, [r1, #12]	@ unaligned
 2218 0272 4E22     		movs	r2, #78
 2219 0274 1031     		adds	r1, r1, #16
 2220 0276 6846     		mov	r0, sp
 2221 0278 FFF7FEFF 		bl	memcpy
 2222              	.LVL203:
 2223 027c 3846     		mov	r0, r7
 2224 027e 3146     		mov	r1, r6
 2225 0280 2A46     		mov	r2, r5
 2226 0282 2346     		mov	r3, r4
 2227 0284 FFF7FEFF 		bl	setChargerTxData
 2228              	.LVL204:
 191:Src/main.c    ****         dischargeCellGroups(BMSconfig, discharge);
 2229              		.loc 1 191 0
 2230 0288 104B     		ldr	r3, .L111+8
 2231 028a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2232 028c 002B     		cmp	r3, #0
 2233 028e 3FF4E7AE 		beq	.L107
 192:Src/main.c    ****         HAL_Delay(BMSconfig.dischargeTime);
 2234              		.loc 1 192 0
 2235 0292 0C4C     		ldr	r4, .L111
 2236 0294 30AB     		add	r3, sp, #192
 2237 0296 1493     		str	r3, [sp, #80]
 2238 0298 D4F80080 		ldr	r8, [r4]	@ unaligned
 2239 029c 6768     		ldr	r7, [r4, #4]	@ unaligned
 2240 029e A668     		ldr	r6, [r4, #8]	@ unaligned
 2241 02a0 E568     		ldr	r5, [r4, #12]	@ unaligned
 2242 02a2 4E22     		movs	r2, #78
 2243 02a4 04F11001 		add	r1, r4, #16
 2244 02a8 6846     		mov	r0, sp
 2245 02aa FFF7FEFF 		bl	memcpy
 2246              	.LVL205:
 2247 02ae 4046     		mov	r0, r8
 2248 02b0 3946     		mov	r1, r7
 2249 02b2 3246     		mov	r2, r6
 2250 02b4 2B46     		mov	r3, r5
 2251 02b6 FFF7FEFF 		bl	dischargeCellGroups
 2252              	.LVL206:
 193:Src/main.c    ****       }
 2253              		.loc 1 193 0
 2254 02ba A08E     		ldrh	r0, [r4, #52]
 2255 02bc FFF7FEFF 		bl	HAL_Delay
 2256              	.LVL207:
 2257 02c0 FFE6     		b	.L105
 2258              	.L112:
 2259 02c2 00BF     		.align	2
 2260              	.L111:
 2261 02c4 00000000 		.word	BMSconfig
 2262 02c8 000C0140 		.word	1073810432
 2263 02cc 00000000 		.word	.LANCHOR0
 2264              		.cfi_endproc
ARM GAS  /tmp/cc2C1RGN.s 			page 60


 2265              	.LFE66:
 2267              		.section	.text.PACKSTAT_message,"ax",%progbits
 2268              		.align	1
 2269              		.global	PACKSTAT_message
 2270              		.syntax unified
 2271              		.thumb
 2272              		.thumb_func
 2273              		.fpu softvfp
 2275              	PACKSTAT_message:
 2276              	.LFB82:
 897:Src/main.c    **** 
 898:Src/main.c    **** void PACKSTAT_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]) {
 2277              		.loc 1 898 0
 2278              		.cfi_startproc
 2279              		@ args = 100, pretend = 16, frame = 0
 2280              		@ frame_needed = 0, uses_anonymous_args = 0
 2281              		@ link register save eliminated.
 2282              	.LVL208:
 2283 0000 84B0     		sub	sp, sp, #16
 2284              	.LCFI64:
 2285              		.cfi_def_cfa_offset 16
 2286 0002 8DE80F00 		stm	sp, {r0, r1, r2, r3}
 899:Src/main.c    **** 
 900:Src/main.c    ****   //read current sensor
 901:Src/main.c    **** 
 902:Src/main.c    ****   //use sumOfCells
 903:Src/main.c    **** 
 904:Src/main.c    **** }
 2287              		.loc 1 904 0
 2288 0006 04B0     		add	sp, sp, #16
 2289              	.LCFI65:
 2290              		.cfi_def_cfa_offset 0
 2291 0008 7047     		bx	lr
 2292              		.cfi_endproc
 2293              	.LFE82:
 2295              		.section	.text.Error_Handler,"ax",%progbits
 2296              		.align	1
 2297              		.global	Error_Handler
 2298              		.syntax unified
 2299              		.thumb
 2300              		.thumb_func
 2301              		.fpu softvfp
 2303              	Error_Handler:
 2304              	.LFB83:
 905:Src/main.c    **** 
 906:Src/main.c    **** /* USER CODE END 4 */
 907:Src/main.c    **** 
 908:Src/main.c    **** /**
 909:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 910:Src/main.c    ****   * @retval None
 911:Src/main.c    ****   */
 912:Src/main.c    **** void Error_Handler(void)
 913:Src/main.c    **** {
 2305              		.loc 1 913 0
 2306              		.cfi_startproc
 2307              		@ args = 0, pretend = 0, frame = 0
 2308              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc2C1RGN.s 			page 61


 2309              		@ link register save eliminated.
 914:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 915:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 916:Src/main.c    **** 
 917:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 918:Src/main.c    **** }
 2310              		.loc 1 918 0
 2311 0000 7047     		bx	lr
 2312              		.cfi_endproc
 2313              	.LFE83:
 2315              		.global	chargeRate
 2316              		.comm	sumOfCells,4,4
 2317              		.comm	minimum,2,2
 2318              		.comm	BMSSTAT_DATA,6,4
 2319              		.comm	CELLVAL_DATA,6,4
 2320              		.comm	ChargerTxData,8,4
 2321              		.comm	ChargerTxHeader,24,4
 2322              		.comm	TxMailbox,4,4
 2323              		.comm	RxData,8,4
 2324              		.comm	TxData,8,4
 2325              		.comm	RxHeader,28,4
 2326              		.comm	TxHeader,24,4
 2327              		.comm	BMSconfig,94,4
 2328              		.comm	CommandCode,2,2
 2329              		.comm	htim2,64,4
 2330              		.comm	hspi1,88,4
 2331              		.comm	hcan,40,4
 2332              		.comm	hadc1,48,4
 2333              		.section	.data.chargeRate,"aw",%progbits
 2334              		.set	.LANCHOR0,. + 0
 2337              	chargeRate:
 2338 0000 02       		.byte	2
 2339              		.text
 2340              	.Letext0:
 2341              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2342              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2343              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 2344              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2345              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 2346              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2347              		.file 8 "/usr/include/newlib/sys/lock.h"
 2348              		.file 9 "/usr/include/newlib/sys/_types.h"
 2349              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 2350              		.file 11 "/usr/include/newlib/sys/reent.h"
 2351              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2352              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 2353              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2354              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 2355              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2356              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 2357              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 2358              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 2359              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 2360              		.file 21 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 2361              		.file 22 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2362              		.file 23 "/usr/include/newlib/stdlib.h"
 2363              		.file 24 "Inc/BMSconfig.h"
ARM GAS  /tmp/cc2C1RGN.s 			page 62


 2364              		.file 25 "/usr/include/newlib/math.h"
 2365              		.file 26 "Inc/LTC6811.h"
 2366              		.file 27 "<built-in>"
 2367              		.file 28 "Inc/SPI.h"
ARM GAS  /tmp/cc2C1RGN.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc2C1RGN.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc2C1RGN.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc2C1RGN.s:175    .text.MX_GPIO_Init:00000000000000e0 $d
     /tmp/cc2C1RGN.s:183    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc2C1RGN.s:189    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc2C1RGN.s:253    .text.MX_ADC1_Init:0000000000000040 $d
                            *COM*:0000000000000030 hadc1
     /tmp/cc2C1RGN.s:259    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/cc2C1RGN.s:265    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/cc2C1RGN.s:385    .text.MX_CAN_Init:0000000000000088 $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 TxHeader
                            *COM*:0000000000000018 ChargerTxHeader
     /tmp/cc2C1RGN.s:394    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/cc2C1RGN.s:400    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/cc2C1RGN.s:474    .text.MX_TIM2_Init:0000000000000058 $d
                            *COM*:0000000000000040 htim2
     /tmp/cc2C1RGN.s:479    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc2C1RGN.s:486    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc2C1RGN.s:566    .text.FAULT_check:0000000000000000 $t
     /tmp/cc2C1RGN.s:573    .text.FAULT_check:0000000000000000 FAULT_check
     /tmp/cc2C1RGN.s:823    .text.FAULT_check:0000000000000134 $d
     /tmp/cc2C1RGN.s:831    .text.balancingThreshold:0000000000000000 $t
     /tmp/cc2C1RGN.s:838    .text.balancingThreshold:0000000000000000 balancingThreshold
     /tmp/cc2C1RGN.s:916    .text.balancingThreshold:0000000000000058 $d
                            *COM*:0000000000000002 minimum
     /tmp/cc2C1RGN.s:922    .text.setDischarge:0000000000000000 $t
     /tmp/cc2C1RGN.s:929    .text.setDischarge:0000000000000000 setDischarge
     /tmp/cc2C1RGN.s:1132   .text.setDischarge:0000000000000114 $d
     /tmp/cc2C1RGN.s:1138   .text.checkDischarge:0000000000000000 $t
     /tmp/cc2C1RGN.s:1145   .text.checkDischarge:0000000000000000 checkDischarge
     /tmp/cc2C1RGN.s:1265   .text.checkDischarge:0000000000000074 $d
     /tmp/cc2C1RGN.s:1271   .text.setChargerTxData:0000000000000000 $t
     /tmp/cc2C1RGN.s:1278   .text.setChargerTxData:0000000000000000 setChargerTxData
     /tmp/cc2C1RGN.s:1366   .text.setChargerTxData:0000000000000068 $d
                            *COM*:0000000000000008 ChargerTxData
                            *COM*:0000000000000004 TxMailbox
     /tmp/cc2C1RGN.s:1375   .text.CELLVAL_message:0000000000000000 $t
     /tmp/cc2C1RGN.s:1382   .text.CELLVAL_message:0000000000000000 CELLVAL_message
     /tmp/cc2C1RGN.s:1474   .text.CELLVAL_message:000000000000005c $d
                            *COM*:0000000000000006 CELLVAL_DATA
     /tmp/cc2C1RGN.s:1482   .text.BMSSTAT_message:0000000000000000 $t
     /tmp/cc2C1RGN.s:1489   .text.BMSSTAT_message:0000000000000000 BMSSTAT_message
     /tmp/cc2C1RGN.s:1532   .text.BMSSTAT_message:0000000000000028 $d
     /tmp/cc2C1RGN.s:1539   .text.BMSVINF_message:0000000000000000 $t
     /tmp/cc2C1RGN.s:1546   .text.BMSVINF_message:0000000000000000 BMSVINF_message
     /tmp/cc2C1RGN.s:1706   .text.BMSVINF_message:00000000000000b0 $d
                            *COM*:0000000000000004 sumOfCells
     /tmp/cc2C1RGN.s:1715   .text.BMSTINF_message:0000000000000000 $t
     /tmp/cc2C1RGN.s:1722   .text.BMSTINF_message:0000000000000000 BMSTINF_message
     /tmp/cc2C1RGN.s:1876   .text.BMSTINF_message:00000000000000a8 $d
     /tmp/cc2C1RGN.s:1883   .text.main:0000000000000000 $t
     /tmp/cc2C1RGN.s:1890   .text.main:0000000000000000 main
     /tmp/cc2C1RGN.s:2261   .text.main:00000000000002c4 $d
                            *COM*:000000000000005e BMSconfig
ARM GAS  /tmp/cc2C1RGN.s 			page 64


     /tmp/cc2C1RGN.s:2268   .text.PACKSTAT_message:0000000000000000 $t
     /tmp/cc2C1RGN.s:2275   .text.PACKSTAT_message:0000000000000000 PACKSTAT_message
     /tmp/cc2C1RGN.s:2296   .text.Error_Handler:0000000000000000 $t
     /tmp/cc2C1RGN.s:2303   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc2C1RGN.s:2337   .data.chargeRate:0000000000000000 chargeRate
                            *COM*:0000000000000006 BMSSTAT_DATA
                            *COM*:0000000000000008 RxData
                            *COM*:0000000000000008 TxData
                            *COM*:000000000000001c RxHeader
                            *COM*:0000000000000002 CommandCode
                            *COM*:0000000000000058 hspi1

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_Base_Start
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
__aeabi_i2f
__aeabi_fdiv
__aeabi_f2uiz
memcpy
HAL_CAN_AddTxMessage
HAL_Delay
HAL_Init
SPI_Init
initPECTable
loadConfig
dischargeCellGroups
writeConfigAll
readAllCellVoltages
readAllCellTemps
checkAllCellConnections
HAL_GPIO_ReadPin

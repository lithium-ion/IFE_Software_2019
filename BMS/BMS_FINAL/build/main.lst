ARM GAS  /tmp/ccGgKFCb.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB72:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "LTC6811.h"
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccGgKFCb.s 			page 2


  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** #define CELLVAL_ID      0x007
  37:Src/main.c    **** #define BMSSTAT_ID      0x008
  38:Src/main.c    **** #define BMSVINF_ID      0x009
  39:Src/main.c    **** #define BMSTINF_ID      0x00A
  40:Src/main.c    **** #define PACKSTAT_ID     0x00B
  41:Src/main.c    **** #define CHARGER_ID      0x1806E5F4
  42:Src/main.c    **** /* USER CODE END PD */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE END PM */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  50:Src/main.c    **** ADC_HandleTypeDef hadc1;
  51:Src/main.c    **** 
  52:Src/main.c    **** CAN_HandleTypeDef hcan;
  53:Src/main.c    **** 
  54:Src/main.c    **** SPI_HandleTypeDef hspi1;
  55:Src/main.c    **** 
  56:Src/main.c    **** TIM_HandleTypeDef htim2;
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE BEGIN PV */
  59:Src/main.c    **** CommandCodeTypedef      CommandCode;
  60:Src/main.c    **** BMSconfigStructTypedef  BMSconfig;
  61:Src/main.c    **** 
  62:Src/main.c    **** CAN_TxHeaderTypeDef     TxHeader;
  63:Src/main.c    **** CAN_RxHeaderTypeDef     RxHeader;
  64:Src/main.c    **** uint8_t                 TxData[8];
  65:Src/main.c    **** uint8_t                 RxData[8];
  66:Src/main.c    **** uint32_t                TxMailbox;
  67:Src/main.c    **** 
  68:Src/main.c    **** CAN_TxHeaderTypeDef     ChargerTxHeader;
  69:Src/main.c    **** uint8_t                 ChargerTxData[8];
  70:Src/main.c    **** 
  71:Src/main.c    **** uint8_t                 CELLVAL_DATA[6];
  72:Src/main.c    **** uint8_t                 BMSSTAT_DATA[6];
  73:Src/main.c    **** 
  74:Src/main.c    **** uint16_t                minimum;
  75:Src/main.c    **** uint32_t                sumOfCells;
  76:Src/main.c    **** uint8_t                 chargeRate = 2;
  77:Src/main.c    **** 
  78:Src/main.c    **** /* USER CODE END PV */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  81:Src/main.c    **** void SystemClock_Config(void);
  82:Src/main.c    **** static void MX_GPIO_Init(void);
  83:Src/main.c    **** static void MX_ADC1_Init(void);
  84:Src/main.c    **** static void MX_CAN_Init(void);
  85:Src/main.c    **** static void MX_SPI1_Init(void);
  86:Src/main.c    **** static void MX_TIM2_Init(void);
  87:Src/main.c    **** /* USER CODE BEGIN PFP */
  88:Src/main.c    **** bool FAULT_check(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6], uint8_t bmsStatus[6]);
  89:Src/main.c    **** void setDischarge(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6], bool cellDischarge[12][8], bo
  90:Src/main.c    **** void checkDischarge(BMSconfigStructTypedef cfg, bool fullDischarge[12][8], uint8_t bmsData[96][6]);
  91:Src/main.c    **** uint16_t balancingThreshold(BMSconfigStructTypedef cfg);
ARM GAS  /tmp/ccGgKFCb.s 			page 3


  92:Src/main.c    **** void setChargerTxData(BMSconfigStructTypedef cfg);
  93:Src/main.c    **** void CELLVAL_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]);
  94:Src/main.c    **** void BMSVINF_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]);
  95:Src/main.c    **** void BMSTINF_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]);
  96:Src/main.c    **** void BMSSTAT_message(BMSconfigStructTypedef cfg, uint8_t bmsStatus[6]);
  97:Src/main.c    **** void PACKSTAT_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]);
  98:Src/main.c    **** /* USER CODE END PFP */
  99:Src/main.c    **** 
 100:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 101:Src/main.c    **** /* USER CODE BEGIN 0 */
 102:Src/main.c    **** 
 103:Src/main.c    **** /* USER CODE END 0 */
 104:Src/main.c    **** 
 105:Src/main.c    **** /**
 106:Src/main.c    ****   * @brief  The application entry point.
 107:Src/main.c    ****   * @retval int
 108:Src/main.c    ****   */
 109:Src/main.c    **** int main(void)
 110:Src/main.c    **** {
 111:Src/main.c    ****   /* USER CODE BEGIN 1 */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* USER CODE END 1 */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 118:Src/main.c    ****   HAL_Init();
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* USER CODE BEGIN Init */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE END Init */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* Configure the system clock */
 125:Src/main.c    ****   SystemClock_Config();
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* USER CODE END SysInit */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* Initialize all configured peripherals */
 132:Src/main.c    ****   MX_GPIO_Init();
 133:Src/main.c    ****   MX_ADC1_Init();
 134:Src/main.c    ****   MX_CAN_Init();
 135:Src/main.c    ****   //MX_SPI1_Init();
 136:Src/main.c    ****   MX_TIM2_Init();
 137:Src/main.c    ****   /* USER CODE BEGIN 2 */
 138:Src/main.c    **** 
 139:Src/main.c    ****   SPI_Init();
 140:Src/main.c    ****   initPECTable();
 141:Src/main.c    ****   loadConfig(&BMSconfig);
 142:Src/main.c    **** 
 143:Src/main.c    ****   uint8_t BMS_DATA[96][6];
 144:Src/main.c    ****   uint8_t BMS_STATUS[6];
 145:Src/main.c    ****   bool discharge[12][8];
 146:Src/main.c    ****   bool full_discharge[12][8];
 147:Src/main.c    **** 
 148:Src/main.c    ****   bool AIR = 0;
ARM GAS  /tmp/ccGgKFCb.s 			page 4


 149:Src/main.c    ****   bool CHARGE_EN = 0;
 150:Src/main.c    ****   bool BMS_FAULT = 0;
 151:Src/main.c    **** 
 152:Src/main.c    ****   /* USER CODE END 2 */
 153:Src/main.c    **** 
 154:Src/main.c    ****   /* Infinite loop */
 155:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 156:Src/main.c    ****   while (1)
 157:Src/main.c    ****   {
 158:Src/main.c    ****     /* USER CODE END WHILE */
 159:Src/main.c    **** 
 160:Src/main.c    ****     /* USER CODE BEGIN 3 */
 161:Src/main.c    **** 
 162:Src/main.c    ****     //reset config registers
 163:Src/main.c    ****     writeConfigAll(BMSconfig);
 164:Src/main.c    **** 
 165:Src/main.c    ****     //wait 100ms
 166:Src/main.c    ****     HAL_Delay(100);
 167:Src/main.c    **** 
 168:Src/main.c    ****     //read all cell voltages, send BMSVINF message
 169:Src/main.c    ****     readAllCellVoltages(BMSconfig, BMS_DATA);
 170:Src/main.c    ****     BMSVINF_message(BMSconfig, BMS_DATA);
 171:Src/main.c    **** 
 172:Src/main.c    ****     //read all cell temps, send BMSTINF message
 173:Src/main.c    ****     readAllCellTemps(BMSconfig, BMS_DATA);
 174:Src/main.c    ****     BMSTINF_message(BMSconfig, BMS_DATA);
 175:Src/main.c    **** 
 176:Src/main.c    ****     //check for faults (cell DC, cell OV, cell UV, cell OT, cell TDC, invalid PEC, no charger comm)
 177:Src/main.c    ****     checkAllCellConnections(BMSconfig, BMS_DATA);
 178:Src/main.c    ****     BMS_FAULT = FAULT_check(BMSconfig, BMS_DATA, BMS_STATUS);
 179:Src/main.c    **** 
 180:Src/main.c    ****     //if AIR and CHARGE_EN are low, pack is charging
 181:Src/main.c    ****     AIR = HAL_GPIO_ReadPin(GPIOB, AIR_Pin);
 182:Src/main.c    ****     CHARGE_EN = HAL_GPIO_ReadPin(GPIOB, CHARGE_EN_Pin);
 183:Src/main.c    **** 
 184:Src/main.c    ****     if (/*(AIR == 0) && */(CHARGE_EN == 0)) {
 185:Src/main.c    **** 
 186:Src/main.c    ****       if (chargeRate != 0)
 187:Src/main.c    ****         setDischarge(BMSconfig, BMS_DATA, discharge, BMS_FAULT, full_discharge);
 188:Src/main.c    ****       
 189:Src/main.c    ****       setChargerTxData(BMSconfig);
 190:Src/main.c    **** 
 191:Src/main.c    ****       if (chargeRate != 0) {
 192:Src/main.c    ****         dischargeCellGroups(BMSconfig, discharge);
 193:Src/main.c    ****         HAL_Delay(BMSconfig.dischargeTime);
 194:Src/main.c    ****       }
 195:Src/main.c    ****       else {
 196:Src/main.c    ****         checkDischarge(BMSconfig, full_discharge, BMS_DATA);
 197:Src/main.c    ****         dischargeCellGroups(BMSconfig, full_discharge);
 198:Src/main.c    ****         HAL_Delay(BMSconfig.dischargeTime);
 199:Src/main.c    ****       }
 200:Src/main.c    ****     }
 201:Src/main.c    **** 
 202:Src/main.c    ****     //send remaining CAN messages
 203:Src/main.c    ****     CELLVAL_message(BMSconfig, BMS_DATA);
 204:Src/main.c    ****     BMSSTAT_message(BMSconfig, BMS_STATUS);
 205:Src/main.c    ****     PACKSTAT_message(BMSconfig, BMS_DATA);
ARM GAS  /tmp/ccGgKFCb.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    ****   }
 208:Src/main.c    ****   /* USER CODE END 3 */
 209:Src/main.c    **** }
 210:Src/main.c    **** 
 211:Src/main.c    **** /**
 212:Src/main.c    ****   * @brief System Clock Configuration
 213:Src/main.c    ****   * @retval None
 214:Src/main.c    ****   */
 215:Src/main.c    **** void SystemClock_Config(void)
 216:Src/main.c    **** {
 217:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 218:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 219:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 220:Src/main.c    **** 
 221:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 222:Src/main.c    ****   */
 223:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 224:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 225:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 226:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 227:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 228:Src/main.c    ****   {
 229:Src/main.c    ****     Error_Handler();
 230:Src/main.c    ****   }
 231:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 232:Src/main.c    ****   */
 233:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 234:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 235:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 236:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 237:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 238:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 239:Src/main.c    **** 
 240:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 241:Src/main.c    ****   {
 242:Src/main.c    ****     Error_Handler();
 243:Src/main.c    ****   }
 244:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 245:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 246:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 247:Src/main.c    ****   {
 248:Src/main.c    ****     Error_Handler();
 249:Src/main.c    ****   }
 250:Src/main.c    **** }
 251:Src/main.c    **** 
 252:Src/main.c    **** /**
 253:Src/main.c    ****   * @brief ADC1 Initialization Function
 254:Src/main.c    ****   * @param None
 255:Src/main.c    ****   * @retval None
 256:Src/main.c    ****   */
 257:Src/main.c    **** static void MX_ADC1_Init(void)
 258:Src/main.c    **** {
 259:Src/main.c    **** 
 260:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 261:Src/main.c    **** 
 262:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
ARM GAS  /tmp/ccGgKFCb.s 			page 6


 263:Src/main.c    **** 
 264:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 265:Src/main.c    **** 
 266:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 267:Src/main.c    **** 
 268:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 269:Src/main.c    ****   /** Common config 
 270:Src/main.c    ****   */
 271:Src/main.c    ****   hadc1.Instance = ADC1;
 272:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 273:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 274:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 275:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 276:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 277:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 278:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 279:Src/main.c    ****   {
 280:Src/main.c    ****     Error_Handler();
 281:Src/main.c    ****   }
 282:Src/main.c    ****   /** Configure Regular Channel 
 283:Src/main.c    ****   */
 284:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_8;
 285:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 286:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 287:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 288:Src/main.c    ****   {
 289:Src/main.c    ****     Error_Handler();
 290:Src/main.c    ****   }
 291:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 292:Src/main.c    **** 
 293:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 294:Src/main.c    **** 
 295:Src/main.c    **** }
 296:Src/main.c    **** 
 297:Src/main.c    **** /**
 298:Src/main.c    ****   * @brief CAN Initialization Function
 299:Src/main.c    ****   * @param None
 300:Src/main.c    ****   * @retval None
 301:Src/main.c    ****   */
 302:Src/main.c    **** static void MX_CAN_Init(void)
 303:Src/main.c    **** {
 304:Src/main.c    **** 
 305:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 306:Src/main.c    **** 
 307:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 308:Src/main.c    **** 
 309:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 310:Src/main.c    ****   CAN_FilterTypeDef     sFilterConfig;
 311:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 312:Src/main.c    ****   hcan.Instance = CAN1;
 313:Src/main.c    ****   hcan.Init.Prescaler = 1; //500kbit/s
 314:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 315:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 316:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 317:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 318:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 319:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
ARM GAS  /tmp/ccGgKFCb.s 			page 7


 320:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 321:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 322:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 323:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 324:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 325:Src/main.c    ****   {
 326:Src/main.c    ****     Error_Handler();
 327:Src/main.c    ****   }
 328:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 */
 329:Src/main.c    ****   TxHeader.StdId = 0x321; 				// CAN standard ID
 330:Src/main.c    **** 	TxHeader.ExtId = 0x01; 					// CAN extended ID
 331:Src/main.c    **** 	TxHeader.RTR = CAN_RTR_DATA; 			// CAN frame type
 332:Src/main.c    **** 	TxHeader.IDE = CAN_ID_STD; 				// CAN ID type
 333:Src/main.c    **** 	TxHeader.DLC = 8; 						// CAN frame length in bytes
 334:Src/main.c    **** 	TxHeader.TransmitGlobalTime = DISABLE;	// CAN timestamp in TxData[6] and TxData[7]
 335:Src/main.c    **** 
 336:Src/main.c    **** 	ChargerTxHeader.ExtId = CHARGER_ID; 					// CAN extended ID
 337:Src/main.c    **** 	ChargerTxHeader.RTR = CAN_RTR_DATA; 			// CAN frame type
 338:Src/main.c    **** 	ChargerTxHeader.IDE = CAN_ID_EXT; 				// CAN ID type
 339:Src/main.c    **** 	ChargerTxHeader.DLC = 8; 						// CAN frame length in bytes
 340:Src/main.c    **** 	ChargerTxHeader.TransmitGlobalTime = DISABLE;	// CAN timestamp in TxData[6] and TxData[7]
 341:Src/main.c    **** 
 342:Src/main.c    **** 	sFilterConfig.FilterBank = 0;							// filter number (0-13)
 343:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode		
 344:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;		
 345:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 346:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 347:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 348:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 349:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 350:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 351:Src/main.c    **** 	
 352:Src/main.c    **** 	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 353:Src/main.c    **** 
 354:Src/main.c    ****   HAL_CAN_Start(&hcan);
 355:Src/main.c    **** 
 356:Src/main.c    ****   HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 357:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
 358:Src/main.c    **** 
 359:Src/main.c    **** }
 360:Src/main.c    **** 
 361:Src/main.c    **** /**
 362:Src/main.c    ****   * @brief SPI1 Initialization Function
 363:Src/main.c    ****   * @param None
 364:Src/main.c    ****   * @retval None
 365:Src/main.c    ****   */
 366:Src/main.c    **** static void MX_SPI1_Init(void)
 367:Src/main.c    **** {
 368:Src/main.c    **** 
 369:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 370:Src/main.c    **** 
 371:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 372:Src/main.c    **** 
 373:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 374:Src/main.c    **** 
 375:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 376:Src/main.c    ****   /* SPI1 parameter configuration*/
ARM GAS  /tmp/ccGgKFCb.s 			page 8


 377:Src/main.c    ****   hspi1.Instance = SPI1;
 378:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 379:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 380:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 381:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 382:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 383:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 384:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 385:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 386:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 387:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 388:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 389:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 390:Src/main.c    ****   {
 391:Src/main.c    ****     Error_Handler();
 392:Src/main.c    ****   }
 393:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 394:Src/main.c    **** 
 395:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 396:Src/main.c    **** 
 397:Src/main.c    **** }
 398:Src/main.c    **** 
 399:Src/main.c    **** /**
 400:Src/main.c    ****   * @brief TIM2 Initialization Function
 401:Src/main.c    ****   * @param None
 402:Src/main.c    ****   * @retval None
 403:Src/main.c    ****   */
 404:Src/main.c    **** static void MX_TIM2_Init(void)
 405:Src/main.c    **** {
 406:Src/main.c    **** 
 407:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 408:Src/main.c    **** 
 409:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 410:Src/main.c    **** 
 411:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 412:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 413:Src/main.c    **** 
 414:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 415:Src/main.c    **** 
 416:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 417:Src/main.c    ****   htim2.Instance = TIM2;
 418:Src/main.c    ****   htim2.Init.Prescaler = 8000;
 419:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 420:Src/main.c    ****   htim2.Init.Period = 65535;
 421:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 422:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 423:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 424:Src/main.c    ****   {
 425:Src/main.c    ****     Error_Handler();
 426:Src/main.c    ****   }
 427:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 428:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 429:Src/main.c    ****   {
 430:Src/main.c    ****     Error_Handler();
 431:Src/main.c    ****   }
 432:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 433:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/ccGgKFCb.s 			page 9


 434:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 435:Src/main.c    ****   {
 436:Src/main.c    ****     Error_Handler();
 437:Src/main.c    ****   }
 438:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 439:Src/main.c    ****   HAL_TIM_Base_Start(&htim2);
 440:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 441:Src/main.c    **** 
 442:Src/main.c    **** }
 443:Src/main.c    **** 
 444:Src/main.c    **** /**
 445:Src/main.c    ****   * @brief GPIO Initialization Function
 446:Src/main.c    ****   * @param None
 447:Src/main.c    ****   * @retval None
 448:Src/main.c    ****   */
 449:Src/main.c    **** static void MX_GPIO_Init(void)
 450:Src/main.c    **** {
  25              		.loc 1 450 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 28
  32              		.cfi_offset 4, -28
  33              		.cfi_offset 5, -24
  34              		.cfi_offset 6, -20
  35              		.cfi_offset 7, -16
  36              		.cfi_offset 8, -12
  37              		.cfi_offset 9, -8
  38              		.cfi_offset 14, -4
  39 0004 89B0     		sub	sp, sp, #36
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 64
 451:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 451 0
  43 0006 0024     		movs	r4, #0
  44 0008 0494     		str	r4, [sp, #16]
  45 000a 0594     		str	r4, [sp, #20]
  46 000c 0694     		str	r4, [sp, #24]
  47 000e 0794     		str	r4, [sp, #28]
  48              	.LBB2:
 452:Src/main.c    **** 
 453:Src/main.c    ****   /* GPIO Ports Clock Enable */
 454:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 454 0
  50 0010 334B     		ldr	r3, .L3
  51 0012 9A69     		ldr	r2, [r3, #24]
  52 0014 42F01002 		orr	r2, r2, #16
  53 0018 9A61     		str	r2, [r3, #24]
  54 001a 9A69     		ldr	r2, [r3, #24]
  55 001c 02F01002 		and	r2, r2, #16
  56 0020 0092     		str	r2, [sp]
  57 0022 009A     		ldr	r2, [sp]
  58              	.LBE2:
  59              	.LBB3:
 455:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
ARM GAS  /tmp/ccGgKFCb.s 			page 10


  60              		.loc 1 455 0
  61 0024 9A69     		ldr	r2, [r3, #24]
  62 0026 42F02002 		orr	r2, r2, #32
  63 002a 9A61     		str	r2, [r3, #24]
  64 002c 9A69     		ldr	r2, [r3, #24]
  65 002e 02F02002 		and	r2, r2, #32
  66 0032 0192     		str	r2, [sp, #4]
  67 0034 019A     		ldr	r2, [sp, #4]
  68              	.LBE3:
  69              	.LBB4:
 456:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  70              		.loc 1 456 0
  71 0036 9A69     		ldr	r2, [r3, #24]
  72 0038 42F00402 		orr	r2, r2, #4
  73 003c 9A61     		str	r2, [r3, #24]
  74 003e 9A69     		ldr	r2, [r3, #24]
  75 0040 02F00402 		and	r2, r2, #4
  76 0044 0292     		str	r2, [sp, #8]
  77 0046 029A     		ldr	r2, [sp, #8]
  78              	.LBE4:
  79              	.LBB5:
 457:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  80              		.loc 1 457 0
  81 0048 9A69     		ldr	r2, [r3, #24]
  82 004a 42F00802 		orr	r2, r2, #8
  83 004e 9A61     		str	r2, [r3, #24]
  84 0050 9B69     		ldr	r3, [r3, #24]
  85 0052 03F00803 		and	r3, r3, #8
  86 0056 0393     		str	r3, [sp, #12]
  87 0058 039B     		ldr	r3, [sp, #12]
  88              	.LBE5:
 458:Src/main.c    **** 
 459:Src/main.c    ****   /*Configure GPIO pin Output Level */
 460:Src/main.c    ****   HAL_GPIO_WritePin(DEBUG_GPIO_Port, DEBUG_Pin, GPIO_PIN_SET);
  89              		.loc 1 460 0
  90 005a DFF88C90 		ldr	r9, .L3+8
  91 005e 0122     		movs	r2, #1
  92 0060 4FF40051 		mov	r1, #8192
  93 0064 4846     		mov	r0, r9
  94 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
  95              	.LVL0:
 461:Src/main.c    **** 
 462:Src/main.c    ****   /*Configure GPIO pin Output Level */
 463:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, BMS_CS_Pin|TRIGGER_Pin, GPIO_PIN_RESET);
  96              		.loc 1 463 0
  97 006a DFF88080 		ldr	r8, .L3+12
  98 006e 2246     		mov	r2, r4
  99 0070 4FF48871 		mov	r1, #272
 100 0074 4046     		mov	r0, r8
 101 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 102              	.LVL1:
 464:Src/main.c    **** 
 465:Src/main.c    ****   /*Configure GPIO pin Output Level */
 466:Src/main.c    ****   HAL_GPIO_WritePin(BMS_FLT_GPIO_Port, BMS_FLT_Pin, GPIO_PIN_RESET);
 103              		.loc 1 466 0
 104 007a 1A4D     		ldr	r5, .L3+4
 105 007c 2246     		mov	r2, r4
ARM GAS  /tmp/ccGgKFCb.s 			page 11


 106 007e 4FF40071 		mov	r1, #512
 107 0082 2846     		mov	r0, r5
 108 0084 FFF7FEFF 		bl	HAL_GPIO_WritePin
 109              	.LVL2:
 467:Src/main.c    **** 
 468:Src/main.c    ****   /*Configure GPIO pin : DEBUG_Pin */
 469:Src/main.c    ****   GPIO_InitStruct.Pin = DEBUG_Pin;
 110              		.loc 1 469 0
 111 0088 4FF40053 		mov	r3, #8192
 112 008c 0493     		str	r3, [sp, #16]
 470:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 113              		.loc 1 470 0
 114 008e 0127     		movs	r7, #1
 115 0090 0597     		str	r7, [sp, #20]
 471:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 116              		.loc 1 471 0
 117 0092 0694     		str	r4, [sp, #24]
 472:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 118              		.loc 1 472 0
 119 0094 0226     		movs	r6, #2
 120 0096 0796     		str	r6, [sp, #28]
 473:Src/main.c    ****   HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 121              		.loc 1 473 0
 122 0098 04A9     		add	r1, sp, #16
 123 009a 4846     		mov	r0, r9
 124 009c FFF7FEFF 		bl	HAL_GPIO_Init
 125              	.LVL3:
 474:Src/main.c    **** 
 475:Src/main.c    ****   /*Configure GPIO pins : BMS_CS_Pin TRIGGER_Pin */
 476:Src/main.c    ****   GPIO_InitStruct.Pin = BMS_CS_Pin|TRIGGER_Pin;
 126              		.loc 1 476 0
 127 00a0 4FF48873 		mov	r3, #272
 128 00a4 0493     		str	r3, [sp, #16]
 477:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 129              		.loc 1 477 0
 130 00a6 0597     		str	r7, [sp, #20]
 478:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 131              		.loc 1 478 0
 132 00a8 0694     		str	r4, [sp, #24]
 479:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 133              		.loc 1 479 0
 134 00aa 0796     		str	r6, [sp, #28]
 480:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 135              		.loc 1 480 0
 136 00ac 04A9     		add	r1, sp, #16
 137 00ae 4046     		mov	r0, r8
 138 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 139              	.LVL4:
 481:Src/main.c    **** 
 482:Src/main.c    ****   /*Configure GPIO pins : CHARGE_EN_Pin AIR_Pin */
 483:Src/main.c    ****   GPIO_InitStruct.Pin = CHARGE_EN_Pin|AIR_Pin;
 140              		.loc 1 483 0
 141 00b4 2823     		movs	r3, #40
 142 00b6 0493     		str	r3, [sp, #16]
 484:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 143              		.loc 1 484 0
 144 00b8 0594     		str	r4, [sp, #20]
ARM GAS  /tmp/ccGgKFCb.s 			page 12


 485:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 485 0
 146 00ba 0694     		str	r4, [sp, #24]
 486:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 147              		.loc 1 486 0
 148 00bc 04A9     		add	r1, sp, #16
 149 00be 2846     		mov	r0, r5
 150 00c0 FFF7FEFF 		bl	HAL_GPIO_Init
 151              	.LVL5:
 487:Src/main.c    **** 
 488:Src/main.c    ****   /*Configure GPIO pin : BMS_FLT_Pin */
 489:Src/main.c    ****   GPIO_InitStruct.Pin = BMS_FLT_Pin;
 152              		.loc 1 489 0
 153 00c4 4FF40073 		mov	r3, #512
 154 00c8 0493     		str	r3, [sp, #16]
 490:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 155              		.loc 1 490 0
 156 00ca 0597     		str	r7, [sp, #20]
 491:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 157              		.loc 1 491 0
 158 00cc 0694     		str	r4, [sp, #24]
 492:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 159              		.loc 1 492 0
 160 00ce 0796     		str	r6, [sp, #28]
 493:Src/main.c    ****   HAL_GPIO_Init(BMS_FLT_GPIO_Port, &GPIO_InitStruct);
 161              		.loc 1 493 0
 162 00d0 04A9     		add	r1, sp, #16
 163 00d2 2846     		mov	r0, r5
 164 00d4 FFF7FEFF 		bl	HAL_GPIO_Init
 165              	.LVL6:
 494:Src/main.c    **** 
 495:Src/main.c    **** }
 166              		.loc 1 495 0
 167 00d8 09B0     		add	sp, sp, #36
 168              	.LCFI2:
 169              		.cfi_def_cfa_offset 28
 170              		@ sp needed
 171 00da BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 172              	.L4:
 173 00de 00BF     		.align	2
 174              	.L3:
 175 00e0 00100240 		.word	1073876992
 176 00e4 000C0140 		.word	1073810432
 177 00e8 00100140 		.word	1073811456
 178 00ec 00080140 		.word	1073809408
 179              		.cfi_endproc
 180              	.LFE72:
 182              		.section	.text.MX_ADC1_Init,"ax",%progbits
 183              		.align	1
 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu softvfp
 189              	MX_ADC1_Init:
 190              	.LFB68:
 258:Src/main.c    **** 
 191              		.loc 1 258 0
ARM GAS  /tmp/ccGgKFCb.s 			page 13


 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 16
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195 0000 70B5     		push	{r4, r5, r6, lr}
 196              	.LCFI3:
 197              		.cfi_def_cfa_offset 16
 198              		.cfi_offset 4, -16
 199              		.cfi_offset 5, -12
 200              		.cfi_offset 6, -8
 201              		.cfi_offset 14, -4
 202 0002 84B0     		sub	sp, sp, #16
 203              	.LCFI4:
 204              		.cfi_def_cfa_offset 32
 264:Src/main.c    **** 
 205              		.loc 1 264 0
 206 0004 0025     		movs	r5, #0
 207 0006 0195     		str	r5, [sp, #4]
 208 0008 0295     		str	r5, [sp, #8]
 209 000a 0395     		str	r5, [sp, #12]
 271:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 210              		.loc 1 271 0
 211 000c 0C4C     		ldr	r4, .L7
 212 000e 0D4B     		ldr	r3, .L7+4
 213 0010 2360     		str	r3, [r4]
 272:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 214              		.loc 1 272 0
 215 0012 A560     		str	r5, [r4, #8]
 273:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 216              		.loc 1 273 0
 217 0014 E560     		str	r5, [r4, #12]
 274:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 218              		.loc 1 274 0
 219 0016 6561     		str	r5, [r4, #20]
 275:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 220              		.loc 1 275 0
 221 0018 4FF46023 		mov	r3, #917504
 222 001c E361     		str	r3, [r4, #28]
 276:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 223              		.loc 1 276 0
 224 001e 6560     		str	r5, [r4, #4]
 277:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 225              		.loc 1 277 0
 226 0020 0126     		movs	r6, #1
 227 0022 2661     		str	r6, [r4, #16]
 278:Src/main.c    ****   {
 228              		.loc 1 278 0
 229 0024 2046     		mov	r0, r4
 230 0026 FFF7FEFF 		bl	HAL_ADC_Init
 231              	.LVL7:
 284:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 232              		.loc 1 284 0
 233 002a 0823     		movs	r3, #8
 234 002c 0193     		str	r3, [sp, #4]
 285:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 235              		.loc 1 285 0
 236 002e 0296     		str	r6, [sp, #8]
 286:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/ccGgKFCb.s 			page 14


 237              		.loc 1 286 0
 238 0030 0395     		str	r5, [sp, #12]
 287:Src/main.c    ****   {
 239              		.loc 1 287 0
 240 0032 01A9     		add	r1, sp, #4
 241 0034 2046     		mov	r0, r4
 242 0036 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 243              	.LVL8:
 295:Src/main.c    **** 
 244              		.loc 1 295 0
 245 003a 04B0     		add	sp, sp, #16
 246              	.LCFI5:
 247              		.cfi_def_cfa_offset 16
 248              		@ sp needed
 249 003c 70BD     		pop	{r4, r5, r6, pc}
 250              	.L8:
 251 003e 00BF     		.align	2
 252              	.L7:
 253 0040 00000000 		.word	hadc1
 254 0044 00240140 		.word	1073816576
 255              		.cfi_endproc
 256              	.LFE68:
 258              		.section	.text.MX_CAN_Init,"ax",%progbits
 259              		.align	1
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 263              		.fpu softvfp
 265              	MX_CAN_Init:
 266              	.LFB69:
 303:Src/main.c    **** 
 267              		.loc 1 303 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 40
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271 0000 70B5     		push	{r4, r5, r6, lr}
 272              	.LCFI6:
 273              		.cfi_def_cfa_offset 16
 274              		.cfi_offset 4, -16
 275              		.cfi_offset 5, -12
 276              		.cfi_offset 6, -8
 277              		.cfi_offset 14, -4
 278 0002 8AB0     		sub	sp, sp, #40
 279              	.LCFI7:
 280              		.cfi_def_cfa_offset 56
 312:Src/main.c    ****   hcan.Init.Prescaler = 1; //500kbit/s
 281              		.loc 1 312 0
 282 0004 204D     		ldr	r5, .L11
 283 0006 214B     		ldr	r3, .L11+4
 284 0008 2B60     		str	r3, [r5]
 313:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 285              		.loc 1 313 0
 286 000a 0126     		movs	r6, #1
 287 000c 6E60     		str	r6, [r5, #4]
 314:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 288              		.loc 1 314 0
 289 000e 0024     		movs	r4, #0
ARM GAS  /tmp/ccGgKFCb.s 			page 15


 290 0010 AC60     		str	r4, [r5, #8]
 315:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 291              		.loc 1 315 0
 292 0012 4FF08073 		mov	r3, #16777216
 293 0016 EB60     		str	r3, [r5, #12]
 316:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 294              		.loc 1 316 0
 295 0018 4FF44023 		mov	r3, #786432
 296 001c 2B61     		str	r3, [r5, #16]
 317:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 297              		.loc 1 317 0
 298 001e 4FF48013 		mov	r3, #1048576
 299 0022 6B61     		str	r3, [r5, #20]
 318:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 300              		.loc 1 318 0
 301 0024 2C76     		strb	r4, [r5, #24]
 319:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 302              		.loc 1 319 0
 303 0026 6C76     		strb	r4, [r5, #25]
 320:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 304              		.loc 1 320 0
 305 0028 AC76     		strb	r4, [r5, #26]
 321:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 306              		.loc 1 321 0
 307 002a EC76     		strb	r4, [r5, #27]
 322:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 308              		.loc 1 322 0
 309 002c 2C77     		strb	r4, [r5, #28]
 323:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 310              		.loc 1 323 0
 311 002e 6C77     		strb	r4, [r5, #29]
 324:Src/main.c    ****   {
 312              		.loc 1 324 0
 313 0030 2846     		mov	r0, r5
 314 0032 FFF7FEFF 		bl	HAL_CAN_Init
 315              	.LVL9:
 329:Src/main.c    **** 	TxHeader.ExtId = 0x01; 					// CAN extended ID
 316              		.loc 1 329 0
 317 0036 164B     		ldr	r3, .L11+8
 318 0038 40F22132 		movw	r2, #801
 319 003c 1A60     		str	r2, [r3]
 330:Src/main.c    **** 	TxHeader.RTR = CAN_RTR_DATA; 			// CAN frame type
 320              		.loc 1 330 0
 321 003e 5E60     		str	r6, [r3, #4]
 331:Src/main.c    **** 	TxHeader.IDE = CAN_ID_STD; 				// CAN ID type
 322              		.loc 1 331 0
 323 0040 DC60     		str	r4, [r3, #12]
 332:Src/main.c    **** 	TxHeader.DLC = 8; 						// CAN frame length in bytes
 324              		.loc 1 332 0
 325 0042 9C60     		str	r4, [r3, #8]
 333:Src/main.c    **** 	TxHeader.TransmitGlobalTime = DISABLE;	// CAN timestamp in TxData[6] and TxData[7]
 326              		.loc 1 333 0
 327 0044 0822     		movs	r2, #8
 328 0046 1A61     		str	r2, [r3, #16]
 334:Src/main.c    **** 
 329              		.loc 1 334 0
 330 0048 1C75     		strb	r4, [r3, #20]
ARM GAS  /tmp/ccGgKFCb.s 			page 16


 336:Src/main.c    **** 	ChargerTxHeader.RTR = CAN_RTR_DATA; 			// CAN frame type
 331              		.loc 1 336 0
 332 004a 124B     		ldr	r3, .L11+12
 333 004c 1249     		ldr	r1, .L11+16
 334 004e 5960     		str	r1, [r3, #4]
 337:Src/main.c    **** 	ChargerTxHeader.IDE = CAN_ID_EXT; 				// CAN ID type
 335              		.loc 1 337 0
 336 0050 DC60     		str	r4, [r3, #12]
 338:Src/main.c    **** 	ChargerTxHeader.DLC = 8; 						// CAN frame length in bytes
 337              		.loc 1 338 0
 338 0052 0421     		movs	r1, #4
 339 0054 9960     		str	r1, [r3, #8]
 339:Src/main.c    **** 	ChargerTxHeader.TransmitGlobalTime = DISABLE;	// CAN timestamp in TxData[6] and TxData[7]
 340              		.loc 1 339 0
 341 0056 1A61     		str	r2, [r3, #16]
 340:Src/main.c    **** 
 342              		.loc 1 340 0
 343 0058 1C75     		strb	r4, [r3, #20]
 342:Src/main.c    **** 	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;		// mask mode or identifier mode		
 344              		.loc 1 342 0
 345 005a 0594     		str	r4, [sp, #20]
 343:Src/main.c    **** 	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;		
 346              		.loc 1 343 0
 347 005c 0694     		str	r4, [sp, #24]
 344:Src/main.c    **** 	sFilterConfig.FilterIdHigh = 0x0000;					// received ID must match filter ID for each bit specifie
 348              		.loc 1 344 0
 349 005e 0796     		str	r6, [sp, #28]
 345:Src/main.c    **** 	sFilterConfig.FilterIdLow = 0x0000;
 350              		.loc 1 345 0
 351 0060 0094     		str	r4, [sp]
 346:Src/main.c    **** 	sFilterConfig.FilterMaskIdHigh = 0x0000;				// specifies which bits of the received ID to compare 
 352              		.loc 1 346 0
 353 0062 0194     		str	r4, [sp, #4]
 347:Src/main.c    **** 	sFilterConfig.FilterMaskIdLow = 0x0000;
 354              		.loc 1 347 0
 355 0064 0294     		str	r4, [sp, #8]
 348:Src/main.c    **** 	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// receive FIFO (0 or 1, must match chosen int
 356              		.loc 1 348 0
 357 0066 0394     		str	r4, [sp, #12]
 349:Src/main.c    **** 	sFilterConfig.FilterActivation = ENABLE;
 358              		.loc 1 349 0
 359 0068 0494     		str	r4, [sp, #16]
 350:Src/main.c    **** 	
 360              		.loc 1 350 0
 361 006a 0896     		str	r6, [sp, #32]
 352:Src/main.c    **** 
 362              		.loc 1 352 0
 363 006c 6946     		mov	r1, sp
 364 006e 2846     		mov	r0, r5
 365 0070 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 366              	.LVL10:
 354:Src/main.c    **** 
 367              		.loc 1 354 0
 368 0074 2846     		mov	r0, r5
 369 0076 FFF7FEFF 		bl	HAL_CAN_Start
 370              	.LVL11:
 356:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
ARM GAS  /tmp/ccGgKFCb.s 			page 17


 371              		.loc 1 356 0
 372 007a 0221     		movs	r1, #2
 373 007c 2846     		mov	r0, r5
 374 007e FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 375              	.LVL12:
 359:Src/main.c    **** 
 376              		.loc 1 359 0
 377 0082 0AB0     		add	sp, sp, #40
 378              	.LCFI8:
 379              		.cfi_def_cfa_offset 16
 380              		@ sp needed
 381 0084 70BD     		pop	{r4, r5, r6, pc}
 382              	.L12:
 383 0086 00BF     		.align	2
 384              	.L11:
 385 0088 00000000 		.word	hcan
 386 008c 00640040 		.word	1073767424
 387 0090 00000000 		.word	TxHeader
 388 0094 00000000 		.word	ChargerTxHeader
 389 0098 F4E50618 		.word	403105268
 390              		.cfi_endproc
 391              	.LFE69:
 393              		.section	.text.MX_TIM2_Init,"ax",%progbits
 394              		.align	1
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 398              		.fpu softvfp
 400              	MX_TIM2_Init:
 401              	.LFB71:
 405:Src/main.c    **** 
 402              		.loc 1 405 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 24
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406 0000 30B5     		push	{r4, r5, lr}
 407              	.LCFI9:
 408              		.cfi_def_cfa_offset 12
 409              		.cfi_offset 4, -12
 410              		.cfi_offset 5, -8
 411              		.cfi_offset 14, -4
 412 0002 87B0     		sub	sp, sp, #28
 413              	.LCFI10:
 414              		.cfi_def_cfa_offset 40
 411:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 415              		.loc 1 411 0
 416 0004 0024     		movs	r4, #0
 417 0006 0294     		str	r4, [sp, #8]
 418 0008 0394     		str	r4, [sp, #12]
 419 000a 0494     		str	r4, [sp, #16]
 420 000c 0594     		str	r4, [sp, #20]
 412:Src/main.c    **** 
 421              		.loc 1 412 0
 422 000e 0094     		str	r4, [sp]
 423 0010 0194     		str	r4, [sp, #4]
 417:Src/main.c    ****   htim2.Init.Prescaler = 8000;
 424              		.loc 1 417 0
ARM GAS  /tmp/ccGgKFCb.s 			page 18


 425 0012 114D     		ldr	r5, .L15
 426 0014 4FF08043 		mov	r3, #1073741824
 427 0018 2B60     		str	r3, [r5]
 418:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 428              		.loc 1 418 0
 429 001a 4FF4FA53 		mov	r3, #8000
 430 001e 6B60     		str	r3, [r5, #4]
 419:Src/main.c    ****   htim2.Init.Period = 65535;
 431              		.loc 1 419 0
 432 0020 AC60     		str	r4, [r5, #8]
 420:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 433              		.loc 1 420 0
 434 0022 4FF6FF73 		movw	r3, #65535
 435 0026 EB60     		str	r3, [r5, #12]
 421:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 436              		.loc 1 421 0
 437 0028 2C61     		str	r4, [r5, #16]
 422:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 438              		.loc 1 422 0
 439 002a AC61     		str	r4, [r5, #24]
 423:Src/main.c    ****   {
 440              		.loc 1 423 0
 441 002c 2846     		mov	r0, r5
 442 002e FFF7FEFF 		bl	HAL_TIM_Base_Init
 443              	.LVL13:
 427:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 444              		.loc 1 427 0
 445 0032 4FF48053 		mov	r3, #4096
 446 0036 0293     		str	r3, [sp, #8]
 428:Src/main.c    ****   {
 447              		.loc 1 428 0
 448 0038 02A9     		add	r1, sp, #8
 449 003a 2846     		mov	r0, r5
 450 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 451              	.LVL14:
 432:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 452              		.loc 1 432 0
 453 0040 0094     		str	r4, [sp]
 433:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 454              		.loc 1 433 0
 455 0042 0194     		str	r4, [sp, #4]
 434:Src/main.c    ****   {
 456              		.loc 1 434 0
 457 0044 6946     		mov	r1, sp
 458 0046 2846     		mov	r0, r5
 459 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 460              	.LVL15:
 439:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 461              		.loc 1 439 0
 462 004c 2846     		mov	r0, r5
 463 004e FFF7FEFF 		bl	HAL_TIM_Base_Start
 464              	.LVL16:
 442:Src/main.c    **** 
 465              		.loc 1 442 0
 466 0052 07B0     		add	sp, sp, #28
 467              	.LCFI11:
 468              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccGgKFCb.s 			page 19


 469              		@ sp needed
 470 0054 30BD     		pop	{r4, r5, pc}
 471              	.L16:
 472 0056 00BF     		.align	2
 473              	.L15:
 474 0058 00000000 		.word	htim2
 475              		.cfi_endproc
 476              	.LFE71:
 478              		.section	.text.SystemClock_Config,"ax",%progbits
 479              		.align	1
 480              		.global	SystemClock_Config
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu softvfp
 486              	SystemClock_Config:
 487              	.LFB67:
 216:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 488              		.loc 1 216 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 80
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492 0000 30B5     		push	{r4, r5, lr}
 493              	.LCFI12:
 494              		.cfi_def_cfa_offset 12
 495              		.cfi_offset 4, -12
 496              		.cfi_offset 5, -8
 497              		.cfi_offset 14, -4
 498 0002 95B0     		sub	sp, sp, #84
 499              	.LCFI13:
 500              		.cfi_def_cfa_offset 96
 217:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 501              		.loc 1 217 0
 502 0004 2422     		movs	r2, #36
 503 0006 0021     		movs	r1, #0
 504 0008 0BA8     		add	r0, sp, #44
 505 000a FFF7FEFF 		bl	memset
 506              	.LVL17:
 218:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 507              		.loc 1 218 0
 508 000e 0024     		movs	r4, #0
 509 0010 0594     		str	r4, [sp, #20]
 510 0012 0694     		str	r4, [sp, #24]
 511 0014 0794     		str	r4, [sp, #28]
 512 0016 0894     		str	r4, [sp, #32]
 513 0018 0994     		str	r4, [sp, #36]
 219:Src/main.c    **** 
 514              		.loc 1 219 0
 515 001a 0194     		str	r4, [sp, #4]
 516 001c 0294     		str	r4, [sp, #8]
 517 001e 0394     		str	r4, [sp, #12]
 518 0020 0494     		str	r4, [sp, #16]
 223:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 519              		.loc 1 223 0
 520 0022 0225     		movs	r5, #2
 521 0024 0A95     		str	r5, [sp, #40]
 224:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
ARM GAS  /tmp/ccGgKFCb.s 			page 20


 522              		.loc 1 224 0
 523 0026 0123     		movs	r3, #1
 524 0028 0E93     		str	r3, [sp, #56]
 225:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 525              		.loc 1 225 0
 526 002a 1023     		movs	r3, #16
 527 002c 0F93     		str	r3, [sp, #60]
 227:Src/main.c    ****   {
 528              		.loc 1 227 0
 529 002e 0AA8     		add	r0, sp, #40
 530 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 531              	.LVL18:
 233:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 532              		.loc 1 233 0
 533 0034 0F23     		movs	r3, #15
 534 0036 0593     		str	r3, [sp, #20]
 235:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 535              		.loc 1 235 0
 536 0038 0694     		str	r4, [sp, #24]
 236:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 537              		.loc 1 236 0
 538 003a 0794     		str	r4, [sp, #28]
 237:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 539              		.loc 1 237 0
 540 003c 0894     		str	r4, [sp, #32]
 238:Src/main.c    **** 
 541              		.loc 1 238 0
 542 003e 0994     		str	r4, [sp, #36]
 240:Src/main.c    ****   {
 543              		.loc 1 240 0
 544 0040 2146     		mov	r1, r4
 545 0042 05A8     		add	r0, sp, #20
 546 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 547              	.LVL19:
 244:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 548              		.loc 1 244 0
 549 0048 0195     		str	r5, [sp, #4]
 245:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 550              		.loc 1 245 0
 551 004a 0394     		str	r4, [sp, #12]
 246:Src/main.c    ****   {
 552              		.loc 1 246 0
 553 004c 01A8     		add	r0, sp, #4
 554 004e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 555              	.LVL20:
 250:Src/main.c    **** 
 556              		.loc 1 250 0
 557 0052 15B0     		add	sp, sp, #84
 558              	.LCFI14:
 559              		.cfi_def_cfa_offset 12
 560              		@ sp needed
 561 0054 30BD     		pop	{r4, r5, pc}
 562              		.cfi_endproc
 563              	.LFE67:
 565              		.section	.text.FAULT_check,"ax",%progbits
 566              		.align	1
 567              		.global	FAULT_check
ARM GAS  /tmp/ccGgKFCb.s 			page 21


 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 571              		.fpu softvfp
 573              	FAULT_check:
 574              	.LFB73:
 496:Src/main.c    **** 
 497:Src/main.c    **** /* USER CODE BEGIN 4 */
 498:Src/main.c    **** 
 499:Src/main.c    **** /*void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
 500:Src/main.c    **** {
 501:Src/main.c    ****   HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 502:Src/main.c    **** 
 503:Src/main.c    ****   uint16_t ID = RxHeader.StdId;
 504:Src/main.c    ****   uint32_t ExtID = RxHeader.ExtId;
 505:Src/main.c    **** 
 506:Src/main.c    ****   //TESTING
 507:Src/main.c    ****   if (ID == 0x123) {
 508:Src/main.c    **** 
 509:Src/main.c    ****     //HAL_GPIO_TogglePin(GPIOC, DEBUG_Pin);
 510:Src/main.c    ****     voltageState = RxData[0];
 511:Src/main.c    ****   }
 512:Src/main.c    ****   //TESTING
 513:Src/main.c    **** 
 514:Src/main.c    ****   if (ExtID == CHARGER_ID) {
 515:Src/main.c    ****     TIM2->CNT = 0; // reset timer
 516:Src/main.c    ****     HAL_TIM_Base_Start(&htim2);
 517:Src/main.c    ****     RxHeader.ExtId = 0;
 518:Src/main.c    ****     //HAL_GPIO_TogglePin(GPIOC, DEBUG_Pin);
 519:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, DEBUG_Pin, GPIO_PIN_SET);
 520:Src/main.c    ****   }
 521:Src/main.c    **** }*/
 522:Src/main.c    **** 
 523:Src/main.c    **** bool FAULT_check(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6], uint8_t bmsStatus[6]) {
 575              		.loc 1 523 0
 576              		.cfi_startproc
 577              		@ args = 104, pretend = 16, frame = 0
 578              		@ frame_needed = 1, uses_anonymous_args = 0
 579              	.LVL21:
 580 0000 84B0     		sub	sp, sp, #16
 581              	.LCFI15:
 582              		.cfi_def_cfa_offset 16
 583 0002 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 584              	.LCFI16:
 585              		.cfi_def_cfa_offset 48
 586              		.cfi_offset 3, -48
 587              		.cfi_offset 4, -44
 588              		.cfi_offset 5, -40
 589              		.cfi_offset 6, -36
 590              		.cfi_offset 7, -32
 591              		.cfi_offset 8, -28
 592              		.cfi_offset 9, -24
 593              		.cfi_offset 14, -20
 594 0006 00AF     		add	r7, sp, #0
 595              	.LCFI17:
 596              		.cfi_def_cfa_register 7
 597 0008 07F12004 		add	r4, r7, #32
ARM GAS  /tmp/ccGgKFCb.s 			page 22


 598 000c 84E80F00 		stm	r4, {r0, r1, r2, r3}
 599 0010 D7F88060 		ldr	r6, [r7, #128]
 600 0014 D7F88420 		ldr	r2, [r7, #132]
 601              	.LVL22:
 524:Src/main.c    **** 
 525:Src/main.c    ****   bool BMS_FAULT = false;
 526:Src/main.c    ****   uint16_t cellVoltage;
 527:Src/main.c    ****   bool cellConnection;
 528:Src/main.c    ****   bool dataValid;
 529:Src/main.c    ****   bool OT_fault;
 530:Src/main.c    ****   bool DC_fault;
 531:Src/main.c    ****   uint8_t board;
 532:Src/main.c    ****   uint8_t error_count[cfg.numOfICs];
 602              		.loc 1 532 0
 603 0018 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 604              	.LVL23:
 605 001c 0733     		adds	r3, r3, #7
 606              	.LVL24:
 607 001e 03F4FC73 		and	r3, r3, #504
 608              	.LVL25:
 609 0022 ADEB030D 		sub	sp, sp, r3
 610 0026 6D46     		mov	r5, sp
 611              	.LVL26:
 533:Src/main.c    **** 
 534:Src/main.c    ****   bmsStatus[0] = 0;
 612              		.loc 1 534 0
 613 0028 0024     		movs	r4, #0
 614              	.LVL27:
 615 002a 1470     		strb	r4, [r2]
 616              	.LVL28:
 617              	.LBB6:
 535:Src/main.c    **** 
 536:Src/main.c    ****   for (uint8_t cell = 0; cell < 96; cell++) {
 618              		.loc 1 536 0
 619 002c 2346     		mov	r3, r4
 620 002e 07E0     		b	.L20
 621              	.LVL29:
 622              	.L26:
 537:Src/main.c    **** 
 538:Src/main.c    ****     cellVoltage = 0;
 539:Src/main.c    ****     cellVoltage = (uint16_t) (bmsData[cell][2]);
 540:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 541:Src/main.c    **** 		cellVoltage += (uint16_t) (bmsData[cell][3]);
 542:Src/main.c    **** 
 543:Src/main.c    ****     cellConnection = (bool) (bmsData[cell][1] & 0x01);
 544:Src/main.c    ****     dataValid = (bool) ((bmsData[cell][1] & 0x02) >> 1);
 545:Src/main.c    ****     OT_fault = (bool) ((bmsData[cell][1] & 0x10) >> 4);
 546:Src/main.c    ****     DC_fault = (bool) ((bmsData[cell][1] & 0x08) >> 3);
 547:Src/main.c    **** 
 548:Src/main.c    ****     //OV fault
 549:Src/main.c    ****     if (cellVoltage > cfg.OV_threshold) {
 550:Src/main.c    ****       BMS_FAULT = true;
 551:Src/main.c    ****       bmsStatus[0] |= 0x01; //fault byte
 552:Src/main.c    ****       bmsStatus[1] = cell + 1; //OV cell number
 553:Src/main.c    ****     }
 554:Src/main.c    **** 
 555:Src/main.c    ****     //UV fault
ARM GAS  /tmp/ccGgKFCb.s 			page 23


 556:Src/main.c    ****     if (cellVoltage < cfg.UV_threshold) {
 557:Src/main.c    ****       BMS_FAULT = true;
 558:Src/main.c    ****       bmsStatus[0] |= 0x02; //fault byte
 559:Src/main.c    ****       bmsStatus[2] = cell + 1; //UV cell number
 560:Src/main.c    ****     }
 561:Src/main.c    **** 
 562:Src/main.c    ****     //Cell DC fault
 563:Src/main.c    ****     if (cellConnection == 0) {
 564:Src/main.c    ****       BMS_FAULT = true;
 565:Src/main.c    ****       bmsStatus[0] |= 0x80; //fault byte
 566:Src/main.c    ****       bmsStatus[4] = cell + 1; //DC cell number
 567:Src/main.c    ****     }
 568:Src/main.c    **** 
 569:Src/main.c    ****     //OT fault
 570:Src/main.c    ****     if (OT_fault == 1) {
 571:Src/main.c    ****       BMS_FAULT = true;
 572:Src/main.c    ****       bmsStatus[0] |= 0x04; //fault byte
 573:Src/main.c    ****       bmsStatus[3] = cell + 1; //OT cell number
 574:Src/main.c    ****     }
 575:Src/main.c    **** 
 576:Src/main.c    ****     //Temp DC fault
 577:Src/main.c    ****     if (DC_fault == 1) {
 578:Src/main.c    ****       BMS_FAULT = true;
 579:Src/main.c    ****       bmsStatus[0] |= 0x10;
 580:Src/main.c    ****       bmsStatus[5] = cell + 1;
 581:Src/main.c    ****     }
 582:Src/main.c    **** 
 583:Src/main.c    ****     board = cell / cfg.numOfCellsPerIC;
 584:Src/main.c    **** 
 585:Src/main.c    ****     //Board DC fault
 586:Src/main.c    ****     if (dataValid == 0) {
 587:Src/main.c    ****       error_count[board]++;
 588:Src/main.c    **** 
 589:Src/main.c    ****       //if data is invalid for a board, every cell will report invalid
 590:Src/main.c    ****       if (error_count[board] > (cfg.numOfCellsPerIC * cfg.invalidPECcount)) {
 591:Src/main.c    ****         BMS_FAULT = true;
 592:Src/main.c    ****         bmsStatus[0] |= 0x20;
 593:Src/main.c    ****       }
 594:Src/main.c    ****     }
 595:Src/main.c    ****     if (dataValid == 1) {
 623              		.loc 1 595 0
 624 0030 BCF1000F 		cmp	ip, #0
 625 0034 02D0     		beq	.L27
 596:Src/main.c    ****       error_count[board] = 0;
 626              		.loc 1 596 0
 627 0036 0021     		movs	r1, #0
 628 0038 05F80E10 		strb	r1, [r5, lr]
 629              	.L27:
 536:Src/main.c    **** 
 630              		.loc 1 536 0 discriminator 2
 631 003c 0133     		adds	r3, r3, #1
 632              	.LVL30:
 633 003e DBB2     		uxtb	r3, r3
 634              	.LVL31:
 635              	.L20:
 536:Src/main.c    **** 
 636              		.loc 1 536 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccGgKFCb.s 			page 24


 637 0040 5F2B     		cmp	r3, #95
 638 0042 5DD8     		bhi	.L32
 639              	.LVL32:
 539:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 640              		.loc 1 539 0 is_stmt 1
 641 0044 03EB4300 		add	r0, r3, r3, lsl #1
 642 0048 4100     		lsls	r1, r0, #1
 643 004a 3144     		add	r1, r1, r6
 644 004c 91F802C0 		ldrb	ip, [r1, #2]	@ zero_extendqisi2
 645              	.LVL33:
 541:Src/main.c    **** 
 646              		.loc 1 541 0
 647 0050 C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 648 0052 00EB0C20 		add	r0, r0, ip, lsl #8
 649 0056 80B2     		uxth	r0, r0
 650              	.LVL34:
 543:Src/main.c    ****     dataValid = (bool) ((bmsData[cell][1] & 0x02) >> 1);
 651              		.loc 1 543 0
 652 0058 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 653 005a 01F00108 		and	r8, r1, #1
 654              	.LVL35:
 655 005e 01F0020C 		and	ip, r1, #2
 656              	.LVL36:
 657 0062 01F0100E 		and	lr, r1, #16
 658              	.LVL37:
 659 0066 01F00801 		and	r1, r1, #8
 660              	.LVL38:
 549:Src/main.c    ****       BMS_FAULT = true;
 661              		.loc 1 549 0
 662 006a B7F84690 		ldrh	r9, [r7, #70]
 663 006e 8145     		cmp	r9, r0
 664 0070 06D2     		bcs	.L21
 665              	.LVL39:
 551:Src/main.c    ****       bmsStatus[1] = cell + 1; //OV cell number
 666              		.loc 1 551 0
 667 0072 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 668 0074 44F00104 		orr	r4, r4, #1
 669 0078 1470     		strb	r4, [r2]
 552:Src/main.c    ****     }
 670              		.loc 1 552 0
 671 007a 5C1C     		adds	r4, r3, #1
 672 007c 5470     		strb	r4, [r2, #1]
 550:Src/main.c    ****       bmsStatus[0] |= 0x01; //fault byte
 673              		.loc 1 550 0
 674 007e 0124     		movs	r4, #1
 675              	.LVL40:
 676              	.L21:
 556:Src/main.c    ****       BMS_FAULT = true;
 677              		.loc 1 556 0
 678 0080 B7F84890 		ldrh	r9, [r7, #72]
 679 0084 8145     		cmp	r9, r0
 680 0086 06D9     		bls	.L22
 681              	.LVL41:
 558:Src/main.c    ****       bmsStatus[2] = cell + 1; //UV cell number
 682              		.loc 1 558 0
 683 0088 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 684              	.LVL42:
ARM GAS  /tmp/ccGgKFCb.s 			page 25


 685 008a 40F00200 		orr	r0, r0, #2
 686 008e 1070     		strb	r0, [r2]
 559:Src/main.c    ****     }
 687              		.loc 1 559 0
 688 0090 581C     		adds	r0, r3, #1
 689 0092 9070     		strb	r0, [r2, #2]
 557:Src/main.c    ****       bmsStatus[0] |= 0x02; //fault byte
 690              		.loc 1 557 0
 691 0094 0124     		movs	r4, #1
 692              	.LVL43:
 693              	.L22:
 563:Src/main.c    ****       BMS_FAULT = true;
 694              		.loc 1 563 0
 695 0096 B8F1000F 		cmp	r8, #0
 696 009a 06D1     		bne	.L23
 697              	.LVL44:
 565:Src/main.c    ****       bmsStatus[4] = cell + 1; //DC cell number
 698              		.loc 1 565 0
 699 009c 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 700 009e 60F07F00 		orn	r0, r0, #127
 701 00a2 1070     		strb	r0, [r2]
 566:Src/main.c    ****     }
 702              		.loc 1 566 0
 703 00a4 581C     		adds	r0, r3, #1
 704 00a6 1071     		strb	r0, [r2, #4]
 564:Src/main.c    ****       bmsStatus[0] |= 0x80; //fault byte
 705              		.loc 1 564 0
 706 00a8 0124     		movs	r4, #1
 707              	.LVL45:
 708              	.L23:
 570:Src/main.c    ****       BMS_FAULT = true;
 709              		.loc 1 570 0
 710 00aa BEF1000F 		cmp	lr, #0
 711 00ae 06D0     		beq	.L24
 712              	.LVL46:
 572:Src/main.c    ****       bmsStatus[3] = cell + 1; //OT cell number
 713              		.loc 1 572 0
 714 00b0 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 715 00b2 40F00400 		orr	r0, r0, #4
 716 00b6 1070     		strb	r0, [r2]
 573:Src/main.c    ****     }
 717              		.loc 1 573 0
 718 00b8 581C     		adds	r0, r3, #1
 719 00ba D070     		strb	r0, [r2, #3]
 571:Src/main.c    ****       bmsStatus[0] |= 0x04; //fault byte
 720              		.loc 1 571 0
 721 00bc 0124     		movs	r4, #1
 722              	.LVL47:
 723              	.L24:
 577:Src/main.c    ****       BMS_FAULT = true;
 724              		.loc 1 577 0
 725 00be 31B1     		cbz	r1, .L25
 726              	.LVL48:
 579:Src/main.c    ****       bmsStatus[5] = cell + 1;
 727              		.loc 1 579 0
 728 00c0 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 729              	.LVL49:
ARM GAS  /tmp/ccGgKFCb.s 			page 26


 730 00c2 41F01001 		orr	r1, r1, #16
 731 00c6 1170     		strb	r1, [r2]
 580:Src/main.c    ****     }
 732              		.loc 1 580 0
 733 00c8 591C     		adds	r1, r3, #1
 734 00ca 5171     		strb	r1, [r2, #5]
 578:Src/main.c    ****       bmsStatus[0] |= 0x10;
 735              		.loc 1 578 0
 736 00cc 0124     		movs	r4, #1
 737              	.LVL50:
 738              	.L25:
 583:Src/main.c    **** 
 739              		.loc 1 583 0
 740 00ce 97F84200 		ldrb	r0, [r7, #66]	@ zero_extendqisi2
 741 00d2 B3FBF0FE 		udiv	lr, r3, r0
 742              	.LVL51:
 586:Src/main.c    ****       error_count[board]++;
 743              		.loc 1 586 0
 744 00d6 BCF1000F 		cmp	ip, #0
 745 00da A9D1     		bne	.L26
 587:Src/main.c    **** 
 746              		.loc 1 587 0
 747 00dc 15F80E10 		ldrb	r1, [r5, lr]	@ zero_extendqisi2
 748 00e0 0131     		adds	r1, r1, #1
 749 00e2 C9B2     		uxtb	r1, r1
 750 00e4 05F80E10 		strb	r1, [r5, lr]
 590:Src/main.c    ****         BMS_FAULT = true;
 751              		.loc 1 590 0
 752 00e8 97F85280 		ldrb	r8, [r7, #82]	@ zero_extendqisi2
 753              	.LVL52:
 754 00ec 08FB00F0 		mul	r0, r8, r0
 755 00f0 8142     		cmp	r1, r0
 756 00f2 9DDD     		ble	.L26
 757              	.LVL53:
 592:Src/main.c    ****       }
 758              		.loc 1 592 0
 759 00f4 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 760 00f6 41F02001 		orr	r1, r1, #32
 761 00fa 1170     		strb	r1, [r2]
 591:Src/main.c    ****         bmsStatus[0] |= 0x20;
 762              		.loc 1 591 0
 763 00fc 0124     		movs	r4, #1
 764 00fe 97E7     		b	.L26
 765              	.LVL54:
 766              	.L32:
 767              	.LBE6:
 597:Src/main.c    ****     }
 598:Src/main.c    **** 
 599:Src/main.c    ****     //Charger comm fault
 600:Src/main.c    ****     /*count = TIM2->CNT;
 601:Src/main.c    **** 
 602:Src/main.c    ****     if (count > 20000) {
 603:Src/main.c    ****       BMS_FAULT = true;
 604:Src/main.c    ****       HAL_TIM_Base_Stop(&htim2);
 605:Src/main.c    ****     }*/
 606:Src/main.c    ****   }
 607:Src/main.c    **** 
ARM GAS  /tmp/ccGgKFCb.s 			page 27


 608:Src/main.c    ****   if (BMS_FAULT == false)
 768              		.loc 1 608 0
 769 0100 34B1     		cbz	r4, .L33
 770              	.LVL55:
 771              	.L29:
 609:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, BMS_FLT_Pin, GPIO_PIN_RESET);
 610:Src/main.c    ****   if (BMS_FAULT == true)
 772              		.loc 1 610 0
 773 0102 64B9     		cbnz	r4, .L34
 774              	.L30:
 611:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, BMS_FLT_Pin, GPIO_PIN_SET);
 612:Src/main.c    ****   
 613:Src/main.c    ****   return BMS_FAULT;
 614:Src/main.c    **** }
 775              		.loc 1 614 0
 776 0104 2046     		mov	r0, r4
 777 0106 BD46     		mov	sp, r7
 778              	.LCFI18:
 779              		.cfi_remember_state
 780              		.cfi_def_cfa_register 13
 781              		@ sp needed
 782 0108 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 783              	.LCFI19:
 784              		.cfi_restore 14
 785              		.cfi_restore 9
 786              		.cfi_restore 8
 787              		.cfi_restore 7
 788              		.cfi_restore 6
 789              		.cfi_restore 5
 790              		.cfi_restore 4
 791              		.cfi_restore 3
 792              		.cfi_def_cfa_offset 16
 793              	.LVL56:
 794 010c 04B0     		add	sp, sp, #16
 795              	.LCFI20:
 796              		.cfi_def_cfa_offset 0
 797 010e 7047     		bx	lr
 798              	.LVL57:
 799              	.L33:
 800              	.LCFI21:
 801              		.cfi_restore_state
 609:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, BMS_FLT_Pin, GPIO_PIN_RESET);
 802              		.loc 1 609 0
 803 0110 0022     		movs	r2, #0
 804 0112 4FF40071 		mov	r1, #512
 805 0116 0548     		ldr	r0, .L35
 806 0118 FFF7FEFF 		bl	HAL_GPIO_WritePin
 807              	.LVL58:
 808 011c F1E7     		b	.L29
 809              	.L34:
 611:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, BMS_FLT_Pin, GPIO_PIN_SET);
 810              		.loc 1 611 0
 811 011e 0122     		movs	r2, #1
 812 0120 4FF40071 		mov	r1, #512
 813 0124 0148     		ldr	r0, .L35
 814 0126 FFF7FEFF 		bl	HAL_GPIO_WritePin
 815              	.LVL59:
ARM GAS  /tmp/ccGgKFCb.s 			page 28


 816 012a EBE7     		b	.L30
 817              	.L36:
 818              		.align	2
 819              	.L35:
 820 012c 000C0140 		.word	1073810432
 821              		.cfi_endproc
 822              	.LFE73:
 824              		.section	.text.setDischarge,"ax",%progbits
 825              		.align	1
 826              		.global	setDischarge
 827              		.syntax unified
 828              		.thumb
 829              		.thumb_func
 830              		.fpu softvfp
 832              	setDischarge:
 833              	.LFB74:
 615:Src/main.c    **** 
 616:Src/main.c    **** void setDischarge(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6], bool cellDischarge[12][8], bo
 834              		.loc 1 616 0
 835              		.cfi_startproc
 836              		@ args = 112, pretend = 16, frame = 0
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 839              	.LVL60:
 840 0000 84B0     		sub	sp, sp, #16
 841              	.LCFI22:
 842              		.cfi_def_cfa_offset 16
 843 0002 70B4     		push	{r4, r5, r6}
 844              	.LCFI23:
 845              		.cfi_def_cfa_offset 28
 846              		.cfi_offset 4, -28
 847              		.cfi_offset 5, -24
 848              		.cfi_offset 6, -20
 849 0004 03AC     		add	r4, sp, #12
 850 0006 84E80F00 		stm	r4, {r0, r1, r2, r3}
 851 000a 1B9C     		ldr	r4, [sp, #108]
 852 000c 1C9D     		ldr	r5, [sp, #112]
 617:Src/main.c    **** 
 618:Src/main.c    ****   uint16_t threshold;
 619:Src/main.c    ****   uint16_t cellVoltage;
 620:Src/main.c    ****   uint8_t board;
 621:Src/main.c    ****   uint8_t cell;
 622:Src/main.c    **** 	chargeRate = 2; // initialize the charging current to normal operation
 853              		.loc 1 622 0
 854 000e 154B     		ldr	r3, .L43
 855 0010 0222     		movs	r2, #2
 856 0012 1A70     		strb	r2, [r3]
 857              	.LVL61:
 858              	.LBB7:
 623:Src/main.c    **** 
 624:Src/main.c    ****   // if there is any type of fault, stop charging
 625:Src/main.c    ****   // if (bmsFault) {
 626:Src/main.c    ****   //   chargeRate = 0;
 627:Src/main.c    ****   //   //return 0;
 628:Src/main.c    ****   // }
 629:Src/main.c    **** 
 630:Src/main.c    ****   for (uint8_t i = 0; i < 96; i++) {
ARM GAS  /tmp/ccGgKFCb.s 			page 29


 859              		.loc 1 630 0
 860 0014 0023     		movs	r3, #0
 861 0016 01E0     		b	.L38
 862              	.LVL62:
 863              	.L39:
 864              		.loc 1 630 0 is_stmt 0 discriminator 2
 865 0018 0133     		adds	r3, r3, #1
 866              	.LVL63:
 867 001a DBB2     		uxtb	r3, r3
 868              	.LVL64:
 869              	.L38:
 870              		.loc 1 630 0 discriminator 1
 871 001c 5F2B     		cmp	r3, #95
 872 001e 1DD8     		bhi	.L42
 873              	.LVL65:
 631:Src/main.c    ****     
 632:Src/main.c    ****     cellVoltage = 0;
 633:Src/main.c    ****     cellVoltage = (uint16_t) (bmsData[i][2]);
 874              		.loc 1 633 0 is_stmt 1
 875 0020 03EB4301 		add	r1, r3, r3, lsl #1
 876 0024 4A00     		lsls	r2, r1, #1
 877 0026 2244     		add	r2, r2, r4
 878 0028 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 879              	.LVL66:
 634:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 635:Src/main.c    **** 		cellVoltage += (uint16_t) (bmsData[i][3]);
 880              		.loc 1 635 0
 881 002a D178     		ldrb	r1, [r2, #3]	@ zero_extendqisi2
 882 002c 01EB0021 		add	r1, r1, r0, lsl #8
 883 0030 89B2     		uxth	r1, r1
 884              	.LVL67:
 636:Src/main.c    ****     if (cellVoltage == 65535) continue;
 885              		.loc 1 636 0
 886 0032 4FF6FF70 		movw	r0, #65535
 887 0036 8142     		cmp	r1, r0
 888 0038 EED0     		beq	.L39
 637:Src/main.c    **** 
 638:Src/main.c    ****     board = i / cfg.numOfCellsPerIC;
 889              		.loc 1 638 0
 890 003a 9DF82E60 		ldrb	r6, [sp, #46]	@ zero_extendqisi2
 891 003e B3FBF6F1 		udiv	r1, r3, r6
 892              	.LVL68:
 893 0042 C8B2     		uxtb	r0, r1
 894              	.LVL69:
 639:Src/main.c    ****     cell = i % cfg.numOfCellsPerIC;
 895              		.loc 1 639 0
 896 0044 06FB1131 		mls	r1, r6, r1, r3
 897 0048 C9B2     		uxtb	r1, r1
 898              	.LVL70:
 640:Src/main.c    ****     cellDischarge[board][cell] = 1;
 899              		.loc 1 640 0
 900 004a 05EBC000 		add	r0, r5, r0, lsl #3
 901              	.LVL71:
 902 004e 0126     		movs	r6, #1
 903              	.LVL72:
 904 0050 4654     		strb	r6, [r0, r1]
 905              	.LVL73:
ARM GAS  /tmp/ccGgKFCb.s 			page 30


 641:Src/main.c    **** 
 642:Src/main.c    ****     bmsData[i][1] &= 0x5F; //charging state = 2
 906              		.loc 1 642 0
 907 0052 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 908              	.LVL74:
 909 0054 01F05F01 		and	r1, r1, #95
 910 0058 5170     		strb	r1, [r2, #1]
 911 005a DDE7     		b	.L39
 912              	.LVL75:
 913              	.L42:
 914              	.LBE7:
 643:Src/main.c    **** 
 644:Src/main.c    ****     // // if any cell voltage is much greater than the minimum (>200mV), stop charging and discharg
 645:Src/main.c    ****     // if (cellVoltage > (minimum + cfg.max_difference)) {
 646:Src/main.c    ****     //   chargeRate = 0;
 647:Src/main.c    ****     //   fullDischarge[board][cell] = 1;
 648:Src/main.c    ****     //   bmsData[i][1] &= 0x7F; //charging state = 3
 649:Src/main.c    ****     // }
 650:Src/main.c    ****     // // if any cell voltage is greater than some absolute threshold (4.18V), stop charging and di
 651:Src/main.c    ****     // // could discharge to a fixed value (4.15V) instead
 652:Src/main.c    ****     // if (cellVoltage > cfg.stopCharge_threshold) {
 653:Src/main.c    ****     //   chargeRate = 0;
 654:Src/main.c    ****     //   fullDischarge[board][cell] = 1;
 655:Src/main.c    ****     //   bmsData[i][1] &= 0x9F; //charging state = 4
 656:Src/main.c    ****     // }
 657:Src/main.c    **** 
 658:Src/main.c    ****     // // if still charging AND cells above ~3V
 659:Src/main.c    ****     // if ((chargeRate != 0) && (minimum > 30000)) {
 660:Src/main.c    **** 
 661:Src/main.c    ****     //   // if any cell is above some absolute threshold, charge slower 
 662:Src/main.c    ****     //   if (cellVoltage > cfg.slowCharge_threshold)
 663:Src/main.c    ****     //     chargeRate = 1;
 664:Src/main.c    **** 
 665:Src/main.c    ****     //   // determine the relative balancing threshold based on minimum voltage
 666:Src/main.c    ****     //   threshold = balancingThreshold(cfg);
 667:Src/main.c    **** 
 668:Src/main.c    ****     //   if (cellVoltage > (minimum + threshold)) {
 669:Src/main.c    ****     //     cellDischarge[board][cell] = 1;
 670:Src/main.c    ****     //     bmsData[i][1] &= 0x2F; //charging state = 1
 671:Src/main.c    ****     //   }
 672:Src/main.c    ****     //   else {
 673:Src/main.c    ****     //     cellDischarge[board][cell] = 0;
 674:Src/main.c    ****     //     bmsData[i][1] &= 0x1F; //charging state = 0
 675:Src/main.c    ****     //   }
 676:Src/main.c    ****     // }
 677:Src/main.c    **** 	}
 678:Src/main.c    **** }
 915              		.loc 1 678 0
 916 005c 70BC     		pop	{r4, r5, r6}
 917              	.LCFI24:
 918              		.cfi_restore 6
 919              		.cfi_restore 5
 920              		.cfi_restore 4
 921              		.cfi_def_cfa_offset 16
 922 005e 04B0     		add	sp, sp, #16
 923              	.LCFI25:
 924              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccGgKFCb.s 			page 31


 925 0060 7047     		bx	lr
 926              	.L44:
 927 0062 00BF     		.align	2
 928              	.L43:
 929 0064 00000000 		.word	.LANCHOR0
 930              		.cfi_endproc
 931              	.LFE74:
 933              		.global	__aeabi_i2f
 934              		.global	__aeabi_fdiv
 935              		.global	__aeabi_f2uiz
 936              		.section	.text.balancingThreshold,"ax",%progbits
 937              		.align	1
 938              		.global	balancingThreshold
 939              		.syntax unified
 940              		.thumb
 941              		.thumb_func
 942              		.fpu softvfp
 944              	balancingThreshold:
 945              	.LFB75:
 679:Src/main.c    **** 
 680:Src/main.c    **** uint16_t balancingThreshold(BMSconfigStructTypedef cfg) {
 946              		.loc 1 680 0
 947              		.cfi_startproc
 948              		@ args = 96, pretend = 16, frame = 0
 949              		@ frame_needed = 0, uses_anonymous_args = 0
 950 0000 84B0     		sub	sp, sp, #16
 951              	.LCFI26:
 952              		.cfi_def_cfa_offset 16
 953 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 954              	.LCFI27:
 955              		.cfi_def_cfa_offset 40
 956              		.cfi_offset 3, -40
 957              		.cfi_offset 4, -36
 958              		.cfi_offset 5, -32
 959              		.cfi_offset 6, -28
 960              		.cfi_offset 7, -24
 961              		.cfi_offset 14, -20
 962 0004 06AC     		add	r4, sp, #24
 963 0006 84E80F00 		stm	r4, {r0, r1, r2, r3}
 681:Src/main.c    **** 
 682:Src/main.c    ****   if (minimum > cfg.start_scaling) {
 964              		.loc 1 682 0
 965 000a BDF84E60 		ldrh	r6, [sp, #78]
 966 000e 124B     		ldr	r3, .L50
 967 0010 1C88     		ldrh	r4, [r3]
 968 0012 A642     		cmp	r6, r4
 969 0014 05D3     		bcc	.L49
 683:Src/main.c    ****     // min1 = 4.1V   threshold1 = 50mV
 684:Src/main.c    ****     // min2 = 4.16V  threshold2 = 10mV
 685:Src/main.c    **** 
 686:Src/main.c    ****     // m = (threshold2 - threshold1) / (min2 - min1)
 687:Src/main.c    ****     // linear = m * (minimum - min1) + threshold1
 688:Src/main.c    **** 
 689:Src/main.c    ****     float m;
 690:Src/main.c    ****     uint16_t linear;
 691:Src/main.c    **** 
 692:Src/main.c    ****     //  ()
ARM GAS  /tmp/ccGgKFCb.s 			page 32


 693:Src/main.c    ****     m = ((float) (cfg.scale_to - cfg.balancing_difference)) / (cfg.stop_scaling - cfg.start_scaling
 694:Src/main.c    ****     linear = (uint16_t) m * (minimum - cfg.start_scaling) + cfg.balancing_difference;
 695:Src/main.c    **** 
 696:Src/main.c    ****     return linear;
 697:Src/main.c    **** 
 698:Src/main.c    ****   }
 699:Src/main.c    ****   if (minimum <= cfg.start_scaling)
 700:Src/main.c    ****     return cfg.balancing_difference; 
 970              		.loc 1 700 0
 971 0016 BDF84800 		ldrh	r0, [sp, #72]
 972              	.L47:
 701:Src/main.c    **** 
 702:Src/main.c    ****   return 0;
 703:Src/main.c    **** 
 704:Src/main.c    **** }
 973              		.loc 1 704 0
 974 001a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 975              	.LCFI28:
 976              		.cfi_remember_state
 977              		.cfi_restore 14
 978              		.cfi_restore 7
 979              		.cfi_restore 6
 980              		.cfi_restore 5
 981              		.cfi_restore 4
 982              		.cfi_restore 3
 983              		.cfi_def_cfa_offset 16
 984 001e 04B0     		add	sp, sp, #16
 985              	.LCFI29:
 986              		.cfi_def_cfa_offset 0
 987 0020 7047     		bx	lr
 988              	.L49:
 989              	.LCFI30:
 990              		.cfi_restore_state
 991              	.LBB8:
 693:Src/main.c    ****     linear = (uint16_t) m * (minimum - cfg.start_scaling) + cfg.balancing_difference;
 992              		.loc 1 693 0
 993 0022 BDF85200 		ldrh	r0, [sp, #82]
 994 0026 BDF84850 		ldrh	r5, [sp, #72]
 995 002a 401B     		subs	r0, r0, r5
 996 002c FFF7FEFF 		bl	__aeabi_i2f
 997              	.LVL76:
 998 0030 0746     		mov	r7, r0
 999 0032 BDF85000 		ldrh	r0, [sp, #80]
 1000 0036 801B     		subs	r0, r0, r6
 1001 0038 FFF7FEFF 		bl	__aeabi_i2f
 1002              	.LVL77:
 1003 003c 0146     		mov	r1, r0
 1004 003e 3846     		mov	r0, r7
 1005 0040 FFF7FEFF 		bl	__aeabi_fdiv
 1006              	.LVL78:
 694:Src/main.c    **** 
 1007              		.loc 1 694 0
 1008 0044 FFF7FEFF 		bl	__aeabi_f2uiz
 1009              	.LVL79:
 1010 0048 80B2     		uxth	r0, r0
 1011 004a A41B     		subs	r4, r4, r6
 1012 004c 04FB00F0 		mul	r0, r4, r0
ARM GAS  /tmp/ccGgKFCb.s 			page 33


 1013 0050 80B2     		uxth	r0, r0
 1014 0052 2844     		add	r0, r0, r5
 1015 0054 80B2     		uxth	r0, r0
 1016              	.LVL80:
 696:Src/main.c    **** 
 1017              		.loc 1 696 0
 1018 0056 E0E7     		b	.L47
 1019              	.L51:
 1020              		.align	2
 1021              	.L50:
 1022 0058 00000000 		.word	minimum
 1023              	.LBE8:
 1024              		.cfi_endproc
 1025              	.LFE75:
 1027              		.section	.text.checkDischarge,"ax",%progbits
 1028              		.align	1
 1029              		.global	checkDischarge
 1030              		.syntax unified
 1031              		.thumb
 1032              		.thumb_func
 1033              		.fpu softvfp
 1035              	checkDischarge:
 1036              	.LFB76:
 705:Src/main.c    **** 
 706:Src/main.c    **** void checkDischarge(BMSconfigStructTypedef cfg, bool fullDischarge[12][8], uint8_t bmsData[96][6]) 
 1037              		.loc 1 706 0
 1038              		.cfi_startproc
 1039              		@ args = 104, pretend = 16, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              		@ link register save eliminated.
 1042              	.LVL81:
 1043 0000 84B0     		sub	sp, sp, #16
 1044              	.LCFI31:
 1045              		.cfi_def_cfa_offset 16
 1046 0002 F0B4     		push	{r4, r5, r6, r7}
 1047              	.LCFI32:
 1048              		.cfi_def_cfa_offset 32
 1049              		.cfi_offset 4, -32
 1050              		.cfi_offset 5, -28
 1051              		.cfi_offset 6, -24
 1052              		.cfi_offset 7, -20
 1053 0004 04AC     		add	r4, sp, #16
 1054 0006 84E80F00 		stm	r4, {r0, r1, r2, r3}
 1055 000a DDF870C0 		ldr	ip, [sp, #112]
 1056 000e 1D9F     		ldr	r7, [sp, #116]
 1057              	.LVL82:
 1058              	.LBB9:
 707:Src/main.c    **** 
 708:Src/main.c    ****   uint8_t sum = 0;
 709:Src/main.c    ****   uint16_t cellVoltage;
 710:Src/main.c    ****   uint8_t board;
 711:Src/main.c    ****   uint8_t cell;
 712:Src/main.c    **** 
 713:Src/main.c    ****   for (uint8_t i = 0; i < 96; i++) {
 1059              		.loc 1 713 0
 1060 0010 0023     		movs	r3, #0
 1061              	.LBE9:
ARM GAS  /tmp/ccGgKFCb.s 			page 34


 708:Src/main.c    ****   uint16_t cellVoltage;
 1062              		.loc 1 708 0
 1063 0012 1E46     		mov	r6, r3
 1064              	.LBB10:
 1065              		.loc 1 713 0
 1066 0014 03E0     		b	.L53
 1067              	.LVL83:
 1068              	.L55:
 714:Src/main.c    **** 
 715:Src/main.c    ****     cellVoltage = 0;
 716:Src/main.c    ****     cellVoltage = (uint16_t) (bmsData[i][2]);
 717:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 718:Src/main.c    **** 		cellVoltage += (uint16_t) (bmsData[i][3]);
 719:Src/main.c    **** 
 720:Src/main.c    ****     board = i / cfg.numOfCellsPerIC;
 721:Src/main.c    ****     cell = i % cfg.numOfCellsPerIC;
 722:Src/main.c    **** 
 723:Src/main.c    ****     if (fullDischarge[board][cell] == 1) {
 724:Src/main.c    ****       if (cellVoltage <= minimum) {
 725:Src/main.c    ****         fullDischarge[board][cell] = 0;
 726:Src/main.c    ****         bmsData[i][1] &= 0x5F; //reset charging state to 2
 727:Src/main.c    ****       }
 728:Src/main.c    ****       else
 729:Src/main.c    ****         sum += 1;
 1069              		.loc 1 729 0
 1070 0016 0136     		adds	r6, r6, #1
 1071              	.LVL84:
 1072 0018 F6B2     		uxtb	r6, r6
 1073              	.LVL85:
 1074              	.L54:
 713:Src/main.c    **** 
 1075              		.loc 1 713 0 discriminator 2
 1076 001a 0133     		adds	r3, r3, #1
 1077              	.LVL86:
 1078 001c DBB2     		uxtb	r3, r3
 1079              	.LVL87:
 1080              	.L53:
 713:Src/main.c    **** 
 1081              		.loc 1 713 0 is_stmt 0 discriminator 1
 1082 001e 5F2B     		cmp	r3, #95
 1083 0020 20D8     		bhi	.L59
 1084              	.LVL88:
 716:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 1085              		.loc 1 716 0 is_stmt 1
 1086 0022 03EB4302 		add	r2, r3, r3, lsl #1
 1087 0026 5100     		lsls	r1, r2, #1
 1088 0028 3944     		add	r1, r1, r7
 1089 002a 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
 1090              	.LVL89:
 718:Src/main.c    **** 
 1091              		.loc 1 718 0
 1092 002c CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 1093 002e 02EB0022 		add	r2, r2, r0, lsl #8
 1094 0032 94B2     		uxth	r4, r2
 1095              	.LVL90:
 720:Src/main.c    ****     cell = i % cfg.numOfCellsPerIC;
 1096              		.loc 1 720 0
ARM GAS  /tmp/ccGgKFCb.s 			page 35


 1097 0034 9DF83250 		ldrb	r5, [sp, #50]	@ zero_extendqisi2
 1098 0038 B3FBF5F2 		udiv	r2, r3, r5
 1099 003c D0B2     		uxtb	r0, r2
 1100              	.LVL91:
 721:Src/main.c    **** 
 1101              		.loc 1 721 0
 1102 003e 05FB1232 		mls	r2, r5, r2, r3
 1103 0042 D2B2     		uxtb	r2, r2
 1104              	.LVL92:
 723:Src/main.c    ****       if (cellVoltage <= minimum) {
 1105              		.loc 1 723 0
 1106 0044 0CEBC000 		add	r0, ip, r0, lsl #3
 1107              	.LVL93:
 1108 0048 855C     		ldrb	r5, [r0, r2]	@ zero_extendqisi2
 1109              	.LVL94:
 1110 004a 002D     		cmp	r5, #0
 1111 004c E5D0     		beq	.L54
 724:Src/main.c    ****         fullDischarge[board][cell] = 0;
 1112              		.loc 1 724 0
 1113 004e 094D     		ldr	r5, .L60
 1114 0050 2D88     		ldrh	r5, [r5]
 1115 0052 A542     		cmp	r5, r4
 1116 0054 DFD3     		bcc	.L55
 725:Src/main.c    ****         bmsData[i][1] &= 0x5F; //reset charging state to 2
 1117              		.loc 1 725 0
 1118 0056 0024     		movs	r4, #0
 1119              	.LVL95:
 1120 0058 8454     		strb	r4, [r0, r2]
 1121              	.LVL96:
 726:Src/main.c    ****       }
 1122              		.loc 1 726 0
 1123 005a 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 1124              	.LVL97:
 1125 005c 02F05F02 		and	r2, r2, #95
 1126 0060 4A70     		strb	r2, [r1, #1]
 1127 0062 DAE7     		b	.L54
 1128              	.LVL98:
 1129              	.L59:
 1130              	.LBE10:
 730:Src/main.c    ****     }
 731:Src/main.c    ****   }
 732:Src/main.c    **** 
 733:Src/main.c    ****   if (sum == 0)
 1131              		.loc 1 733 0
 1132 0064 16B9     		cbnz	r6, .L52
 734:Src/main.c    ****     chargeRate = 2;
 1133              		.loc 1 734 0
 1134 0066 044B     		ldr	r3, .L60+4
 1135              	.LVL99:
 1136 0068 0222     		movs	r2, #2
 1137 006a 1A70     		strb	r2, [r3]
 1138              	.L52:
 735:Src/main.c    **** 
 736:Src/main.c    **** }
 1139              		.loc 1 736 0
 1140 006c F0BC     		pop	{r4, r5, r6, r7}
 1141              	.LCFI33:
ARM GAS  /tmp/ccGgKFCb.s 			page 36


 1142              		.cfi_restore 7
 1143              		.cfi_restore 6
 1144              		.cfi_restore 5
 1145              		.cfi_restore 4
 1146              		.cfi_def_cfa_offset 16
 1147              	.LVL100:
 1148 006e 04B0     		add	sp, sp, #16
 1149              	.LCFI34:
 1150              		.cfi_def_cfa_offset 0
 1151 0070 7047     		bx	lr
 1152              	.L61:
 1153 0072 00BF     		.align	2
 1154              	.L60:
 1155 0074 00000000 		.word	minimum
 1156 0078 00000000 		.word	.LANCHOR0
 1157              		.cfi_endproc
 1158              	.LFE76:
 1160              		.section	.text.setChargerTxData,"ax",%progbits
 1161              		.align	1
 1162              		.global	setChargerTxData
 1163              		.syntax unified
 1164              		.thumb
 1165              		.thumb_func
 1166              		.fpu softvfp
 1168              	setChargerTxData:
 1169              	.LFB77:
 737:Src/main.c    **** 
 738:Src/main.c    **** void setChargerTxData(BMSconfigStructTypedef cfg) {
 1170              		.loc 1 738 0
 1171              		.cfi_startproc
 1172              		@ args = 96, pretend = 16, frame = 0
 1173              		@ frame_needed = 0, uses_anonymous_args = 0
 1174 0000 84B0     		sub	sp, sp, #16
 1175              	.LCFI35:
 1176              		.cfi_def_cfa_offset 16
 1177 0002 08B5     		push	{r3, lr}
 1178              	.LCFI36:
 1179              		.cfi_def_cfa_offset 24
 1180              		.cfi_offset 3, -24
 1181              		.cfi_offset 14, -20
 1182 0004 0DF1080C 		add	ip, sp, #8
 1183 0008 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 739:Src/main.c    **** 
 740:Src/main.c    ****   TxHeader.ExtId = 0x1806E5F4;
 1184              		.loc 1 740 0
 1185 000c 184B     		ldr	r3, .L69
 1186 000e 194A     		ldr	r2, .L69+4
 1187 0010 5A60     		str	r2, [r3, #4]
 741:Src/main.c    ****   TxHeader.DLC = 8;
 1188              		.loc 1 741 0
 1189 0012 0822     		movs	r2, #8
 1190 0014 1A61     		str	r2, [r3, #16]
 742:Src/main.c    **** 
 743:Src/main.c    **** 	/* voltage data (hex value of desired voltage (V) times 10)*/
 744:Src/main.c    **** 	ChargerTxData[0] = (uint8_t)((cfg.chargerVoltage & 0xFF) >> 8);
 1191              		.loc 1 744 0
 1192 0016 184B     		ldr	r3, .L69+8
ARM GAS  /tmp/ccGgKFCb.s 			page 37


 1193 0018 0022     		movs	r2, #0
 1194 001a 1A70     		strb	r2, [r3]
 745:Src/main.c    **** 	ChargerTxData[1] = (uint8_t)(cfg.chargerVoltage & 0xFF);
 1195              		.loc 1 745 0
 1196 001c 9DF84820 		ldrb	r2, [sp, #72]	@ zero_extendqisi2
 1197 0020 5A70     		strb	r2, [r3, #1]
 746:Src/main.c    **** 
 747:Src/main.c    **** 	/* set the current data (hex value of desired current (A) times 10) */
 748:Src/main.c    **** 	switch (chargeRate) {
 1198              		.loc 1 748 0
 1199 0022 164B     		ldr	r3, .L69+12
 1200 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1201 0026 012B     		cmp	r3, #1
 1202 0028 06D0     		beq	.L64
 1203 002a 022B     		cmp	r3, #2
 1204 002c 19D0     		beq	.L65
 749:Src/main.c    **** 		case 1:
 750:Src/main.c    **** 			/* lower current */
 751:Src/main.c    **** 			ChargerTxData[2] = (uint8_t)((cfg.lowerCurrent & 0xFF) >> 8);
 752:Src/main.c    **** 			ChargerTxData[3] = (uint8_t)(cfg.lowerCurrent & 0xFF);
 753:Src/main.c    **** 			break;
 754:Src/main.c    **** 
 755:Src/main.c    **** 		case 2:
 756:Src/main.c    **** 			/* normal current */
 757:Src/main.c    **** 			ChargerTxData[2] = (uint8_t)((cfg.normalCurrent & 0xFF) >> 8);
 758:Src/main.c    **** 			ChargerTxData[3] = (uint8_t)(cfg.normalCurrent & 0xFF);
 759:Src/main.c    **** 			break;
 760:Src/main.c    **** 
 761:Src/main.c    **** 		default:
 762:Src/main.c    **** 			/* no current */
 763:Src/main.c    **** 			ChargerTxData[2] = 0x00;
 1205              		.loc 1 763 0
 1206 002e 124B     		ldr	r3, .L69+8
 1207 0030 0022     		movs	r2, #0
 1208 0032 9A70     		strb	r2, [r3, #2]
 764:Src/main.c    **** 			ChargerTxData[3] = 0x00;
 1209              		.loc 1 764 0
 1210 0034 DA70     		strb	r2, [r3, #3]
 1211 0036 05E0     		b	.L66
 1212              	.L64:
 751:Src/main.c    **** 			ChargerTxData[3] = (uint8_t)(cfg.lowerCurrent & 0xFF);
 1213              		.loc 1 751 0
 1214 0038 0F4B     		ldr	r3, .L69+8
 1215 003a 0022     		movs	r2, #0
 1216 003c 9A70     		strb	r2, [r3, #2]
 752:Src/main.c    **** 			break;
 1217              		.loc 1 752 0
 1218 003e 9DF84620 		ldrb	r2, [sp, #70]	@ zero_extendqisi2
 1219 0042 DA70     		strb	r2, [r3, #3]
 1220              	.L66:
 765:Src/main.c    **** 	}
 766:Src/main.c    **** 
 767:Src/main.c    **** 	/* these data bytes are not used */
 768:Src/main.c    **** 	ChargerTxData[4] = 0x00;
 1221              		.loc 1 768 0
 1222 0044 0C4A     		ldr	r2, .L69+8
 1223 0046 0023     		movs	r3, #0
ARM GAS  /tmp/ccGgKFCb.s 			page 38


 1224 0048 1371     		strb	r3, [r2, #4]
 769:Src/main.c    **** 	ChargerTxData[5] = 0x00;
 1225              		.loc 1 769 0
 1226 004a 5371     		strb	r3, [r2, #5]
 770:Src/main.c    **** 	ChargerTxData[6] = 0x00;
 1227              		.loc 1 770 0
 1228 004c 9371     		strb	r3, [r2, #6]
 771:Src/main.c    **** 	ChargerTxData[7] = 0x00;
 1229              		.loc 1 771 0
 1230 004e D371     		strb	r3, [r2, #7]
 772:Src/main.c    **** 
 773:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &ChargerTxHeader, ChargerTxData, &TxMailbox);
 1231              		.loc 1 773 0
 1232 0050 0B4B     		ldr	r3, .L69+16
 1233 0052 0C49     		ldr	r1, .L69+20
 1234 0054 0C48     		ldr	r0, .L69+24
 1235 0056 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1236              	.LVL101:
 774:Src/main.c    **** }
 1237              		.loc 1 774 0
 1238 005a BDE80840 		pop	{r3, lr}
 1239              	.LCFI37:
 1240              		.cfi_remember_state
 1241              		.cfi_restore 14
 1242              		.cfi_restore 3
 1243              		.cfi_def_cfa_offset 16
 1244 005e 04B0     		add	sp, sp, #16
 1245              	.LCFI38:
 1246              		.cfi_def_cfa_offset 0
 1247 0060 7047     		bx	lr
 1248              	.L65:
 1249              	.LCFI39:
 1250              		.cfi_restore_state
 757:Src/main.c    **** 			ChargerTxData[3] = (uint8_t)(cfg.normalCurrent & 0xFF);
 1251              		.loc 1 757 0
 1252 0062 054B     		ldr	r3, .L69+8
 1253 0064 0022     		movs	r2, #0
 1254 0066 9A70     		strb	r2, [r3, #2]
 758:Src/main.c    **** 			break;
 1255              		.loc 1 758 0
 1256 0068 9DF84420 		ldrb	r2, [sp, #68]	@ zero_extendqisi2
 1257 006c DA70     		strb	r2, [r3, #3]
 759:Src/main.c    **** 
 1258              		.loc 1 759 0
 1259 006e E9E7     		b	.L66
 1260              	.L70:
 1261              		.align	2
 1262              	.L69:
 1263 0070 00000000 		.word	TxHeader
 1264 0074 F4E50618 		.word	403105268
 1265 0078 00000000 		.word	ChargerTxData
 1266 007c 00000000 		.word	.LANCHOR0
 1267 0080 00000000 		.word	TxMailbox
 1268 0084 00000000 		.word	ChargerTxHeader
 1269 0088 00000000 		.word	hcan
 1270              		.cfi_endproc
 1271              	.LFE77:
ARM GAS  /tmp/ccGgKFCb.s 			page 39


 1273              		.section	.text.CELLVAL_message,"ax",%progbits
 1274              		.align	1
 1275              		.global	CELLVAL_message
 1276              		.syntax unified
 1277              		.thumb
 1278              		.thumb_func
 1279              		.fpu softvfp
 1281              	CELLVAL_message:
 1282              	.LFB78:
 775:Src/main.c    **** 
 776:Src/main.c    **** void CELLVAL_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]) {
 1283              		.loc 1 776 0
 1284              		.cfi_startproc
 1285              		@ args = 100, pretend = 16, frame = 0
 1286              		@ frame_needed = 0, uses_anonymous_args = 0
 1287              	.LVL102:
 1288 0000 84B0     		sub	sp, sp, #16
 1289              	.LCFI40:
 1290              		.cfi_def_cfa_offset 16
 1291 0002 38B5     		push	{r3, r4, r5, lr}
 1292              	.LCFI41:
 1293              		.cfi_def_cfa_offset 32
 1294              		.cfi_offset 3, -32
 1295              		.cfi_offset 4, -28
 1296              		.cfi_offset 5, -24
 1297              		.cfi_offset 14, -20
 1298 0004 04AC     		add	r4, sp, #16
 1299 0006 84E80F00 		stm	r4, {r0, r1, r2, r3}
 1300 000a 1C9D     		ldr	r5, [sp, #112]
 777:Src/main.c    **** 	
 778:Src/main.c    ****   TxHeader.StdId = CELLVAL_ID;
 1301              		.loc 1 778 0
 1302 000c 134B     		ldr	r3, .L75
 1303 000e 0722     		movs	r2, #7
 1304 0010 1A60     		str	r2, [r3]
 779:Src/main.c    ****   TxHeader.DLC = 6;
 1305              		.loc 1 779 0
 1306 0012 0622     		movs	r2, #6
 1307 0014 1A61     		str	r2, [r3, #16]
 1308              	.LVL103:
 1309              	.LBB11:
 780:Src/main.c    **** 
 781:Src/main.c    ****   for (uint8_t cell = 0; cell < 96; cell++) {
 1310              		.loc 1 781 0
 1311 0016 0024     		movs	r4, #0
 1312 0018 1AE0     		b	.L72
 1313              	.LVL104:
 1314              	.L73:
 782:Src/main.c    ****     CELLVAL_DATA[0] = bmsData[cell][0];
 1315              		.loc 1 782 0 discriminator 3
 1316 001a 04EB4403 		add	r3, r4, r4, lsl #1
 1317 001e 5A00     		lsls	r2, r3, #1
 1318 0020 AB18     		adds	r3, r5, r2
 1319 0022 A95C     		ldrb	r1, [r5, r2]	@ zero_extendqisi2
 1320 0024 0E4A     		ldr	r2, .L75+4
 1321 0026 1170     		strb	r1, [r2]
 783:Src/main.c    ****     CELLVAL_DATA[1] = bmsData[cell][1];
ARM GAS  /tmp/ccGgKFCb.s 			page 40


 1322              		.loc 1 783 0 discriminator 3
 1323 0028 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 1324 002a 5170     		strb	r1, [r2, #1]
 784:Src/main.c    ****     CELLVAL_DATA[2] = bmsData[cell][2];
 1325              		.loc 1 784 0 discriminator 3
 1326 002c 9978     		ldrb	r1, [r3, #2]	@ zero_extendqisi2
 1327 002e 9170     		strb	r1, [r2, #2]
 785:Src/main.c    ****     CELLVAL_DATA[3] = bmsData[cell][3];
 1328              		.loc 1 785 0 discriminator 3
 1329 0030 D978     		ldrb	r1, [r3, #3]	@ zero_extendqisi2
 1330 0032 D170     		strb	r1, [r2, #3]
 786:Src/main.c    ****     CELLVAL_DATA[4] = bmsData[cell][4];
 1331              		.loc 1 786 0 discriminator 3
 1332 0034 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
 1333 0036 1171     		strb	r1, [r2, #4]
 787:Src/main.c    ****     CELLVAL_DATA[5] = bmsData[cell][5];
 1334              		.loc 1 787 0 discriminator 3
 1335 0038 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1336 003a 5371     		strb	r3, [r2, #5]
 788:Src/main.c    **** 
 789:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan, &TxHeader, CELLVAL_DATA, &TxMailbox);
 1337              		.loc 1 789 0 discriminator 3
 1338 003c 094B     		ldr	r3, .L75+8
 1339 003e 0749     		ldr	r1, .L75
 1340 0040 0948     		ldr	r0, .L75+12
 1341 0042 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1342              	.LVL105:
 790:Src/main.c    ****     HAL_Delay(10);
 1343              		.loc 1 790 0 discriminator 3
 1344 0046 0A20     		movs	r0, #10
 1345 0048 FFF7FEFF 		bl	HAL_Delay
 1346              	.LVL106:
 781:Src/main.c    ****     CELLVAL_DATA[0] = bmsData[cell][0];
 1347              		.loc 1 781 0 discriminator 3
 1348 004c 0134     		adds	r4, r4, #1
 1349              	.LVL107:
 1350 004e E4B2     		uxtb	r4, r4
 1351              	.LVL108:
 1352              	.L72:
 781:Src/main.c    ****     CELLVAL_DATA[0] = bmsData[cell][0];
 1353              		.loc 1 781 0 is_stmt 0 discriminator 1
 1354 0050 5F2C     		cmp	r4, #95
 1355 0052 E2D9     		bls	.L73
 1356              	.LBE11:
 791:Src/main.c    **** 
 792:Src/main.c    ****   }
 793:Src/main.c    **** }
 1357              		.loc 1 793 0 is_stmt 1
 1358 0054 BDE83840 		pop	{r3, r4, r5, lr}
 1359              	.LCFI42:
 1360              		.cfi_restore 14
 1361              		.cfi_restore 5
 1362              		.cfi_restore 4
 1363              		.cfi_restore 3
 1364              		.cfi_def_cfa_offset 16
 1365              	.LVL109:
 1366 0058 04B0     		add	sp, sp, #16
ARM GAS  /tmp/ccGgKFCb.s 			page 41


 1367              	.LCFI43:
 1368              		.cfi_def_cfa_offset 0
 1369 005a 7047     		bx	lr
 1370              	.L76:
 1371              		.align	2
 1372              	.L75:
 1373 005c 00000000 		.word	TxHeader
 1374 0060 00000000 		.word	CELLVAL_DATA
 1375 0064 00000000 		.word	TxMailbox
 1376 0068 00000000 		.word	hcan
 1377              		.cfi_endproc
 1378              	.LFE78:
 1380              		.section	.text.BMSSTAT_message,"ax",%progbits
 1381              		.align	1
 1382              		.global	BMSSTAT_message
 1383              		.syntax unified
 1384              		.thumb
 1385              		.thumb_func
 1386              		.fpu softvfp
 1388              	BMSSTAT_message:
 1389              	.LFB79:
 794:Src/main.c    **** 
 795:Src/main.c    **** void BMSSTAT_message(BMSconfigStructTypedef cfg, uint8_t bmsStatus[6]) {
 1390              		.loc 1 795 0
 1391              		.cfi_startproc
 1392              		@ args = 100, pretend = 16, frame = 0
 1393              		@ frame_needed = 0, uses_anonymous_args = 0
 1394              	.LVL110:
 1395 0000 84B0     		sub	sp, sp, #16
 1396              	.LCFI44:
 1397              		.cfi_def_cfa_offset 16
 1398 0002 08B5     		push	{r3, lr}
 1399              	.LCFI45:
 1400              		.cfi_def_cfa_offset 24
 1401              		.cfi_offset 3, -24
 1402              		.cfi_offset 14, -20
 1403 0004 0DF1080C 		add	ip, sp, #8
 1404 0008 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 796:Src/main.c    **** 
 797:Src/main.c    ****   TxHeader.StdId = BMSSTAT_ID;
 1405              		.loc 1 797 0
 1406 000c 0649     		ldr	r1, .L79
 1407 000e 0823     		movs	r3, #8
 1408 0010 0B60     		str	r3, [r1]
 798:Src/main.c    ****   TxHeader.DLC = 6;
 1409              		.loc 1 798 0
 1410 0012 0623     		movs	r3, #6
 1411 0014 0B61     		str	r3, [r1, #16]
 799:Src/main.c    **** 
 800:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxHeader, bmsStatus, &TxMailbox);
 1412              		.loc 1 800 0
 1413 0016 054B     		ldr	r3, .L79+4
 1414 0018 1A9A     		ldr	r2, [sp, #104]
 1415 001a 0548     		ldr	r0, .L79+8
 1416 001c FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1417              	.LVL111:
 801:Src/main.c    **** }
ARM GAS  /tmp/ccGgKFCb.s 			page 42


 1418              		.loc 1 801 0
 1419 0020 BDE80840 		pop	{r3, lr}
 1420              	.LCFI46:
 1421              		.cfi_restore 14
 1422              		.cfi_restore 3
 1423              		.cfi_def_cfa_offset 16
 1424 0024 04B0     		add	sp, sp, #16
 1425              	.LCFI47:
 1426              		.cfi_def_cfa_offset 0
 1427 0026 7047     		bx	lr
 1428              	.L80:
 1429              		.align	2
 1430              	.L79:
 1431 0028 00000000 		.word	TxHeader
 1432 002c 00000000 		.word	TxMailbox
 1433 0030 00000000 		.word	hcan
 1434              		.cfi_endproc
 1435              	.LFE79:
 1437              		.section	.text.BMSVINF_message,"ax",%progbits
 1438              		.align	1
 1439              		.global	BMSVINF_message
 1440              		.syntax unified
 1441              		.thumb
 1442              		.thumb_func
 1443              		.fpu softvfp
 1445              	BMSVINF_message:
 1446              	.LFB80:
 802:Src/main.c    **** 
 803:Src/main.c    **** void BMSVINF_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]) {
 1447              		.loc 1 803 0
 1448              		.cfi_startproc
 1449              		@ args = 100, pretend = 16, frame = 8
 1450              		@ frame_needed = 0, uses_anonymous_args = 0
 1451              	.LVL112:
 1452 0000 84B0     		sub	sp, sp, #16
 1453              	.LCFI48:
 1454              		.cfi_def_cfa_offset 16
 1455 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 1456              	.LCFI49:
 1457              		.cfi_def_cfa_offset 36
 1458              		.cfi_offset 4, -36
 1459              		.cfi_offset 5, -32
 1460              		.cfi_offset 6, -28
 1461              		.cfi_offset 7, -24
 1462              		.cfi_offset 14, -20
 1463 0004 83B0     		sub	sp, sp, #12
 1464              	.LCFI50:
 1465              		.cfi_def_cfa_offset 48
 1466 0006 08AE     		add	r6, sp, #32
 1467 0008 86E80F00 		stm	r6, {r0, r1, r2, r3}
 1468 000c DDF880C0 		ldr	ip, [sp, #128]
 1469              	.LVL113:
 1470              	.LBB12:
 804:Src/main.c    **** 
 805:Src/main.c    ****   uint16_t cellVoltage;
 806:Src/main.c    ****   uint16_t minV = 0xFFFF;
 807:Src/main.c    ****   uint8_t minCell;
ARM GAS  /tmp/ccGgKFCb.s 			page 43


 808:Src/main.c    ****   uint16_t maxV = 0x0000;
 809:Src/main.c    ****   uint8_t maxCell;
 810:Src/main.c    ****   uint16_t averageV;
 811:Src/main.c    ****   uint32_t sum = 0;
 812:Src/main.c    **** 
 813:Src/main.c    ****   for (uint8_t cell = 0; cell < 96; cell++) {
 1471              		.loc 1 813 0
 1472 0010 0022     		movs	r2, #0
 1473              	.LBE12:
 811:Src/main.c    **** 
 1474              		.loc 1 811 0
 1475 0012 1046     		mov	r0, r2
 808:Src/main.c    ****   uint8_t maxCell;
 1476              		.loc 1 808 0
 1477 0014 1746     		mov	r7, r2
 806:Src/main.c    ****   uint8_t minCell;
 1478              		.loc 1 806 0
 1479 0016 4FF6FF76 		movw	r6, #65535
 1480              	.LBB13:
 1481              		.loc 1 813 0
 1482 001a 02E0     		b	.L82
 1483              	.LVL114:
 1484              	.L84:
 814:Src/main.c    **** 
 815:Src/main.c    ****     cellVoltage = 0;
 816:Src/main.c    ****     cellVoltage = (uint16_t) (bmsData[cell][2]);
 817:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 818:Src/main.c    **** 		cellVoltage += (uint16_t) (bmsData[cell][3]);
 819:Src/main.c    **** 
 820:Src/main.c    ****     if (cellVoltage < minV) {
 821:Src/main.c    ****       minV = cellVoltage;
 822:Src/main.c    ****       minCell = cell + 1;
 823:Src/main.c    ****     }
 824:Src/main.c    **** 
 825:Src/main.c    ****     if (cellVoltage > maxV) {
 826:Src/main.c    ****       maxV = cellVoltage;
 827:Src/main.c    ****       maxCell = cell + 1;
 828:Src/main.c    ****     }
 829:Src/main.c    **** 
 830:Src/main.c    ****     sum += cellVoltage;
 1485              		.loc 1 830 0 discriminator 2
 1486 001c 1844     		add	r0, r0, r3
 1487              	.LVL115:
 813:Src/main.c    **** 
 1488              		.loc 1 813 0 discriminator 2
 1489 001e 0132     		adds	r2, r2, #1
 1490              	.LVL116:
 1491 0020 D2B2     		uxtb	r2, r2
 1492              	.LVL117:
 1493              	.L82:
 813:Src/main.c    **** 
 1494              		.loc 1 813 0 is_stmt 0 discriminator 1
 1495 0022 5F2A     		cmp	r2, #95
 1496 0024 14D8     		bhi	.L87
 1497              	.LVL118:
 816:Src/main.c    ****     cellVoltage = cellVoltage << 8;
 1498              		.loc 1 816 0 is_stmt 1
ARM GAS  /tmp/ccGgKFCb.s 			page 44


 1499 0026 02EB4203 		add	r3, r2, r2, lsl #1
 1500 002a 5900     		lsls	r1, r3, #1
 1501 002c 6144     		add	r1, r1, ip
 1502 002e 91F802E0 		ldrb	lr, [r1, #2]	@ zero_extendqisi2
 1503              	.LVL119:
 818:Src/main.c    **** 
 1504              		.loc 1 818 0
 1505 0032 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 1506 0034 03EB0E23 		add	r3, r3, lr, lsl #8
 1507 0038 9BB2     		uxth	r3, r3
 1508              	.LVL120:
 820:Src/main.c    ****       minV = cellVoltage;
 1509              		.loc 1 820 0
 1510 003a 9E42     		cmp	r6, r3
 1511 003c 02D9     		bls	.L83
 1512              	.LVL121:
 822:Src/main.c    ****     }
 1513              		.loc 1 822 0
 1514 003e 541C     		adds	r4, r2, #1
 1515              	.LVL122:
 1516 0040 E4B2     		uxtb	r4, r4
 1517              	.LVL123:
 821:Src/main.c    ****       minCell = cell + 1;
 1518              		.loc 1 821 0
 1519 0042 1E46     		mov	r6, r3
 1520              	.LVL124:
 1521              	.L83:
 825:Src/main.c    ****       maxV = cellVoltage;
 1522              		.loc 1 825 0
 1523 0044 9F42     		cmp	r7, r3
 1524 0046 E9D2     		bcs	.L84
 1525              	.LVL125:
 827:Src/main.c    ****     }
 1526              		.loc 1 827 0
 1527 0048 551C     		adds	r5, r2, #1
 1528              	.LVL126:
 1529 004a EDB2     		uxtb	r5, r5
 1530              	.LVL127:
 826:Src/main.c    ****       maxCell = cell + 1;
 1531              		.loc 1 826 0
 1532 004c 1F46     		mov	r7, r3
 1533 004e E5E7     		b	.L84
 1534              	.LVL128:
 1535              	.L87:
 1536              	.LBE13:
 831:Src/main.c    ****   }
 832:Src/main.c    **** 
 833:Src/main.c    ****   sumOfCells = sum;
 1537              		.loc 1 833 0
 1538 0050 174B     		ldr	r3, .L88
 1539 0052 1860     		str	r0, [r3]
 834:Src/main.c    ****   minimum = minV;
 1540              		.loc 1 834 0
 1541 0054 174B     		ldr	r3, .L88+4
 1542 0056 1E80     		strh	r6, [r3]	@ movhi
 835:Src/main.c    ****   averageV = (uint16_t) (sum / (cfg.numOfICs * cfg.numOfCellsPerIC));
 1543              		.loc 1 835 0
ARM GAS  /tmp/ccGgKFCb.s 			page 45


 1544 0058 9DF82020 		ldrb	r2, [sp, #32]	@ zero_extendqisi2
 1545              	.LVL129:
 1546 005c 9DF84230 		ldrb	r3, [sp, #66]	@ zero_extendqisi2
 1547 0060 03FB02F3 		mul	r3, r3, r2
 1548 0064 B0FBF3F3 		udiv	r3, r0, r3
 1549              	.LVL130:
 836:Src/main.c    **** 
 837:Src/main.c    ****   TxHeader.StdId = BMSVINF_ID;
 1550              		.loc 1 837 0
 1551 0068 1349     		ldr	r1, .L88+8
 1552 006a 0922     		movs	r2, #9
 1553 006c 0A60     		str	r2, [r1]
 838:Src/main.c    ****   TxHeader.DLC = 8;
 1554              		.loc 1 838 0
 1555 006e 0822     		movs	r2, #8
 1556 0070 0A61     		str	r2, [r1, #16]
 839:Src/main.c    ****   uint8_t BMSVINF_DATA[8];
 840:Src/main.c    **** 
 841:Src/main.c    ****   BMSVINF_DATA[0] = (uint8_t) ((maxV >> 8) & 0xFF);
 1557              		.loc 1 841 0
 1558 0072 27FA02F2 		lsr	r2, r7, r2
 1559 0076 8DF80020 		strb	r2, [sp]
 842:Src/main.c    ****   BMSVINF_DATA[1] = (uint8_t) (maxV & 0xFF);
 1560              		.loc 1 842 0
 1561 007a 8DF80170 		strb	r7, [sp, #1]
 843:Src/main.c    ****   BMSVINF_DATA[2] = maxCell;
 1562              		.loc 1 843 0
 1563 007e 8DF80250 		strb	r5, [sp, #2]
 844:Src/main.c    ****   BMSVINF_DATA[3] = (uint8_t) ((minV >> 8) & 0xFF);
 1564              		.loc 1 844 0
 1565 0082 320A     		lsrs	r2, r6, #8
 1566 0084 8DF80320 		strb	r2, [sp, #3]
 845:Src/main.c    ****   BMSVINF_DATA[4] = (uint8_t) (minV & 0xFF);
 1567              		.loc 1 845 0
 1568 0088 8DF80460 		strb	r6, [sp, #4]
 846:Src/main.c    ****   BMSVINF_DATA[5] = minCell;
 1569              		.loc 1 846 0
 1570 008c 8DF80540 		strb	r4, [sp, #5]
 847:Src/main.c    ****   BMSVINF_DATA[6] = (uint8_t) ((averageV >> 8) & 0xFF);
 1571              		.loc 1 847 0
 1572 0090 C3F30722 		ubfx	r2, r3, #8, #8
 1573 0094 8DF80620 		strb	r2, [sp, #6]
 848:Src/main.c    ****   BMSVINF_DATA[7] = (uint8_t) (averageV & 0xFF);
 1574              		.loc 1 848 0
 1575 0098 8DF80730 		strb	r3, [sp, #7]
 849:Src/main.c    **** 
 850:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxHeader, BMSVINF_DATA, &TxMailbox);
 1576              		.loc 1 850 0
 1577 009c 074B     		ldr	r3, .L88+12
 1578              	.LVL131:
 1579 009e 6A46     		mov	r2, sp
 1580 00a0 0748     		ldr	r0, .L88+16
 1581              	.LVL132:
 1582 00a2 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1583              	.LVL133:
 851:Src/main.c    **** 
 852:Src/main.c    **** }
ARM GAS  /tmp/ccGgKFCb.s 			page 46


 1584              		.loc 1 852 0
 1585 00a6 03B0     		add	sp, sp, #12
 1586              	.LCFI51:
 1587              		.cfi_def_cfa_offset 36
 1588              		@ sp needed
 1589 00a8 BDE8F040 		pop	{r4, r5, r6, r7, lr}
 1590              	.LCFI52:
 1591              		.cfi_restore 14
 1592              		.cfi_restore 7
 1593              		.cfi_restore 6
 1594              		.cfi_restore 5
 1595              		.cfi_restore 4
 1596              		.cfi_def_cfa_offset 16
 1597              	.LVL134:
 1598 00ac 04B0     		add	sp, sp, #16
 1599              	.LCFI53:
 1600              		.cfi_def_cfa_offset 0
 1601 00ae 7047     		bx	lr
 1602              	.L89:
 1603              		.align	2
 1604              	.L88:
 1605 00b0 00000000 		.word	sumOfCells
 1606 00b4 00000000 		.word	minimum
 1607 00b8 00000000 		.word	TxHeader
 1608 00bc 00000000 		.word	TxMailbox
 1609 00c0 00000000 		.word	hcan
 1610              		.cfi_endproc
 1611              	.LFE80:
 1613              		.section	.text.BMSTINF_message,"ax",%progbits
 1614              		.align	1
 1615              		.global	BMSTINF_message
 1616              		.syntax unified
 1617              		.thumb
 1618              		.thumb_func
 1619              		.fpu softvfp
 1621              	BMSTINF_message:
 1622              	.LFB81:
 853:Src/main.c    **** 
 854:Src/main.c    **** void BMSTINF_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]) {
 1623              		.loc 1 854 0
 1624              		.cfi_startproc
 1625              		@ args = 100, pretend = 16, frame = 8
 1626              		@ frame_needed = 0, uses_anonymous_args = 0
 1627              	.LVL135:
 1628 0000 84B0     		sub	sp, sp, #16
 1629              	.LCFI54:
 1630              		.cfi_def_cfa_offset 16
 1631 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 1632              	.LCFI55:
 1633              		.cfi_def_cfa_offset 36
 1634              		.cfi_offset 4, -36
 1635              		.cfi_offset 5, -32
 1636              		.cfi_offset 6, -28
 1637              		.cfi_offset 7, -24
 1638              		.cfi_offset 14, -20
 1639 0004 83B0     		sub	sp, sp, #12
 1640              	.LCFI56:
ARM GAS  /tmp/ccGgKFCb.s 			page 47


 1641              		.cfi_def_cfa_offset 48
 1642 0006 08AE     		add	r6, sp, #32
 1643 0008 86E80F00 		stm	r6, {r0, r1, r2, r3}
 1644 000c DDF880C0 		ldr	ip, [sp, #128]
 1645              	.LVL136:
 1646              	.LBB14:
 855:Src/main.c    **** 
 856:Src/main.c    ****   uint16_t cellTemp;
 857:Src/main.c    ****   uint16_t minT = 0xFFFF;
 858:Src/main.c    ****   uint8_t minCell;
 859:Src/main.c    ****   uint16_t maxT = 0x0000;
 860:Src/main.c    ****   uint8_t maxCell;
 861:Src/main.c    ****   uint16_t averageT;
 862:Src/main.c    ****   uint32_t sum = 0;
 863:Src/main.c    **** 
 864:Src/main.c    ****   for (uint8_t cell = 0; cell < 96; cell++) {
 1647              		.loc 1 864 0
 1648 0010 0022     		movs	r2, #0
 1649              	.LBE14:
 862:Src/main.c    **** 
 1650              		.loc 1 862 0
 1651 0012 1046     		mov	r0, r2
 859:Src/main.c    ****   uint8_t maxCell;
 1652              		.loc 1 859 0
 1653 0014 1746     		mov	r7, r2
 857:Src/main.c    ****   uint8_t minCell;
 1654              		.loc 1 857 0
 1655 0016 4FF6FF76 		movw	r6, #65535
 1656              	.LBB15:
 1657              		.loc 1 864 0
 1658 001a 02E0     		b	.L91
 1659              	.LVL137:
 1660              	.L93:
 865:Src/main.c    **** 
 866:Src/main.c    ****     cellTemp = 0;
 867:Src/main.c    ****     cellTemp = (uint16_t) (bmsData[cell][4]);
 868:Src/main.c    ****     cellTemp = cellTemp << 8;
 869:Src/main.c    **** 		cellTemp += (uint16_t) (bmsData[cell][5]);
 870:Src/main.c    **** 
 871:Src/main.c    ****     if (cellTemp < minT) {
 872:Src/main.c    ****       minT = cellTemp;
 873:Src/main.c    ****       minCell = cell + 1;
 874:Src/main.c    ****     }
 875:Src/main.c    **** 
 876:Src/main.c    ****     if (cellTemp > maxT) {
 877:Src/main.c    ****       maxT = cellTemp;
 878:Src/main.c    ****       maxCell = cell + 1;
 879:Src/main.c    ****     }
 880:Src/main.c    **** 
 881:Src/main.c    ****     sum += cellTemp;
 1661              		.loc 1 881 0 discriminator 2
 1662 001c 1844     		add	r0, r0, r3
 1663              	.LVL138:
 864:Src/main.c    **** 
 1664              		.loc 1 864 0 discriminator 2
 1665 001e 0132     		adds	r2, r2, #1
 1666              	.LVL139:
ARM GAS  /tmp/ccGgKFCb.s 			page 48


 1667 0020 D2B2     		uxtb	r2, r2
 1668              	.LVL140:
 1669              	.L91:
 864:Src/main.c    **** 
 1670              		.loc 1 864 0 is_stmt 0 discriminator 1
 1671 0022 5F2A     		cmp	r2, #95
 1672 0024 14D8     		bhi	.L96
 1673              	.LVL141:
 867:Src/main.c    ****     cellTemp = cellTemp << 8;
 1674              		.loc 1 867 0 is_stmt 1
 1675 0026 02EB4203 		add	r3, r2, r2, lsl #1
 1676 002a 5900     		lsls	r1, r3, #1
 1677 002c 6144     		add	r1, r1, ip
 1678 002e 91F804E0 		ldrb	lr, [r1, #4]	@ zero_extendqisi2
 1679              	.LVL142:
 869:Src/main.c    **** 
 1680              		.loc 1 869 0
 1681 0032 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 1682 0034 03EB0E23 		add	r3, r3, lr, lsl #8
 1683 0038 9BB2     		uxth	r3, r3
 1684              	.LVL143:
 871:Src/main.c    ****       minT = cellTemp;
 1685              		.loc 1 871 0
 1686 003a 9E42     		cmp	r6, r3
 1687 003c 02D9     		bls	.L92
 1688              	.LVL144:
 873:Src/main.c    ****     }
 1689              		.loc 1 873 0
 1690 003e 541C     		adds	r4, r2, #1
 1691              	.LVL145:
 1692 0040 E4B2     		uxtb	r4, r4
 1693              	.LVL146:
 872:Src/main.c    ****       minCell = cell + 1;
 1694              		.loc 1 872 0
 1695 0042 1E46     		mov	r6, r3
 1696              	.LVL147:
 1697              	.L92:
 876:Src/main.c    ****       maxT = cellTemp;
 1698              		.loc 1 876 0
 1699 0044 9F42     		cmp	r7, r3
 1700 0046 E9D2     		bcs	.L93
 1701              	.LVL148:
 878:Src/main.c    ****     }
 1702              		.loc 1 878 0
 1703 0048 551C     		adds	r5, r2, #1
 1704              	.LVL149:
 1705 004a EDB2     		uxtb	r5, r5
 1706              	.LVL150:
 877:Src/main.c    ****       maxCell = cell + 1;
 1707              		.loc 1 877 0
 1708 004c 1F46     		mov	r7, r3
 1709 004e E5E7     		b	.L93
 1710              	.LVL151:
 1711              	.L96:
 1712              	.LBE15:
 882:Src/main.c    ****   }
 883:Src/main.c    **** 
ARM GAS  /tmp/ccGgKFCb.s 			page 49


 884:Src/main.c    ****   averageT = (uint16_t) (sum / (cfg.numOfICs * cfg.numOfTempPerIC));
 1713              		.loc 1 884 0
 1714 0050 9DF82020 		ldrb	r2, [sp, #32]	@ zero_extendqisi2
 1715              	.LVL152:
 1716 0054 9DF84330 		ldrb	r3, [sp, #67]	@ zero_extendqisi2
 1717 0058 03FB02F3 		mul	r3, r3, r2
 1718 005c B0FBF3F3 		udiv	r3, r0, r3
 1719              	.LVL153:
 885:Src/main.c    **** 
 886:Src/main.c    ****   TxHeader.StdId = BMSTINF_ID;
 1720              		.loc 1 886 0
 1721 0060 1149     		ldr	r1, .L97
 1722 0062 0A22     		movs	r2, #10
 1723 0064 0A60     		str	r2, [r1]
 887:Src/main.c    ****   TxHeader.DLC = 8;
 1724              		.loc 1 887 0
 1725 0066 0822     		movs	r2, #8
 1726 0068 0A61     		str	r2, [r1, #16]
 888:Src/main.c    ****   uint8_t BMSTINF_DATA[8];
 889:Src/main.c    **** 
 890:Src/main.c    ****   BMSTINF_DATA[0] = (uint8_t) ((maxT >> 8) & 0xFF);
 1727              		.loc 1 890 0
 1728 006a 27FA02F2 		lsr	r2, r7, r2
 1729 006e 8DF80020 		strb	r2, [sp]
 891:Src/main.c    ****   BMSTINF_DATA[1] = (uint8_t) (maxT & 0xFF);
 1730              		.loc 1 891 0
 1731 0072 8DF80170 		strb	r7, [sp, #1]
 892:Src/main.c    ****   BMSTINF_DATA[2] = maxCell;
 1732              		.loc 1 892 0
 1733 0076 8DF80250 		strb	r5, [sp, #2]
 893:Src/main.c    ****   BMSTINF_DATA[3] = (uint8_t) ((minT >> 8) & 0xFF);
 1734              		.loc 1 893 0
 1735 007a 320A     		lsrs	r2, r6, #8
 1736 007c 8DF80320 		strb	r2, [sp, #3]
 894:Src/main.c    ****   BMSTINF_DATA[4] = (uint8_t) (minT & 0xFF);
 1737              		.loc 1 894 0
 1738 0080 8DF80460 		strb	r6, [sp, #4]
 895:Src/main.c    ****   BMSTINF_DATA[5] = minCell;
 1739              		.loc 1 895 0
 1740 0084 8DF80540 		strb	r4, [sp, #5]
 896:Src/main.c    ****   BMSTINF_DATA[6] = (uint8_t) ((averageT >> 8) & 0xFF);
 1741              		.loc 1 896 0
 1742 0088 C3F30722 		ubfx	r2, r3, #8, #8
 1743 008c 8DF80620 		strb	r2, [sp, #6]
 897:Src/main.c    ****   BMSTINF_DATA[7] = (uint8_t) (averageT & 0xFF);
 1744              		.loc 1 897 0
 1745 0090 8DF80730 		strb	r3, [sp, #7]
 898:Src/main.c    **** 
 899:Src/main.c    ****   HAL_CAN_AddTxMessage(&hcan, &TxHeader, BMSTINF_DATA, &TxMailbox);  
 1746              		.loc 1 899 0
 1747 0094 054B     		ldr	r3, .L97+4
 1748              	.LVL154:
 1749 0096 6A46     		mov	r2, sp
 1750 0098 0548     		ldr	r0, .L97+8
 1751              	.LVL155:
 1752 009a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1753              	.LVL156:
ARM GAS  /tmp/ccGgKFCb.s 			page 50


 900:Src/main.c    **** 
 901:Src/main.c    **** };
 1754              		.loc 1 901 0
 1755 009e 03B0     		add	sp, sp, #12
 1756              	.LCFI57:
 1757              		.cfi_def_cfa_offset 36
 1758              		@ sp needed
 1759 00a0 BDE8F040 		pop	{r4, r5, r6, r7, lr}
 1760              	.LCFI58:
 1761              		.cfi_restore 14
 1762              		.cfi_restore 7
 1763              		.cfi_restore 6
 1764              		.cfi_restore 5
 1765              		.cfi_restore 4
 1766              		.cfi_def_cfa_offset 16
 1767              	.LVL157:
 1768 00a4 04B0     		add	sp, sp, #16
 1769              	.LCFI59:
 1770              		.cfi_def_cfa_offset 0
 1771 00a6 7047     		bx	lr
 1772              	.L98:
 1773              		.align	2
 1774              	.L97:
 1775 00a8 00000000 		.word	TxHeader
 1776 00ac 00000000 		.word	TxMailbox
 1777 00b0 00000000 		.word	hcan
 1778              		.cfi_endproc
 1779              	.LFE81:
 1781              		.section	.text.main,"ax",%progbits
 1782              		.align	1
 1783              		.global	main
 1784              		.syntax unified
 1785              		.thumb
 1786              		.thumb_func
 1787              		.fpu softvfp
 1789              	main:
 1790              	.LFB66:
 110:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1791              		.loc 1 110 0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 776
 1794              		@ frame_needed = 0, uses_anonymous_args = 0
 1795 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1796              	.LCFI60:
 1797              		.cfi_def_cfa_offset 36
 1798              		.cfi_offset 4, -36
 1799              		.cfi_offset 5, -32
 1800              		.cfi_offset 6, -28
 1801              		.cfi_offset 7, -24
 1802              		.cfi_offset 8, -20
 1803              		.cfi_offset 9, -16
 1804              		.cfi_offset 10, -12
 1805              		.cfi_offset 11, -8
 1806              		.cfi_offset 14, -4
 1807 0004 ADF55B7D 		sub	sp, sp, #876
 1808              	.LCFI61:
 1809              		.cfi_def_cfa_offset 912
ARM GAS  /tmp/ccGgKFCb.s 			page 51


 118:Src/main.c    **** 
 1810              		.loc 1 118 0
 1811 0008 FFF7FEFF 		bl	HAL_Init
 1812              	.LVL158:
 125:Src/main.c    **** 
 1813              		.loc 1 125 0
 1814 000c FFF7FEFF 		bl	SystemClock_Config
 1815              	.LVL159:
 132:Src/main.c    ****   MX_ADC1_Init();
 1816              		.loc 1 132 0
 1817 0010 FFF7FEFF 		bl	MX_GPIO_Init
 1818              	.LVL160:
 133:Src/main.c    ****   MX_CAN_Init();
 1819              		.loc 1 133 0
 1820 0014 FFF7FEFF 		bl	MX_ADC1_Init
 1821              	.LVL161:
 134:Src/main.c    ****   //MX_SPI1_Init();
 1822              		.loc 1 134 0
 1823 0018 FFF7FEFF 		bl	MX_CAN_Init
 1824              	.LVL162:
 136:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1825              		.loc 1 136 0
 1826 001c FFF7FEFF 		bl	MX_TIM2_Init
 1827              	.LVL163:
 139:Src/main.c    ****   initPECTable();
 1828              		.loc 1 139 0
 1829 0020 FFF7FEFF 		bl	SPI_Init
 1830              	.LVL164:
 140:Src/main.c    ****   loadConfig(&BMSconfig);
 1831              		.loc 1 140 0
 1832 0024 FFF7FEFF 		bl	initPECTable
 1833              	.LVL165:
 141:Src/main.c    **** 
 1834              		.loc 1 141 0
 1835 0028 A448     		ldr	r0, .L106
 1836 002a FFF7FEFF 		bl	loadConfig
 1837              	.LVL166:
 1838 002e 73E0     		b	.L103
 1839              	.LVL167:
 1840              	.L105:
 187:Src/main.c    ****       
 1841              		.loc 1 187 0
 1842 0030 A249     		ldr	r1, .L106
 1843 0032 18AB     		add	r3, sp, #96
 1844 0034 1793     		str	r3, [sp, #92]
 1845 0036 1695     		str	r5, [sp, #88]
 1846 0038 30AB     		add	r3, sp, #192
 1847 003a 1593     		str	r3, [sp, #84]
 1848 003c 4AAB     		add	r3, sp, #296
 1849 003e 1493     		str	r3, [sp, #80]
 1850 0040 0F68     		ldr	r7, [r1]	@ unaligned
 1851 0042 4E68     		ldr	r6, [r1, #4]	@ unaligned
 1852 0044 8D68     		ldr	r5, [r1, #8]	@ unaligned
 1853              	.LVL168:
 1854 0046 CC68     		ldr	r4, [r1, #12]	@ unaligned
 1855 0048 4E22     		movs	r2, #78
 1856 004a 1031     		adds	r1, r1, #16
ARM GAS  /tmp/ccGgKFCb.s 			page 52


 1857 004c 6846     		mov	r0, sp
 1858              	.LVL169:
 1859 004e FFF7FEFF 		bl	memcpy
 1860              	.LVL170:
 1861 0052 3846     		mov	r0, r7
 1862 0054 3146     		mov	r1, r6
 1863 0056 2A46     		mov	r2, r5
 1864 0058 2346     		mov	r3, r4
 1865 005a FFF7FEFF 		bl	setDischarge
 1866              	.LVL171:
 1867 005e FFE0     		b	.L101
 1868              	.L102:
 196:Src/main.c    ****         dischargeCellGroups(BMSconfig, full_discharge);
 1869              		.loc 1 196 0
 1870 0060 964C     		ldr	r4, .L106
 1871 0062 4AAB     		add	r3, sp, #296
 1872 0064 1593     		str	r3, [sp, #84]
 1873 0066 18AF     		add	r7, sp, #96
 1874 0068 1497     		str	r7, [sp, #80]
 1875 006a D4F800B0 		ldr	fp, [r4]	@ unaligned
 1876 006e D4F804A0 		ldr	r10, [r4, #4]	@ unaligned
 1877 0072 D4F80890 		ldr	r9, [r4, #8]	@ unaligned
 1878 0076 D4F80C80 		ldr	r8, [r4, #12]	@ unaligned
 1879 007a 04F11005 		add	r5, r4, #16
 1880 007e 4E26     		movs	r6, #78
 1881 0080 3246     		mov	r2, r6
 1882 0082 2946     		mov	r1, r5
 1883 0084 6846     		mov	r0, sp
 1884 0086 FFF7FEFF 		bl	memcpy
 1885              	.LVL172:
 1886 008a 5846     		mov	r0, fp
 1887 008c 5146     		mov	r1, r10
 1888 008e 4A46     		mov	r2, r9
 1889 0090 4346     		mov	r3, r8
 1890 0092 FFF7FEFF 		bl	checkDischarge
 1891              	.LVL173:
 197:Src/main.c    ****         HAL_Delay(BMSconfig.dischargeTime);
 1892              		.loc 1 197 0
 1893 0096 1497     		str	r7, [sp, #80]
 1894 0098 D4F800A0 		ldr	r10, [r4]	@ unaligned
 1895 009c D4F80490 		ldr	r9, [r4, #4]	@ unaligned
 1896 00a0 D4F80880 		ldr	r8, [r4, #8]	@ unaligned
 1897 00a4 E768     		ldr	r7, [r4, #12]	@ unaligned
 1898 00a6 3246     		mov	r2, r6
 1899 00a8 2946     		mov	r1, r5
 1900 00aa 6846     		mov	r0, sp
 1901 00ac FFF7FEFF 		bl	memcpy
 1902              	.LVL174:
 1903 00b0 5046     		mov	r0, r10
 1904 00b2 4946     		mov	r1, r9
 1905 00b4 4246     		mov	r2, r8
 1906 00b6 3B46     		mov	r3, r7
 1907 00b8 FFF7FEFF 		bl	dischargeCellGroups
 1908              	.LVL175:
 198:Src/main.c    ****       }
 1909              		.loc 1 198 0
 1910 00bc A08E     		ldrh	r0, [r4, #52]
ARM GAS  /tmp/ccGgKFCb.s 			page 53


 1911 00be FFF7FEFF 		bl	HAL_Delay
 1912              	.LVL176:
 1913              	.L100:
 203:Src/main.c    ****     BMSSTAT_message(BMSconfig, BMS_STATUS);
 1914              		.loc 1 203 0
 1915 00c2 7E4C     		ldr	r4, .L106
 1916 00c4 4AAB     		add	r3, sp, #296
 1917 00c6 1493     		str	r3, [sp, #80]
 1918 00c8 D4F800A0 		ldr	r10, [r4]	@ unaligned
 1919 00cc D4F80490 		ldr	r9, [r4, #4]	@ unaligned
 1920 00d0 D4F80880 		ldr	r8, [r4, #8]	@ unaligned
 1921 00d4 E768     		ldr	r7, [r4, #12]	@ unaligned
 1922 00d6 04F11005 		add	r5, r4, #16
 1923 00da 4E26     		movs	r6, #78
 1924 00dc 3246     		mov	r2, r6
 1925 00de 2946     		mov	r1, r5
 1926 00e0 6846     		mov	r0, sp
 1927 00e2 FFF7FEFF 		bl	memcpy
 1928              	.LVL177:
 1929 00e6 5046     		mov	r0, r10
 1930 00e8 4946     		mov	r1, r9
 1931 00ea 4246     		mov	r2, r8
 1932 00ec 3B46     		mov	r3, r7
 1933 00ee FFF7FEFF 		bl	CELLVAL_message
 1934              	.LVL178:
 204:Src/main.c    ****     PACKSTAT_message(BMSconfig, BMS_DATA);
 1935              		.loc 1 204 0
 1936 00f2 48AB     		add	r3, sp, #288
 1937 00f4 1493     		str	r3, [sp, #80]
 1938 00f6 D4F80090 		ldr	r9, [r4]	@ unaligned
 1939 00fa D4F80480 		ldr	r8, [r4, #4]	@ unaligned
 1940 00fe A768     		ldr	r7, [r4, #8]	@ unaligned
 1941 0100 E468     		ldr	r4, [r4, #12]	@ unaligned
 1942 0102 3246     		mov	r2, r6
 1943 0104 2946     		mov	r1, r5
 1944 0106 6846     		mov	r0, sp
 1945 0108 FFF7FEFF 		bl	memcpy
 1946              	.LVL179:
 1947 010c 4846     		mov	r0, r9
 1948 010e 4146     		mov	r1, r8
 1949 0110 3A46     		mov	r2, r7
 1950 0112 2346     		mov	r3, r4
 1951 0114 FFF7FEFF 		bl	BMSSTAT_message
 1952              	.LVL180:
 1953              	.L103:
 163:Src/main.c    **** 
 1954              		.loc 1 163 0
 1955 0118 684C     		ldr	r4, .L106
 1956 011a D4F800A0 		ldr	r10, [r4]	@ unaligned
 1957 011e D4F80490 		ldr	r9, [r4, #4]	@ unaligned
 1958 0122 D4F80880 		ldr	r8, [r4, #8]	@ unaligned
 1959 0126 E768     		ldr	r7, [r4, #12]	@ unaligned
 1960 0128 04F11005 		add	r5, r4, #16
 1961 012c 4E26     		movs	r6, #78
 1962 012e 3246     		mov	r2, r6
 1963 0130 2946     		mov	r1, r5
 1964 0132 6846     		mov	r0, sp
ARM GAS  /tmp/ccGgKFCb.s 			page 54


 1965 0134 FFF7FEFF 		bl	memcpy
 1966              	.LVL181:
 1967 0138 5046     		mov	r0, r10
 1968 013a 4946     		mov	r1, r9
 1969 013c 4246     		mov	r2, r8
 1970 013e 3B46     		mov	r3, r7
 1971 0140 FFF7FEFF 		bl	writeConfigAll
 1972              	.LVL182:
 166:Src/main.c    **** 
 1973              		.loc 1 166 0
 1974 0144 6420     		movs	r0, #100
 1975 0146 FFF7FEFF 		bl	HAL_Delay
 1976              	.LVL183:
 169:Src/main.c    ****     BMSVINF_message(BMSconfig, BMS_DATA);
 1977              		.loc 1 169 0
 1978 014a 4AAF     		add	r7, sp, #296
 1979 014c 1497     		str	r7, [sp, #80]
 1980 014e D4F800B0 		ldr	fp, [r4]	@ unaligned
 1981 0152 D4F804A0 		ldr	r10, [r4, #4]	@ unaligned
 1982 0156 D4F80890 		ldr	r9, [r4, #8]	@ unaligned
 1983 015a D4F80C80 		ldr	r8, [r4, #12]	@ unaligned
 1984 015e 3246     		mov	r2, r6
 1985 0160 2946     		mov	r1, r5
 1986 0162 6846     		mov	r0, sp
 1987 0164 FFF7FEFF 		bl	memcpy
 1988              	.LVL184:
 1989 0168 5846     		mov	r0, fp
 1990 016a 5146     		mov	r1, r10
 1991 016c 4A46     		mov	r2, r9
 1992 016e 4346     		mov	r3, r8
 1993 0170 FFF7FEFF 		bl	readAllCellVoltages
 1994              	.LVL185:
 170:Src/main.c    **** 
 1995              		.loc 1 170 0
 1996 0174 1497     		str	r7, [sp, #80]
 1997 0176 D4F800B0 		ldr	fp, [r4]	@ unaligned
 1998 017a D4F804A0 		ldr	r10, [r4, #4]	@ unaligned
 1999 017e D4F80890 		ldr	r9, [r4, #8]	@ unaligned
 2000 0182 D4F80C80 		ldr	r8, [r4, #12]	@ unaligned
 2001 0186 3246     		mov	r2, r6
 2002 0188 2946     		mov	r1, r5
 2003 018a 6846     		mov	r0, sp
 2004 018c FFF7FEFF 		bl	memcpy
 2005              	.LVL186:
 2006 0190 5846     		mov	r0, fp
 2007 0192 5146     		mov	r1, r10
 2008 0194 4A46     		mov	r2, r9
 2009 0196 4346     		mov	r3, r8
 2010 0198 FFF7FEFF 		bl	BMSVINF_message
 2011              	.LVL187:
 173:Src/main.c    ****     BMSTINF_message(BMSconfig, BMS_DATA);
 2012              		.loc 1 173 0
 2013 019c 1497     		str	r7, [sp, #80]
 2014 019e D4F800B0 		ldr	fp, [r4]	@ unaligned
 2015 01a2 D4F804A0 		ldr	r10, [r4, #4]	@ unaligned
 2016 01a6 D4F80890 		ldr	r9, [r4, #8]	@ unaligned
 2017 01aa D4F80C80 		ldr	r8, [r4, #12]	@ unaligned
ARM GAS  /tmp/ccGgKFCb.s 			page 55


 2018 01ae 3246     		mov	r2, r6
 2019 01b0 2946     		mov	r1, r5
 2020 01b2 6846     		mov	r0, sp
 2021 01b4 FFF7FEFF 		bl	memcpy
 2022              	.LVL188:
 2023 01b8 5846     		mov	r0, fp
 2024 01ba 5146     		mov	r1, r10
 2025 01bc 4A46     		mov	r2, r9
 2026 01be 4346     		mov	r3, r8
 2027 01c0 FFF7FEFF 		bl	readAllCellTemps
 2028              	.LVL189:
 174:Src/main.c    **** 
 2029              		.loc 1 174 0
 2030 01c4 1497     		str	r7, [sp, #80]
 2031 01c6 D4F800B0 		ldr	fp, [r4]	@ unaligned
 2032 01ca D4F804A0 		ldr	r10, [r4, #4]	@ unaligned
 2033 01ce D4F80890 		ldr	r9, [r4, #8]	@ unaligned
 2034 01d2 D4F80C80 		ldr	r8, [r4, #12]	@ unaligned
 2035 01d6 3246     		mov	r2, r6
 2036 01d8 2946     		mov	r1, r5
 2037 01da 6846     		mov	r0, sp
 2038 01dc FFF7FEFF 		bl	memcpy
 2039              	.LVL190:
 2040 01e0 5846     		mov	r0, fp
 2041 01e2 5146     		mov	r1, r10
 2042 01e4 4A46     		mov	r2, r9
 2043 01e6 4346     		mov	r3, r8
 2044 01e8 FFF7FEFF 		bl	BMSTINF_message
 2045              	.LVL191:
 177:Src/main.c    ****     BMS_FAULT = FAULT_check(BMSconfig, BMS_DATA, BMS_STATUS);
 2046              		.loc 1 177 0
 2047 01ec 1497     		str	r7, [sp, #80]
 2048 01ee D4F800B0 		ldr	fp, [r4]	@ unaligned
 2049 01f2 D4F804A0 		ldr	r10, [r4, #4]	@ unaligned
 2050 01f6 D4F80890 		ldr	r9, [r4, #8]	@ unaligned
 2051 01fa D4F80C80 		ldr	r8, [r4, #12]	@ unaligned
 2052 01fe 3246     		mov	r2, r6
 2053 0200 2946     		mov	r1, r5
 2054 0202 6846     		mov	r0, sp
 2055 0204 FFF7FEFF 		bl	memcpy
 2056              	.LVL192:
 2057 0208 5846     		mov	r0, fp
 2058 020a 5146     		mov	r1, r10
 2059 020c 4A46     		mov	r2, r9
 2060 020e 4346     		mov	r3, r8
 2061 0210 FFF7FEFF 		bl	checkAllCellConnections
 2062              	.LVL193:
 178:Src/main.c    **** 
 2063              		.loc 1 178 0
 2064 0214 48AB     		add	r3, sp, #288
 2065 0216 1593     		str	r3, [sp, #84]
 2066 0218 1497     		str	r7, [sp, #80]
 2067 021a D4F80090 		ldr	r9, [r4]	@ unaligned
 2068 021e D4F80480 		ldr	r8, [r4, #4]	@ unaligned
 2069 0222 A768     		ldr	r7, [r4, #8]	@ unaligned
 2070 0224 E468     		ldr	r4, [r4, #12]	@ unaligned
 2071 0226 3246     		mov	r2, r6
ARM GAS  /tmp/ccGgKFCb.s 			page 56


 2072 0228 2946     		mov	r1, r5
 2073 022a 6846     		mov	r0, sp
 2074 022c FFF7FEFF 		bl	memcpy
 2075              	.LVL194:
 2076 0230 4846     		mov	r0, r9
 2077 0232 4146     		mov	r1, r8
 2078 0234 3A46     		mov	r2, r7
 2079 0236 2346     		mov	r3, r4
 2080 0238 FFF7FEFF 		bl	FAULT_check
 2081              	.LVL195:
 2082 023c 0546     		mov	r5, r0
 2083              	.LVL196:
 181:Src/main.c    ****     CHARGE_EN = HAL_GPIO_ReadPin(GPIOB, CHARGE_EN_Pin);
 2084              		.loc 1 181 0
 2085 023e 204C     		ldr	r4, .L106+4
 2086 0240 2021     		movs	r1, #32
 2087 0242 2046     		mov	r0, r4
 2088 0244 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2089              	.LVL197:
 182:Src/main.c    **** 
 2090              		.loc 1 182 0
 2091 0248 0821     		movs	r1, #8
 2092 024a 2046     		mov	r0, r4
 2093 024c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2094              	.LVL198:
 184:Src/main.c    **** 
 2095              		.loc 1 184 0
 2096 0250 0028     		cmp	r0, #0
 2097 0252 7FF436AF 		bne	.L100
 186:Src/main.c    ****         setDischarge(BMSconfig, BMS_DATA, discharge, BMS_FAULT, full_discharge);
 2098              		.loc 1 186 0
 2099 0256 1B4B     		ldr	r3, .L106+8
 2100 0258 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2101 025a 002B     		cmp	r3, #0
 2102 025c 7FF4E8AE 		bne	.L105
 2103              	.LVL199:
 2104              	.L101:
 189:Src/main.c    **** 
 2105              		.loc 1 189 0
 2106 0260 1649     		ldr	r1, .L106
 2107 0262 0F68     		ldr	r7, [r1]	@ unaligned
 2108 0264 4E68     		ldr	r6, [r1, #4]	@ unaligned
 2109 0266 8D68     		ldr	r5, [r1, #8]	@ unaligned
 2110 0268 CC68     		ldr	r4, [r1, #12]	@ unaligned
 2111 026a 4E22     		movs	r2, #78
 2112 026c 1031     		adds	r1, r1, #16
 2113 026e 6846     		mov	r0, sp
 2114 0270 FFF7FEFF 		bl	memcpy
 2115              	.LVL200:
 2116 0274 3846     		mov	r0, r7
 2117 0276 3146     		mov	r1, r6
 2118 0278 2A46     		mov	r2, r5
 2119 027a 2346     		mov	r3, r4
 2120 027c FFF7FEFF 		bl	setChargerTxData
 2121              	.LVL201:
 191:Src/main.c    ****         dischargeCellGroups(BMSconfig, discharge);
 2122              		.loc 1 191 0
ARM GAS  /tmp/ccGgKFCb.s 			page 57


 2123 0280 104B     		ldr	r3, .L106+8
 2124 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2125 0284 002B     		cmp	r3, #0
 2126 0286 3FF4EBAE 		beq	.L102
 192:Src/main.c    ****         HAL_Delay(BMSconfig.dischargeTime);
 2127              		.loc 1 192 0
 2128 028a 0C4C     		ldr	r4, .L106
 2129 028c 30AB     		add	r3, sp, #192
 2130 028e 1493     		str	r3, [sp, #80]
 2131 0290 D4F80080 		ldr	r8, [r4]	@ unaligned
 2132 0294 6768     		ldr	r7, [r4, #4]	@ unaligned
 2133 0296 A668     		ldr	r6, [r4, #8]	@ unaligned
 2134 0298 E568     		ldr	r5, [r4, #12]	@ unaligned
 2135 029a 4E22     		movs	r2, #78
 2136 029c 04F11001 		add	r1, r4, #16
 2137 02a0 6846     		mov	r0, sp
 2138 02a2 FFF7FEFF 		bl	memcpy
 2139              	.LVL202:
 2140 02a6 4046     		mov	r0, r8
 2141 02a8 3946     		mov	r1, r7
 2142 02aa 3246     		mov	r2, r6
 2143 02ac 2B46     		mov	r3, r5
 2144 02ae FFF7FEFF 		bl	dischargeCellGroups
 2145              	.LVL203:
 193:Src/main.c    ****       }
 2146              		.loc 1 193 0
 2147 02b2 A08E     		ldrh	r0, [r4, #52]
 2148 02b4 FFF7FEFF 		bl	HAL_Delay
 2149              	.LVL204:
 2150 02b8 03E7     		b	.L100
 2151              	.L107:
 2152 02ba 00BF     		.align	2
 2153              	.L106:
 2154 02bc 00000000 		.word	BMSconfig
 2155 02c0 000C0140 		.word	1073810432
 2156 02c4 00000000 		.word	.LANCHOR0
 2157              		.cfi_endproc
 2158              	.LFE66:
 2160              		.section	.text.PACKSTAT_message,"ax",%progbits
 2161              		.align	1
 2162              		.global	PACKSTAT_message
 2163              		.syntax unified
 2164              		.thumb
 2165              		.thumb_func
 2166              		.fpu softvfp
 2168              	PACKSTAT_message:
 2169              	.LFB82:
 902:Src/main.c    **** 
 903:Src/main.c    **** void PACKSTAT_message(BMSconfigStructTypedef cfg, uint8_t bmsData[96][6]) {
 2170              		.loc 1 903 0
 2171              		.cfi_startproc
 2172              		@ args = 100, pretend = 16, frame = 0
 2173              		@ frame_needed = 0, uses_anonymous_args = 0
 2174              		@ link register save eliminated.
 2175              	.LVL205:
 2176 0000 84B0     		sub	sp, sp, #16
 2177              	.LCFI62:
ARM GAS  /tmp/ccGgKFCb.s 			page 58


 2178              		.cfi_def_cfa_offset 16
 2179 0002 8DE80F00 		stm	sp, {r0, r1, r2, r3}
 904:Src/main.c    **** 
 905:Src/main.c    ****   //read current sensor
 906:Src/main.c    **** 
 907:Src/main.c    ****   //use sumOfCells
 908:Src/main.c    **** 
 909:Src/main.c    **** }
 2180              		.loc 1 909 0
 2181 0006 04B0     		add	sp, sp, #16
 2182              	.LCFI63:
 2183              		.cfi_def_cfa_offset 0
 2184 0008 7047     		bx	lr
 2185              		.cfi_endproc
 2186              	.LFE82:
 2188              		.section	.text.Error_Handler,"ax",%progbits
 2189              		.align	1
 2190              		.global	Error_Handler
 2191              		.syntax unified
 2192              		.thumb
 2193              		.thumb_func
 2194              		.fpu softvfp
 2196              	Error_Handler:
 2197              	.LFB83:
 910:Src/main.c    **** 
 911:Src/main.c    **** /* USER CODE END 4 */
 912:Src/main.c    **** 
 913:Src/main.c    **** /**
 914:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 915:Src/main.c    ****   * @retval None
 916:Src/main.c    ****   */
 917:Src/main.c    **** void Error_Handler(void)
 918:Src/main.c    **** {
 2198              		.loc 1 918 0
 2199              		.cfi_startproc
 2200              		@ args = 0, pretend = 0, frame = 0
 2201              		@ frame_needed = 0, uses_anonymous_args = 0
 2202              		@ link register save eliminated.
 919:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 920:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 921:Src/main.c    **** 
 922:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 923:Src/main.c    **** }
 2203              		.loc 1 923 0
 2204 0000 7047     		bx	lr
 2205              		.cfi_endproc
 2206              	.LFE83:
 2208              		.global	chargeRate
 2209              		.comm	sumOfCells,4,4
 2210              		.comm	minimum,2,2
 2211              		.comm	BMSSTAT_DATA,6,4
 2212              		.comm	CELLVAL_DATA,6,4
 2213              		.comm	ChargerTxData,8,4
 2214              		.comm	ChargerTxHeader,24,4
 2215              		.comm	TxMailbox,4,4
 2216              		.comm	RxData,8,4
 2217              		.comm	TxData,8,4
ARM GAS  /tmp/ccGgKFCb.s 			page 59


 2218              		.comm	RxHeader,28,4
 2219              		.comm	TxHeader,24,4
 2220              		.comm	BMSconfig,94,4
 2221              		.comm	CommandCode,2,2
 2222              		.comm	htim2,64,4
 2223              		.comm	hspi1,88,4
 2224              		.comm	hcan,40,4
 2225              		.comm	hadc1,48,4
 2226              		.section	.data.chargeRate,"aw",%progbits
 2227              		.set	.LANCHOR0,. + 0
 2230              	chargeRate:
 2231 0000 02       		.byte	2
 2232              		.text
 2233              	.Letext0:
 2234              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2235              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2236              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 2237              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2238              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 2239              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2240              		.file 8 "/usr/include/newlib/sys/lock.h"
 2241              		.file 9 "/usr/include/newlib/sys/_types.h"
 2242              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 2243              		.file 11 "/usr/include/newlib/sys/reent.h"
 2244              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2245              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 2246              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2247              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 2248              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2249              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 2250              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 2251              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 2252              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 2253              		.file 21 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 2254              		.file 22 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2255              		.file 23 "/usr/include/newlib/stdlib.h"
 2256              		.file 24 "Inc/BMSconfig.h"
 2257              		.file 25 "/usr/include/newlib/math.h"
 2258              		.file 26 "Inc/LTC6811.h"
 2259              		.file 27 "Inc/SPI.h"
 2260              		.file 28 "<built-in>"
ARM GAS  /tmp/ccGgKFCb.s 			page 60


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccGgKFCb.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccGgKFCb.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccGgKFCb.s:175    .text.MX_GPIO_Init:00000000000000e0 $d
     /tmp/ccGgKFCb.s:183    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccGgKFCb.s:189    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccGgKFCb.s:253    .text.MX_ADC1_Init:0000000000000040 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccGgKFCb.s:259    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccGgKFCb.s:265    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccGgKFCb.s:385    .text.MX_CAN_Init:0000000000000088 $d
                            *COM*:0000000000000028 hcan
                            *COM*:0000000000000018 TxHeader
                            *COM*:0000000000000018 ChargerTxHeader
     /tmp/ccGgKFCb.s:394    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccGgKFCb.s:400    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccGgKFCb.s:474    .text.MX_TIM2_Init:0000000000000058 $d
                            *COM*:0000000000000040 htim2
     /tmp/ccGgKFCb.s:479    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccGgKFCb.s:486    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccGgKFCb.s:566    .text.FAULT_check:0000000000000000 $t
     /tmp/ccGgKFCb.s:573    .text.FAULT_check:0000000000000000 FAULT_check
     /tmp/ccGgKFCb.s:820    .text.FAULT_check:000000000000012c $d
     /tmp/ccGgKFCb.s:825    .text.setDischarge:0000000000000000 $t
     /tmp/ccGgKFCb.s:832    .text.setDischarge:0000000000000000 setDischarge
     /tmp/ccGgKFCb.s:929    .text.setDischarge:0000000000000064 $d
     /tmp/ccGgKFCb.s:937    .text.balancingThreshold:0000000000000000 $t
     /tmp/ccGgKFCb.s:944    .text.balancingThreshold:0000000000000000 balancingThreshold
     /tmp/ccGgKFCb.s:1022   .text.balancingThreshold:0000000000000058 $d
                            *COM*:0000000000000002 minimum
     /tmp/ccGgKFCb.s:1028   .text.checkDischarge:0000000000000000 $t
     /tmp/ccGgKFCb.s:1035   .text.checkDischarge:0000000000000000 checkDischarge
     /tmp/ccGgKFCb.s:1155   .text.checkDischarge:0000000000000074 $d
     /tmp/ccGgKFCb.s:1161   .text.setChargerTxData:0000000000000000 $t
     /tmp/ccGgKFCb.s:1168   .text.setChargerTxData:0000000000000000 setChargerTxData
     /tmp/ccGgKFCb.s:1263   .text.setChargerTxData:0000000000000070 $d
                            *COM*:0000000000000008 ChargerTxData
                            *COM*:0000000000000004 TxMailbox
     /tmp/ccGgKFCb.s:1274   .text.CELLVAL_message:0000000000000000 $t
     /tmp/ccGgKFCb.s:1281   .text.CELLVAL_message:0000000000000000 CELLVAL_message
     /tmp/ccGgKFCb.s:1373   .text.CELLVAL_message:000000000000005c $d
                            *COM*:0000000000000006 CELLVAL_DATA
     /tmp/ccGgKFCb.s:1381   .text.BMSSTAT_message:0000000000000000 $t
     /tmp/ccGgKFCb.s:1388   .text.BMSSTAT_message:0000000000000000 BMSSTAT_message
     /tmp/ccGgKFCb.s:1431   .text.BMSSTAT_message:0000000000000028 $d
     /tmp/ccGgKFCb.s:1438   .text.BMSVINF_message:0000000000000000 $t
     /tmp/ccGgKFCb.s:1445   .text.BMSVINF_message:0000000000000000 BMSVINF_message
     /tmp/ccGgKFCb.s:1605   .text.BMSVINF_message:00000000000000b0 $d
                            *COM*:0000000000000004 sumOfCells
     /tmp/ccGgKFCb.s:1614   .text.BMSTINF_message:0000000000000000 $t
     /tmp/ccGgKFCb.s:1621   .text.BMSTINF_message:0000000000000000 BMSTINF_message
     /tmp/ccGgKFCb.s:1775   .text.BMSTINF_message:00000000000000a8 $d
     /tmp/ccGgKFCb.s:1782   .text.main:0000000000000000 $t
     /tmp/ccGgKFCb.s:1789   .text.main:0000000000000000 main
     /tmp/ccGgKFCb.s:2154   .text.main:00000000000002bc $d
                            *COM*:000000000000005e BMSconfig
ARM GAS  /tmp/ccGgKFCb.s 			page 61


     /tmp/ccGgKFCb.s:2161   .text.PACKSTAT_message:0000000000000000 $t
     /tmp/ccGgKFCb.s:2168   .text.PACKSTAT_message:0000000000000000 PACKSTAT_message
     /tmp/ccGgKFCb.s:2189   .text.Error_Handler:0000000000000000 $t
     /tmp/ccGgKFCb.s:2196   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccGgKFCb.s:2230   .data.chargeRate:0000000000000000 chargeRate
                            *COM*:0000000000000006 BMSSTAT_DATA
                            *COM*:0000000000000008 RxData
                            *COM*:0000000000000008 TxData
                            *COM*:000000000000001c RxHeader
                            *COM*:0000000000000002 CommandCode
                            *COM*:0000000000000058 hspi1

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_Base_Start
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
__aeabi_i2f
__aeabi_fdiv
__aeabi_f2uiz
HAL_CAN_AddTxMessage
HAL_Delay
HAL_Init
SPI_Init
initPECTable
loadConfig
memcpy
dischargeCellGroups
writeConfigAll
readAllCellVoltages
readAllCellTemps
checkAllCellConnections
HAL_GPIO_ReadPin

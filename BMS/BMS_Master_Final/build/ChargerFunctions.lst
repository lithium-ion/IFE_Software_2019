ARM GAS  /tmp/ccLHh0C1.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ChargerFunctions.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.getLowestVoltage,"ax",%progbits
  18              		.align	1
  19              		.global	getLowestVoltage
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	getLowestVoltage:
  27              	.LVL0:
  28              	.LFB1:
  29              		.file 1 "Src/ChargerFunctions.c"
   1:Src/ChargerFunctions.c **** /*
   2:Src/ChargerFunctions.c **** 	All variables below are required for the functions to run. Data for every board has been received,
   3:Src/ChargerFunctions.c **** 	Then call the setChargerTxData to set the CAN transmission message for the charger. This data will
   4:Src/ChargerFunctions.c **** 	with extended ID 0x1806E5F4 at 500Kbps bit rate. The charger expects a message every one second.
   5:Src/ChargerFunctions.c **** 	
   6:Src/ChargerFunctions.c **** 	Functions:
   7:Src/ChargerFunctions.c **** 		int setChargeDischarge (int cellsDischarge[numBoards][cellsPerBoard], int *chargeCurrent, float c
   8:Src/ChargerFunctions.c **** 			@brief - when function returns, the array cellsDischarge will be modified based on the new data 
   9:Src/ChargerFunctions.c **** 					-- Every cell: if the voltage is more than balancingDifference above the minimum cell voltage,
  10:Src/ChargerFunctions.c **** 					-- If any cell exceeds lowerVoltage_Threshold lower charge current to lowerCurrent and continu
  11:Src/ChargerFunctions.c **** 					-- If any cell exceeds higherVoltage_Threshold: Set charge current to 0 and continue balancing
  12:Src/ChargerFunctions.c **** 					-- If any cell exceeds BMSFault_Threshold: Throw BMS Fault
  13:Src/ChargerFunctions.c **** 			@return - 1 if there is a BMS fault, 0 if not
  14:Src/ChargerFunctions.c **** 		
  15:Src/ChargerFunctions.c **** 		float getLowestVoltage(float cellVoltage[numBoards][cellsPerBoard])
  16:Src/ChargerFunctions.c **** 			@brief - finds and returns the lowest cell voltage
  17:Src/ChargerFunctions.c **** 			@return - the lowest voltage of all cells
  18:Src/ChargerFunctions.c **** 		
  19:Src/ChargerFunctions.c **** 		void setChargerTxData()
  20:Src/ChargerFunctions.c **** 			@brief - calculates and sets the CAN transmission data for the charger
  21:Src/ChargerFunctions.c **** 
  22:Src/ChargerFunctions.c **** 	Author: Evan Chen
  23:Src/ChargerFunctions.c ****  */
  24:Src/ChargerFunctions.c **** 
  25:Src/ChargerFunctions.c ****  #include <stdint.h>
  26:Src/ChargerFunctions.c **** 
  27:Src/ChargerFunctions.c **** /*********************************************************** Variables ****************************
  28:Src/ChargerFunctions.c **** 
  29:Src/ChargerFunctions.c **** /************** Voltage Thresholds *******************/
ARM GAS  /tmp/ccLHh0C1.s 			page 2


  30:Src/ChargerFunctions.c **** float BMSFault_Threshold = 4.2;				// max voltage (V) before BMS Fault is thrown
  31:Src/ChargerFunctions.c **** float lowerVoltage_Threshold = 4.1;			// max voltage (V) before charge current is lowered
  32:Src/ChargerFunctions.c **** float higherVoltage_Threshold = 4.185;		// max voltage (V) before charge current is set to 0
  33:Src/ChargerFunctions.c **** float balancingDifference = 0.05;			// max difference in voltage (V) between current cell and cell 
  34:Src/ChargerFunctions.c **** /************* End Voltage Thresholds ****************/
  35:Src/ChargerFunctions.c **** 
  36:Src/ChargerFunctions.c **** 
  37:Src/ChargerFunctions.c **** /*************** Charging Settings ********************/
  38:Src/ChargerFunctions.c **** /* hex value of ten times the current (A) in normal operation(when no cell is above lowerVoltage_Th
  39:Src/ChargerFunctions.c **** uint16_t normalCurrent = 0x003E;		// 6.2 A
  40:Src/ChargerFunctions.c **** 
  41:Src/ChargerFunctions.c **** /* hex value of ten times the current (A) when any cell exceeds lowerVoltage_Threshold */
  42:Src/ChargerFunctions.c **** uint16_t lowerCurrent = 0x000A;			// 1 A
  43:Src/ChargerFunctions.c **** 
  44:Src/ChargerFunctions.c **** /* hex value of ten times the voltage (V) of the charger */
  45:Src/ChargerFunctions.c **** uint16_t chargerVoltage = 0x0FA0;		// 400 V
  46:Src/ChargerFunctions.c **** /************** End Charging Settings *****************/
  47:Src/ChargerFunctions.c **** 
  48:Src/ChargerFunctions.c **** 
  49:Src/ChargerFunctions.c **** /************* Battery and Cell Numbers **************/
  50:Src/ChargerFunctions.c **** int numBoards = 12;
  51:Src/ChargerFunctions.c **** int cellsPerBoard = 8;
  52:Src/ChargerFunctions.c **** int cellsDischarge[12][8];			// 1 for discharging, 0 for not discharging
  53:Src/ChargerFunctions.c **** /************* End Battery and Cell Numbers **********/
  54:Src/ChargerFunctions.c **** 
  55:Src/ChargerFunctions.c **** 
  56:Src/ChargerFunctions.c **** /******************** Other **************************/
  57:Src/ChargerFunctions.c **** int chargeCurrent;		// flag used by program (2 for normal current, 1 for lower current, 0 for not c
  58:Src/ChargerFunctions.c **** uint8_t CANtx[8];		// CAN transmission data for the charger
  59:Src/ChargerFunctions.c **** /******************* End Other ***********************/
  60:Src/ChargerFunctions.c **** 
  61:Src/ChargerFunctions.c **** /*********************************************************** End Variables ************************
  62:Src/ChargerFunctions.c **** 
  63:Src/ChargerFunctions.c **** int setChargeDischarge (int cellsDischarge[numBoards][cellsPerBoard], int *chargeCurrent, float cel
  64:Src/ChargerFunctions.c **** float getLowestVoltage(float cellVoltage[numBoards][cellsPerBoard]);
  65:Src/ChargerFunctions.c **** float getLowestVoltage(float cellVoltage[numBoards][cellsPerBoard]);
  66:Src/ChargerFunctions.c **** void setChargerTxData();
  67:Src/ChargerFunctions.c **** 
  68:Src/ChargerFunctions.c **** /*
  69:Src/ChargerFunctions.c **** 	@brief - when function returns, the array cellsDischarge will be modified based on the new data as
  70:Src/ChargerFunctions.c **** 				-- Every cell: if the voltage is more than balancingDifference above the minimum cell voltage, 
  71:Src/ChargerFunctions.c **** 				-- If any cell exceeds lowerVoltage_Threshold lower charge current to lowerCurrent and continue
  72:Src/ChargerFunctions.c **** 				-- If any cell exceeds higherVoltage_Threshold: Set charge current to 0 and continue balancing
  73:Src/ChargerFunctions.c **** 				-- If any cell exceeds BMSFault_Threshold: Throw BMS Fault
  74:Src/ChargerFunctions.c **** 	@return - 1 if there is a BMS fault, 0 if not
  75:Src/ChargerFunctions.c **** */
  76:Src/ChargerFunctions.c **** int setChargeDischarge (int cellsDischarge[numBoards][cellsPerBoard], int *chargeCurrent, float cel
  77:Src/ChargerFunctions.c **** 	float lowestVoltage = getLowestVoltage(cellVoltage);			// get lowest voltage of all cells
  78:Src/ChargerFunctions.c **** 	*chargeCurrent = 2;												// initialize the charging current to normal operation
  79:Src/ChargerFunctions.c **** 	
  80:Src/ChargerFunctions.c **** 	/* iterate through every cell */
  81:Src/ChargerFunctions.c **** 	for (int board = 0; board < numBoards; board++) {
  82:Src/ChargerFunctions.c **** 		for (int cell = 0; cell < cellsPerBoard; cell++) {
  83:Src/ChargerFunctions.c **** 			/* get the voltage of current cell */
  84:Src/ChargerFunctions.c **** 			float voltage = cellVoltage[board][cell];
  85:Src/ChargerFunctions.c **** 
  86:Src/ChargerFunctions.c **** 			/* If any cell exceeds BMSFault_Threshold2 Throw BMS Fault */
ARM GAS  /tmp/ccLHh0C1.s 			page 3


  87:Src/ChargerFunctions.c **** 			if (voltage > BMSFault_Threshold) {
  88:Src/ChargerFunctions.c **** 				*chargeCurrent = 0;
  89:Src/ChargerFunctions.c **** 				return 1;
  90:Src/ChargerFunctions.c **** 			}
  91:Src/ChargerFunctions.c **** 
  92:Src/ChargerFunctions.c **** 			/* Set balancing: if the cell voltage is more than the set balancingDifference above the minimum
  93:Src/ChargerFunctions.c **** 			if (voltage > (lowestVoltage + balancingDifference)) {
  94:Src/ChargerFunctions.c **** 				cellsDischarge[board][cell] = 1;
  95:Src/ChargerFunctions.c **** 			}
  96:Src/ChargerFunctions.c **** 
  97:Src/ChargerFunctions.c **** 			/* If any cell exceeds higherVoltage_Threshold: Set charge current to 0 and continue balancing.
  98:Src/ChargerFunctions.c **** 			 * If any cell exceeds lowerVoltage_Threshold: lower charge current to lowerCurrent and continue
  99:Src/ChargerFunctions.c **** 			 */
 100:Src/ChargerFunctions.c **** 			if (voltage > higherVoltage_Threshold) {
 101:Src/ChargerFunctions.c **** 				*chargeCurrent = 0;
 102:Src/ChargerFunctions.c **** 			} else if (voltage > lowerVoltage_Threshold && chargeCurrent != 0) {
 103:Src/ChargerFunctions.c **** 				*chargeCurrent = 1;
 104:Src/ChargerFunctions.c **** 			}
 105:Src/ChargerFunctions.c **** 		}
 106:Src/ChargerFunctions.c **** 	 }
 107:Src/ChargerFunctions.c **** 
 108:Src/ChargerFunctions.c **** 	 return 0;
 109:Src/ChargerFunctions.c **** }
 110:Src/ChargerFunctions.c **** 
 111:Src/ChargerFunctions.c **** 
 112:Src/ChargerFunctions.c **** /*
 113:Src/ChargerFunctions.c **** 	@brief - finds and returns the lowest cell voltage
 114:Src/ChargerFunctions.c **** 	@return - the lowest voltage of all cells
 115:Src/ChargerFunctions.c **** */
 116:Src/ChargerFunctions.c **** float getLowestVoltage(float cellVoltage[numBoards][cellsPerBoard]) {
  30              		.loc 1 116 69 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              		.loc 1 116 69 is_stmt 0 view .LVU1
  36 0000 70B4     		push	{r4, r5, r6}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 12
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 5, -8
  41              		.cfi_offset 6, -4
  42              		.loc 1 116 30 view .LVU2
  43 0002 114B     		ldr	r3, .L11
  44 0004 1C68     		ldr	r4, [r3]
  45              	.LVL1:
  46              		.loc 1 116 7 view .LVU3
  47 0006 2546     		mov	r5, r4
  48              		.loc 1 116 1 view .LVU4
  49 0008 104B     		ldr	r3, .L11+4
  50 000a 1E68     		ldr	r6, [r3]
 117:Src/ChargerFunctions.c **** 	/* contains the current lowest voltage foud */
 118:Src/ChargerFunctions.c **** 	float low = cellVoltage[0][0];
  51              		.loc 1 118 2 is_stmt 1 view .LVU5
  52              		.loc 1 118 8 is_stmt 0 view .LVU6
  53 000c 90ED000A 		vldr.32	s0, [r0]
  54              	.LVL2:
ARM GAS  /tmp/ccLHh0C1.s 			page 4


 119:Src/ChargerFunctions.c **** 
 120:Src/ChargerFunctions.c **** 	/* iterate through all cells and get the smallest voltage */
 121:Src/ChargerFunctions.c **** 	for (int i = 0; i < numBoards; i++) {
  55              		.loc 1 121 2 is_stmt 1 view .LVU7
  56              	.LBB2:
  57              		.loc 1 121 7 view .LVU8
  58              		.loc 1 121 11 is_stmt 0 view .LVU9
  59 0010 0021     		movs	r1, #0
  60              		.loc 1 121 2 view .LVU10
  61 0012 13E0     		b	.L2
  62              	.LVL3:
  63              	.L3:
  64              	.LBB3:
 122:Src/ChargerFunctions.c **** 		for (int j = 0; j < cellsPerBoard; j++) {
  65              		.loc 1 122 39 discriminator 2 view .LVU11
  66 0014 0132     		adds	r2, r2, #1
  67              	.LVL4:
  68              	.L5:
  69              		.loc 1 122 3 discriminator 1 view .LVU12
  70 0016 A242     		cmp	r2, r4
  71 0018 0FDA     		bge	.L9
 123:Src/ChargerFunctions.c **** 			if (low > cellVoltage[i][j]) {
  72              		.loc 1 123 4 is_stmt 1 view .LVU13
  73              		.loc 1 123 25 is_stmt 0 view .LVU14
  74 001a 05FB01F3 		mul	r3, r5, r1
  75 001e 00EB8303 		add	r3, r0, r3, lsl #2
  76              		.loc 1 123 28 view .LVU15
  77 0022 03EB8203 		add	r3, r3, r2, lsl #2
  78 0026 D3ED007A 		vldr.32	s15, [r3]
  79              		.loc 1 123 7 view .LVU16
  80 002a B4EEE70A 		vcmpe.f32	s0, s15
  81 002e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  82 0032 EFDD     		ble	.L3
 124:Src/ChargerFunctions.c **** 				low = cellVoltage[i][j];
  83              		.loc 1 124 9 view .LVU17
  84 0034 B0EE670A 		vmov.f32	s0, s15
  85              	.LVL5:
  86              		.loc 1 124 9 view .LVU18
  87 0038 ECE7     		b	.L3
  88              	.LVL6:
  89              	.L9:
  90              		.loc 1 124 9 view .LVU19
  91              	.LBE3:
 121:Src/ChargerFunctions.c **** 		for (int j = 0; j < cellsPerBoard; j++) {
  92              		.loc 1 121 34 discriminator 2 view .LVU20
  93 003a 0131     		adds	r1, r1, #1
  94              	.LVL7:
  95              	.L2:
 121:Src/ChargerFunctions.c **** 		for (int j = 0; j < cellsPerBoard; j++) {
  96              		.loc 1 121 2 discriminator 1 view .LVU21
  97 003c B142     		cmp	r1, r6
  98 003e 01DA     		bge	.L10
  99              	.LBB4:
 122:Src/ChargerFunctions.c **** 			if (low > cellVoltage[i][j]) {
 100              		.loc 1 122 12 view .LVU22
 101 0040 0022     		movs	r2, #0
 102 0042 E8E7     		b	.L5
ARM GAS  /tmp/ccLHh0C1.s 			page 5


 103              	.L10:
 104              	.LBE4:
 105              	.LBE2:
 125:Src/ChargerFunctions.c **** 			}
 126:Src/ChargerFunctions.c **** 		}
 127:Src/ChargerFunctions.c **** 	}
 128:Src/ChargerFunctions.c **** 
 129:Src/ChargerFunctions.c **** 	return low;
 130:Src/ChargerFunctions.c **** }
 106              		.loc 1 130 1 view .LVU23
 107 0044 70BC     		pop	{r4, r5, r6}
 108              	.LCFI1:
 109              		.cfi_restore 6
 110              		.cfi_restore 5
 111              		.cfi_restore 4
 112              		.cfi_def_cfa_offset 0
 113              	.LVL8:
 114              		.loc 1 130 1 view .LVU24
 115 0046 7047     		bx	lr
 116              	.L12:
 117              		.align	2
 118              	.L11:
 119 0048 00000000 		.word	.LANCHOR0
 120 004c 00000000 		.word	.LANCHOR1
 121              		.cfi_endproc
 122              	.LFE1:
 124              		.section	.text.setChargeDischarge,"ax",%progbits
 125              		.align	1
 126              		.global	setChargeDischarge
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu fpv4-sp-d16
 132              	setChargeDischarge:
 133              	.LVL9:
 134              	.LFB0:
  76:Src/ChargerFunctions.c **** 	float lowestVoltage = getLowestVoltage(cellVoltage);			// get lowest voltage of all cells
 135              		.loc 1 76 136 is_stmt 1 view -0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
  76:Src/ChargerFunctions.c **** 	float lowestVoltage = getLowestVoltage(cellVoltage);			// get lowest voltage of all cells
 139              		.loc 1 76 136 is_stmt 0 view .LVU26
 140 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 141              	.LCFI2:
 142              		.cfi_def_cfa_offset 24
 143              		.cfi_offset 3, -24
 144              		.cfi_offset 4, -20
 145              		.cfi_offset 5, -16
 146              		.cfi_offset 6, -12
 147              		.cfi_offset 7, -8
 148              		.cfi_offset 14, -4
 149 0002 0746     		mov	r7, r0
 150 0004 0E46     		mov	r6, r1
 151 0006 1446     		mov	r4, r2
  76:Src/ChargerFunctions.c **** 	float lowestVoltage = getLowestVoltage(cellVoltage);			// get lowest voltage of all cells
 152              		.loc 1 76 29 view .LVU27
ARM GAS  /tmp/ccLHh0C1.s 			page 6


 153 0008 274B     		ldr	r3, .L37
 154 000a 1D68     		ldr	r5, [r3]
 155              	.LVL10:
  77:Src/ChargerFunctions.c **** 	*chargeCurrent = 2;												// initialize the charging current to normal operation
 156              		.loc 1 77 2 is_stmt 1 view .LVU28
  77:Src/ChargerFunctions.c **** 	*chargeCurrent = 2;												// initialize the charging current to normal operation
 157              		.loc 1 77 24 is_stmt 0 view .LVU29
 158 000c 1046     		mov	r0, r2
 159              	.LVL11:
  77:Src/ChargerFunctions.c **** 	*chargeCurrent = 2;												// initialize the charging current to normal operation
 160              		.loc 1 77 24 view .LVU30
 161 000e FFF7FEFF 		bl	getLowestVoltage
 162              	.LVL12:
  78:Src/ChargerFunctions.c **** 	
 163              		.loc 1 78 2 is_stmt 1 view .LVU31
  78:Src/ChargerFunctions.c **** 	
 164              		.loc 1 78 17 is_stmt 0 view .LVU32
 165 0012 0223     		movs	r3, #2
 166 0014 3360     		str	r3, [r6]
  81:Src/ChargerFunctions.c **** 		for (int cell = 0; cell < cellsPerBoard; cell++) {
 167              		.loc 1 81 2 is_stmt 1 view .LVU33
 168              	.LBB5:
  81:Src/ChargerFunctions.c **** 		for (int cell = 0; cell < cellsPerBoard; cell++) {
 169              		.loc 1 81 7 view .LVU34
 170              	.LVL13:
  81:Src/ChargerFunctions.c **** 		for (int cell = 0; cell < cellsPerBoard; cell++) {
 171              		.loc 1 81 11 is_stmt 0 view .LVU35
 172 0016 0020     		movs	r0, #0
 173              	.LVL14:
 174              	.L14:
  81:Src/ChargerFunctions.c **** 		for (int cell = 0; cell < cellsPerBoard; cell++) {
 175              		.loc 1 81 28 discriminator 1 view .LVU36
 176 0018 244B     		ldr	r3, .L37+4
 177 001a 1B68     		ldr	r3, [r3]
  81:Src/ChargerFunctions.c **** 		for (int cell = 0; cell < cellsPerBoard; cell++) {
 178              		.loc 1 81 2 discriminator 1 view .LVU37
 179 001c 9842     		cmp	r0, r3
 180 001e 40DA     		bge	.L34
 181              	.LBB6:
  82:Src/ChargerFunctions.c **** 			/* get the voltage of current cell */
 182              		.loc 1 82 12 view .LVU38
 183 0020 0022     		movs	r2, #0
 184 0022 0FE0     		b	.L25
 185              	.LVL15:
 186              	.L36:
 187              	.LBB7:
  88:Src/ChargerFunctions.c **** 				return 1;
 188              		.loc 1 88 5 is_stmt 1 view .LVU39
  88:Src/ChargerFunctions.c **** 				return 1;
 189              		.loc 1 88 20 is_stmt 0 view .LVU40
 190 0024 0023     		movs	r3, #0
 191 0026 3360     		str	r3, [r6]
  89:Src/ChargerFunctions.c **** 			}
 192              		.loc 1 89 5 is_stmt 1 view .LVU41
  89:Src/ChargerFunctions.c **** 			}
 193              		.loc 1 89 12 is_stmt 0 view .LVU42
 194 0028 0120     		movs	r0, #1
ARM GAS  /tmp/ccLHh0C1.s 			page 7


 195              	.LVL16:
 196              	.L13:
  89:Src/ChargerFunctions.c **** 			}
 197              		.loc 1 89 12 view .LVU43
 198              	.LBE7:
 199              	.LBE6:
 200              	.LBE5:
 109:Src/ChargerFunctions.c **** 
 201              		.loc 1 109 1 view .LVU44
 202 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 203              	.LVL17:
 204              	.L32:
 205              	.LBB11:
 206              	.LBB10:
 207              	.LBB8:
 102:Src/ChargerFunctions.c **** 				*chargeCurrent = 1;
 208              		.loc 1 102 11 is_stmt 1 view .LVU45
 102:Src/ChargerFunctions.c **** 				*chargeCurrent = 1;
 209              		.loc 1 102 23 is_stmt 0 view .LVU46
 210 002c 204B     		ldr	r3, .L37+8
 211 002e 93ED007A 		vldr.32	s14, [r3]
 102:Src/ChargerFunctions.c **** 				*chargeCurrent = 1;
 212              		.loc 1 102 14 view .LVU47
 213 0032 B4EEE77A 		vcmpe.f32	s14, s15
 214 0036 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 215 003a 02D5     		bpl	.L22
 102:Src/ChargerFunctions.c **** 				*chargeCurrent = 1;
 216              		.loc 1 102 48 discriminator 1 view .LVU48
 217 003c 0EB1     		cbz	r6, .L22
 103:Src/ChargerFunctions.c **** 			}
 218              		.loc 1 103 5 is_stmt 1 view .LVU49
 103:Src/ChargerFunctions.c **** 			}
 219              		.loc 1 103 20 is_stmt 0 view .LVU50
 220 003e 0123     		movs	r3, #1
 221 0040 3360     		str	r3, [r6]
 222              	.L22:
 103:Src/ChargerFunctions.c **** 			}
 223              		.loc 1 103 20 view .LVU51
 224              	.LBE8:
  82:Src/ChargerFunctions.c **** 			/* get the voltage of current cell */
 225              		.loc 1 82 48 discriminator 2 view .LVU52
 226 0042 0132     		adds	r2, r2, #1
 227              	.LVL18:
 228              	.L25:
  82:Src/ChargerFunctions.c **** 			/* get the voltage of current cell */
 229              		.loc 1 82 27 discriminator 1 view .LVU53
 230 0044 184B     		ldr	r3, .L37
 231 0046 1B68     		ldr	r3, [r3]
  82:Src/ChargerFunctions.c **** 			/* get the voltage of current cell */
 232              		.loc 1 82 3 discriminator 1 view .LVU54
 233 0048 9A42     		cmp	r2, r3
 234 004a 28DA     		bge	.L35
 235              	.LBB9:
  84:Src/ChargerFunctions.c **** 
 236              		.loc 1 84 4 is_stmt 1 view .LVU55
  84:Src/ChargerFunctions.c **** 
 237              		.loc 1 84 31 is_stmt 0 view .LVU56
ARM GAS  /tmp/ccLHh0C1.s 			page 8


 238 004c 05FB00F3 		mul	r3, r5, r0
 239 0050 9B00     		lsls	r3, r3, #2
 240 0052 E118     		adds	r1, r4, r3
  84:Src/ChargerFunctions.c **** 
 241              		.loc 1 84 10 view .LVU57
 242 0054 01EB8201 		add	r1, r1, r2, lsl #2
 243 0058 D1ED007A 		vldr.32	s15, [r1]
 244              	.LVL19:
  87:Src/ChargerFunctions.c **** 				*chargeCurrent = 0;
 245              		.loc 1 87 4 is_stmt 1 view .LVU58
  87:Src/ChargerFunctions.c **** 				*chargeCurrent = 0;
 246              		.loc 1 87 16 is_stmt 0 view .LVU59
 247 005c 1549     		ldr	r1, .L37+12
 248 005e 91ED007A 		vldr.32	s14, [r1]
  87:Src/ChargerFunctions.c **** 				*chargeCurrent = 0;
 249              		.loc 1 87 7 view .LVU60
 250 0062 B4EEE77A 		vcmpe.f32	s14, s15
 251 0066 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 252 006a DBD4     		bmi	.L36
  93:Src/ChargerFunctions.c **** 				cellsDischarge[board][cell] = 1;
 253              		.loc 1 93 4 is_stmt 1 view .LVU61
  93:Src/ChargerFunctions.c **** 				cellsDischarge[board][cell] = 1;
 254              		.loc 1 93 33 is_stmt 0 view .LVU62
 255 006c 1249     		ldr	r1, .L37+16
 256 006e 91ED007A 		vldr.32	s14, [r1]
 257 0072 30EE077A 		vadd.f32	s14, s0, s14
  93:Src/ChargerFunctions.c **** 				cellsDischarge[board][cell] = 1;
 258              		.loc 1 93 7 view .LVU63
 259 0076 B4EEE77A 		vcmpe.f32	s14, s15
 260 007a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 261 007e 03D5     		bpl	.L18
  94:Src/ChargerFunctions.c **** 			}
 262              		.loc 1 94 5 is_stmt 1 view .LVU64
  94:Src/ChargerFunctions.c **** 			}
 263              		.loc 1 94 19 is_stmt 0 view .LVU65
 264 0080 3B44     		add	r3, r3, r7
  94:Src/ChargerFunctions.c **** 			}
 265              		.loc 1 94 33 view .LVU66
 266 0082 0121     		movs	r1, #1
 267 0084 43F82210 		str	r1, [r3, r2, lsl #2]
 268              	.L18:
 100:Src/ChargerFunctions.c **** 				*chargeCurrent = 0;
 269              		.loc 1 100 4 is_stmt 1 view .LVU67
 100:Src/ChargerFunctions.c **** 				*chargeCurrent = 0;
 270              		.loc 1 100 16 is_stmt 0 view .LVU68
 271 0088 0C4B     		ldr	r3, .L37+20
 272 008a 93ED007A 		vldr.32	s14, [r3]
 100:Src/ChargerFunctions.c **** 				*chargeCurrent = 0;
 273              		.loc 1 100 7 view .LVU69
 274 008e B4EEE77A 		vcmpe.f32	s14, s15
 275 0092 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 276 0096 C9D5     		bpl	.L32
 101:Src/ChargerFunctions.c **** 			} else if (voltage > lowerVoltage_Threshold && chargeCurrent != 0) {
 277              		.loc 1 101 5 is_stmt 1 view .LVU70
 101:Src/ChargerFunctions.c **** 			} else if (voltage > lowerVoltage_Threshold && chargeCurrent != 0) {
 278              		.loc 1 101 20 is_stmt 0 view .LVU71
 279 0098 0023     		movs	r3, #0
ARM GAS  /tmp/ccLHh0C1.s 			page 9


 280 009a 3360     		str	r3, [r6]
 281 009c D1E7     		b	.L22
 282              	.LVL20:
 283              	.L35:
 101:Src/ChargerFunctions.c **** 			} else if (voltage > lowerVoltage_Threshold && chargeCurrent != 0) {
 284              		.loc 1 101 20 view .LVU72
 285              	.LBE9:
 286              	.LBE10:
  81:Src/ChargerFunctions.c **** 		for (int cell = 0; cell < cellsPerBoard; cell++) {
 287              		.loc 1 81 46 discriminator 2 view .LVU73
 288 009e 0130     		adds	r0, r0, #1
 289              	.LVL21:
  81:Src/ChargerFunctions.c **** 		for (int cell = 0; cell < cellsPerBoard; cell++) {
 290              		.loc 1 81 46 discriminator 2 view .LVU74
 291 00a0 BAE7     		b	.L14
 292              	.LVL22:
 293              	.L34:
  81:Src/ChargerFunctions.c **** 		for (int cell = 0; cell < cellsPerBoard; cell++) {
 294              		.loc 1 81 46 discriminator 2 view .LVU75
 295              	.LBE11:
 108:Src/ChargerFunctions.c **** }
 296              		.loc 1 108 10 view .LVU76
 297 00a2 0020     		movs	r0, #0
 298              	.LVL23:
 108:Src/ChargerFunctions.c **** }
 299              		.loc 1 108 10 view .LVU77
 300 00a4 C1E7     		b	.L13
 301              	.L38:
 302 00a6 00BF     		.align	2
 303              	.L37:
 304 00a8 00000000 		.word	.LANCHOR0
 305 00ac 00000000 		.word	.LANCHOR1
 306 00b0 00000000 		.word	.LANCHOR5
 307 00b4 00000000 		.word	.LANCHOR2
 308 00b8 00000000 		.word	.LANCHOR3
 309 00bc 00000000 		.word	.LANCHOR4
 310              		.cfi_endproc
 311              	.LFE0:
 313              		.section	.text.setChargerTxData,"ax",%progbits
 314              		.align	1
 315              		.global	setChargerTxData
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 319              		.fpu fpv4-sp-d16
 321              	setChargerTxData:
 322              	.LFB2:
 131:Src/ChargerFunctions.c **** 
 132:Src/ChargerFunctions.c **** /*
 133:Src/ChargerFunctions.c **** 	@brief - calculates and sets the CAN transmission data for the charger
 134:Src/ChargerFunctions.c **** */
 135:Src/ChargerFunctions.c **** void setChargerTxData() {
 323              		.loc 1 135 25 is_stmt 1 view -0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327              		@ link register save eliminated.
ARM GAS  /tmp/ccLHh0C1.s 			page 10


 136:Src/ChargerFunctions.c **** 	/* voltage data (hex value of desired voltage (V) times 10)*/
 137:Src/ChargerFunctions.c **** 	CANtx[0] = (uint8_t)(chargerVoltage >> 8);
 328              		.loc 1 137 2 view .LVU79
 329              		.loc 1 137 13 is_stmt 0 view .LVU80
 330 0000 124B     		ldr	r3, .L45
 331 0002 1A88     		ldrh	r2, [r3]
 332 0004 110A     		lsrs	r1, r2, #8
 333              		.loc 1 137 11 view .LVU81
 334 0006 124B     		ldr	r3, .L45+4
 335 0008 1970     		strb	r1, [r3]
 138:Src/ChargerFunctions.c **** 	CANtx[1] = (uint8_t)chargerVoltage;
 336              		.loc 1 138 2 is_stmt 1 view .LVU82
 337              		.loc 1 138 11 is_stmt 0 view .LVU83
 338 000a 5A70     		strb	r2, [r3, #1]
 139:Src/ChargerFunctions.c **** 
 140:Src/ChargerFunctions.c **** 	/* set the current data (hex value of desired current (A) times 10) */
 141:Src/ChargerFunctions.c **** 	switch (chargeCurrent) {
 339              		.loc 1 141 2 is_stmt 1 view .LVU84
 340 000c 114B     		ldr	r3, .L45+8
 341 000e 1B68     		ldr	r3, [r3]
 342 0010 012B     		cmp	r3, #1
 343 0012 06D0     		beq	.L40
 344 0014 022B     		cmp	r3, #2
 345 0016 11D0     		beq	.L41
 142:Src/ChargerFunctions.c **** 		case 1:
 143:Src/ChargerFunctions.c **** 			/* lower current */
 144:Src/ChargerFunctions.c **** 			CANtx[2] = (uint8_t)(lowerCurrent >> 8);
 145:Src/ChargerFunctions.c **** 			CANtx[3] = (uint8_t)lowerCurrent;
 146:Src/ChargerFunctions.c **** 			break;
 147:Src/ChargerFunctions.c **** 
 148:Src/ChargerFunctions.c **** 		case 2:
 149:Src/ChargerFunctions.c **** 			/* normal current */
 150:Src/ChargerFunctions.c **** 			CANtx[2] = (uint8_t)(normalCurrent >> 8);
 151:Src/ChargerFunctions.c **** 			CANtx[3] = (uint8_t)normalCurrent;
 152:Src/ChargerFunctions.c **** 			break;
 153:Src/ChargerFunctions.c **** 
 154:Src/ChargerFunctions.c **** 		default:
 155:Src/ChargerFunctions.c **** 			/* no current */
 156:Src/ChargerFunctions.c **** 			CANtx[2] = 0x00;
 346              		.loc 1 156 4 view .LVU85
 347              		.loc 1 156 13 is_stmt 0 view .LVU86
 348 0018 0D4B     		ldr	r3, .L45+4
 349 001a 0022     		movs	r2, #0
 350 001c 9A70     		strb	r2, [r3, #2]
 157:Src/ChargerFunctions.c **** 			CANtx[3] = 0x00;
 351              		.loc 1 157 4 is_stmt 1 view .LVU87
 352              		.loc 1 157 13 is_stmt 0 view .LVU88
 353 001e DA70     		strb	r2, [r3, #3]
 354 0020 05E0     		b	.L43
 355              	.L40:
 144:Src/ChargerFunctions.c **** 			CANtx[3] = (uint8_t)lowerCurrent;
 356              		.loc 1 144 4 is_stmt 1 view .LVU89
 144:Src/ChargerFunctions.c **** 			CANtx[3] = (uint8_t)lowerCurrent;
 357              		.loc 1 144 15 is_stmt 0 view .LVU90
 358 0022 0D4B     		ldr	r3, .L45+12
 359 0024 1A88     		ldrh	r2, [r3]
 360 0026 110A     		lsrs	r1, r2, #8
ARM GAS  /tmp/ccLHh0C1.s 			page 11


 144:Src/ChargerFunctions.c **** 			CANtx[3] = (uint8_t)lowerCurrent;
 361              		.loc 1 144 13 view .LVU91
 362 0028 094B     		ldr	r3, .L45+4
 363 002a 9970     		strb	r1, [r3, #2]
 145:Src/ChargerFunctions.c **** 			break;
 364              		.loc 1 145 4 is_stmt 1 view .LVU92
 145:Src/ChargerFunctions.c **** 			break;
 365              		.loc 1 145 13 is_stmt 0 view .LVU93
 366 002c DA70     		strb	r2, [r3, #3]
 146:Src/ChargerFunctions.c **** 
 367              		.loc 1 146 4 is_stmt 1 view .LVU94
 368              	.L43:
 158:Src/ChargerFunctions.c **** 	}
 159:Src/ChargerFunctions.c **** 
 160:Src/ChargerFunctions.c **** 	/* these data bytes are not used */
 161:Src/ChargerFunctions.c **** 	CANtx[4] = 0x00;
 369              		.loc 1 161 2 view .LVU95
 370              		.loc 1 161 11 is_stmt 0 view .LVU96
 371 002e 084B     		ldr	r3, .L45+4
 372 0030 0022     		movs	r2, #0
 373 0032 1A71     		strb	r2, [r3, #4]
 162:Src/ChargerFunctions.c **** 	CANtx[5] = 0x00;
 374              		.loc 1 162 2 is_stmt 1 view .LVU97
 375              		.loc 1 162 11 is_stmt 0 view .LVU98
 376 0034 5A71     		strb	r2, [r3, #5]
 163:Src/ChargerFunctions.c **** 	CANtx[6] = 0x00;
 377              		.loc 1 163 2 is_stmt 1 view .LVU99
 378              		.loc 1 163 11 is_stmt 0 view .LVU100
 379 0036 9A71     		strb	r2, [r3, #6]
 164:Src/ChargerFunctions.c **** 	CANtx[7] = 0x00;
 380              		.loc 1 164 2 is_stmt 1 view .LVU101
 381              		.loc 1 164 11 is_stmt 0 view .LVU102
 382 0038 DA71     		strb	r2, [r3, #7]
 165:Src/ChargerFunctions.c **** 
 166:Src/ChargerFunctions.c **** 	return;
 383              		.loc 1 166 2 is_stmt 1 view .LVU103
 167:Src/ChargerFunctions.c **** }...
 384              		.loc 1 167 1 is_stmt 0 view .LVU104
 385 003a 7047     		bx	lr
 386              	.L41:
 150:Src/ChargerFunctions.c **** 			CANtx[2] = (uint8_t)(normalCurrent >> 8);
 387              		.loc 1 150 4 is_stmt 1 view .LVU105
 150:Src/ChargerFunctions.c **** 			CANtx[2] = (uint8_t)(normalCurrent >> 8);
 388              		.loc 1 150 15 is_stmt 0 view .LVU106
 389 003c 074B     		ldr	r3, .L45+16
 390 003e 1A88     		ldrh	r2, [r3]
 391 0040 110A     		lsrs	r1, r2, #8
 150:Src/ChargerFunctions.c **** 			CANtx[2] = (uint8_t)(normalCurrent >> 8);
 392              		.loc 1 150 13 view .LVU107
 393 0042 034B     		ldr	r3, .L45+4
 394 0044 9970     		strb	r1, [r3, #2]
 151:Src/ChargerFunctions.c **** 			CANtx[3] = (uint8_t)normalCurrent;
 395              		.loc 1 151 4 is_stmt 1 view .LVU108
 151:Src/ChargerFunctions.c **** 			CANtx[3] = (uint8_t)normalCurrent;
 396              		.loc 1 151 13 is_stmt 0 view .LVU109
 397 0046 DA70     		strb	r2, [r3, #3]
 152:Src/ChargerFunctions.c **** 			break;
ARM GAS  /tmp/ccLHh0C1.s 			page 12


 398              		.loc 1 152 4 is_stmt 1 view .LVU110
 399 0048 F1E7     		b	.L43
 400              	.L46:
 401 004a 00BF     		.align	2
 402              	.L45:
 403 004c 00000000 		.word	.LANCHOR6
 404 0050 00000000 		.word	CANtx
 405 0054 00000000 		.word	chargeCurrent
 406 0058 00000000 		.word	.LANCHOR7
 407 005c 00000000 		.word	.LANCHOR8
 408              		.cfi_endproc
 409              	.LFE2:
 411              		.comm	CANtx,8,4
 412              		.comm	chargeCurrent,4,4
 413              		.comm	cellsDischarge,384,4
 414              		.global	cellsPerBoard
 415              		.global	numBoards
 416              		.global	chargerVoltage
 417              		.global	lowerCurrent
 418              		.global	normalCurrent
 419              		.global	balancingDifference
 420              		.global	higherVoltage_Threshold
 421              		.global	lowerVoltage_Threshold
 422              		.global	BMSFault_Threshold
 423              		.section	.data.BMSFault_Threshold,"aw"
 424              		.align	2
 425              		.set	.LANCHOR2,. + 0
 428              	BMSFault_Threshold:
 429 0000 66668640 		.word	1082549862
 430              		.section	.data.balancingDifference,"aw"
 431              		.align	2
 432              		.set	.LANCHOR3,. + 0
 435              	balancingDifference:
 436 0000 CDCC4C3D 		.word	1028443341
 437              		.section	.data.cellsPerBoard,"aw"
 438              		.align	2
 439              		.set	.LANCHOR0,. + 0
 442              	cellsPerBoard:
 443 0000 08000000 		.word	8
 444              		.section	.data.chargerVoltage,"aw"
 445              		.align	1
 446              		.set	.LANCHOR6,. + 0
 449              	chargerVoltage:
 450 0000 A00F     		.short	4000
 451              		.section	.data.higherVoltage_Threshold,"aw"
 452              		.align	2
 453              		.set	.LANCHOR4,. + 0
 456              	higherVoltage_Threshold:
 457 0000 85EB8540 		.word	1082518405
 458              		.section	.data.lowerCurrent,"aw"
 459              		.align	1
 460              		.set	.LANCHOR7,. + 0
 463              	lowerCurrent:
 464 0000 0A00     		.short	10
 465              		.section	.data.lowerVoltage_Threshold,"aw"
 466              		.align	2
 467              		.set	.LANCHOR5,. + 0
ARM GAS  /tmp/ccLHh0C1.s 			page 13


 470              	lowerVoltage_Threshold:
 471 0000 33338340 		.word	1082340147
 472              		.section	.data.normalCurrent,"aw"
 473              		.align	1
 474              		.set	.LANCHOR8,. + 0
 477              	normalCurrent:
 478 0000 3E00     		.short	62
 479              		.section	.data.numBoards,"aw"
 480              		.align	2
 481              		.set	.LANCHOR1,. + 0
 484              	numBoards:
 485 0000 0C000000 		.word	12
 486              		.text
 487              	.Letext0:
 488              		.file 2 "/mnt/c/Users/evanc/Documents/IFE/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/
 489              		.file 3 "/mnt/c/Users/evanc/Documents/IFE/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/
ARM GAS  /tmp/ccLHh0C1.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ChargerFunctions.c
     /tmp/ccLHh0C1.s:18     .text.getLowestVoltage:0000000000000000 $t
     /tmp/ccLHh0C1.s:26     .text.getLowestVoltage:0000000000000000 getLowestVoltage
     /tmp/ccLHh0C1.s:119    .text.getLowestVoltage:0000000000000048 $d
     /tmp/ccLHh0C1.s:125    .text.setChargeDischarge:0000000000000000 $t
     /tmp/ccLHh0C1.s:132    .text.setChargeDischarge:0000000000000000 setChargeDischarge
     /tmp/ccLHh0C1.s:304    .text.setChargeDischarge:00000000000000a8 $d
     /tmp/ccLHh0C1.s:314    .text.setChargerTxData:0000000000000000 $t
     /tmp/ccLHh0C1.s:321    .text.setChargerTxData:0000000000000000 setChargerTxData
     /tmp/ccLHh0C1.s:403    .text.setChargerTxData:000000000000004c $d
                            *COM*:0000000000000008 CANtx
                            *COM*:0000000000000004 chargeCurrent
                            *COM*:0000000000000180 cellsDischarge
     /tmp/ccLHh0C1.s:442    .data.cellsPerBoard:0000000000000000 cellsPerBoard
     /tmp/ccLHh0C1.s:484    .data.numBoards:0000000000000000 numBoards
     /tmp/ccLHh0C1.s:449    .data.chargerVoltage:0000000000000000 chargerVoltage
     /tmp/ccLHh0C1.s:463    .data.lowerCurrent:0000000000000000 lowerCurrent
     /tmp/ccLHh0C1.s:477    .data.normalCurrent:0000000000000000 normalCurrent
     /tmp/ccLHh0C1.s:435    .data.balancingDifference:0000000000000000 balancingDifference
     /tmp/ccLHh0C1.s:456    .data.higherVoltage_Threshold:0000000000000000 higherVoltage_Threshold
     /tmp/ccLHh0C1.s:470    .data.lowerVoltage_Threshold:0000000000000000 lowerVoltage_Threshold
     /tmp/ccLHh0C1.s:428    .data.BMSFault_Threshold:0000000000000000 BMSFault_Threshold
     /tmp/ccLHh0C1.s:424    .data.BMSFault_Threshold:0000000000000000 $d
     /tmp/ccLHh0C1.s:431    .data.balancingDifference:0000000000000000 $d
     /tmp/ccLHh0C1.s:438    .data.cellsPerBoard:0000000000000000 $d
     /tmp/ccLHh0C1.s:445    .data.chargerVoltage:0000000000000000 $d
     /tmp/ccLHh0C1.s:452    .data.higherVoltage_Threshold:0000000000000000 $d
     /tmp/ccLHh0C1.s:459    .data.lowerCurrent:0000000000000000 $d
     /tmp/ccLHh0C1.s:466    .data.lowerVoltage_Threshold:0000000000000000 $d
     /tmp/ccLHh0C1.s:473    .data.normalCurrent:0000000000000000 $d
     /tmp/ccLHh0C1.s:480    .data.numBoards:0000000000000000 $d

NO UNDEFINED SYMBOLS
